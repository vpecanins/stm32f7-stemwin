
Build/main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001c8 l    d  .text	00000000 .text
08013578 l    d  .rodata	00000000 .rodata
08068c30 l    d  .init_array	00000000 .init_array
08068c38 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000810 l    d  .bss	00000000 .bss
20028954 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 /tmp/ccI29PHa.o
08000fac l       .text	00000000 LoopCopyDataInit
08000fa4 l       .text	00000000 CopyDataInit
08000fc0 l       .text	00000000 LoopFillZerobss
08000fba l       .text	00000000 FillZerobss
08000fec l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08013560 l     O .text	00000000 __EH_FRAME_BEGIN__
080001c8 l     F .text	00000000 deregister_tm_clones
080001e8 l     F .text	00000000 register_tm_clones
0800020c l     F .text	00000000 __do_global_dtors_aux
20000810 l       .bss	00000000 completed.6516
08068c38 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000234 l     F .text	00000000 frame_dummy
20000814 l       .bss	00000000 object.6521
08068c34 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 stm32f7xx_it.c
00000000 l    df *ABS*	00000000 WindowDLG.c
080003de l     F .text	00000010 _cbDialog
080649e4 l     O .rodata	00000038 _aDialogCreate
00000000 l    df *ABS*	00000000 k_bsp.c
2000082c l     O .bss	0000000c TS_State.22470
00000000 l    df *ABS*	00000000 stm32f7xx_hal_msp.c
00000000 l    df *ABS*	00000000 GUIConf.c
00000000 l    df *ABS*	00000000 main.c
08000550 l     F .text	00000004 TimerCallback
08000554 l     F .text	00000028 GUIThread
00000000 l    df *ABS*	00000000 GUI_X_FreeRTOS.c
20000838 l     O .bss	00000004 osMutex
2000083c l     O .bss	00000004 osSemaphore
00000000 l    df *ABS*	00000000 LCDConf.c
08000870 l     F .text	00000040 DMA2D_CopyBuffer
080008b0 l     F .text	0000004c LCD_LL_CopyRect
080008fc l     F .text	000000bc LCD_LL_FillRect
080009b8 l     F .text	00000044 LCD_LL_CopyBuffer
080009fc l     F .text	0000005c LCD_LL_DrawBitmap32bpp
08064a34 l     O .rodata	00000008 apColorConvAPI
20000840 l     O .bss	00000084 PeriphClkInitStruct.22586
200008c4 l     O .bss	00000038 layer_prop
00000000 l    df *ABS*	00000000 system_stm32f7xx.c
00000000 l    df *ABS*	00000000 tasks.c
0800103c l     F .text	00000024 prvResetNextTaskUnblockTime
08001060 l     F .text	00000050 prvAddCurrentTaskToDelayedList
080010b0 l     F .text	000001c4 xTaskGenericCreate.part.5
08001274 l     F .text	00000016 vTaskSetTimeOutState.part.7
08001274 l     F .text	00000016 prvTaskIsTaskSuspended.part.0
08001624 l     F .text	0000007c prvIdleTask
200008fc l     O .bss	00000014 xSuspendedTaskList
20000910 l     O .bss	00000004 pxDelayedTaskList
20000914 l     O .bss	00000004 xSchedulerRunning
20000918 l     O .bss	00000004 uxTasksDeleted
2000091c l     O .bss	00000014 xTasksWaitingTermination
20000930 l     O .bss	00000014 xDelayedTaskList2
20000944 l     O .bss	00000004 uxPendedTicks
20000948 l     O .bss	000000f0 pxReadyTasksLists
20000a38 l     O .bss	00000004 uxSchedulerSuspended
20000a3c l     O .bss	00000004 xNumOfOverflows
20000a44 l     O .bss	00000014 xPendingReadyList
20000a58 l     O .bss	00000004 xTickCount
20000a5c l     O .bss	00000004 pxOverflowDelayedTaskList
20000a60 l     O .bss	00000004 uxTaskNumber
20000a64 l     O .bss	00000014 xDelayedTaskList1
20000004 l     O .data	00000004 xNextTaskUnblockTime
20000a78 l     O .bss	00000004 uxCurrentNumberOfTasks
20000a7c l     O .bss	00000004 uxTopReadyPriority
20000a80 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 cmsis_os.c
00000000 l    df *ABS*	00000000 heap_1.c
20000a84 l     O .bss	00000004 xNextFreeByte
20000a88 l     O .bss	00000004 pucAlignedHeap.11804
20000a8c l     O .bss	00007800 ucHeap
00000000 l    df *ABS*	00000000 port.c
08001d18 l     F .text	00000038 prvTaskExitError
08001d50 l     F .text	0000001a prvPortStartFirstTask
08001d70 l     F .text	0000000e vPortEnableVFP
08001dc0 l       .text	00000000 pxCurrentTCBConst2
08001e9c l       .text	00000000 pxCurrentTCBConst
2000828c l     O .bss	00000001 ucMaxSysCallPriority
20008290 l     O .bss	00000004 ulMaxPRIGROUPValue
20000008 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 timers.c
08002008 l     F .text	0000003c prvInsertTimerInActiveList
08002044 l     F .text	00000070 prvCheckForValidListAndQueue
08002218 l     F .text	000001c0 prvTimerTask
08002190 l     F .text	00000088 prvSwitchTimerLists
20008294 l     O .bss	00000004 pxCurrentTimerList
20008298 l     O .bss	00000014 xActiveTimerList1
200082ac l     O .bss	00000014 xActiveTimerList2
200082c0 l     O .bss	00000004 xLastTime.12059
200082c4 l     O .bss	00000004 xTimerQueue
200082c8 l     O .bss	00000004 pxOverflowTimerList
00000000 l    df *ABS*	00000000 queue.c
080023f0 l     F .text	0000006a prvCopyDataToQueue
0800245a l     F .text	0000002a prvCopyDataFromQueue
08002484 l     F .text	00000068 prvUnlockQueue
080024ec l     F .text	00000016 xQueueGenericCreate.part.1
080024ec l     F .text	00000016 xQueueGenericReset.part.0
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal.c
200082cc l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f7xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal_ltdc.c
08003620 l     F .text	00000112 LTDC_SetConfig
00000000 l    df *ABS*	00000000 stm32f7xx_hal_pwr_ex.c
00000000 l    df *ABS*	00000000 stm32f7xx_hal_rcc_ex.c
00000000 l    df *ABS*	00000000 stm32746g_discovery_sdram.c
200082d0 l     O .bss	00000010 Command
200082e0 l     O .bss	00000058 dma_handle.11422
20008338 l     O .bss	00000034 sdramHandle
2000836c l     O .bss	0000001c Timing
2000000c l     O .data	00000001 sdramstatus.11383
00000000 l    df *ABS*	00000000 stm32746g_discovery_ts.c
20008388 l     O .bss	00000014 _y.11534
2000839c l     O .bss	00000014 _x.11533
200083b0 l     O .bss	00000002 tsXBoundary
200083b2 l     O .bss	00000001 I2cAddress
200083b3 l     O .bss	00000001 tsOrientation
200083b4 l     O .bss	00000002 tsYBoundary
200083b8 l     O .bss	00000004 tsDriver
00000000 l    df *ABS*	00000000 stm32746g_discovery.c
08004820 l     F .text	00000160 I2Cx_Init
08004980 l     F .text	00000030 I2Cx_ReadMultiple
080049b0 l     F .text	00000030 I2Cx_WriteMultiple
200083bc l     O .bss	0000003c hI2cAudioHandler
00000000 l    df *ABS*	00000000 cpu_utils.c
200083f8 l     O .bss	00000004 tick.22473
00000000 l    df *ABS*	00000000 ft5336.c
08064a5e l     O .rodata	0000000a CSWTCH.41
08064a68 l     O .rodata	0000000a CSWTCH.42
08064a72 l     O .rodata	0000000a CSWTCH.43
08064a7c l     O .rodata	0000000a CSWTCH.44
08064a86 l     O .rodata	0000000a CSWTCH.50
08064a90 l     O .rodata	0000000a CSWTCH.51
08064a9a l     O .rodata	0000000a CSWTCH.52
20008410 l     O .bss	00000002 coord.11407
20008412 l     O .bss	00000003 ft5336_handle
00000000 l    df *ABS*	00000000 stm32f7xx_hal_i2c.c
08004d9c l     F .text	00000024 I2C_TransferConfig
08004dc0 l     F .text	00000074 I2C_IsAcknowledgeFailed
08004e34 l     F .text	00000070 I2C_WaitOnFlagUntilTimeout
08004ea4 l     F .text	00000050 I2C_WaitOnTXISFlagUntilTimeout
08004ef4 l     F .text	00000060 I2C_RequestMemoryWrite
08004f54 l     F .text	0000005e I2C_RequestMemoryRead
08004fb2 l     F .text	0000004c I2C_WaitOnSTOPFlagUntilTimeout
00000000 l    df *ABS*	00000000 stm32f7xx_hal_dma.c
0800531c l     F .text	0000002c DMA_CalcBaseAndBitshift
08064aa4 l     O .rodata	00000008 flagBitshiftOffset.11418
00000000 l    df *ABS*	00000000 stm32f7xx_hal_sdram.c
00000000 l    df *ABS*	00000000 stm32f7xx_ll_fmc.c
00000000 l    df *ABS*	00000000 STHEADER_Skin.c
0800560c l     F .text	00000002 _Create
08005610 l     F .text	0000039e _Paint
00000000 l    df *ABS*	00000000 STSCROLLBAR_Skin.c
080059c0 l     F .text	00000024 _Create
080059e4 l     F .text	00000154 _CalcPositions
08005b38 l     F .text	000000c8 _Paint
00000000 l    df *ABS*	00000000 WINDOW_Default.c
00000000 l    df *ABS*	00000000 WINDOW.c
00000000 l    df *ABS*	00000000 WIDGET.c
00000000 l    df *ABS*	00000000 TEXT_Default.c
00000000 l    df *ABS*	00000000 SCROLLBAR_Defaults.c
00000000 l    df *ABS*	00000000 SCROLLBAR.c
00000000 l    df *ABS*	00000000 LISTVIEW_Default.c
00000000 l    df *ABS*	00000000 HEADER_Default.c
00000000 l    df *ABS*	00000000 GUI_DRAW.c
00000000 l    df *ABS*	00000000 GUI_ARRAY.c
00000000 l    df *ABS*	00000000 FRAMEWIN_Default.c
00000000 l    df *ABS*	00000000 FRAMEWIN.c
00000000 l    df *ABS*	00000000 DROPDOWN_SkinFlex.c
200000dc l     O .data	0000002c _PropsEnabled
20000108 l     O .data	0000002c _PropsFocussed
20000134 l     O .data	0000002c _PropsDisabled
20000160 l     O .data	0000002c _PropsOpen
08064aac l     O .rodata	00000010 _apProps
00000000 l    df *ABS*	00000000 DROPDOWN_Skin.c
080065c0 l     F .text	0000002e _Create
080065ee l     F .text	0000006e _Paint
00000000 l    df *ABS*	00000000 DROPDOWN_Default.c
00000000 l    df *ABS*	00000000 DROPDOWN.c
00000000 l    df *ABS*	00000000 DIALOG.c
00000000 l    df *ABS*	00000000 CHOOSEFILE.c
200001d4 l     O .data	00000001 _Delim
00000000 l    df *ABS*	00000000 BUTTON_SkinFlex.c
200001d8 l     O .data	00000020 _PropsEnabled
200001f8 l     O .data	00000020 _PropsFocussed
20000218 l     O .data	00000020 _PropsDisabled
20000238 l     O .data	00000020 _PropsPressed
08064abc l     O .rodata	00000010 _apProps
00000000 l    df *ABS*	00000000 BUTTON_Skin.c
080069a8 l     F .text	00000036 _Create
080069de l     F .text	00000082 _Paint
00000000 l    df *ABS*	00000000 BUTTON_CreateIndirect.c
00000000 l    df *ABS*	00000000 BUTTON.c
08006ac2 l     F .text	00000030 _OnButtonPressed
08006af2 l     F .text	0000003e _OnButtonReleased
08006b30 l     F .text	00000042 _OnTouchDefault
2000841c l     O .bss	00000004 _pfOnPidStateChange
20000264 l     O .data	00000004 _pfOnTouch
00000000 l    df *ABS*	00000000 WM__UpdateChildPositions.c
00000000 l    df *ABS*	00000000 WM__SendMessage.c
20008420 l     O .bss	00000004 _EntranceCnt.9259
00000000 l    df *ABS*	00000000 WM__IsEnabled.c
00000000 l    df *ABS*	00000000 WM__IsAncestor.c
00000000 l    df *ABS*	00000000 WM_Timer.c
00000000 l    df *ABS*	00000000 WM_Show.c
00000000 l    df *ABS*	00000000 WM_SetUserClipRect.c
00000000 l    df *ABS*	00000000 WM_SetTrans.c
00000000 l    df *ABS*	00000000 WM_SetSize.c
00000000 l    df *ABS*	00000000 WM_SetFocusOnPrevChild.c
08007046 l     F .text	0000001e _GetPrevChild
00000000 l    df *ABS*	00000000 WM_SetFocusOnNextChild.c
080070a6 l     F .text	00000026 _GetNextChild
00000000 l    df *ABS*	00000000 WM_SetFocus.c
00000000 l    df *ABS*	00000000 WM_SetCreateFlags.c
00000000 l    df *ABS*	00000000 WM_SetCapture.c
080071f4 l     F .text	00000034 WM__ReleaseCapture
00000000 l    df *ABS*	00000000 WM_SendToParent.c
00000000 l    df *ABS*	00000000 WM_SendMessageNoPara.c
00000000 l    df *ABS*	00000000 WM_ResizeWindow.c
00000000 l    df *ABS*	00000000 WM_NotifyParent.c
00000000 l    df *ABS*	00000000 WM_Move.c
08007396 l     F .text	0000006c _MoveDescendents
00000000 l    df *ABS*	00000000 WM_MULTIBUF.c
00000000 l    df *ABS*	00000000 WM_IsWindow.c
00000000 l    df *ABS*	00000000 WM_IsFocussable.c
00000000 l    df *ABS*	00000000 WM_HasFocus.c
00000000 l    df *ABS*	00000000 WM_GetWindowSize.c
00000000 l    df *ABS*	00000000 WM_GetWindowRect.c
00000000 l    df *ABS*	00000000 WM_GetScrollbar.c
080075d2 l     F .text	00000044 _GetDialogItem
00000000 l    df *ABS*	00000000 WM_GetParent.c
00000000 l    df *ABS*	00000000 WM_GetOrg.c
00000000 l    df *ABS*	00000000 WM_GetId.c
00000000 l    df *ABS*	00000000 WM_GetFocussedWindow.c
00000000 l    df *ABS*	00000000 WM_GetFirstChild.c
00000000 l    df *ABS*	00000000 WM_GetDesktopWindow.c
00000000 l    df *ABS*	00000000 WM_GetClientWindow.c
00000000 l    df *ABS*	00000000 WM_GetClientRect.c
00000000 l    df *ABS*	00000000 WM_BringToTop.c
0800777c l     F .text	00000004 _cbInvalidateOne
00000000 l    df *ABS*	00000000 WM.c
08007800 l     F .text	00000050 _OnExit
08007850 l     F .text	00000024 _Paint1
08007874 l     F .text	000000ac _Findy1
08007920 l     F .text	00000088 _Findx0
080079a8 l     F .text	00000076 _Findx1
08007a20 l     F .text	00000094 _Paint1Trans
08007ab4 l     F .text	000000b6 _PaintTransChildren
08007b6c l     F .text	00000078 WM__PaintWinAndOverlays
08007be4 l     F .text	00000068 _cbPaintMemDev
08007d98 l     F .text	00000050 _SetClipRectUserIntersect
08007ec4 l     F .text	00000088 _Invalidate1Abs
08008a24 l     F .text	00000068 cbBackWin
20008424 l     O .bss	00000004 _DeleteWindows
20008428 l     O .bss	00000018 _ClipContext
20008440 l     O .bss	00000004 _NextDrawWin
20008444 l     O .bss	00000008 RegisterExit.10097
2000844c l     O .bss	00000001 _IsInited
00000000 l    df *ABS*	00000000 GUIDEV_StaticDevices.c
08008b80 l     F .text	00000170 _CreateStaticDevice
2000029c l     O .data	00000001 _FillByte
00000000 l    df *ABS*	00000000 GUIDEV_SetOrg.c
00000000 l    df *ABS*	00000000 GUIDEV_GetYSize.c
00000000 l    df *ABS*	00000000 GUIDEV_GetDataPtr.c
00000000 l    df *ABS*	00000000 GUIDEV_Banding.c
20008450 l     O .bss	00000004 _pcbSetAlpha
00000000 l    df *ABS*	00000000 GUIDEV_32.c
08008f00 l     F .text	00000010 _GetDevData
08008f10 l     F .text	00000010 _GetDevFunc
08008f20 l     F .text	0000000a _GetDevProp
08008f2a l     F .text	0000000c _SetOrg
08008f36 l     F .text	00000032 _GetRect
08008f68 l     F .text	00000040 _XY2PTR
08008fa8 l     F .text	0000000e _GetPixelIndex
08008fb8 l     F .text	0000005c _XorPixel
08009014 l     F .text	0000004c _SetPixelIndex
08009060 l     F .text	000000bc _DrawVLine
0800911c l     F .text	000000b8 _FillRect
080091d4 l     F .text	0000000e _DrawHLine
080091e4 l     F .text	00000728 _DrawBitmap
08064acc l     O .rodata	00000040 aID
00000000 l    df *ABS*	00000000 GUIDEV.c
00000000 l    df *ABS*	00000000 GUIDRV_Lin_32.c
08009c54 l     F .text	00000016 _GetRect
08009c6a l     F .text	00000012 _SetPixelIndex
08009c7c l     F .text	00000010 _GetPixelIndex
08009c8c l     F .text	00000028 _XorPixel
08009cb4 l     F .text	00000124 _FillRect
08009dd8 l     F .text	0000000e _DrawHLine
08009de6 l     F .text	00000010 _DrawVLine
08009df6 l     F .text	0000003c _GetDevProp
08009e34 l     F .text	00000010 _GetDevData
08009e44 l     F .text	0000005e _ReadRect
08009ea4 l     F .text	000000dc _GetDevFunc
0800a63c l     F .text	0000002a _SetVRAMAddr
0800a6b8 l     F .text	00000042 _SetSize
0800a60e l     F .text	0000002e _SetPos
0800a562 l     F .text	0000001c _GetPos
0800a5e6 l     F .text	00000028 _SetAlpha
0800a5be l     F .text	00000028 _SetVis
0800a5a4 l     F .text	0000001a _Init
08009fcc l     F .text	0000000a _On
08009fc2 l     F .text	0000000a _Off
08009fac l     F .text	00000016 _SetAlphaMode
08009f96 l     F .text	00000016 _SetChromaMode
08009f80 l     F .text	00000016 _SetChroma
0800a666 l     F .text	00000052 _CopyBuffer
0800a57e l     F .text	00000026 _ShowBuffer
0800a51c l     F .text	00000046 _SetDevFunc
0800a6fa l     F .text	00000026 _SetVSize
08009fd6 l     F .text	00000094 _SetOrg
0800a06c l     F .text	0000048c _DrawBitmap
0800a4f8 l     F .text	00000024 _InitOnce.isra.4
00000000 l    df *ABS*	00000000 GUIDRV_Lin_16.c
0800a720 l     F .text	00000016 _GetRect
0800a736 l     F .text	00000012 _SetPixelIndex
0800a748 l     F .text	00000010 _GetPixelIndex
0800a758 l     F .text	00000028 _XorPixel
0800a780 l     F .text	0000003c _GetDevProp
0800a7bc l     F .text	00000010 _GetDevData
0800a7cc l     F .text	0000004c _ReadRect
0800a818 l     F .text	000000dc _GetDevFunc
0800acf8 l     F .text	0000002a _SetVRAMAddr
0800ad74 l     F .text	00000042 _SetSize
0800acca l     F .text	0000002e _SetPos
0800ac1e l     F .text	0000001c _GetPos
0800aca2 l     F .text	00000028 _SetAlpha
0800ac7a l     F .text	00000028 _SetVis
0800ac60 l     F .text	0000001a _Init
0800a940 l     F .text	0000000a _On
0800a936 l     F .text	0000000a _Off
0800a920 l     F .text	00000016 _SetAlphaMode
0800a90a l     F .text	00000016 _SetChromaMode
0800a8f4 l     F .text	00000016 _SetChroma
0800ad22 l     F .text	00000052 _CopyBuffer
0800ac3a l     F .text	00000026 _ShowBuffer
0800abda l     F .text	00000044 _SetDevFunc
0800adb6 l     F .text	00000026 _SetVSize
0800a94a l     F .text	00000094 _SetOrg
0800a9e0 l     F .text	000001b8 _FillRect
0800ab98 l     F .text	0000000e _DrawHLine
0800aba6 l     F .text	00000010 _DrawVLine
0800abb6 l     F .text	00000024 _InitOnce.isra.2
0800addc l     F .text	000005fe _DrawBitmap
00000000 l    df *ABS*	00000000 LCD_UpdateColorIndices.c
00000000 l    df *ABS*	00000000 LCD_SetClipRectEx.c
00000000 l    df *ABS*	00000000 LCD_Set.c
00000000 l    df *ABS*	00000000 LCD_GetEx.c
0800b5a8 l     F .text	0000001e _GetDevProp
0800b5c6 l     F .text	00000022 _GetMaxValue
00000000 l    df *ABS*	00000000 LCD.c
0800b75c l     F .text	00000028 _SetDrawMode
0800bdc0 l     F .text	00000020 _SetColor
0800bdf8 l     F .text	00000020 _SetBkColor
08067028 l     O .rodata	0000000c _SetColorAPI
00000000 l    df *ABS*	00000000 GUI__strlen.c
00000000 l    df *ABS*	00000000 GUI__memset.c
00000000 l    df *ABS*	00000000 GUI__SetText.c
00000000 l    df *ABS*	00000000 GUI__ReduceRect.c
00000000 l    df *ABS*	00000000 GUI__ManageCache.c
20008454 l     O .bss	00000004 _pFuncRefreshHook
20008458 l     O .bss	00000008 aLockCnt.8450
00000000 l    df *ABS*	00000000 GUI__IntersectRects.c
00000000 l    df *ABS*	00000000 GUI__IntersectRect.c
00000000 l    df *ABS*	00000000 GUI__DrawTwinArc.c
0800c0b8 l     F .text	00000054 _GetTwinArcPara
00000000 l    df *ABS*	00000000 GUI__DivideRound32.c
00000000 l    df *ABS*	00000000 GUI__Alpha.c
0800c4ec l     F .text	00000040 _OnExit
20008460 l     O .bss	00000004 _pConvert
20008464 l     O .bss	00000004 _pCurrent
20008468 l     O .bss	00000004 _pData
2000846c l     O .bss	00000004 _VXSizeMax
20008470 l     O .bss	00000004 _pfAlphaBlending
20008474 l     O .bss	00000008 RegisterExit.8537
2000847c l     O .bss	00000004 _IsInitialized
00000000 l    df *ABS*	00000000 GUI_WaitEvent.c
20008480 l     O .bss	00000004 _pfSignalEvent
00000000 l    df *ABS*	00000000 GUI_Timer.c
0800c7ec l     F .text	0000004c _Unlink
20008484 l     O .bss	00000004 _hFirstTimer
20008488 l     O .bss	00000004 _hActiveTimer
00000000 l    df *ABS*	00000000 GUI_Task.c
0800c94c l     F .text	0000003c _GetTaskNo
0800c988 l     F .text	00000014 _OnExit
2000848c l     O .bss	00000004 _pSave
20008494 l     O .bss	00000004 _TaskIDLock
20008498 l     O .bss	00000008 RegisterExit.8472
200002a8 l     O .data	00000004 _CurrentTaskNo
200002ac l     O .data	00000004 _MaxTask
00000000 l    df *ABS*	00000000 GUI_TOUCH.c
200084a0 l     O .bss	0000000c _State
00000000 l    df *ABS*	00000000 GUI_SetTextMode.c
00000000 l    df *ABS*	00000000 GUI_SetFont.c
00000000 l    df *ABS*	00000000 GUI_SetDrawMode.c
00000000 l    df *ABS*	00000000 GUI_SetDefault.c
00000000 l    df *ABS*	00000000 GUI_SetColor.c
00000000 l    df *ABS*	00000000 GUI_SetAlpha.c
200084ac l     O .bss	00000004 _SuppressMixing
00000000 l    df *ABS*	00000000 GUI_SelectLayer.c
200084b0 l     O .bss	00000008 _aCursorLayer
00000000 l    df *ABS*	00000000 GUI_SelectLCD.c
00000000 l    df *ABS*	00000000 GUI_SaveContext.c
00000000 l    df *ABS*	00000000 GUI_RectsIntersect.c
00000000 l    df *ABS*	00000000 GUI_Pen.c
00000000 l    df *ABS*	00000000 GUI_PID.c
200084b8 l     O .bss	00000004 _pfHook
200002b0 l     O .data	00000004 _pWrite
200084bc l     O .bss	00000048 _aState
200002b4 l     O .data	00000004 _pRead
00000000 l    df *ABS*	00000000 GUI_OnKey.c
200002b8 l     O .data	00000004 _pWriteKey
20008508 l     O .bss	00000058 _aState
20008504 l     O .bss	00000004 _Key
200002bc l     O .data	00000004 _pReadKey
00000000 l    df *ABS*	00000000 GUI_MoveRect.c
00000000 l    df *ABS*	00000000 GUI_MergeRect.c
00000000 l    df *ABS*	00000000 GUI_MULTIBUF.c
20008560 l     O .bss	00000008 _aView
20008568 l     O .bss	00000008 _aPend
20008570 l     O .bss	00000008 _aWork
20008578 l     O .bss	00000008 _aLock
20008580 l     O .bss	00000004 _UseSingleFrame
00000000 l    df *ABS*	00000000 GUI_Goto.c
00000000 l    df *ABS*	00000000 GUI_GetOrg.c
00000000 l    df *ABS*	00000000 GUI_GetDrawMode.c
00000000 l    df *ABS*	00000000 GUI_GetClientRect.c
00000000 l    df *ABS*	00000000 GUI_FillRectEx.c
00000000 l    df *ABS*	00000000 GUI_FillRect.c
00000000 l    df *ABS*	00000000 GUI_Exec.c
00000000 l    df *ABS*	00000000 GUI_EncExt.c
200002c0 l     O .data	00000004 _fpClearLine
00000000 l    df *ABS*	00000000 GUI_DrawVLine.c
00000000 l    df *ABS*	00000000 GUI_DrawRectEx.c
00000000 l    df *ABS*	00000000 GUI_DrawHLine.c
00000000 l    df *ABS*	00000000 GUI_DrawGradient.c
0800d368 l     F .text	000001da _DrawGradient
00000000 l    df *ABS*	00000000 GUI_DispStringInRect.c
00000000 l    df *ABS*	00000000 GUI_DispStringAt.c
00000000 l    df *ABS*	00000000 GUI_DispString.c
00000000 l    df *ABS*	00000000 GUI_Device.c
0800d900 l     F .text	0000002c _UnlinkDevice
08067048 l     O .rodata	00000008 _aBelongsToTask
00000000 l    df *ABS*	00000000 GUI_Curs1.c
20008584 l     O .bss	00000028 _aCursorContext
00000000 l    df *ABS*	00000000 GUI_Core.c
0800daf4 l     F .text	0000002c _OnExit
0800db20 l     F .text	00000080 _InitContext
200085ac l     O .bss	00000004 _pFirstExit
200085b0 l     O .bss	00000070 GUI__Context
08067050 l     O .rodata	00000008 _HL_APIList
20008620 l     O .bss	00000008 RegisterExit.9091
20008628 l     O .bss	00000004 _IsInitialized
00000000 l    df *ABS*	00000000 GUI_CharPExt.c
00000000 l    df *ABS*	00000000 GUI_CharP.c
00000000 l    df *ABS*	00000000 GUI_CharLine.c
0800defe l     F .text	00000002 _Log2VisBuffered
0800df00 l     F .text	0000007c _DispLine
00000000 l    df *ABS*	00000000 GUI_Char.c
00000000 l    df *ABS*	00000000 GUI_Alloc.c
0800e184 l     F .text	00000024 _PushFreeBlock
0800e1a8 l     F .text	00000038 _OnExit
0800e1e0 l     F .text	00000038 _RemoveFreeBlock
0800e218 l     F .text	0000009c _AddFreeMemory
0800e2b4 l     F .text	0000009c _RemoveHoles
0800e424 l     F .text	00000098 _EnlargeBlocks
0800e744 l     F .text	000000f4 _Alloc
0800e4bc l     F .text	00000174 _InitOnce
2000862c l     O .bss	0000000c _Config
20008638 l     O .bss	00000008 RegisterExit.8983
00000000 l    df *ABS*	00000000 GUI_ALLOC_AllocZero.c
00000000 l    df *ABS*	00000000 GUI_2DLib.c
00000000 l    df *ABS*	00000000 GUICC_888_Index2Color.c
00000000 l    df *ABS*	00000000 GUICC_8888_Index2Color.c
00000000 l    df *ABS*	00000000 GUICC_8888.c
0800e94c l     F .text	00000002 _Color2Index_8888
0800e94e l     F .text	00000006 _GetIndexMask_8888
0800e954 l     F .text	00000010 _Color2IndexBulk
0800e964 l     F .text	00000010 _Index2ColorBulk
00000000 l    df *ABS*	00000000 GUICC_M8888I.c
0800e974 l     F .text	0000001a _Color2Index_M8888I
0800e98e l     F .text	0000001a _Index2Color_M8888I
0800e9a8 l     F .text	00000006 _GetIndexMask_M8888I
0800e9b0 l     F .text	00000040 _Color2IndexBulk_M8888I
0800e9f0 l     F .text	00000040 _Index2ColorBulk_M8888I
20008640 l     O .bss	00000004 _pfIndex2ColorBulk
20008644 l     O .bss	00000004 _pfColor2IndexBulk
00000000 l    df *ABS*	00000000 GUICC_M1555I.c
0800ea30 l     F .text	00000028 _Color2Index_M1555I
0800ea58 l     F .text	00000034 _Index2Color_M1555I
0800ea8c l     F .text	00000006 _GetIndexMask_M1555I
0800ea94 l     F .text	00000050 _Color2IndexBulk_M1555I
0800eae4 l     F .text	00000068 _Index2ColorBulk_M1555I
20008648 l     O .bss	00000004 _pfIndex2ColorBulk
2000864c l     O .bss	00000004 _pfColor2IndexBulk
00000000 l    df *ABS*	00000000 GUIAA_Char4Ext.c
00000000 l    df *ABS*	00000000 GUIAA_Char4.c
0800ec04 l     F .text	00000070 _DrawCharAA4_Trans
20008650 l     O .bss	00000040 _aColor.8470
200002d4 l     O .data	0000000c _Palette.8473
20008690 l     O .bss	00000004 _OldColorIndex.8471
200002e0 l     O .data	00000004 _pfDrawCharAA4_Trans
200002e4 l     O .data	00000014 _Bitmap.8474
20008694 l     O .bss	00000004 _OldBkColorIndex.8472
00000000 l    df *ABS*	00000000 WIDGET_Effect_Simple.c
0800ed48 l     F .text	00000038 _DrawDownRect
0800ed80 l     F .text	00000038 _DrawUpRect
0800edb8 l     F .text	00000014 _DrawDown
0800edcc l     F .text	00000014 _DrawUp
20008698 l     O .bss	00000004 _aColor
00000000 l    df *ABS*	00000000 SCROLLBAR_SkinFlex.c
0800ede0 l     F .text	00000030 _GetArrowPara
0800ee10 l     F .text	0000005c _DrawGraspH
0800ee6c l     F .text	0000005c _DrawGraspV
0800eec8 l     F .text	000000f4 _DrawFrame
0800efbc l     F .text	0000005c _DrawBackgroundH
0800f018 l     F .text	0000005c _DrawBackgroundV
200002f8 l     O .data	0000002c _PropsPressed
20000324 l     O .data	0000002c _PropsUnpressed
00000000 l    df *ABS*	00000000 SCROLLBAR_Skin.c
0800f214 l     F .text	00000038 _Create
0800f24c l     F .text	00000154 _CalcPositions
0800f3a0 l     F .text	000000b6 _Paint
00000000 l    df *ABS*	00000000 HEADER_SkinFlex.c
2000035c l     O .data	0000001c _Props
00000000 l    df *ABS*	00000000 HEADER_Skin.c
0800f6ec l     F .text	0000002c _Create
0800f718 l     F .text	00000116 _Paint
00000000 l    df *ABS*	00000000 FRAMEWIN_SkinFlex.c
20000384 l     O .data	0000002c _PropsActive
200003b0 l     O .data	0000002c _PropsInactive
00000000 l    df *ABS*	00000000 FRAMEWIN_Get.c
00000000 l    df *ABS*	00000000 WM__SendMessageNoPara.c
00000000 l    df *ABS*	00000000 WM__GetPrevSibling.c
00000000 l    df *ABS*	00000000 WM__GetLastSibling.c
00000000 l    df *ABS*	00000000 WM__GetFocussedChild.c
00000000 l    df *ABS*	00000000 WM__GetFirstSibling.c
00000000 l    df *ABS*	00000000 WM_ValidateWindow.c
00000000 l    df *ABS*	00000000 WM_Touch.c
2000869c l     O .bss	00000004 _pcbMotion
200086a0 l     O .bss	00000004 _pcbToolTip
200086a4 l     O .bss	00000018 _aStateLast
00000000 l    df *ABS*	00000000 WM_Screen2Win.c
0801015a l     F .text	00000060 _Screen2hWin
00000000 l    df *ABS*	00000000 WM_PID__GetPrevState.c
200086bc l     O .bss	00000018 _aPrevState
00000000 l    df *ABS*	00000000 WM_OnKey.c
00000000 l    df *ABS*	00000000 WM_GetDesktopWindowEx.c
00000000 l    df *ABS*	00000000 WM_ForEachDesc.c
00000000 l    df *ABS*	00000000 WM_CriticalHandle.c
00000000 l    df *ABS*	00000000 WM_BringToBottom.c
00000000 l    df *ABS*	00000000 GUIDEV_WriteToActiveOpaque.c
08010340 l     F .text	0000003e _Convert16
0801037e l     F .text	00000042 _Convert8
00000000 l    df *ABS*	00000000 GUIDEV_WriteToActiveAlpha.c
00000000 l    df *ABS*	00000000 GUIDEV_Write.c
00000000 l    df *ABS*	00000000 GUIDEV_UsageBM.c
08010ce8 l     F .text	0000002a GUI_USAGE_BM_AddPixel
08010d12 l     F .text	00000096 GUI_USAGE_BM_GetNextDirty
08010da8 l     F .text	00000004 _GUI_USAGE_BM_Delete
08010dac l     F .text	00000010 GUI_USAGE_BM_Clear
08010dbc l     F .text	00000072 GUI_USAGE_BM_AddHLine
080670bc l     O .rodata	00000018 API
00000000 l    df *ABS*	00000000 GUIDEV_Usage.c
00000000 l    df *ABS*	00000000 GUIDEV_ReduceYSize.c
00000000 l    df *ABS*	00000000 GUIDEV_Clear.c
00000000 l    df *ABS*	00000000 GUIDEV_16.c
08010f70 l     F .text	00000010 _GetDevData
08010f80 l     F .text	00000010 _GetDevFunc
08010f90 l     F .text	0000000e _SetOrg
08010f9e l     F .text	00000014 _GetDevProp
08010fb2 l     F .text	00000032 _GetRect
08010fe4 l     F .text	00000040 _XY2PTR
08011024 l     F .text	0000000e _GetPixelIndex
08011034 l     F .text	00000058 _XorPixel
0801108c l     F .text	0000004c _SetPixelIndex
080110d8 l     F .text	000000bc _DrawVLine
08011194 l     F .text	000000b4 _FillRect
08011248 l     F .text	0000000e _DrawHLine
08011258 l     F .text	000006fc _DrawBitmap
080670d4 l     O .rodata	00000040 _aID
00000000 l    df *ABS*	00000000 LCD_SelectLCD.c
00000000 l    df *ABS*	00000000 LCD_ReadRect.c
08011994 l     F .text	000001e8 LCD_ReadRectEx
00000000 l    df *ABS*	00000000 LCD_Color.c
08011bdc l     F .text	00000014 _OnExit
200086d4 l     O .bss	00000008 RegisterExit.8449
200003e0 l     O .data	00000004 _NumColors
00000000 l    df *ABS*	00000000 LCD_AA.c
200003e4 l     O .data	00000004 _AndMask
00000000 l    df *ABS*	00000000 GUI__strcmp.c
00000000 l    df *ABS*	00000000 GUI__sqrt32.c
00000000 l    df *ABS*	00000000 GUI__memset16.c
00000000 l    df *ABS*	00000000 GUI__HandleEOLine.c
00000000 l    df *ABS*	00000000 GUI__ExpandPixelIndices.c
00000000 l    df *ABS*	00000000 GUI__CompactPixelIndices.c
00000000 l    df *ABS*	00000000 GUI_UC_EncodeNone.c
0801236e l     F .text	00000004 _GetCharCode
08012372 l     F .text	00000004 _GetCharSize
08012376 l     F .text	00000004 _CalcSizeOfChar
0801237a l     F .text	00000006 _Encode
00000000 l    df *ABS*	00000000 GUI_UC.c
00000000 l    df *ABS*	00000000 GUI_SetTextAlign.c
00000000 l    df *ABS*	00000000 GUI_SetOrg.c
00000000 l    df *ABS*	00000000 GUI_SetLineStyle.c
00000000 l    df *ABS*	00000000 GUI_SPRITE.c
08012448 l     F .text	000000aa _CreateBuffer
080124f2 l     F .text	00000074 _GetBkIndex.isra.0
08012566 l     F .text	0000007c _GetBkIndexAlpha.isra.2
080125e4 l     F .text	00000038 _GetDeviceRect
0801261c l     F .text	0000007a _FlushBuffer.isra.5
08012696 l     F .text	00000044 _SetBkIndexBuffered
080126da l     F .text	0000001e _ReleaseBuffer.isra.6
00000000 l    df *ABS*	00000000 GUI_GetColor.c
00000000 l    df *ABS*	00000000 GUI_GetBitmapPixelIndex.c
00000000 l    df *ABS*	00000000 GUI_DrawPixel.c
00000000 l    df *ABS*	00000000 GUI_DrawBitmap.c
00000000 l    df *ABS*	00000000 GUI_CharM.c
00000000 l    df *ABS*	00000000 GUICC_0.c
08012f70 l     F .text	00000052 _GetIndexMask_0
08012fc2 l     F .text	0000001e _Index2Color_0
08012fe0 l     F .text	0000005a _Color2Index_0
00000000 l    df *ABS*	00000000 WM__SendMessageIfEnabled.c
00000000 l    df *ABS*	00000000 WM__IsChild.c
00000000 l    df *ABS*	00000000 WM__ForEachDesc.c
00000000 l    df *ABS*	00000000 LCD_GetPixelColor.c
00000000 l    df *ABS*	00000000 LCD_GetP.c
00000000 l    df *ABS*	00000000 LCD_GetNumDisplays.c
00000000 l    df *ABS*	00000000 LCD_GetColorIndex.c
00000000 l    df *ABS*	00000000 GUI_CalcColorDist.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08013474 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 /usr/bin/../lib/gcc/arm-none-eabi/5.2.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/bin/../lib/gcc/arm-none-eabi/5.2.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 ST_Fonts.c
00000000 l    df *ABS*	00000000 F20_ASCII.c
08064b40 l     O .rodata	00000028 acGUI_Font20_ASCII_0033
08064b68 l     O .rodata	00000028 acGUI_Font20_ASCII_0034
08064b90 l     O .rodata	00000028 acGUI_Font20_ASCII_0035
08064bb8 l     O .rodata	00000028 acGUI_Font20_ASCII_0036
08064be0 l     O .rodata	00000028 acGUI_Font20_ASCII_0037
08064c08 l     O .rodata	00000028 acGUI_Font20_ASCII_0038
08064c30 l     O .rodata	00000028 acGUI_Font20_ASCII_0039
08064c58 l     O .rodata	00000028 acGUI_Font20_ASCII_0070
08064c80 l     O .rodata	00000028 acGUI_Font20_ASCII_0071
08064ca8 l     O .rodata	00000014 acGUI_Font20_ASCII_0072
08064cbc l     O .rodata	00000028 acGUI_Font20_ASCII_003D
08064ce4 l     O .rodata	00000028 acGUI_Font20_ASCII_003E
08064d0c l     O .rodata	00000028 acGUI_Font20_ASCII_0075
08064d34 l     O .rodata	00000028 acGUI_Font20_ASCII_0076
08064d5c l     O .rodata	00000028 acGUI_Font20_ASCII_0077
08064d84 l     O .rodata	00000014 acGUI_Font20_ASCII_0078
08064d98 l     O .rodata	00000028 acGUI_Font20_ASCII_0079
08064dc0 l     O .rodata	00000014 acGUI_Font20_ASCII_007A
08064dd4 l     O .rodata	00000014 acGUI_Font20_ASCII_007B
08064de8 l     O .rodata	00000014 acGUI_Font20_ASCII_007C
08064dfc l     O .rodata	00000014 acGUI_Font20_ASCII_007D
08064e10 l     O .rodata	00000028 acGUI_Font20_ASCII_007E
080656b0 l     O .rodata	00000014 acGUI_Font20_ASCII_0020
080656c4 l     O .rodata	00000014 acGUI_Font20_ASCII_0021
080656d8 l     O .rodata	00000014 acGUI_Font20_ASCII_0022
080656ec l     O .rodata	00000028 acGUI_Font20_ASCII_0023
08065714 l     O .rodata	00000028 acGUI_Font20_ASCII_0024
0806573c l     O .rodata	00000028 acGUI_Font20_ASCII_0025
08065764 l     O .rodata	00000028 acGUI_Font20_ASCII_0026
0806578c l     O .rodata	00000014 acGUI_Font20_ASCII_0027
080657a0 l     O .rodata	00000014 acGUI_Font20_ASCII_0028
080657b4 l     O .rodata	00000014 acGUI_Font20_ASCII_0029
080657c8 l     O .rodata	00000014 acGUI_Font20_ASCII_002A
080657dc l     O .rodata	00000028 acGUI_Font20_ASCII_002B
08065804 l     O .rodata	00000014 acGUI_Font20_ASCII_002C
08065818 l     O .rodata	00000014 acGUI_Font20_ASCII_002D
0806582c l     O .rodata	00000014 acGUI_Font20_ASCII_002E
08065840 l     O .rodata	00000014 acGUI_Font20_ASCII_002F
08065a98 l     O .rodata	00000028 acGUI_Font20_ASCII_0030
08065ac0 l     O .rodata	00000028 acGUI_Font20_ASCII_0031
08065ae8 l     O .rodata	00000028 acGUI_Font20_ASCII_0032
08065394 l     O .rodata	00000014 acGUI_Font20_ASCII_003A
080653a8 l     O .rodata	00000014 acGUI_Font20_ASCII_003B
080653bc l     O .rodata	00000028 acGUI_Font20_ASCII_003C
08065994 l     O .rodata	00000028 acGUI_Font20_ASCII_003F
08065130 l     O .rodata	0000003c acGUI_Font20_ASCII_0040
0806516c l     O .rodata	00000028 acGUI_Font20_ASCII_0041
08065194 l     O .rodata	00000028 acGUI_Font20_ASCII_0042
080651bc l     O .rodata	00000028 acGUI_Font20_ASCII_0043
080651e4 l     O .rodata	00000028 acGUI_Font20_ASCII_0044
0806520c l     O .rodata	00000028 acGUI_Font20_ASCII_0045
08065234 l     O .rodata	00000028 acGUI_Font20_ASCII_0046
0806525c l     O .rodata	00000028 acGUI_Font20_ASCII_0047
08065284 l     O .rodata	00000028 acGUI_Font20_ASCII_0048
080652ac l     O .rodata	00000014 acGUI_Font20_ASCII_0049
080652c0 l     O .rodata	00000028 acGUI_Font20_ASCII_004A
08065688 l     O .rodata	00000028 acGUI_Font20_ASCII_004B
080652f4 l     O .rodata	00000028 acGUI_Font20_ASCII_004C
0806531c l     O .rodata	00000028 acGUI_Font20_ASCII_004D
08065344 l     O .rodata	00000028 acGUI_Font20_ASCII_004E
0806536c l     O .rodata	00000028 acGUI_Font20_ASCII_004F
08065444 l     O .rodata	00000028 acGUI_Font20_ASCII_0050
0806546c l     O .rodata	00000028 acGUI_Font20_ASCII_0051
08065494 l     O .rodata	00000028 acGUI_Font20_ASCII_0052
080654bc l     O .rodata	00000028 acGUI_Font20_ASCII_0053
080654e4 l     O .rodata	00000028 acGUI_Font20_ASCII_0054
0806550c l     O .rodata	00000028 acGUI_Font20_ASCII_0055
08065534 l     O .rodata	00000028 acGUI_Font20_ASCII_0056
0806555c l     O .rodata	0000003c acGUI_Font20_ASCII_0057
08065598 l     O .rodata	00000028 acGUI_Font20_ASCII_0058
080655c0 l     O .rodata	00000028 acGUI_Font20_ASCII_0059
080655e8 l     O .rodata	00000028 acGUI_Font20_ASCII_005A
08065610 l     O .rodata	00000014 acGUI_Font20_ASCII_005B
08065624 l     O .rodata	00000014 acGUI_Font20_ASCII_005C
08065638 l     O .rodata	00000014 acGUI_Font20_ASCII_005D
0806564c l     O .rodata	00000014 acGUI_Font20_ASCII_005E
08065660 l     O .rodata	00000028 acGUI_Font20_ASCII_005F
080659bc l     O .rodata	00000014 acGUI_Font20_ASCII_0060
080659d0 l     O .rodata	00000028 acGUI_Font20_ASCII_0061
080659f8 l     O .rodata	00000028 acGUI_Font20_ASCII_0062
08065a20 l     O .rodata	00000028 acGUI_Font20_ASCII_0063
08065a48 l     O .rodata	00000028 acGUI_Font20_ASCII_0064
08065a70 l     O .rodata	00000028 acGUI_Font20_ASCII_0065
08065854 l     O .rodata	00000014 acGUI_Font20_ASCII_0066
08065868 l     O .rodata	00000028 acGUI_Font20_ASCII_0067
08065890 l     O .rodata	00000028 acGUI_Font20_ASCII_0068
080658b8 l     O .rodata	00000014 acGUI_Font20_ASCII_0069
080658cc l     O .rodata	00000014 acGUI_Font20_ASCII_006A
080658e0 l     O .rodata	00000028 acGUI_Font20_ASCII_006B
08065908 l     O .rodata	00000014 acGUI_Font20_ASCII_006C
0806591c l     O .rodata	00000028 acGUI_Font20_ASCII_006D
08065944 l     O .rodata	00000028 acGUI_Font20_ASCII_006E
0806596c l     O .rodata	00000028 acGUI_Font20_ASCII_006F
080653e4 l     O .rodata	00000028 acGUI_Font20_ASCII_0073
0806540c l     O .rodata	00000014 acGUI_Font20_ASCII_0074
00000000 l    df *ABS*	00000000 F16_1.c
08065b34 l     O .rodata	00000020 acFont16_1_213
08065b54 l     O .rodata	00000010 acFont16_1_215
08065b64 l     O .rodata	00000010 acFont16_1_180
08065b74 l     O .rodata	00000010 acFont16_1_181
08065b84 l     O .rodata	00000010 acFont16_1_182
08065b94 l     O .rodata	00000010 acFont16_1_183
08065ba4 l     O .rodata	00000020 acFont16_1_210
08065bc4 l     O .rodata	00000020 acFont16_1_211
08065be4 l     O .rodata	00000020 acFont16_1_212
08065c04 l     O .rodata	00000010 acFont16_1_187
08065c14 l     O .rodata	00000020 acFont16_1_214
08065c34 l     O .rodata	00000020 acFont16_1_189
08065c54 l     O .rodata	00000020 acFont16_1_216
08065c74 l     O .rodata	00000020 acFont16_1_217
08065c94 l     O .rodata	00000020 acFont16_1_218
08065cb4 l     O .rodata	00000020 acFont16_1_219
080661a0 l     O .rodata	00000300 GUI_CharInfo_Font16_1
08065ce0 l     O .rodata	00000010 acFont16_1_250
08065cf0 l     O .rodata	00000010 acFont16_1_251
08065d00 l     O .rodata	00000010 acFont16_1_252
08065d10 l     O .rodata	00000010 acFont16_1_253
08065d20 l     O .rodata	00000010 acFont16_1_254
08065d30 l     O .rodata	00000010 acFont16_1_255
08065d40 l     O .rodata	00000020 acFont16_1_190
08065d60 l     O .rodata	00000010 acFont16_1_191
08065d70 l     O .rodata	00000020 acFont16_1_192
08065d90 l     O .rodata	00000020 acFont16_1_193
08065db0 l     O .rodata	00000020 acFont16_1_220
08065dd0 l     O .rodata	00000020 acFont16_1_221
08065df0 l     O .rodata	00000020 acFont16_1_222
08065e10 l     O .rodata	00000020 acFont16_1_223
08065e30 l     O .rodata	00000010 acFont16_1_224
08065e40 l     O .rodata	00000010 acFont16_1_225
08065e50 l     O .rodata	00000010 acFont16_1_226
08065e60 l     O .rodata	00000010 acFont16_1_227
08065e70 l     O .rodata	00000010 acFont16_1_228
08065e80 l     O .rodata	00000010 acFont16_1_229
08065e90 l     O .rodata	00000020 acFont16_1_194
08065eb0 l     O .rodata	00000020 acFont16_1_195
08065ed0 l     O .rodata	00000020 acFont16_1_196
08065ef0 l     O .rodata	00000020 acFont16_1_197
08065f10 l     O .rodata	00000020 acFont16_1_198
08065f30 l     O .rodata	00000020 acFont16_1_199
08065f50 l     O .rodata	00000020 acFont16_1_200
08065f70 l     O .rodata	00000020 acFont16_1_201
08065f90 l     O .rodata	00000020 acFont16_1_202
08065fb0 l     O .rodata	00000020 acFont16_1_203
08065fd0 l     O .rodata	00000010 acFont16_1_204
08065fe0 l     O .rodata	00000010 acFont16_1_205
08065ff0 l     O .rodata	00000010 acFont16_1_160
08066000 l     O .rodata	00000010 acFont16_1_161
08066010 l     O .rodata	00000010 acFont16_1_162
08066020 l     O .rodata	00000010 acFont16_1_163
08066030 l     O .rodata	00000010 acFont16_1_164
08066040 l     O .rodata	00000010 acFont16_1_165
08066050 l     O .rodata	00000010 acFont16_1_166
08066060 l     O .rodata	00000010 acFont16_1_167
08066070 l     O .rodata	00000010 acFont16_1_168
08066080 l     O .rodata	00000020 acFont16_1_169
080660a0 l     O .rodata	00000020 acFont16_1_230
080660c0 l     O .rodata	00000010 acFont16_1_231
080660d0 l     O .rodata	00000010 acFont16_1_232
080660e0 l     O .rodata	00000010 acFont16_1_233
080660f0 l     O .rodata	00000010 acFont16_1_234
08066100 l     O .rodata	00000010 acFont16_1_235
08066110 l     O .rodata	00000010 acFont16_1_236
08066120 l     O .rodata	00000010 acFont16_1_237
08066130 l     O .rodata	00000010 acFont16_1_238
08066140 l     O .rodata	00000010 acFont16_1_239
08066150 l     O .rodata	00000010 acFont16_1_184
08066160 l     O .rodata	00000010 acFont16_1_185
08066170 l     O .rodata	00000010 acFont16_1_186
08066180 l     O .rodata	00000020 acFont16_1_188
080664a0 l     O .rodata	00000010 acFont16_1_170
080664b0 l     O .rodata	00000010 acFont16_1_171
080664c0 l     O .rodata	00000010 acFont16_1_172
080664d0 l     O .rodata	00000010 acFont16_1_173
080664e0 l     O .rodata	00000020 acFont16_1_174
08066500 l     O .rodata	00000010 acFont16_1_175
08066510 l     O .rodata	00000010 acFont16_1_176
08066520 l     O .rodata	00000010 acFont16_1_177
08066530 l     O .rodata	00000010 acFont16_1_178
08066540 l     O .rodata	00000010 acFont16_1_179
08066550 l     O .rodata	00000010 acFont16_1_206
08066560 l     O .rodata	00000010 acFont16_1_207
08066570 l     O .rodata	00000020 acFont16_1_208
08066590 l     O .rodata	00000020 acFont16_1_209
080665b0 l     O .rodata	00000010 acFont16_1_240
080665c0 l     O .rodata	00000010 acFont16_1_241
080665d0 l     O .rodata	00000010 acFont16_1_242
080665e0 l     O .rodata	00000010 acFont16_1_243
080665f0 l     O .rodata	00000010 acFont16_1_244
08066600 l     O .rodata	00000010 acFont16_1_245
08066610 l     O .rodata	00000010 acFont16_1_246
08066620 l     O .rodata	00000010 acFont16_1_247
08066630 l     O .rodata	00000010 acFont16_1_248
08066640 l     O .rodata	00000010 acFont16_1_249
00000000 l    df *ABS*	00000000 F13_1.c
08066650 l     O .rodata	0000000d acFont13_1_00FD
0806665d l     O .rodata	0000000d acFont13_1_00FE
0806666a l     O .rodata	0000000d acFont13_1_00FF
08066677 l     O .rodata	0000000d acFont13_1_00C0
08066684 l     O .rodata	0000000d acFont13_1_00C1
08066691 l     O .rodata	0000000d acFont13_1_00C2
0806669e l     O .rodata	0000000d acFont13_1_00C3
080666ab l     O .rodata	0000000d acFont13_1_00C4
080666b8 l     O .rodata	0000000d acFont13_1_00C5
080666c5 l     O .rodata	0000001a acFont13_1_00C6
080666df l     O .rodata	0000000d acFont13_1_00C7
080666ec l     O .rodata	0000000d acFont13_1_00C8
080666f9 l     O .rodata	0000000d acFont13_1_00C9
08066706 l     O .rodata	0000000d acFont13_1_00CA
08066713 l     O .rodata	0000000d acFont13_1_00CB
08066720 l     O .rodata	0000000d acFont13_1_00CC
0806672d l     O .rodata	0000000d acFont13_1_00CD
0806673a l     O .rodata	0000000d acFont13_1_00CE
08066747 l     O .rodata	0000000d acFont13_1_00CF
08066754 l     O .rodata	0000000d acFont13_1_00AA
08066761 l     O .rodata	0000000d acFont13_1_00AB
0806676e l     O .rodata	0000000d acFont13_1_00AC
0806677b l     O .rodata	0000000d acFont13_1_00AD
08066788 l     O .rodata	0000001a acFont13_1_00AE
08066a94 l     O .rodata	0000000c GUI_Font13_1_Prop1
080667c8 l     O .rodata	0000000d acFont13_1_00AF
080667d5 l     O .rodata	0000000d acFont13_1_00D0
080667e2 l     O .rodata	0000000d acFont13_1_00D1
080667ef l     O .rodata	0000000d acFont13_1_00D2
080667fc l     O .rodata	0000000d acFont13_1_00D3
08066809 l     O .rodata	0000000d acFont13_1_00D4
08066816 l     O .rodata	0000000d acFont13_1_00D5
08066823 l     O .rodata	0000000d acFont13_1_00D6
08066830 l     O .rodata	0000000d acFont13_1_00D7
0806683d l     O .rodata	0000000d acFont13_1_00D8
0806684a l     O .rodata	0000000d acFont13_1_00D9
08066857 l     O .rodata	0000000d acFont13_1_00DA
08066864 l     O .rodata	0000000d acFont13_1_00DB
08066871 l     O .rodata	0000000d acFont13_1_00DC
0806687e l     O .rodata	0000000d acFont13_1_00DD
0806688b l     O .rodata	0000000d acFont13_1_00DE
08066898 l     O .rodata	0000000d acFont13_1_00DF
080668a5 l     O .rodata	0000000d acFont13_1_00A0
080668b2 l     O .rodata	0000000d acFont13_1_00A1
080668bf l     O .rodata	0000000d acFont13_1_00A2
080668cc l     O .rodata	0000000d acFont13_1_00A3
080668d9 l     O .rodata	0000000d acFont13_1_00A4
080668e6 l     O .rodata	0000000d acFont13_1_00A5
080668f3 l     O .rodata	0000000d acFont13_1_00A6
08066900 l     O .rodata	0000000d acFont13_1_00A7
0806690d l     O .rodata	0000000d acFont13_1_00A8
0806691a l     O .rodata	0000001a acFont13_1_00A9
08066934 l     O .rodata	0000000d acFont13_1_00E0
08066941 l     O .rodata	0000000d acFont13_1_00E1
0806694e l     O .rodata	0000000d acFont13_1_00E2
0806695b l     O .rodata	0000000d acFont13_1_00E3
08066968 l     O .rodata	0000000d acFont13_1_00E4
08066975 l     O .rodata	0000000d acFont13_1_00E5
08066982 l     O .rodata	0000001a acFont13_1_00E6
0806699c l     O .rodata	0000000d acFont13_1_00E7
080669a9 l     O .rodata	0000000d acFont13_1_00E8
080669b6 l     O .rodata	0000000d acFont13_1_00E9
080669c3 l     O .rodata	0000000d acFont13_1_00EA
080669d0 l     O .rodata	0000000d acFont13_1_00EB
080669dd l     O .rodata	0000000d acFont13_1_00EC
080669ea l     O .rodata	0000000d acFont13_1_00ED
080669f7 l     O .rodata	0000000d acFont13_1_00EE
08066a04 l     O .rodata	0000000d acFont13_1_00EF
08066a11 l     O .rodata	0000001a acFont13_1_00BC
08066a2b l     O .rodata	0000000d acFont13_1_00F1
08066a38 l     O .rodata	0000001a acFont13_1_00BD
08066a52 l     O .rodata	0000000d acFont13_1_00F2
08066a5f l     O .rodata	0000001a acFont13_1_00BE
08066a79 l     O .rodata	0000000d acFont13_1_00BF
08066a86 l     O .rodata	0000000d acFont13_1_00F0
08066b3c l     O .rodata	00000300 GUI_Font13_1_CharInfo
08066aa0 l     O .rodata	0000000d acFont13_1_00B0
08066aad l     O .rodata	0000000d acFont13_1_00B1
08066aba l     O .rodata	0000000d acFont13_1_00B2
08066ac7 l     O .rodata	0000000d acFont13_1_00B3
08066ad4 l     O .rodata	0000000d acFont13_1_00B4
08066ae1 l     O .rodata	0000000d acFont13_1_00B5
08066aee l     O .rodata	0000000d acFont13_1_00B6
08066afb l     O .rodata	0000000d acFont13_1_00B7
08066b08 l     O .rodata	0000000d acFont13_1_00B8
08066b15 l     O .rodata	0000000d acFont13_1_00B9
08066b22 l     O .rodata	0000000d acFont13_1_00BA
08066b2f l     O .rodata	0000000d acFont13_1_00BB
08066e3c l     O .rodata	0000000d acFont13_1_00F3
08066e49 l     O .rodata	0000000d acFont13_1_00F4
08066e56 l     O .rodata	0000000d acFont13_1_00F5
08066e63 l     O .rodata	0000000d acFont13_1_00F6
08066e70 l     O .rodata	0000000d acFont13_1_00F7
08066e7d l     O .rodata	0000000d acFont13_1_00F8
08066e8a l     O .rodata	0000000d acFont13_1_00F9
08066e97 l     O .rodata	0000000d acFont13_1_00FA
08066ea4 l     O .rodata	0000000d acFont13_1_00FB
08066eb1 l     O .rodata	0000000d acFont13_1_00FC
00000000 l    df *ABS*	00000000 LCD_Mirror.c
00000000 l    df *ABS*	00000000 F6x8.c
08067148 l     O .rodata	00000014 GUI_F6x8_Mono
08067180 l     O .rodata	00000518 GUI_acFont6x8
08067858 l     O .rodata	00000008 GUI_F6x8_TI8859_1
08067698 l     O .rodata	000001c0 GUI_F6x8_TL8859_1
00000000 l    df *ABS*	00000000 F16_ASCII.c
08067860 l     O .rodata	00000010 acFont16ASCII_88
08067870 l     O .rodata	00000020 acFont16ASCII_89
08067890 l     O .rodata	00000010 acFont16ASCII_48
080678a0 l     O .rodata	00000010 acFont16ASCII_49
080678b0 l     O .rodata	00000010 acFont16ASCII_93
080678c0 l     O .rodata	00000010 acFont16ASCII_96
080678d0 l     O .rodata	00000010 acFont16ASCII_99
080678e0 l     O .rodata	00000010 acFont16ASCII_50
080678f0 l     O .rodata	00000010 acFont16ASCII_51
08067900 l     O .rodata	00000010 acFont16ASCII_52
08067910 l     O .rodata	00000010 acFont16ASCII_53
08067920 l     O .rodata	00000010 acFont16ASCII_54
08067930 l     O .rodata	00000010 acFont16ASCII_120
08067940 l     O .rodata	00000010 acFont16ASCII_121
08067950 l     O .rodata	00000010 acFont16ASCII_122
08067960 l     O .rodata	00000010 acFont16ASCII_123
08067970 l     O .rodata	00000010 acFont16ASCII_124
08067980 l     O .rodata	00000010 acFont16ASCII_125
08067990 l     O .rodata	00000010 acFont16ASCII_126
080679a0 l     O .rodata	00000010 acFont16ASCII_90
080679b0 l     O .rodata	00000010 acFont16ASCII_91
080679c0 l     O .rodata	00000010 acFont16ASCII_92
080679d0 l     O .rodata	00000010 acFont16ASCII_35
080679e0 l     O .rodata	00000010 acFont16ASCII_94
080679f0 l     O .rodata	00000010 acFont16ASCII_95
08067a00 l     O .rodata	00000010 acFont16ASCII_36
08067a10 l     O .rodata	00000010 acFont16ASCII_97
08067a20 l     O .rodata	00000010 acFont16ASCII_98
08067a30 l     O .rodata	00000020 acFont16ASCII_37
08067a50 l     O .rodata	00000010 acFont16ASCII_110
08067a60 l     O .rodata	00000010 acFont16ASCII_111
08067a70 l     O .rodata	00000010 acFont16ASCII_112
08067a80 l     O .rodata	00000010 acFont16ASCII_60
08067a90 l     O .rodata	00000010 acFont16ASCII_61
08067aa0 l     O .rodata	00000010 acFont16ASCII_62
08067ab0 l     O .rodata	00000010 acFont16ASCII_63
08067ac0 l     O .rodata	00000020 acFont16ASCII_64
08067ae0 l     O .rodata	00000020 acFont16ASCII_65
08067b00 l     O .rodata	00000020 acFont16ASCII_66
08067b20 l     O .rodata	00000020 acFont16ASCII_67
08067b40 l     O .rodata	00000020 acFont16ASCII_68
08067b60 l     O .rodata	00000020 acFont16ASCII_69
08067b80 l     O .rodata	00000020 acFont16ASCII_38
08067ba0 l     O .rodata	00000010 acFont16ASCII_39
08067bb0 l     O .rodata	00000010 acFont16ASCII_55
08067bc0 l     O .rodata	00000010 acFont16ASCII_56
08067bd0 l     O .rodata	00000010 acFont16ASCII_57
08067be0 l     O .rodata	00000300 GUI_CharInfo_Font16ASCII
08067f0c l     O .rodata	00000010 acFont16ASCII_32
08067f1c l     O .rodata	00000010 acFont16ASCII_33
08067f2c l     O .rodata	00000010 acFont16ASCII_34
080680ec l     O .rodata	00000010 acFont16ASCII_40
080680fc l     O .rodata	00000010 acFont16ASCII_41
0806810c l     O .rodata	00000010 acFont16ASCII_42
0806811c l     O .rodata	00000010 acFont16ASCII_43
0806812c l     O .rodata	00000010 acFont16ASCII_44
0806813c l     O .rodata	00000010 acFont16ASCII_45
0806814c l     O .rodata	00000010 acFont16ASCII_46
0806815c l     O .rodata	00000010 acFont16ASCII_47
08067ee0 l     O .rodata	00000010 acFont16ASCII_58
08067ef0 l     O .rodata	00000010 acFont16ASCII_59
08067fec l     O .rodata	00000010 acFont16ASCII_70
08067ffc l     O .rodata	00000020 acFont16ASCII_71
0806801c l     O .rodata	00000020 acFont16ASCII_72
0806803c l     O .rodata	00000010 acFont16ASCII_73
0806804c l     O .rodata	00000010 acFont16ASCII_74
0806805c l     O .rodata	00000020 acFont16ASCII_75
0806807c l     O .rodata	00000010 acFont16ASCII_76
0806808c l     O .rodata	00000020 acFont16ASCII_77
080680ac l     O .rodata	00000020 acFont16ASCII_78
080680cc l     O .rodata	00000020 acFont16ASCII_79
080681ec l     O .rodata	00000020 acFont16ASCII_80
0806820c l     O .rodata	00000020 acFont16ASCII_81
0806822c l     O .rodata	00000020 acFont16ASCII_82
0806824c l     O .rodata	00000020 acFont16ASCII_83
0806826c l     O .rodata	00000010 acFont16ASCII_84
0806827c l     O .rodata	00000020 acFont16ASCII_85
0806829c l     O .rodata	00000020 acFont16ASCII_86
080682bc l     O .rodata	00000020 acFont16ASCII_87
08067f3c l     O .rodata	00000010 acFont16ASCII_100
08067f4c l     O .rodata	00000010 acFont16ASCII_101
08067f5c l     O .rodata	00000010 acFont16ASCII_102
08067f6c l     O .rodata	00000010 acFont16ASCII_103
08067f7c l     O .rodata	00000010 acFont16ASCII_104
08067f8c l     O .rodata	00000010 acFont16ASCII_105
08067f9c l     O .rodata	00000010 acFont16ASCII_106
08067fac l     O .rodata	00000010 acFont16ASCII_107
08067fbc l     O .rodata	00000010 acFont16ASCII_108
08067fcc l     O .rodata	00000020 acFont16ASCII_109
0806816c l     O .rodata	00000010 acFont16ASCII_113
0806817c l     O .rodata	00000010 acFont16ASCII_114
0806818c l     O .rodata	00000010 acFont16ASCII_115
0806819c l     O .rodata	00000010 acFont16ASCII_116
080681ac l     O .rodata	00000010 acFont16ASCII_117
080681bc l     O .rodata	00000010 acFont16ASCII_118
080681cc l     O .rodata	00000020 acFont16ASCII_119
00000000 l    df *ABS*	00000000 F13_ASCII.c
080682dc l     O .rodata	0000000d acFont13ASCII_0050
080682e9 l     O .rodata	0000000d acFont13ASCII_0051
080682f6 l     O .rodata	0000000d acFont13ASCII_0052
08068303 l     O .rodata	0000000d acFont13ASCII_0053
08068310 l     O .rodata	0000000d acFont13ASCII_0054
0806831d l     O .rodata	0000000d acFont13ASCII_0055
0806832a l     O .rodata	0000000d acFont13ASCII_0056
08068337 l     O .rodata	0000001a acFont13ASCII_0057
08068351 l     O .rodata	0000000d acFont13ASCII_0058
0806835e l     O .rodata	0000000d acFont13ASCII_0059
0806836b l     O .rodata	0000000d acFont13ASCII_005A
08068378 l     O .rodata	0000000d acFont13ASCII_005B
08068385 l     O .rodata	0000000d acFont13ASCII_005C
08068392 l     O .rodata	0000000d acFont13ASCII_005D
0806839f l     O .rodata	0000000d acFont13ASCII_005E
080683ac l     O .rodata	0000000d acFont13ASCII_005F
080683b9 l     O .rodata	0000000d acFont13ASCII_0020
080683c6 l     O .rodata	0000000d acFont13ASCII_0021
080683d3 l     O .rodata	0000000d acFont13ASCII_0022
080683e0 l     O .rodata	0000000d acFont13ASCII_0023
080683ed l     O .rodata	0000000d acFont13ASCII_0024
080683fa l     O .rodata	0000001a acFont13ASCII_0025
08068414 l     O .rodata	0000000d acFont13ASCII_0026
08068421 l     O .rodata	0000000d acFont13ASCII_0027
0806842e l     O .rodata	0000000d acFont13ASCII_0029
0806855c l     O .rodata	000002f8 GUI_Font13ASCII_CharInfo
08068448 l     O .rodata	0000000d acFont13ASCII_002A
08068455 l     O .rodata	0000000d acFont13ASCII_002B
08068462 l     O .rodata	0000000d acFont13ASCII_002C
0806846f l     O .rodata	0000000d acFont13ASCII_002D
0806847c l     O .rodata	0000000d acFont13ASCII_002E
08068489 l     O .rodata	0000000d acFont13ASCII_002F
08068496 l     O .rodata	0000000d acFont13ASCII_0066
080684a3 l     O .rodata	0000000d acFont13ASCII_0067
080684b0 l     O .rodata	0000000d acFont13ASCII_0068
080684bd l     O .rodata	0000000d acFont13ASCII_0069
080684ca l     O .rodata	0000000d acFont13ASCII_006A
080684d7 l     O .rodata	0000000d acFont13ASCII_006B
080684e4 l     O .rodata	0000000d acFont13ASCII_006C
080684f1 l     O .rodata	0000000d acFont13ASCII_006D
080684fe l     O .rodata	0000000d acFont13ASCII_006E
0806850b l     O .rodata	0000000d acFont13ASCII_006F
08068518 l     O .rodata	0000000d acFont13ASCII_0028
08068525 l     O .rodata	0000000d acFont13ASCII_0060
08068532 l     O .rodata	0000000d acFont13ASCII_0061
0806853f l     O .rodata	0000000d acFont13ASCII_0062
0806854c l     O .rodata	0000000d acFont13ASCII_0063
0806886e l     O .rodata	0000000d acFont13ASCII_0030
0806887b l     O .rodata	0000000d acFont13ASCII_0031
08068888 l     O .rodata	0000000d acFont13ASCII_0032
08068895 l     O .rodata	0000000d acFont13ASCII_0033
080688a2 l     O .rodata	0000000d acFont13ASCII_0034
080688af l     O .rodata	0000000d acFont13ASCII_0035
080688bc l     O .rodata	0000000d acFont13ASCII_0036
080688c9 l     O .rodata	0000000d acFont13ASCII_0037
080688d6 l     O .rodata	0000000d acFont13ASCII_0038
080688e3 l     O .rodata	0000000d acFont13ASCII_0039
080688f0 l     O .rodata	0000000d acFont13ASCII_003A
080688fd l     O .rodata	0000000d acFont13ASCII_003B
0806890a l     O .rodata	0000000d acFont13ASCII_003C
08068917 l     O .rodata	0000000d acFont13ASCII_003D
08068924 l     O .rodata	0000000d acFont13ASCII_003E
08068931 l     O .rodata	0000000d acFont13ASCII_003F
080689b3 l     O .rodata	0000001a acFont13ASCII_0040
080689cd l     O .rodata	0000000d acFont13ASCII_0041
080689da l     O .rodata	0000000d acFont13ASCII_0042
080689e7 l     O .rodata	0000000d acFont13ASCII_0043
080689f4 l     O .rodata	0000000d acFont13ASCII_0044
08068a01 l     O .rodata	0000000d acFont13ASCII_0045
08068a0e l     O .rodata	0000000d acFont13ASCII_0046
08068a1b l     O .rodata	0000000d acFont13ASCII_0047
08068a28 l     O .rodata	0000000d acFont13ASCII_0048
08068a35 l     O .rodata	0000000d acFont13ASCII_0049
08068a42 l     O .rodata	0000000d acFont13ASCII_004A
08068a4f l     O .rodata	0000000d acFont13ASCII_004B
08068a5c l     O .rodata	0000000d acFont13ASCII_004C
08068a69 l     O .rodata	0000000d acFont13ASCII_004D
08068a76 l     O .rodata	0000000d acFont13ASCII_004E
08068a83 l     O .rodata	0000000d acFont13ASCII_004F
08068854 l     O .rodata	0000000d acFont13ASCII_0064
08068861 l     O .rodata	0000000d acFont13ASCII_0065
08068a90 l     O .rodata	0000000d acFont13ASCII_0070
08068a9d l     O .rodata	0000000d acFont13ASCII_0071
08068aaa l     O .rodata	0000000d acFont13ASCII_0072
08068ab7 l     O .rodata	0000000d acFont13ASCII_0073
08068ac4 l     O .rodata	0000000d acFont13ASCII_0074
08068ad1 l     O .rodata	0000000d acFont13ASCII_0075
0806893e l     O .rodata	0000000d acFont13ASCII_0076
0806894b l     O .rodata	0000000d acFont13ASCII_0077
08068958 l     O .rodata	0000000d acFont13ASCII_0078
08068965 l     O .rodata	0000000d acFont13ASCII_0079
08068972 l     O .rodata	0000000d acFont13ASCII_007A
0806897f l     O .rodata	0000000d acFont13ASCII_007B
0806898c l     O .rodata	0000000d acFont13ASCII_007C
08068999 l     O .rodata	0000000d acFont13ASCII_007D
080689a6 l     O .rodata	0000000d acFont13ASCII_007E
00000000 l    df *ABS*	00000000 GUI__DivTbl_31_255.c
00000000 l    df *ABS*	00000000 GUI__DivTbl_255_31.c
00000000 l    df *ABS*	00000000 impure.c
200003e8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 TEXT.c
00000000 l    df *ABS*	00000000 LISTVIEW.c
00000000 l    df *ABS*	00000000 HEADER.c
00000000 l    df *ABS*	00000000 
08068c3c l       .fini_array	00000000 __fini_array_end
08068c30 l       .init_array	00000000 __preinit_array_start
20000810 l       .bss	00000000 __bss_start__
08068c30 l       .init_array	00000000 __preinit_array_end
20028954 l       .bss	00000000 __bss_end__
08068c38 l       .init_array	00000000 __init_array_end
08068c38 l       .fini_array	00000000 __fini_array_start
08068c30 l       .init_array	00000000 __init_array_start
08017a10 g     O .rodata	0000007d acGUI_FontLubalGraph32B_00CC
08038700 g     O .rodata	00000036 acGUI_FontLubalGraph16B_00BE
080585c0 g     O .rodata	00000036 acGUI_FontAvantGarde20B_03C0
0800e15c g     F .text	00000028 GUI_GetCharDistXEx
080365bc g     O .rodata	00000048 acGUI_FontLubalGraph20_0025
08038b40 g     O .rodata	0000001c acGUI_FontLubalGraph16B_006F
08015b9c g     O .rodata	000000b8 acGUI_FontLubalGraph32B_00FE
0804c458 g     O .rodata	0000008c acGUI_FontAvantGarde32_0036
080385ac g     O .rodata	00000037 acGUI_FontLubalGraph16B_00C4
080602e8 g     O .rodata	00000024 acGUI_FontAvantGarde16B_00F8
08023ee0 g     O .rodata	00000006 acGUI_FontLubalGraph32_0027
08017900 g     O .rodata	00000090 acGUI_FontLubalGraph32B_00CE
08039738 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop42
08025970 g     O .rodata	00000008 acGUI_FontLubalGraph24B_02DB
0802430c g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop29
08029634 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop17
0803acac g     O .rodata	0000001e acGUI_FontLubalGraph16_00EE
08029134 g     O .rodata	00000054 acGUI_FontLubalGraph24B_0034
0803e0e8 g     O .rodata	00000090 acGUI_FontAvantGarde32B_2020
0803657c g     O .rodata	00000004 acGUI_FontLubalGraph20_0027
08000f9c  w    F .text	00000038 Reset_Handler
080601a8 g     O .rodata	00000007 acGUI_FontAvantGarde16B_0131
08015d2c g     O .rodata	00000090 acGUI_FontLubalGraph32B_00FC
0804c354 g     O .rodata	0000008c acGUI_FontAvantGarde32_0038
08053b68 g     O .rodata	0000004b acGUI_FontAvantGarde24_0141
0802e20c g     O .rodata	00000070 acGUI_FontLubalGraph24_0040
08038620 g     O .rodata	0000003c acGUI_FontLubalGraph16B_00C2
08001d84 g     F .text	00000020 pxPortInitialiseStack
0802e080 g     O .rodata	00000062 acGUI_FontLubalGraph24_0044
08020ed8 g     O .rodata	000000ab acGUI_FontLubalGraph32_00B5
08033d10 g     O .rodata	00000030 acGUI_FontLubalGraph20_0141
08061098 g     O .rodata	00000027 acGUI_FontAvantGarde16B_007D
080242f4 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop27
0805690c g     O .rodata	00000069 acGUI_FontAvantGarde24_0043
0806149c g     O .rodata	00000028 acGUI_FontAvantGarde16B_0059
080290a4 g     O .rodata	00000046 acGUI_FontLubalGraph24B_0036
08027f58 g     O .rodata	00000062 acGUI_FontLubalGraph24B_0071
0802594c g     O .rodata	00000014 acGUI_FontLubalGraph24B_02DD
080327a4 g     O .rodata	00000be8 GUI_FontLubalGraph20_CharInfo
0802e148 g     O .rodata	00000054 acGUI_FontLubalGraph24_0042
08062eac g     O .rodata	00000003 acGUI_FontAvantGarde16_2019
08051064 g     O .rodata	00000054 acGUI_FontAvantGarde24B_0059
08020e50 g     O .rodata	00000003 acGUI_FontLubalGraph32_00B7
08061568 g     O .rodata	00000028 acGUI_FontAvantGarde16B_0055
0802fde0 g     O .rodata	00000038 acGUI_FontLubalGraph20B_0192
08023f94 g     O .rodata	000000be acGUI_FontLubalGraph32_0025
0804a6c8 g     O .rodata	00000062 acGUI_FontAvantGarde32_0075
0803781c g     O .rodata	0000000a acGUI_FontLubalGraph16B_2026
08056764 g     O .rodata	0000000f acGUI_FontAvantGarde24_0049
08001ed4  w    F .text	00000028 vPortSetupTimerInterrupt
0800081c g     F .text	00000002 GUI_X_Init
08005e7c g     F .text	0000001c WIDGET__GetYSize
08000fec  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
08031d18 g     O .rodata	00000042 acGUI_FontLubalGraph20B_004F
0801b2e8 g     O .rodata	0000000c acGUI_FontLubalGraph32B_002D
080323b8 g     O .rodata	00000003 acGUI_FontLubalGraph20B_002E
080614f8 g     O .rodata	0000003c acGUI_FontAvantGarde16B_0057
080474c4 g     O .rodata	00000069 acGUI_FontAvantGarde32_00F7
08000fec  w    F .text	00000002 TIM8_TRG_COM_TIM14_IRQHandler
08056874 g     O .rodata	0000003c acGUI_FontAvantGarde24_0045
08006120 g     F .text	0000000c TEXT_SetDefaultFont
08026b64 g     O .rodata	00000070 acGUI_FontLubalGraph24B_00D8
0805cba0 g     O .rodata	00000027 acGUI_FontAvantGarde20_00EC
0802964c g     O .rodata	0000000c GUI_FontLubalGraph24_Prop19
0803e014 g     O .rodata	00000028 acGUI_FontAvantGarde32B_2026
0803a768 g     O .rodata	00000003 acGUI_FontLubalGraph16_2019
080567c0 g     O .rodata	00000078 acGUI_FontAvantGarde24_0047
080020b4 g     F .text	0000004c xTimerCreateTimerTask
0801b23c g     O .rodata	000000a1 acGUI_FontLubalGraph32B_002F
0805eecc g     O .rodata	00000be8 GUI_FontAvantGarde16B_CharInfo
08031da0 g     O .rodata	00000058 acGUI_FontLubalGraph20B_004D
080473b0 g     O .rodata	00000093 acGUI_FontAvantGarde32_00F9
080161fc g     O .rodata	00000093 acGUI_FontLubalGraph32B_00F3
08018978 g     O .rodata	0000001c acGUI_FontLubalGraph32B_00B0
0801963c g     O .rodata	00000045 acGUI_FontLubalGraph32B_006A
08063104 g     O .rodata	0000001e acGUI_FontAvantGarde16_0141
080291d0 g     O .rodata	00000046 acGUI_FontLubalGraph24B_0032
0801b304 g     O .rodata	0000005b acGUI_FontLubalGraph32B_002B
080061c8 g     F .text	00000010 HEADER_SetDefaultTextColor
08036010 g     O .rodata	00000048 acGUI_FontLubalGraph20_0047
0805a628 g     O .rodata	00000030 acGUI_FontAvantGarde20B_0055
080644fc g     O .rodata	0000001e acGUI_FontAvantGarde16_004A
080160ec g     O .rodata	00000085 acGUI_FontLubalGraph32B_00F5
08036100 g     O .rodata	00000048 acGUI_FontLubalGraph20_0043
080188f8 g     O .rodata	0000002c acGUI_FontLubalGraph32B_00B2
08037994 g     O .rodata	00000021 acGUI_FontLubalGraph16B_0192
08029250 g     O .rodata	00000046 acGUI_FontLubalGraph24B_0030
08038f50 g     O .rodata	0000002d acGUI_FontLubalGraph16B_004F
08035fa4 g     O .rodata	00000024 acGUI_FontLubalGraph20_0049
08046588 g     O .rodata	00000096 acGUI_FontAvantGarde32_2021
0803a7f4 g     O .rodata	00000006 acGUI_FontLubalGraph16_02DC
0805a134 g     O .rodata	0000003c acGUI_FontAvantGarde20B_0070
20000068 g     O .data	00000030 LISTVIEW_DefaultProps
0805a688 g     O .rodata	00000030 acGUI_FontAvantGarde20B_0053
0803a800 g     O .rodata	00000006 acGUI_FontLubalGraph16_02DA
0801d09c g     O .rodata	0000001e acGUI_FontLubalGraph32_203A
08036544 g     O .rodata	0000001c acGUI_FontLubalGraph20_0029
080537fc g     O .rodata	00000008 acGUI_FontAvantGarde24_02DA
08016324 g     O .rodata	00000098 acGUI_FontLubalGraph32B_00F1
08051338 g     O .rodata	00000070 acGUI_FontAvantGarde24B_0051
0805cb48 g     O .rodata	00000030 acGUI_FontAvantGarde20_00EE
0805b1b0 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop40
080393f8 g     O .rodata	00000002 acGUI_FontLubalGraph16B_002E
08062f40 g     O .rodata	00000009 acGUI_FontAvantGarde16_02DC
08038fb0 g     O .rodata	00000036 acGUI_FontLubalGraph16B_004D
0803b8c4 g     O .rodata	00000015 acGUI_FontLubalGraph16_007A
08002c00 g     F .text	00000006 vListInitialiseItem
080537e8 g     O .rodata	0000000c acGUI_FontAvantGarde24_02DC
0805129c g     O .rodata	00000046 acGUI_FontAvantGarde24B_0053
08064458 g     O .rodata	00000028 acGUI_FontAvantGarde16_004E
0801d0bc g     O .rodata	00000014 acGUI_FontLubalGraph32_2039
0802acec g     O .rodata	0000000f acGUI_FontLubalGraph24_02DD
08011e62 g     F .text	0000005c GUI__memset16
0802dff0 g     O .rodata	00000046 acGUI_FontLubalGraph24_0046
0803b89c g     O .rodata	0000000d acGUI_FontLubalGraph16_007C
0804e67c g     O .rodata	0000003c acGUI_FontAvantGarde24B_0161
08062f54 g     O .rodata	00000006 acGUI_FontAvantGarde16_02DA
08003590 g     F .text	00000018 HAL_NVIC_EnableIRQ
080063a0 g     F .text	00000220 DROPDOWN_DrawSkinFlex
08007574 g     F .text	00000038 WM_GetWindowSizeY
0801975c g     O .rodata	00000098 acGUI_FontLubalGraph32B_0067
08036088 g     O .rodata	00000030 acGUI_FontLubalGraph20_0045
080639ac g     O .rodata	00000024 acGUI_FontAvantGarde16_00C8
08066ef4 g     O .rodata	00000034 GUIDRV_Lin_16_API
0800d004 g     F .text	00000030 GUI_MULTIBUF_ConfirmEx
08013150 g     F .text	00000050 GUI_CalcColorDist
0803c198 g     O .rodata	00000007 acGUI_FontLubalGraph16_003B
080644b4 g     O .rodata	0000001e acGUI_FontAvantGarde16_004C
080572a4 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop29
0800d99c g     F .text	00000004 GUI_DEVICE_Unlink
0802bfd8 g     O .rodata	0000007e acGUI_FontLubalGraph24_00D6
0802ad08 g     O .rodata	00000008 acGUI_FontLubalGraph24_02DB
08005dee g     F .text	00000024 WIDGET__RotateRect90
08044ae8 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop11
0803a778 g     O .rodata	00000004 acGUI_FontLubalGraph16_2013
08022c8c g     O .rodata	000000d1 acGUI_FontLubalGraph32_004E
0803b87c g     O .rodata	00000008 acGUI_FontLubalGraph16_007E
08019684 g     O .rodata	00000048 acGUI_FontLubalGraph32B_0069
080335f8 g     O .rodata	00000054 acGUI_FontLubalGraph20_220F
080566a0 g     O .rodata	0000003c acGUI_FontAvantGarde24_004C
0805495c g     O .rodata	00000032 acGUI_FontAvantGarde24_00D7
08039720 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop40
0802c0d8 g     O .rodata	0000007e acGUI_FontLubalGraph24_00D4
08044b00 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop13
08022e58 g     O .rodata	00000085 acGUI_FontLubalGraph32_004C
0803ae50 g     O .rodata	00000028 acGUI_FontLubalGraph16_00E3
0805c27c g     O .rodata	00000030 acGUI_FontAvantGarde20_2044
0802fbf4 g     O .rodata	00000015 acGUI_FontLubalGraph20B_2026
0801b4d8 g     O .rodata	000000b4 acGUI_FontLubalGraph32B_0025
0803bc20 g     O .rodata	0000001c acGUI_FontLubalGraph16_005E
0803aea0 g     O .rodata	0000002c acGUI_FontLubalGraph16_00E1
08019aa0 g     O .rodata	00000018 acGUI_FontLubalGraph32B_0060
0803bc54 g     O .rodata	0000001e acGUI_FontLubalGraph16_005C
080325e8 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop7
080565cc g     O .rodata	0000005a acGUI_FontAvantGarde24_004E
08054884 g     O .rodata	0000005f acGUI_FontAvantGarde24_00D9
0800c7c0 g     F .text	0000001a GUI__AllocAlphaBuffer
08012f1c g     F .text	00000018 GUIMONO_GetCharDistX
08046c90 g     O .rodata	00000090 acGUI_FontAvantGarde32_0160
080035a8 g     F .text	0000002c HAL_SYSTICK_Config
0801cf2c g     O .rodata	00000078 acGUI_FontLubalGraph32_2113
0801b424 g     O .rodata	0000000e acGUI_FontLubalGraph32B_0027
0805eddc g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop24
0800833c g     F .text	00000118 WM_DeleteWindow
080586b0 g     O .rodata	00000006 acGUI_FontAvantGarde20B_02C9
08064550 g     O .rodata	00000032 acGUI_FontAvantGarde16_0047
080199a0 g     O .rodata	00000090 acGUI_FontLubalGraph32B_0062
0805edf4 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop26
0805dac0 g     O .rodata	00000012 acGUI_FontAvantGarde20_00AB
0805a4cc g     O .rodata	00000030 acGUI_FontAvantGarde20B_005A
08013254 g     F .text	000000c6 memmove
0800b518 g     F .text	00000030 LCD_SetLUTEntryEx
0800b784 g     F .text	00000010 LCD_SetDrawMode
20000098 g     O .data	00000014 HEADER__DefaultProps
0805ccc8 g     O .rodata	0000003c acGUI_FontAvantGarde20_00E7
08009944 g     F .text	00000104 GUI_MEMDEV__CreateFixed
080586b8 g     O .rodata	0000000c acGUI_FontAvantGarde20B_02C7
0802aeb8 g     O .rodata	0000003c acGUI_FontLubalGraph24_0161
080325d0 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop5
0803e73c g     O .rodata	00000078 acGUI_FontAvantGarde32B_0161
0802cce8 g     O .rodata	00000018 acGUI_FontLubalGraph24_00B2
0805cdd8 g     O .rodata	0000003c acGUI_FontAvantGarde20_00E3
08046820 g     O .rodata	000000b4 acGUI_FontAvantGarde32_03A9
0805daa8 g     O .rodata	00000003 acGUI_FontAvantGarde20_00AD
08036184 g     O .rodata	00000054 acGUI_FontLubalGraph20_0041
080325a0 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop1
08000fec g       .text	00000002 Default_Handler
0805cc40 g     O .rodata	00000041 acGUI_FontAvantGarde20_00E9
08007228 g     F .text	00000012 WM_ReleaseCapture
08037714 g     O .rodata	0000002d acGUI_FontLubalGraph16B_2126
0805c434 g     O .rodata	00000030 acGUI_FontAvantGarde20_03BC
0801c7f0 g     O .rodata	00000069 acGUI_FontLubalGraph32_2260
08003b70 g     F .text	00000034 HAL_LTDC_ProgramLineEvent
0804ce18 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop32
200287c8 g     O .bss	00000004 WM__hCreateStatic
08044b48 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop19
0805a580 g     O .rodata	00000060 acGUI_FontAvantGarde20B_0057
08061c5c g     O .rodata	00000024 GUI_FontAvantGarde16
0802ccc0 g     O .rodata	0000000c acGUI_FontLubalGraph24_00B4
0804ce90 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop42
0805da50 g     O .rodata	00000003 acGUI_FontAvantGarde20_00AF
0804ce30 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop34
0804eb1c g     O .rodata	0000004e acGUI_FontAvantGarde24B_00F8
0804f7a4 g     O .rodata	00000090 acGUI_FontAvantGarde24B_00D5
080503f0 g     O .rodata	00000020 acGUI_FontAvantGarde24B_00B3
0805a4fc g     O .rodata	0000003c acGUI_FontAvantGarde20B_0059
0803c4f0 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop9
08053804 g     O .rodata	00000003 acGUI_FontAvantGarde24_02D9
0801b618 g     O .rodata	0000007e acGUI_FontLubalGraph32B_0023
0805fd48 g     O .rodata	00000032 acGUI_FontAvantGarde16B_2126
0803e03c g     O .rodata	0000001c acGUI_FontAvantGarde32B_2022
08063870 g     O .rodata	00000030 acGUI_FontAvantGarde16_00D1
0802df28 g     O .rodata	00000062 acGUI_FontLubalGraph24_0048
08000c38 g     F .text	000001dc LCD_X_Config
08037860 g     O .rodata	0000002c acGUI_FontLubalGraph16B_2020
0804f6e0 g     O .rodata	00000032 acGUI_FontAvantGarde24B_00D7
0800b68c g     F .text	00000010 GUI_GetpfIndex2ColorEx
0804eba8 g     O .rodata	0000005a acGUI_FontAvantGarde24B_00F6
0804e3ac g     O .rodata	00000009 acGUI_FontAvantGarde24B_2010
0801b6b4 g     O .rodata	00000024 acGUI_FontLubalGraph32B_0021
080130a6 g     F .text	0000000e LCD_GetPixelColor
080014b4 g     F .text	000000f0 xTaskResumeAll
08037828 g     O .rodata	0000000a acGUI_FontLubalGraph16B_2022
200287cc g     O .bss	00000008 WM__aBkColor
08049a34 g     O .rodata	000000c8 acGUI_FontAvantGarde32_00BD
080339b0 g     O .rodata	0000002d acGUI_FontLubalGraph20_03C0
08050428 g     O .rodata	00000037 acGUI_FontAvantGarde24B_00B1
0800cf80 g     F .text	00000010 GUI_MULTIBUF_Begin
08034bcc g     O .rodata	0000003c acGUI_FontLubalGraph20_00CB
0805edac g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop20
080588f4 g     O .rodata	00000024 acGUI_FontAvantGarde20B_0142
0801f8ac g     O .rodata	000000f0 acGUI_FontLubalGraph32_00D5
08004b2c g     F .text	00000038 EndIdleMonitor
08064640 g     O .rodata	00000032 acGUI_FontAvantGarde16_0041
08049bc4 g     O .rodata	00000028 acGUI_FontAvantGarde32_00BB
20028824 g     O .bss	00000004 GUI_AA__ClipX0
0803f828 g     O .rodata	000000a0 acGUI_FontAvantGarde32B_00E7
08052e54 g     O .rodata	0000003c acGUI_FontAvantGarde24_FB02
08006262 g     F .text	00000030 GUI_ARRAY__GethItem
08062ebc g     O .rodata	00000003 acGUI_FontAvantGarde16_2013
08041f98 g     O .rodata	00000066 acGUI_FontAvantGarde32B_00A2
0803c4d8 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop7
080571b4 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop9
0805edc4 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop22
08004584 g     F .text	0000007c BSP_SDRAM_Init
08015798 g     O .rodata	000000a8 acGUI_FontLubalGraph32B_0160
0805208c g     O .rodata	0000000c GUI_FontAvantGarde24_Prop10
08013054 g     F .text	00000028 WM__IsChild
0800dd62 g     F .text	00000010 GUIPROP_EXT_IsInFont
08062c38 g     O .rodata	00000037 acGUI_FontAvantGarde16_220F
080335a8 g     O .rodata	00000005 acGUI_FontLubalGraph20_2212
0801f5bc g     O .rodata	000000e1 acGUI_FontLubalGraph32_00D9
08044c68 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop43
08027e64 g     O .rodata	0000003c acGUI_FontLubalGraph24B_0076
080520a4 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop12
0804ea28 g     O .rodata	0000004b acGUI_FontAvantGarde24B_00FB
08041e88 g     O .rodata	00000078 acGUI_FontAvantGarde32B_00A4
0802ea78 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop31
0805cd58 g     O .rodata	00000041 acGUI_FontAvantGarde20_00E5
0805101c g     O .rodata	00000046 acGUI_FontAvantGarde24B_005A
08002c1e g     F .text	00000030 vListInsert
08061e3c g     O .rodata	0000000c GUI_FontAvantGarde16_Prop38
0803f6d8 g     O .rodata	000000a8 acGUI_FontAvantGarde32B_00E9
20000258 g     O .data	0000000c BUTTON__Skin
08000fec  w    F .text	00000002 UART7_IRQHandler
08061ddc g     O .rodata	0000000c GUI_FontAvantGarde16_Prop30
0805e298 g     O .rodata	00000060 acGUI_FontAvantGarde20_0057
0803bd1c g     O .rodata	00000046 acGUI_FontLubalGraph16_0057
08028fcc g     O .rodata	00000046 acGUI_FontLubalGraph24B_0039
08027edc g     O .rodata	0000002a acGUI_FontLubalGraph24B_0074
0805e160 g     O .rodata	00000018 acGUI_FontAvantGarde20_005E
0805ce50 g     O .rodata	00000041 acGUI_FontAvantGarde20_00E1
0801f774 g     O .rodata	00000048 acGUI_FontLubalGraph32_00D7
0800e11c g     F .text	0000001c GUI_GetFontDistY
0804e964 g     O .rodata	00000078 acGUI_FontAvantGarde24B_00FD
08050f94 g     O .rodata	00000050 acGUI_FontAvantGarde24B_005C
0803b74c g     O .rodata	00000002 acGUI_FontLubalGraph16_00AD
0803b714 g     O .rodata	00000003 acGUI_FontLubalGraph16_00AF
0805e220 g     O .rodata	0000003c acGUI_FontAvantGarde20_0059
0804e180 g     O .rodata	0000000e acGUI_FontAvantGarde24B_203A
08036740 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop12
08058a74 g     O .rodata	00000030 acGUI_FontAvantGarde20B_00FB
080259c4 g     O .rodata	00000055 acGUI_FontLubalGraph24B_0192
0801fa98 g     O .rodata	000000fa acGUI_FontLubalGraph32_00D3
0803bcb4 g     O .rodata	00000032 acGUI_FontLubalGraph16_0059
0800cc50 g     F .text	00000020 GUI_SetLayerPosEx
0803c4c0 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop5
0805e198 g     O .rodata	00000038 acGUI_FontAvantGarde20_005C
08050180 g     O .rodata	0000007e acGUI_FontAvantGarde24B_00BE
080268e4 g     O .rodata	00000078 acGUI_FontLubalGraph24B_00DD
0802fa5c g     O .rodata	00000042 acGUI_FontLubalGraph20B_2126
08062c70 g     O .rodata	00000028 acGUI_FontAvantGarde16_2206
0805a41c g     O .rodata	00000018 acGUI_FontAvantGarde20B_005E
200002d0 g     O .data	00000004 GUI_CharLine_pfLog2Vis
080589ec g     O .rodata	00000055 acGUI_FontAvantGarde20B_00FD
08036758 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop14
08027cdc g     O .rodata	00000030 acGUI_FontLubalGraph24B_007D
08027328 g     O .rodata	00000098 acGUI_FontLubalGraph24B_00C5
0801b784 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop12
080585b8 g     O .rodata	00000006 acGUI_FontAvantGarde20B_2010
080520ec g     O .rodata	0000000c GUI_FontAvantGarde24_Prop18
0803c4a8 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop3
08000fec  w    F .text	00000002 RNG_IRQHandler
0805dc6c g     O .rodata	00000001 acGUI_FontAvantGarde20_00A0
0802683c g     O .rodata	00000054 acGUI_FontLubalGraph24B_00DF
0803bd98 g     O .rodata	00000028 acGUI_FontLubalGraph16_0055
080137b4 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop42
0801c780 g     O .rodata	00000070 acGUI_FontLubalGraph32_2264
08047a38 g     O .rodata	00000054 acGUI_FontAvantGarde32_00ED
0803b764 g     O .rodata	0000000a acGUI_FontLubalGraph16_00AB
0805b018 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop6
0801379c g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop40
08040950 g     O .rodata	00000078 acGUI_FontAvantGarde32B_00CF
0801ffec g     O .rodata	000000a8 acGUI_FontLubalGraph32_00CB
08050398 g     O .rodata	0000004b acGUI_FontAvantGarde24B_00B5
08027220 g     O .rodata	00000085 acGUI_FontLubalGraph24B_00C7
0805b000 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop4
0804f8c4 g     O .rodata	00000098 acGUI_FontAvantGarde24B_00D3
0801fc90 g     O .rodata	00000108 acGUI_FontLubalGraph32_00D1
0801b79c g     O .rodata	0000000c GUI_FontLubalGraph32_Prop14
08018768 g     O .rodata	00000018 acGUI_FontLubalGraph32B_00B8
08060464 g     O .rodata	0000001e acGUI_FontAvantGarde16B_00EE
08013140 g     F .text	00000010 LCD_GetColorIndex
080444b0 g     O .rodata	00000085 acGUI_FontAvantGarde32B_0030
08034df4 g     O .rodata	00000069 acGUI_FontLubalGraph20_00C4
08000fec  w    F .text	00000002 SPDIF_RX_IRQHandler
0803bde8 g     O .rodata	0000001e acGUI_FontLubalGraph16_0053
0800727a g     F .text	00000108 WM_ResizeWindow
08047848 g     O .rodata	00000085 acGUI_FontAvantGarde32_00F1
08046a38 g     O .rodata	00000078 acGUI_FontAvantGarde32_017E
080049e0 g     F .text	0000004c BSP_LED_Init
08006768 g     F .text	0000000c CHOOSEFILE_SetDelim
08058954 g     O .rodata	0000004b acGUI_FontAvantGarde20B_00FF
08060f94 g     O .rodata	00000006 acGUI_FontAvantGarde16B_00A8
08050f38 g     O .rodata	00000023 acGUI_FontAvantGarde24B_005E
0801b7cc g     O .rodata	0000000c GUI_FontLubalGraph32_Prop18
0806365c g     O .rodata	00000024 acGUI_FontAvantGarde16_00DC
080604e8 g     O .rodata	00000028 acGUI_FontAvantGarde16B_00EA
08049c5c g     O .rodata	000000a1 acGUI_FontAvantGarde32_00B6
08050330 g     O .rodata	00000006 acGUI_FontAvantGarde24B_00B7
0804f9f4 g     O .rodata	0000006c acGUI_FontAvantGarde24B_00D1
08031374 g     O .rodata	0000000c acGUI_FontLubalGraph20B_00AB
0801b7b4 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop16
0805dbc8 g     O .rodata	0000002d acGUI_FontAvantGarde20_00A4
0800d2a4 g     F .text	00000050 GUI_DrawVLine
08015024 g     O .rodata	00000093 acGUI_FontLubalGraph32B_2021
08034d24 g     O .rodata	00000060 acGUI_FontLubalGraph20_00C6
08037564 g     O .rodata	00000015 acGUI_FontLubalGraph16B_2260
0802705c g     O .rodata	00000050 acGUI_FontLubalGraph24B_00CC
0801fe44 g     O .rodata	00000060 acGUI_FontLubalGraph32_00CF
20008404 g     O .bss	00000004 osCPU_TotalIdleTime
080422e0 g     O .rodata	0000009a acGUI_FontAvantGarde32B_0077
08021620 g     O .rodata	00000054 acGUI_FontLubalGraph32_007A
080259a0 g     O .rodata	00000008 acGUI_FontLubalGraph24B_02C9
0805202c g     O .rodata	0000000c GUI_FontAvantGarde24_Prop2
0806049c g     O .rodata	00000021 acGUI_FontAvantGarde16B_00EC
0805afe8 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop2
0804e190 g     O .rodata	0000000e acGUI_FontAvantGarde24B_2039
0805fdf0 g     O .rodata	0000001e acGUI_FontAvantGarde16B_2044
0803be30 g     O .rodata	0000003c acGUI_FontLubalGraph16_0051
0802961c g     O .rodata	0000000c GUI_FontLubalGraph24_Prop15
0802fc54 g     O .rodata	00000034 acGUI_FontLubalGraph20B_2020
080270fc g     O .rodata	0000005a acGUI_FontLubalGraph24B_00CA
08058804 g     O .rodata	0000003c acGUI_FontAvantGarde20B_0160
0803b7b4 g     O .rodata	00000004 acGUI_FontLubalGraph16_00A8
0802518c g     O .rodata	00000023 acGUI_FontLubalGraph24B_2248
0805dc34 g     O .rodata	00000028 acGUI_FontAvantGarde20_00A2
0803145c g     O .rodata	0000002d acGUI_FontLubalGraph20B_00A4
08030540 g     O .rodata	00000041 acGUI_FontLubalGraph20B_00E9
080421e8 g     O .rodata	00000085 acGUI_FontAvantGarde32B_0079
0805a464 g     O .rodata	00000038 acGUI_FontAvantGarde20B_005C
080259a8 g     O .rodata	0000000c acGUI_FontLubalGraph24B_02C7
08034c84 g     O .rodata	00000040 acGUI_FontLubalGraph20_00C8
08047970 g     O .rodata	00000050 acGUI_FontAvantGarde32_00EF
08008d0c g     F .text	00000060 GUI_MEMDEV_SetOrg
0805c578 g     O .rodata	0000003c acGUI_FontAvantGarde20_017D
0804c878 g     O .rodata	0000005b acGUI_FontAvantGarde32_002B
08061e24 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop36
08058e10 g     O .rodata	0000003c acGUI_FontAvantGarde20B_00EA
0802ea54 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop28
08047ae0 g     O .rodata	0000008c acGUI_FontAvantGarde32_00EB
08050314 g     O .rodata	00000012 acGUI_FontAvantGarde24B_00B9
08042028 g     O .rodata	00000001 acGUI_FontAvantGarde32B_00A0
0802fc0c g     O .rodata	00000012 acGUI_FontLubalGraph20B_2022
0803f98c g     O .rodata	000000a8 acGUI_FontAvantGarde32B_00E5
08031414 g     O .rodata	0000000d acGUI_FontLubalGraph20B_00A6
08031c38 g     O .rodata	0000002c acGUI_FontLubalGraph20B_0053
08037744 g     O .rodata	0000001e acGUI_FontLubalGraph16B_2122
0803b878 g     O .rodata	00000001 acGUI_FontLubalGraph16_00A0
080571d8 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop12
08043f10 g     O .rodata	0000003f acGUI_FontAvantGarde32B_003D
08024318 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop30
08028f10 g     O .rodata	00000037 acGUI_FontLubalGraph24B_003E
08027560 g     O .rodata	000000a0 acGUI_FontLubalGraph24B_00C1
08042194 g     O .rodata	00000054 acGUI_FontAvantGarde32B_007A
0802ea3c g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop26
0805cc04 g     O .rodata	0000003c acGUI_FontAvantGarde20_00EA
08046278 g     O .rodata	0000007e acGUI_FontAvantGarde32_2113
08029604 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop13
0805b174 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop35
0803b810 g     O .rodata	00000015 acGUI_FontLubalGraph16_00A4
08006e9c g     F .text	0000000c WM__IsAncestorOrSelf
08007e50 g     F .text	00000050 WM__InvalidateDrawAndDescs
08012c3c g     F .text	00000084 GUI_GetBitmapPixelIndexEx
0803fad4 g     O .rodata	000000a0 acGUI_FontAvantGarde32B_00E3
08049e5c g     O .rodata	00000020 acGUI_FontAvantGarde32_00B0
080571f0 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop14
0803754c g     O .rodata	00000018 acGUI_FontLubalGraph16B_2264
080241f8 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop6
0806451c g     O .rodata	0000000a acGUI_FontAvantGarde16_0049
08043fbc g     O .rodata	00000030 acGUI_FontAvantGarde32B_003B
0803b850 g     O .rodata	0000001b acGUI_FontLubalGraph16_00A2
080598cc g     O .rodata	00000060 acGUI_FontAvantGarde20B_00C3
08027d20 g     O .rodata	00000030 acGUI_FontLubalGraph24B_007B
08027440 g     O .rodata	00000090 acGUI_FontLubalGraph24B_00C3
080541c8 g     O .rodata	00000030 acGUI_FontAvantGarde24_00ED
08024330 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop32
0805fd7c g     O .rodata	00000024 acGUI_FontAvantGarde16B_2122
0803750c g     O .rodata	00000028 acGUI_FontLubalGraph16B_25CA
08061004 g     O .rodata	00000028 acGUI_FontAvantGarde16B_00A4
08034b00 g     O .rodata	0000002d acGUI_FontLubalGraph20_00CF
08031974 g     O .rodata	00000037 acGUI_FontLubalGraph20B_0062
0804c864 g     O .rodata	00000008 acGUI_FontAvantGarde32_002D
080295ec g     O .rodata	0000000c GUI_FontLubalGraph24_Prop11
080034e4 g     F .text	00000018 HAL_GPIO_EXTI_IRQHandler
08023c68 g     O .rodata	00000085 acGUI_FontLubalGraph32_0030
08032654 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop16
0805c3c4 g     O .rodata	00000009 acGUI_FontAvantGarde20_201D
08024348 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop34
0803680c g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop29
08058570 g     O .rodata	0000000c acGUI_FontAvantGarde20B_201D
080520bc g     O .rodata	0000000c GUI_FontAvantGarde24_Prop14
0803266c g     O .rodata	0000000c GUI_FontLubalGraph20_Prop18
08060f48 g     O .rodata	0000000f acGUI_FontAvantGarde16B_00AB
08040a58 g     O .rodata	00000064 acGUI_FontAvantGarde32B_00CD
080645ec g     O .rodata	00000032 acGUI_FontAvantGarde16_0043
0805b15c g     O .rodata	0000000c GUI_FontAvantGarde20_Prop33
080636a4 g     O .rodata	00000024 acGUI_FontAvantGarde16_00DA
08060f34 g     O .rodata	00000004 acGUI_FontAvantGarde16B_00AD
08055738 g     O .rodata	00000015 acGUI_FontAvantGarde24_00AA
0805414c g     O .rodata	0000002d acGUI_FontAvantGarde24_00EF
08059988 g     O .rodata	00000060 acGUI_FontAvantGarde20B_00C1
0800dc38 g     F .text	00000024 GUI__RegisterExit
08038cc0 g     O .rodata	00000024 acGUI_FontLubalGraph16B_0062
0806360c g     O .rodata	0000001e acGUI_FontAvantGarde16_00DE
08028f64 g     O .rodata	00000037 acGUI_FontLubalGraph24B_003C
080442bc g     O .rodata	00000098 acGUI_FontAvantGarde32B_0034
080319d4 g     O .rodata	0000000c acGUI_FontLubalGraph20B_0060
08034b6c g     O .rodata	00000030 acGUI_FontLubalGraph20_00CD
080585a0 g     O .rodata	00000010 acGUI_FontAvantGarde20B_2014
08038ea8 g     O .rodata	0000001b acGUI_FontLubalGraph16B_0053
08024360 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop36
08037ea8 g     O .rodata	0000002c acGUI_FontLubalGraph16B_00E9
08031c9c g     O .rodata	0000004d acGUI_FontLubalGraph20B_0051
08038d00 g     O .rodata	00000008 acGUI_FontLubalGraph16B_0060
08067f00 g     O .rodata	0000000c GUI_Font16ASCIIProp1
0803fc14 g     O .rodata	000000a8 acGUI_FontAvantGarde32B_00E1
08040b20 g     O .rodata	00000090 acGUI_FontAvantGarde32B_00CB
0803044c g     O .rodata	00000030 acGUI_FontLubalGraph20B_00EE
08055704 g     O .rodata	00000019 acGUI_FontAvantGarde24_00AC
080498e4 g     O .rodata	00000072 acGUI_FontAvantGarde32_00BF
0805c5b4 g     O .rodata	0000004b acGUI_FontAvantGarde20_0178
0802b818 g     O .rodata	0000005a acGUI_FontLubalGraph24_00E9
08060ef8 g     O .rodata	00000006 acGUI_FontAvantGarde16B_00AF
080645a4 g     O .rodata	0000001e acGUI_FontAvantGarde16_0045
08028fb8 g     O .rodata	00000014 acGUI_FontLubalGraph24B_003A
08031914 g     O .rodata	00000037 acGUI_FontLubalGraph20B_0064
0804ab28 g     O .rodata	0000004b acGUI_FontAvantGarde32_006A
080219f0 g     O .rodata	000000ab acGUI_FontLubalGraph32_0071
08062f5c g     O .rodata	00000002 acGUI_FontAvantGarde16_02D9
0803263c g     O .rodata	0000000c GUI_FontLubalGraph20_Prop14
0800279c g     F .text	00000068 xQueueCreateMutex
0802b8d0 g     O .rodata	0000005a acGUI_FontLubalGraph24_00E7
08038ef4 g     O .rodata	00000036 acGUI_FontLubalGraph16B_0051
080443dc g     O .rodata	00000085 acGUI_FontAvantGarde32B_0032
080207ac g     O .rodata	00000113 acGUI_FontLubalGraph32_00C2
080440a0 g     O .rodata	00000085 acGUI_FontAvantGarde32B_0038
08027dd8 g     O .rodata	0000003c acGUI_FontLubalGraph24B_0078
080318c8 g     O .rodata	00000021 acGUI_FontLubalGraph20B_0066
0801ff24 g     O .rodata	00000064 acGUI_FontLubalGraph32_00CD
0802a360 g     O .rodata	00000046 acGUI_FontLubalGraph24_FFFF
08010284 g     F .text	0000002c WM__RemoveCriticalHandle
08000fec  w    F .text	00000002 EXTI1_IRQHandler
08051d70 g     O .rodata	0000000a acGUI_FontAvantGarde24B_002C
0804419c g     O .rodata	00000098 acGUI_FontAvantGarde32B_0036
08030160 g     O .rodata	0000003c acGUI_FontLubalGraph20B_00FB
080520d4 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop16
08000fec  w    F .text	00000002 SPI4_IRQHandler
0802b990 g     O .rodata	00000069 acGUI_FontLubalGraph24_00E5
0802ce88 g     O .rodata	00000009 acGUI_FontLubalGraph24_00A8
0802b6bc g     O .rodata	0000004b acGUI_FontLubalGraph24_00EE
0800cff4 g     F .text	00000010 GUI_MULTIBUF_End
08058598 g     O .rodata	00000008 acGUI_FontAvantGarde20B_2018
08038944 g     O .rodata	00000018 acGUI_FontLubalGraph16B_00A4
080388a4 g     O .rodata	0000000a acGUI_FontLubalGraph16B_00AB
0804e3b8 g     O .rodata	00000042 acGUI_FontAvantGarde24B_03C0
08042520 g     O .rodata	00000098 acGUI_FontAvantGarde32B_0071
08000fec  w    F .text	00000002 TIM5_IRQHandler
080313d8 g     O .rodata	00000006 acGUI_FontLubalGraph20B_00A8
20000038 g     O .data	00000004 WINDOW__DefaultBkColor
08006774 g     F .text	00000234 BUTTON_DrawSkinFlex
08059d14 g     O .rodata	00000012 acGUI_FontAvantGarde20B_00AB
08037de8 g     O .rodata	0000001e acGUI_FontLubalGraph16B_00EE
0804e89c g     O .rodata	0000005a acGUI_FontAvantGarde24B_00FF
0800d9a0 g     F .text	00000074 GUI_DEVICE_Link
0800bde0 g     F .text	00000018 LCD_SetBkColorIndex
080502fc g     O .rodata	00000015 acGUI_FontAvantGarde24B_00BA
08038c80 g     O .rodata	00000024 acGUI_FontLubalGraph16B_0064
0804cc50 g     O .rodata	00000018 acGUI_FontAvantGarde32_0022
08061e0c g     O .rodata	0000000c GUI_FontAvantGarde16_Prop34
08061df4 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop32
080241c8 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop2
08000fec  w    F .text	00000002 LPTIM1_IRQHandler
08038914 g     O .rodata	0000000b acGUI_FontLubalGraph16B_00A6
08013110 g     F .text	0000001e LCD_GetNumLayers
08050270 g     O .rodata	00000070 acGUI_FontAvantGarde24B_00BC
08059cf8 g     O .rodata	00000006 acGUI_FontAvantGarde20B_00AD
0804af18 g     O .rodata	00000070 acGUI_FontAvantGarde32_0061
080423e0 g     O .rodata	00000054 acGUI_FontAvantGarde32B_0075
080596d0 g     O .rodata	00000040 acGUI_FontAvantGarde20B_00C9
0802059c g     O .rodata	00000108 acGUI_FontLubalGraph32_00C4
08003a64 g     F .text	00000030 HAL_LTDC_EnableDither
0802cd44 g     O .rodata	00000012 acGUI_FontLubalGraph24_00B0
0802f780 g     O .rodata	00000034 acGUI_FontLubalGraph20B_25CA
080571c0 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop10
08059810 g     O .rodata	00000060 acGUI_FontAvantGarde20B_00C5
0803d5c4 g     O .rodata	0000003f acGUI_FontAvantGarde32B_2248
08025c40 g     O .rodata	0000008c acGUI_FontLubalGraph24B_0152
0802de50 g     O .rodata	00000062 acGUI_FontLubalGraph24_004B
08038c50 g     O .rodata	00000012 acGUI_FontLubalGraph16B_0066
08059268 g     O .rodata	00000040 acGUI_FontAvantGarde20B_00D9
08042494 g     O .rodata	00000054 acGUI_FontAvantGarde32B_0073
0802f804 g     O .rodata	00000020 acGUI_FontLubalGraph20B_2260
08030224 g     O .rodata	00000032 acGUI_FontLubalGraph20B_00F8
0803b7dc g     O .rodata	0000000b acGUI_FontLubalGraph16_00A6
0805c3f4 g     O .rodata	00000008 acGUI_FontAvantGarde20_2014
08031308 g     O .rodata	00000006 acGUI_FontLubalGraph20B_00AF
08062ec4 g     O .rodata	0000001c acGUI_FontAvantGarde16_03C0
0803a9e4 g     O .rodata	00000034 acGUI_FontLubalGraph16_00FF
08067058 g     O .rodata	00000018 LCD_API_ColorConv_8888
0801dc20 g     O .rodata	00000085 acGUI_FontLubalGraph32_0141
08054228 g     O .rodata	0000004b acGUI_FontAvantGarde24_00EB
0800b3dc g     F .text	00000024 LCD_UpdateColorIndices
08059750 g     O .rodata	00000060 acGUI_FontAvantGarde20B_00C7
08043e30 g     O .rodata	00000072 acGUI_FontAvantGarde32B_003F
080333b8 g     O .rodata	00000030 acGUI_FontLubalGraph20_FB02
08055750 g     O .rodata	00000078 acGUI_FontAvantGarde24_00A9
08060fd0 g     O .rodata	0000000b acGUI_FontAvantGarde16B_00A6
080420dc g     O .rodata	00000034 acGUI_FontAvantGarde32B_007C
08007780 g     F .text	00000080 WM_BringToTop
08000fec  w    F .text	00000002 SDMMC1_IRQHandler
08031abc g     O .rodata	00000037 acGUI_FontLubalGraph20B_0059
0804cb4c g     O .rodata	0000008a acGUI_FontAvantGarde32_0024
08059ca8 g     O .rodata	00000006 acGUI_FontAvantGarde20B_00AF
08059378 g     O .rodata	00000060 acGUI_FontAvantGarde20B_00D5
08047efc g     O .rodata	000000a0 acGUI_FontAvantGarde32_00E4
08031354 g     O .rodata	00000004 acGUI_FontLubalGraph20B_00AD
08037c00 g     O .rodata	00000028 acGUI_FontLubalGraph16B_00FB
08025040 g     O .rodata	00000054 acGUI_FontLubalGraph24B_FB01
0804cc80 g     O .rodata	00000024 GUI_FontAvantGarde24B
08054600 g     O .rodata	00000060 acGUI_FontAvantGarde24_00E0
0802aa14 g     O .rodata	00000010 acGUI_FontLubalGraph24_2039
0804aa9c g     O .rodata	00000014 acGUI_FontAvantGarde32_006C
080557d4 g     O .rodata	00000064 acGUI_FontAvantGarde24_00A7
08056450 g     O .rodata	0000004b acGUI_FontAvantGarde24_0052
0805ee0c g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop28
080312b0 g     O .rodata	00000015 acGUI_FontLubalGraph20B_00B3
08007ca8 g     F .text	000000a4 WM__InsertWindowIntoList
080388ec g     O .rodata	00000004 acGUI_FontLubalGraph16B_00A8
0804202c g     O .rodata	0000002a acGUI_FontAvantGarde32B_007E
0802faa0 g     O .rodata	00000031 acGUI_FontLubalGraph20B_2122
08054544 g     O .rodata	0000005a acGUI_FontAvantGarde24_00E2
0805befc g     O .rodata	00000018 acGUI_FontAvantGarde20_2248
080592fc g     O .rodata	00000020 acGUI_FontAvantGarde20B_00D7
200001d0 g     O .data	00000004 DROPDOWN__pSkinDefault
08018ae4 g     O .rodata	000000a2 acGUI_FontLubalGraph32B_00A9
08051fdc g     O .rodata	0000001c acGUI_FontAvantGarde24B_0021
0802dd7c g     O .rodata	0000008c acGUI_FontLubalGraph24_004D
08000fec  w    F .text	00000002 ADC_IRQHandler
08004cd4 g     F .text	00000002 ft5336_Reset
0804e4fc g     O .rodata	00000008 acGUI_FontAvantGarde24B_02C9
08023a98 g     O .rodata	00000085 acGUI_FontLubalGraph32_0034
0804a99c g     O .rodata	00000062 acGUI_FontAvantGarde32_006E
0802dca8 g     O .rodata	00000062 acGUI_FontLubalGraph24_004F
0803761c g     O .rodata	00000008 acGUI_FontLubalGraph16B_2212
08051f74 g     O .rodata	00000054 acGUI_FontAvantGarde24B_0023
0801d2e8 g     O .rodata	000000a1 acGUI_FontLubalGraph32_2020
0802f7dc g     O .rodata	00000028 acGUI_FontLubalGraph20B_2264
08050f24 g     O .rodata	0000000c acGUI_FontAvantGarde24B_0060
08056514 g     O .rodata	0000004b acGUI_FontAvantGarde24_0050
0805db7c g     O .rodata	0000000e acGUI_FontAvantGarde20_00A6
080312dc g     O .rodata	00000023 acGUI_FontLubalGraph20B_00B1
08059434 g     O .rodata	00000060 acGUI_FontAvantGarde20B_00D3
08050cd0 g     O .rodata	00000046 acGUI_FontAvantGarde24B_0068
0800ccbc g     F .text	00000014 GUI_RestoreContext
0800c8a0 g     F .text	00000074 GUI_TIMER_Delete
08031858 g     O .rodata	00000037 acGUI_FontLubalGraph20B_0068
08062c98 g     O .rodata	00000021 acGUI_FontAvantGarde16_2202
08035af4 g     O .rodata	00000030 acGUI_FontLubalGraph20_005A
08031b38 g     O .rodata	00000058 acGUI_FontLubalGraph20B_0057
08030038 g     O .rodata	00000010 acGUI_FontLubalGraph20B_0131
08023b94 g     O .rodata	00000072 acGUI_FontLubalGraph32_0032
0805fbe8 g     O .rodata	00000034 acGUI_FontAvantGarde16B_221A
0803abc8 g     O .rodata	00000028 acGUI_FontLubalGraph16_00F4
0801d210 g     O .rodata	00000032 acGUI_FontLubalGraph32_2022
080594f4 g     O .rodata	00000050 acGUI_FontAvantGarde20B_00D1
08038d98 g     O .rodata	00000024 acGUI_FontLubalGraph16B_0059
08007402 g     F .text	000000a8 WM__MoveWindow
08031bd4 g     O .rodata	00000037 acGUI_FontLubalGraph20B_0055
0803260c g     O .rodata	0000000c GUI_FontLubalGraph20_Prop10
08050d78 g     O .rodata	00000038 acGUI_FontAvantGarde24B_0066
0800fd8c g     F .text	00000398 WM_HandlePID
08030048 g     O .rodata	00000046 acGUI_FontLubalGraph20B_00FF
0802fefc g     O .rodata	0000003c acGUI_FontLubalGraph20B_0160
080150b8 g     O .rodata	0000009a acGUI_FontLubalGraph32B_2020
08051dcc g     O .rodata	0000004c acGUI_FontAvantGarde24B_0029
0805db38 g     O .rodata	00000004 acGUI_FontAvantGarde20_00A8
0804c7dc g     O .rodata	00000084 acGUI_FontAvantGarde32_002F
0805e1f0 g     O .rodata	00000030 acGUI_FontAvantGarde20_005A
0804dad4 g     O .rodata	00000046 acGUI_FontAvantGarde24B_FB02
08036220 g     O .rodata	00000030 acGUI_FontLubalGraph20_003F
08030504 g     O .rodata	0000003c acGUI_FontLubalGraph20B_00EA
08049dbc g     O .rodata	00000034 acGUI_FontAvantGarde32_00B2
08049c44 g     O .rodata	00000012 acGUI_FontAvantGarde32_00B8
08061088 g     O .rodata	00000001 acGUI_FontAvantGarde16B_00A0
08062fb0 g     O .rodata	0000001e acGUI_FontAvantGarde16_017E
0802cdc0 g     O .rodata	00000006 acGUI_FontLubalGraph24_00AD
0801a010 g     O .rodata	00000090 acGUI_FontLubalGraph32B_0054
08023674 g     O .rodata	00000072 acGUI_FontLubalGraph32_003F
08021960 g     O .rodata	00000046 acGUI_FontLubalGraph32_0073
08037c80 g     O .rodata	00000024 acGUI_FontLubalGraph16B_00F8
08001924 g     F .text	0000000c xTaskGetCurrentTaskHandle
0802b7bc g     O .rodata	0000005a acGUI_FontLubalGraph24_00EA
080300d8 g     O .rodata	00000050 acGUI_FontLubalGraph20B_00FD
0803ab3c g     O .rodata	00000024 acGUI_FontLubalGraph16_00F8
08056148 g     O .rodata	00000039 acGUI_FontAvantGarde24_005B
08055984 g     O .rodata	00000010 acGUI_FontAvantGarde24_00A1
080543bc g     O .rodata	00000079 acGUI_FontAvantGarde24_00E6
080637f8 g     O .rodata	0000003c acGUI_FontAvantGarde16_00D3
0800ce48 g     F .text	00000040 GUI_PollKeyMsg
08034ecc g     O .rodata	00000069 acGUI_FontLubalGraph20_00C2
0805e340 g     O .rodata	00000030 acGUI_FontAvantGarde20_0055
080617fc g     O .rodata	00000028 acGUI_FontAvantGarde16B_0044
0803e48c g     O .rodata	0000000f acGUI_FontAvantGarde32B_02C9
08049d74 g     O .rodata	00000014 acGUI_FontAvantGarde32_00B4
0802a538 g     O .rodata	0000001e acGUI_FontLubalGraph24_2248
08038dec g     O .rodata	0000003f acGUI_FontLubalGraph16B_0057
0802cdf4 g     O .rodata	00000018 acGUI_FontLubalGraph24_00AB
08038c08 g     O .rodata	00000024 acGUI_FontLubalGraph16B_0068
08061060 g     O .rodata	0000001b acGUI_FontAvantGarde16B_00A2
08033c80 g     O .rodata	0000006c acGUI_FontLubalGraph20_0152
0803d3e4 g     O .rodata	00000093 acGUI_FontAvantGarde32B_25CA
0802a438 g     O .rodata	00000050 acGUI_FontLubalGraph24_25CA
08033ab4 g     O .rodata	0000000c acGUI_FontLubalGraph20_02C6
0801a10c g     O .rodata	00000090 acGUI_FontLubalGraph32B_0052
08037b50 g     O .rodata	0000002c acGUI_FontLubalGraph16B_00FF
08036280 g     O .rodata	00000014 acGUI_FontLubalGraph20_003D
08054494 g     O .rodata	0000005a acGUI_FontAvantGarde24_00E4
0802cd58 g     O .rodata	00000004 acGUI_FontLubalGraph24_00AF
08019be8 g     O .rodata	00000054 acGUI_FontLubalGraph32B_005B
0804ae08 g     O .rodata	00000070 acGUI_FontAvantGarde32_0063
08061858 g     O .rodata	00000028 acGUI_FontAvantGarde16B_0042
0805e400 g     O .rodata	00000054 acGUI_FontAvantGarde20_0051
08037b40 g     O .rodata	0000000e acGUI_FontLubalGraph16B_0131
080302f0 g     O .rodata	0000003c acGUI_FontLubalGraph20B_00F4
0803a5c0 g     O .rodata	00000028 acGUI_FontLubalGraph16_2126
08038e5c g     O .rodata	0000002d acGUI_FontLubalGraph16B_0055
0802b738 g     O .rodata	0000002d acGUI_FontLubalGraph24_00EC
08037a68 g     O .rodata	00000024 acGUI_FontLubalGraph16B_0160
08060668 g     O .rodata	0000002c acGUI_FontAvantGarde16B_00E1
0805e3a0 g     O .rodata	00000030 acGUI_FontAvantGarde20_0053
0803e49c g     O .rodata	00000018 acGUI_FontAvantGarde32B_02C7
0803aabc g     O .rodata	00000028 acGUI_FontLubalGraph16_00FB
0803ab78 g     O .rodata	00000028 acGUI_FontLubalGraph16_00F6
080074e8 g     F .text	00000018 WM_IsWindow
08063780 g     O .rodata	0000003c acGUI_FontAvantGarde16_00D5
080237ec g     O .rodata	0000001e acGUI_FontLubalGraph32_003B
08019b38 g     O .rodata	00000054 acGUI_FontLubalGraph32B_005D
08034fa8 g     O .rodata	00000070 acGUI_FontLubalGraph20_00C0
08055684 g     O .rodata	00000078 acGUI_FontAvantGarde24_00AE
08032624 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop12
08053260 g     O .rodata	00000050 acGUI_FontAvantGarde24_2202
080168bc g     O .rodata	000000b6 acGUI_FontLubalGraph32B_00E6
0802177c g     O .rodata	000000a8 acGUI_FontLubalGraph32_0077
08018dfc g     O .rodata	00000024 acGUI_FontLubalGraph32B_00A1
08014b78 g     O .rodata	000000b4 acGUI_FontLubalGraph32B_212E
0804ad04 g     O .rodata	00000062 acGUI_FontAvantGarde32_0065
08037ba8 g     O .rodata	00000034 acGUI_FontLubalGraph16B_00FD
0803027c g     O .rodata	00000037 acGUI_FontLubalGraph20B_00F6
08060618 g     O .rodata	00000028 acGUI_FontAvantGarde16B_00E3
080304a4 g     O .rodata	00000027 acGUI_FontLubalGraph20B_00EC
08038858 g     O .rodata	00000006 acGUI_FontLubalGraph16B_00AF
0801858c g     O .rodata	000000b4 acGUI_FontLubalGraph32B_00BD
08018d1c g     O .rodata	0000007e acGUI_FontLubalGraph32B_00A3
0804c9e4 g     O .rodata	000000b4 acGUI_FontAvantGarde32_0026
08016780 g     O .rodata	00000093 acGUI_FontLubalGraph32B_00E8
08023754 g     O .rodata	0000002a acGUI_FontLubalGraph32_003D
08021674 g     O .rodata	00000098 acGUI_FontLubalGraph32_0079
08005e60 g     F .text	0000001c WIDGET__GetXSize
08000ff0 g     F .text	0000004c SystemInit
08060568 g     O .rodata	00000028 acGUI_FontAvantGarde16B_00E7
080164f8 g     O .rodata	0000006e acGUI_FontLubalGraph32B_00ED
0804ac14 g     O .rodata	000000a0 acGUI_FontAvantGarde32_0067
080003a2 g     F .text	00000002 HardFault_Handler
08038890 g     O .rodata	00000004 acGUI_FontLubalGraph16B_00AD
08018450 g     O .rodata	00000072 acGUI_FontLubalGraph32B_00BF
08060174 g     O .rodata	00000014 acGUI_FontAvantGarde16B_0142
08030370 g     O .rodata	00000041 acGUI_FontLubalGraph20B_00F2
0803ded4 g     O .rodata	0000001e acGUI_FontAvantGarde32B_2039
0804c970 g     O .rodata	0000006c acGUI_FontAvantGarde32_0028
0803881c g     O .rodata	0000000c acGUI_FontLubalGraph16B_00B3
080165d4 g     O .rodata	00000090 acGUI_FontLubalGraph32B_00EB
0805c3ec g     O .rodata	00000006 acGUI_FontAvantGarde20_2018
08037e80 g     O .rodata	00000028 acGUI_FontLubalGraph16B_00EA
0803aa5c g     O .rodata	00000038 acGUI_FontLubalGraph16_00FD
080605c4 g     O .rodata	0000002c acGUI_FontAvantGarde16B_00E5
080238a0 g     O .rodata	00000072 acGUI_FontLubalGraph32_0038
080303f0 g     O .rodata	00000037 acGUI_FontLubalGraph20B_00F0
08021894 g     O .rodata	0000007e acGUI_FontLubalGraph32_0075
08029530 g     O .rodata	0000001c acGUI_FontLubalGraph24B_0021
0802dbe4 g     O .rodata	00000070 acGUI_FontLubalGraph24_0051
0801d1f0 g     O .rodata	0000001e acGUI_FontLubalGraph32_2026
0802daac g     O .rodata	00000062 acGUI_FontLubalGraph24_0055
08002804 g     F .text	000000c8 xQueueGenericSendFromISR
08038834 g     O .rodata	0000001c acGUI_FontLubalGraph16B_00B1
08020390 g     O .rodata	000000f7 acGUI_FontLubalGraph32_00C6
0805ffa8 g     O .rodata	00000009 acGUI_FontAvantGarde16B_02DD
0806126c g     O .rodata	00000015 acGUI_FontAvantGarde16B_006E
08037e2c g     O .rodata	00000021 acGUI_FontLubalGraph16B_00EC
0801c67c g     O .rodata	00000093 acGUI_FontLubalGraph32_25CA
08037d08 g     O .rodata	00000028 acGUI_FontLubalGraph16B_00F4
080325b8 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop3
08014608 g     O .rodata	00000060 acGUI_FontLubalGraph32B_2264
0803a5e8 g     O .rodata	00000024 acGUI_FontLubalGraph16_2122
080563c8 g     O .rodata	0000004b acGUI_FontAvantGarde24_0054
08013488 g     F .text	0000000c atexit
080294d4 g     O .rodata	00000046 acGUI_FontLubalGraph24B_0023
0802841c g     O .rodata	0000000f acGUI_FontLubalGraph24B_0060
0802db58 g     O .rodata	00000038 acGUI_FontLubalGraph24_0053
08068c3c g       *ABS*	00000000 _sidata
08024378 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop38
080201f4 g     O .rodata	000000af acGUI_FontLubalGraph32_00C8
0805fb44 g     O .rodata	0000001b acGUI_FontAvantGarde16B_2265
08001aa6 g     F .text	00000036 osThreadCreate
080075ac g     F .text	00000026 WM_GetWindowRectEx
080617bc g     O .rodata	0000001e acGUI_FontAvantGarde16B_0046
08051d5c g     O .rodata	00000006 acGUI_FontAvantGarde24B_002E
080378b0 g     O .rodata	0000000e acGUI_FontLubalGraph16B_2014
0803210c g     O .rodata	0000002d acGUI_FontLubalGraph20B_003E
0805be24 g     O .rodata	00000030 acGUI_FontAvantGarde20_FB01
0800fd10 g     F .text	00000040 WM__SendPIDMessage
0800057c g     F .text	00000020 HAL_Delay
0805fc20 g     O .rodata	0000001e acGUI_FontAvantGarde16B_2215
0804ab74 g     O .rodata	00000014 acGUI_FontAvantGarde32_0069
0804dbb4 g     O .rodata	00000041 acGUI_FontAvantGarde24B_2265
08023988 g     O .rodata	00000085 acGUI_FontLubalGraph32_0036
08037cbc g     O .rodata	00000024 acGUI_FontLubalGraph16B_00F6
0801b76c g     O .rodata	0000000c GUI_FontLubalGraph32_Prop10
08009a48 g     F .text	00000038 GUI_MEMDEV_GetBitsPerPixel
08061760 g     O .rodata	00000028 acGUI_FontAvantGarde16B_0048
0803c664 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop40
08047d98 g     O .rodata	000000c4 acGUI_FontAvantGarde32_00E6
0805cf38 g     O .rodata	00000050 acGUI_FontAvantGarde20_00DD
08056310 g     O .rodata	00000069 acGUI_FontAvantGarde24_0056
08029754 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop41
08027158 g     O .rodata	00000064 acGUI_FontLubalGraph24B_00C9
0803214c g     O .rodata	0000002d acGUI_FontLubalGraph20B_003C
0800c868 g     F .text	00000038 GUI_TIMER__GetNextTimerLin
0802f910 g     O .rodata	00000008 acGUI_FontLubalGraph20B_2212
0805622c g     O .rodata	0000005a acGUI_FontAvantGarde24_0058
0804cc7c g     O .rodata	00000001 acGUI_FontAvantGarde32_0020
08016b44 g     O .rodata	00000098 acGUI_FontLubalGraph32B_00E2
08037d5c g     O .rodata	0000002c acGUI_FontLubalGraph16B_00F2
20028828 g     O .bss	00000004 GUI_pfHookMTOUCH
08060510 g     O .rodata	0000002c acGUI_FontAvantGarde16B_00E9
0800b730 g     F .text	0000002c LCD__GetBPPDevice
0801cea8 g     O .rodata	00000084 acGUI_FontLubalGraph32_2122
08002b88 g     F .text	00000028 vQueueAddToRegistry
20008418 g     O .bss	00000004 HEADER__DefaultBorderV
08047c84 g     O .rodata	0000008c acGUI_FontAvantGarde32_00E8
08032600 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop9
08014cd0 g     O .rodata	0000006e acGUI_FontLubalGraph32B_2122
080003a6 g     F .text	00000002 BusFault_Handler
0805a970 g     O .rodata	00000024 acGUI_FontAvantGarde20B_0046
08000fec  w    F .text	00000002 EXTI4_IRQHandler
08036308 g     O .rodata	00000030 acGUI_FontLubalGraph20_0038
0802aa04 g     O .rodata	00000010 acGUI_FontLubalGraph24_203A
0805318c g     O .rodata	00000077 acGUI_FontAvantGarde24_220F
08015538 g     O .rodata	00000072 acGUI_FontLubalGraph32B_017E
08016a1c g     O .rodata	00000090 acGUI_FontLubalGraph32B_00E4
08050b44 g     O .rodata	00000042 acGUI_FontAvantGarde24B_006F
0801204c g     F .text	0000016c GUI__CompactPixelIndices
0800802e g     F .text	0000002a WM__InvalidateParent
08046734 g     O .rodata	00000008 acGUI_FontAvantGarde32_2010
08035580 g     O .rodata	00000048 acGUI_FontLubalGraph20_0077
080363c8 g     O .rodata	0000003c acGUI_FontLubalGraph20_0034
0805a9c4 g     O .rodata	0000003c acGUI_FontAvantGarde20B_0044
0801c918 g     O .rodata	00000048 acGUI_FontLubalGraph32_221E
0805ced8 g     O .rodata	00000030 acGUI_FontAvantGarde20_00DF
08016c84 g     O .rodata	000000a8 acGUI_FontLubalGraph32B_00E0
08051ec0 g     O .rodata	00000070 acGUI_FontAvantGarde24B_0025
0805b144 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop31
0805a3dc g     O .rodata	0000002d acGUI_FontAvantGarde20B_0061
08051db0 g     O .rodata	0000001c acGUI_FontAvantGarde24B_002A
08025b34 g     O .rodata	0000004b acGUI_FontLubalGraph24B_0161
080636c8 g     O .rodata	00000024 acGUI_FontAvantGarde16_00D9
0803924c g     O .rodata	00000020 acGUI_FontLubalGraph16B_003C
0802c6c0 g     O .rodata	00000090 acGUI_FontLubalGraph24_00C5
08050e8c g     O .rodata	00000054 acGUI_FontAvantGarde24B_0062
08000fec  w    F .text	00000002 ETH_WKUP_IRQHandler
08053204 g     O .rodata	0000005a acGUI_FontAvantGarde24_2206
08059ca0 g     O .rodata	00000008 acGUI_FontAvantGarde20B_00B0
0803a6d4 g     O .rodata	0000000a acGUI_FontLubalGraph16_2026
0800e630 g     F .text	000000a4 GUI_ALLOC_GetFixedBlock
0803568c g     O .rodata	00000048 acGUI_FontLubalGraph20_0071
080641fc g     O .rodata	0000001a acGUI_FontAvantGarde16_005D
08057220 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop18
0800b668 g     F .text	00000014 LCD_GetPaletteEx
08051e64 g     O .rodata	00000006 acGUI_FontAvantGarde24B_0027
08058090 g     O .rodata	0000001c acGUI_FontAvantGarde20B_2248
0802d9b0 g     O .rodata	0000008c acGUI_FontLubalGraph24_0057
08063d70 g     O .rodata	00000010 acGUI_FontAvantGarde16_00AC
08050df4 g     O .rodata	00000054 acGUI_FontAvantGarde24B_0064
08037db0 g     O .rodata	00000024 acGUI_FontLubalGraph16B_00F0
0803921c g     O .rodata	00000020 acGUI_FontLubalGraph16B_003E
08000fec  w    F .text	00000002 DMA1_Stream7_IRQHandler
08063728 g     O .rodata	0000001c acGUI_FontAvantGarde16_00D7
08019edc g     O .rodata	000000a2 acGUI_FontLubalGraph32B_0056
080241e0 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop4
08024390 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop40
08057208 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop16
0805fc1c g     O .rodata	00000002 acGUI_FontAvantGarde16B_2219
08024210 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop8
0806423c g     O .rodata	0000001a acGUI_FontAvantGarde16_005B
08035514 g     O .rodata	0000003c acGUI_FontLubalGraph20_0079
08033980 g     O .rodata	00000006 acGUI_FontLubalGraph20_201A
0803bf78 g     O .rodata	0000001e acGUI_FontLubalGraph16_004A
0803a6e0 g     O .rodata	0000000a acGUI_FontLubalGraph16_2022
08036368 g     O .rodata	00000030 acGUI_FontLubalGraph20_0036
0805ed1c g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop8
08063d8c g     O .rodata	0000000c acGUI_FontAvantGarde16_00AA
08012c24 g     F .text	00000018 GUI_GetColor
0802abf8 g     O .rodata	0000003c acGUI_FontLubalGraph24_03C0
080243a8 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop42
08002bb0 g     F .text	0000003a vQueueWaitForMessageRestricted
08019d4c g     O .rodata	000000a2 acGUI_FontLubalGraph32B_0058
080222dc g     O .rodata	0000000e acGUI_FontLubalGraph32_005F
080560c8 g     O .rodata	00000039 acGUI_FontAvantGarde24_005D
080558ec g     O .rodata	0000005a acGUI_FontAvantGarde24_00A3
08054310 g     O .rodata	00000050 acGUI_FontAvantGarde24_00E8
080396b4 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop31
0803deb4 g     O .rodata	0000001e acGUI_FontAvantGarde32B_203A
0802235c g     O .rodata	00000042 acGUI_FontLubalGraph32_005D
0805c404 g     O .rodata	0000002d acGUI_FontAvantGarde20_03C0
0801cdfc g     O .rodata	000000ab acGUI_FontLubalGraph32_2126
0802fe48 g     O .rodata	0000003c acGUI_FontLubalGraph20B_017D
0805a85c g     O .rodata	0000003c acGUI_FontAvantGarde20B_004B
08033974 g     O .rodata	00000009 acGUI_FontLubalGraph20_201C
08011e14 g     F .text	00000028 GUI__strcmp_hp
0804e784 g     O .rodata	0000008c acGUI_FontAvantGarde24B_0152
0802a3a8 g     O .rodata	00000046 acGUI_FontLubalGraph24_FB02
0803ba28 g     O .rodata	0000001c acGUI_FontLubalGraph16_006F
0803ac1c g     O .rodata	0000002c acGUI_FontLubalGraph16_00F2
08011e3c g     F .text	00000026 GUI__sqrt32
0805c778 g     O .rodata	00000009 acGUI_FontAvantGarde20_0131
0800cca8 g     F .text	00000014 GUI_SaveContext_W
0803ba60 g     O .rodata	00000031 acGUI_FontLubalGraph16_006D
0803ac70 g     O .rodata	00000028 acGUI_FontLubalGraph16_00F0
08022400 g     O .rodata	00000042 acGUI_FontLubalGraph32_005B
08010254 g     F .text	0000001e WM_ForEachDesc
0803baa8 g     O .rodata	00000028 acGUI_FontLubalGraph16_006B
0805609c g     O .rodata	00000005 acGUI_FontAvantGarde24_005F
0805584c g     O .rodata	0000005a acGUI_FontAvantGarde24_00A5
0805ee6c g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop36
080618b4 g     O .rodata	00000032 acGUI_FontAvantGarde16B_0040
0801a19c g     O .rodata	000000be acGUI_FontLubalGraph32B_0051
08003258 g     F .text	00000034 HAL_RCC_GetHCLKFreq
080586a0 g     O .rodata	00000003 acGUI_FontAvantGarde20B_02D9
0800fc2c g     F .text	00000018 WM__GetLastSibling
08010e90 g     F .text	00000032 GUI_USAGE_DecUseCnt
0806430c g     O .rodata	00000032 acGUI_FontAvantGarde16_0056
080131a0 g     F .text	00000050 __libc_init_array
0805ee84 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop38
0802fcc4 g     O .rodata	00000010 acGUI_FontLubalGraph20B_2014
0805d080 g     O .rodata	00000054 acGUI_FontAvantGarde20_00D8
0802afa0 g     O .rodata	0000008c acGUI_FontLubalGraph24_0152
08044ba8 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop27
08053690 g     O .rodata	0000000c acGUI_FontAvantGarde24_201C
080466c4 g     O .rodata	00000014 acGUI_FontAvantGarde32_201D
08063d98 g     O .rodata	00000032 acGUI_FontAvantGarde16_00A9
0802976c g     O .rodata	0000000c GUI_FontLubalGraph24_Prop43
0803e914 g     O .rodata	0000010a acGUI_FontAvantGarde32B_0152
0805d1ac g     O .rodata	0000005a acGUI_FontAvantGarde20_00D4
08004cd0 g     F .text	00000004 ft5336_TS_Start
080378ac g     O .rodata	00000004 acGUI_FontLubalGraph16B_2018
080355f8 g     O .rodata	00000036 acGUI_FontLubalGraph20_0075
08036434 g     O .rodata	00000030 acGUI_FontLubalGraph20_0032
0805369c g     O .rodata	00000008 acGUI_FontAvantGarde24_201A
0800f830 g     F .text	0000037e FRAMEWIN_DrawSkinFlex
08021444 g     O .rodata	00000098 acGUI_FontLubalGraph32_00A3
080379d8 g     O .rodata	00000030 acGUI_FontLubalGraph16B_017D
0805c400 g     O .rodata	00000003 acGUI_FontAvantGarde20_2010
08007382 g     F .text	00000014 WM_NotifyParent
08044bc0 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop29
0803a71c g     O .rodata	00000030 acGUI_FontLubalGraph16_2020
0800ddc0 g     F .text	000000ec GUIPROP_DispChar
08046710 g     O .rodata	00000018 acGUI_FontAvantGarde32_2014
0805a8e0 g     O .rodata	0000003c acGUI_FontAvantGarde20B_0048
08063e04 g     O .rodata	00000028 acGUI_FontAvantGarde16_00A5
0805ffc0 g     O .rodata	00000006 acGUI_FontAvantGarde16B_02DB
08003a94 g     F .text	0000005a HAL_LTDC_SetWindowPosition
08053438 g     O .rodata	0000005a acGUI_FontAvantGarde24_20AC
08036488 g     O .rodata	00000030 acGUI_FontLubalGraph20_0030
0804f2d0 g     O .rodata	00000060 acGUI_FontAvantGarde24B_00E1
08049fb4 g     O .rodata	00000028 acGUI_FontAvantGarde32_00AA
0803c67c g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop42
0804ce78 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop40
08035654 g     O .rodata	0000001b acGUI_FontLubalGraph20_0073
0804fc84 g     O .rodata	0000004c acGUI_FontAvantGarde24B_00C9
0804cd70 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop18
0800b5fa g     F .text	00000006 LCD_GetVYSizeEx
080635c4 g     O .rodata	00000028 acGUI_FontAvantGarde16_00E0
0802e8ec g     O .rodata	00000024 GUI_FontLubalGraph20B
0802d8e8 g     O .rodata	00000062 acGUI_FontLubalGraph24_0059
08006d38 g     F .text	000000f4 WM__UpdateChildPositions
0804f218 g     O .rodata	0000005a acGUI_FontAvantGarde24B_00E3
080378c8 g     O .rodata	00000004 acGUI_FontLubalGraph16B_2010
08046704 g     O .rodata	0000000a acGUI_FontAvantGarde32_2018
08044b90 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop25
08044b30 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop17
0804e23c g     O .rodata	00000018 acGUI_FontAvantGarde24B_2026
200000b0 g     O .data	00000004 HEADER__DefaultBorderH
0802e988 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop11
0804fd1c g     O .rodata	0000007e acGUI_FontAvantGarde24B_00C7
08021544 g     O .rodata	00000013 acGUI_FontLubalGraph32_00A1
08000fec  w    F .text	00000002 SAI2_IRQHandler
0805d35c g     O .rodata	0000002d acGUI_FontAvantGarde20_00CF
08050794 g     O .rodata	00000001 acGUI_FontAvantGarde24B_00A0
08049e88 g     O .rodata	000000c8 acGUI_FontAvantGarde32_00AE
20000064 g     O .data	00000002 SCROLLBAR__DefaultWidth
0801ed74 g     O .rodata	000000ab acGUI_FontLubalGraph32_00E4
0803d2fc g     O .rodata	00000072 acGUI_FontAvantGarde32B_FB02
0801ca38 g     O .rodata	00000003 acGUI_FontLubalGraph32_2219
08005c00 g     F .text	00000010 SCROLLBAR_SetDefaultSTSkin
08058948 g     O .rodata	00000009 acGUI_FontAvantGarde20B_0131
0805ee3c g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop32
08000850 g     F .text	0000000c GUI_X_Unlock
08064404 g     O .rodata	0000001e acGUI_FontAvantGarde16_0050
080032e4  w    F .text	0000000c HAL_GetTick
08044b18 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop15
0801b8d4 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop40
08000fec  w    F .text	00000002 CAN1_RX0_IRQHandler
0804cd28 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop12
08053ca8 g     O .rodata	00000064 acGUI_FontAvantGarde24_00FD
08049f58 g     O .rodata	00000031 acGUI_FontAvantGarde32_00AC
0803a8f8 g     O .rodata	00000024 acGUI_FontLubalGraph16_0160
0805fc48 g     O .rodata	00000030 acGUI_FontAvantGarde16B_2211
0802eae4 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop40
20000060 g     O .data	00000004 SCROLLBAR__pSkinDefault
0805ee54 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop34
0801b8ec g     O .rodata	0000000c GUI_FontLubalGraph32_Prop42
0804cd10 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop10
0804fba4 g     O .rodata	00000039 acGUI_FontAvantGarde24B_00CC
0805ee24 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop30
080339e0 g     O .rodata	00000048 acGUI_FontLubalGraph20_03BC
08029388 g     O .rodata	00000030 acGUI_FontLubalGraph24B_0028
080282a4 g     O .rodata	0000003c acGUI_FontLubalGraph24B_0065
08025f60 g     O .rodata	00000060 acGUI_FontLubalGraph24B_00FA
20000810 g       .data	00000000 _edata
0802e314 g     O .rodata	00000042 acGUI_FontLubalGraph24_003C
0801eaac g     O .rodata	000000a8 acGUI_FontLubalGraph32_00E8
0802eafc g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop42
0805d0f4 g     O .rodata	0000005a acGUI_FontAvantGarde20_00D6
08006b74 g     F .text	000000dc BUTTON_Callback
080258e8 g     O .rodata	00000062 acGUI_FontLubalGraph24B_03A9
0804188c g     O .rodata	00000008 acGUI_FontAvantGarde32B_00B7
080538a8 g     O .rodata	0000003c acGUI_FontAvantGarde24_017E
0802e2b4 g     O .rodata	00000042 acGUI_FontLubalGraph24_003E
0805b18c g     O .rodata	0000000c GUI_FontAvantGarde20_Prop37
0805e5ec g     O .rodata	00000030 acGUI_FontAvantGarde20_0048
0803bb50 g     O .rodata	00000014 acGUI_FontLubalGraph16_0066
080293c4 g     O .rodata	00000054 acGUI_FontLubalGraph24B_0026
08028344 g     O .rodata	0000003c acGUI_FontLubalGraph24B_0063
08061e60 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop41
08041854 g     O .rodata	00000024 acGUI_FontAvantGarde32B_00B9
0804fb0c g     O .rodata	0000005a acGUI_FontAvantGarde24B_00CE
08033d5c g     O .rodata	0000004b acGUI_FontLubalGraph20_00FF
0805e484 g     O .rodata	00000048 acGUI_FontAvantGarde20_004F
0805d268 g     O .rodata	00000060 acGUI_FontAvantGarde20_00D2
0803b58c g     O .rodata	0000003c acGUI_FontLubalGraph16_00BE
080367ac g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop21
080536c8 g     O .rodata	0000000a acGUI_FontAvantGarde24_2013
0804af9c g     O .rodata	0000000e acGUI_FontAvantGarde32_005F
0801ebfc g     O .rodata	000000c4 acGUI_FontLubalGraph32_00E6
08011de8 g     F .text	0000002c GUI__strcmp
080641e8 g     O .rodata	00000004 acGUI_FontAvantGarde16_005F
08043b68 g     O .rodata	000000be acGUI_FontAvantGarde32B_0043
08050c34 g     O .rodata	00000046 acGUI_FontAvantGarde24B_006B
08068ade g     O .rodata	00000020 GUI__aConvert_31_255
0801eecc g     O .rodata	000000b4 acGUI_FontLubalGraph32_00E2
08063d38 g     O .rodata	00000032 acGUI_FontAvantGarde16_00AE
0803bb00 g     O .rodata	00000028 acGUI_FontLubalGraph16_0068
08053bc0 g     O .rodata	00000072 acGUI_FontAvantGarde24_00FF
0800d5b4 g     F .text	00000070 GUI_DrawGradientH
0805b1a4 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop39
0801caac g     O .rodata	0000009a acGUI_FontLubalGraph32_2211
080367c4 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop23
08026fb0 g     O .rodata	0000005a acGUI_FontLubalGraph24B_00CE
08053d58 g     O .rodata	0000004b acGUI_FontAvantGarde24_00FB
0805e508 g     O .rodata	00000054 acGUI_FontAvantGarde20_004D
0805d314 g     O .rodata	00000048 acGUI_FontAvantGarde20_00D0
08050bc0 g     O .rodata	00000058 acGUI_FontAvantGarde24B_006D
08029298 g     O .rodata	0000005a acGUI_FontLubalGraph24B_002F
080280dc g     O .rodata	0000002a acGUI_FontLubalGraph24B_006C
08027988 g     O .rodata	0000001b acGUI_FontLubalGraph24B_00B2
08026068 g     O .rodata	0000002d acGUI_FontLubalGraph24B_00F7
08000fec  w    F .text	00000002 CAN1_TX_IRQHandler
0800e94a g     F .text	00000002 LCD_Index2Color_8888
08013730 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop31
0805c00c g     O .rodata	00000004 acGUI_FontAvantGarde20_2212
0800e948 g     F .text	00000002 LCD_Index2Color_888
08018b98 g     O .rodata	00000069 acGUI_FontLubalGraph32B_00A7
08009acc g     F .text	0000007c GUI_MEMDEV_CreateEx
0800dfd8 g     F .text	00000060 GUI__GetLineDistX
08015aac g     O .rodata	00000038 acGUI_FontLubalGraph32B_0131
0803bb80 g     O .rodata	00000028 acGUI_FontLubalGraph16_0064
08048034 g     O .rodata	000000a0 acGUI_FontAvantGarde32_00E2
08019ab8 g     O .rodata	0000000e acGUI_FontLubalGraph32B_005F
08028044 g     O .rodata	0000003c acGUI_FontLubalGraph24B_006E
08027958 g     O .rodata	0000000f acGUI_FontLubalGraph24B_00B4
08025fc0 g     O .rodata	00000060 acGUI_FontLubalGraph24B_00F9
08039600 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop16
080151d4 g     O .rodata	00000010 acGUI_FontLubalGraph32B_2019
0803b604 g     O .rodata	0000003c acGUI_FontLubalGraph16_00BC
0805ffd4 g     O .rodata	00000009 acGUI_FontAvantGarde16B_02D8
0803f390 g     O .rodata	00000098 acGUI_FontAvantGarde32B_00F0
08001c60 g     F .text	00000048 osSemaphoreRelease
08000fec  w    F .text	00000002 I2C3_ER_IRQHandler
080606c0 g     O .rodata	00000028 acGUI_FontAvantGarde16B_00DF
08034064 g     O .rodata	0000003c acGUI_FontLubalGraph20_00F4
08018c30 g     O .rodata	0000007e acGUI_FontLubalGraph32B_00A5
08057154 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop1
0800c7dc g     F .text	00000010 GUI_SignalEvent
08006f5e g     F .text	00000032 WM_ShowWindow
0801f040 g     O .rodata	000000bd acGUI_FontLubalGraph32_00E0
08039618 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop18
0803a560 g     O .rodata	00000021 acGUI_FontLubalGraph16_2202
0802fcbc g     O .rodata	00000005 acGUI_FontLubalGraph20B_2018
0803bbc4 g     O .rodata	00000032 acGUI_FontLubalGraph16_0062
08048174 g     O .rodata	000000a0 acGUI_FontAvantGarde32_00E0
08060774 g     O .rodata	00000030 acGUI_FontAvantGarde16B_00DB
0804a0b4 g     O .rodata	000000b6 acGUI_FontAvantGarde32_00A7
08033a94 g     O .rodata	00000002 acGUI_FontLubalGraph20_02D9
08000fec  w    F .text	00000002 DMA2_Stream6_IRQHandler
0802ca20 g     O .rodata	00000038 acGUI_FontLubalGraph24_00BF
08063400 g     O .rodata	00000028 acGUI_FontAvantGarde16_00EB
0803b64c g     O .rodata	0000000f acGUI_FontLubalGraph16_00BA
0802b2d0 g     O .rodata	0000005a acGUI_FontLubalGraph24_00FA
0800be18 g     F .text	00000010 LCD_SetBkColor
0800c07c g     F .text	0000003c GUI__IntersectRect
080307c0 g     O .rodata	00000037 acGUI_FontLubalGraph20B_00DF
08059b94 g     O .rodata	00000012 acGUI_FontAvantGarde20B_00BA
080395e8 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop14
08043cb0 g     O .rodata	000000be acGUI_FontAvantGarde32B_0041
08025dcc g     O .rodata	0000006c acGUI_FontLubalGraph24B_00FE
0805716c g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop3
08060710 g     O .rodata	00000034 acGUI_FontAvantGarde16B_00DD
0804fc28 g     O .rodata	0000005a acGUI_FontAvantGarde24B_00CA
0803bc14 g     O .rodata	00000006 acGUI_FontLubalGraph16_0060
080584c8 g     O .rodata	00000012 acGUI_FontAvantGarde20B_2026
08022f8c g     O .rodata	00000085 acGUI_FontLubalGraph32_004A
08057184 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop5
0802b12c g     O .rodata	0000007e acGUI_FontLubalGraph24_00FE
08025eb0 g     O .rodata	00000054 acGUI_FontLubalGraph24B_00FC
0803099c g     O .rodata	0000004e acGUI_FontLubalGraph20B_00D8
0805a7f0 g     O .rodata	00000048 acGUI_FontAvantGarde20B_004D
0803c33c g     O .rodata	00000002 acGUI_FontLubalGraph16_002E
0803b65c g     O .rodata	0000000e acGUI_FontLubalGraph16_00B9
08053678 g     O .rodata	0000000c acGUI_FontAvantGarde24_201E
08033f90 g     O .rodata	00000037 acGUI_FontLubalGraph20_00F8
0800086c g     F .text	00000004 GUI_X_GetTaskId
0802fcdc g     O .rodata	00000004 acGUI_FontLubalGraph20B_2010
08033fec g     O .rodata	0000003c acGUI_FontLubalGraph20_00F6
0800fc44 g     F .text	00000024 WM__GetFocussedChild
08064a4e g     O .rodata	00000010 APBAHBPrescTable
0801b6dc g     O .rodata	00000024 GUI_FontLubalGraph32
0805a76c g     O .rodata	00000048 acGUI_FontAvantGarde20B_004F
08000fec  w    F .text	00000002 DMA2_Stream0_IRQHandler
0804dc98 g     O .rodata	00000054 acGUI_FontAvantGarde24B_222B
08033ea4 g     O .rodata	00000048 acGUI_FontLubalGraph20_00FB
0802eab4 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop36
08004cf4 g     F .text	00000020 ft5336_TS_GetGestureID
0801c960 g     O .rodata	000000d8 acGUI_FontLubalGraph32_221A
0803202c g     O .rodata	0000002c acGUI_FontLubalGraph20B_0042
0803b6ec g     O .rodata	0000001c acGUI_FontLubalGraph16_00B1
0803eefc g     O .rodata	00000080 acGUI_FontAvantGarde32B_00F8
08007736 g     F .text	0000001a WM_GetClientRectEx
0804008c g     O .rodata	000000af acGUI_FontAvantGarde32B_00DA
0800395a g     F .text	0000006e HAL_LTDC_ConfigCLUT
08003020 g     F .text	000001bc HAL_RCC_ClockConfig
0804dfdc g     O .rodata	00000062 acGUI_FontAvantGarde24B_2126
08029310 g     O .rodata	00000032 acGUI_FontLubalGraph24B_002B
08026178 g     O .rodata	00000050 acGUI_FontLubalGraph24B_00F3
0805cfc4 g     O .rodata	0000003c acGUI_FontAvantGarde20_00DB
0805b108 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop26
08007684 g     F .text	00000020 WM_GetId
08041944 g     O .rodata	00000072 acGUI_FontAvantGarde32B_00B5
20008490 g     O .bss	00000004 GUITASK__EntranceCnt
0803c364 g     O .rodata	00000008 acGUI_FontLubalGraph16_002A
0803b69c g     O .rodata	00000028 acGUI_FontLubalGraph16_00B5
0805b030 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop8
080554f4 g     O .rodata	00000015 acGUI_FontAvantGarde24_00BA
0802ea9c g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop34
0803efe8 g     O .rodata	000000a0 acGUI_FontAvantGarde32B_00F6
0803ff3c g     O .rodata	000000a8 acGUI_FontAvantGarde32B_00DC
0801ca3c g     O .rodata	0000005f acGUI_FontLubalGraph32_2215
08036878 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop38
0804a37c g     O .rodata	00000014 acGUI_FontAvantGarde32_00A1
080642a8 g     O .rodata	00000028 acGUI_FontAvantGarde16_0058
08046134 g     O .rodata	000000b4 acGUI_FontAvantGarde32_2126
0803a3e8 g     O .rodata	00000020 acGUI_FontLubalGraph16_2264
080419d0 g     O .rodata	00000041 acGUI_FontAvantGarde32B_00B3
080461e8 g     O .rodata	0000008f acGUI_FontAvantGarde32_2122
080435b8 g     O .rodata	00000098 acGUI_FontAvantGarde32B_004E
0803b6cc g     O .rodata	0000000e acGUI_FontLubalGraph16_00B3
080292fc g     O .rodata	00000006 acGUI_FontLubalGraph24B_002D
0802815c g     O .rodata	00000036 acGUI_FontLubalGraph24B_006A
080279d8 g     O .rodata	00000015 acGUI_FontLubalGraph24B_00B0
080260e0 g     O .rodata	0000004b acGUI_FontLubalGraph24B_00F5
0801d3b4 g     O .rodata	00000014 acGUI_FontLubalGraph32_201C
08054048 g     O .rodata	00000060 acGUI_FontAvantGarde24_00F2
0802cc14 g     O .rodata	00000055 acGUI_FontLubalGraph24_00B6
08043a5c g     O .rodata	00000072 acGUI_FontAvantGarde32B_0045
0803c490 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop1
080540f0 g     O .rodata	0000005a acGUI_FontAvantGarde24_00F0
080536dc g     O .rodata	00000042 acGUI_FontAvantGarde24_03C0
08036794 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop19
0805719c g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop7
080643a8 g     O .rodata	0000001e acGUI_FontAvantGarde16_0052
0805b0f0 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop24
0801d38c g     O .rodata	00000014 acGUI_FontLubalGraph32_201E
08033e04 g     O .rodata	00000055 acGUI_FontLubalGraph20_00FD
0803278c g     O .rodata	0000000c GUI_FontLubalGraph20_Prop42
0800b69c g     F .text	00000010 GUI_GetpfColor2IndexEx
0801f31c g     O .rodata	000000d8 acGUI_FontLubalGraph32_00DC
0801f4d8 g     O .rodata	000000e1 acGUI_FontLubalGraph32_00DA
08006160 g     F .text	00000030 SCROLLBAR__Rect2VRect
0803f270 g     O .rodata	000000a8 acGUI_FontAvantGarde32B_00F2
0805538c g     O .rodata	00000078 acGUI_FontAvantGarde24_00BE
080633d4 g     O .rodata	00000016 acGUI_FontAvantGarde16_00ED
080536a4 g     O .rodata	00000008 acGUI_FontAvantGarde24_2019
08036704 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop7
0802a688 g     O .rodata	0000000a acGUI_FontLubalGraph24_2212
0803fdec g     O .rodata	00000085 acGUI_FontAvantGarde32B_00DE
08063dd0 g     O .rodata	00000027 acGUI_FontAvantGarde16_00A7
08026218 g     O .rodata	0000005a acGUI_FontLubalGraph24B_00F1
0803a538 g     O .rodata	00000028 acGUI_FontLubalGraph16_2206
0803917c g     O .rodata	00000024 acGUI_FontLubalGraph16B_0042
0803677c g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop17
0800bf30 g     F .text	000000d8 GUI__ManageCacheEx
080381c8 g     O .rodata	00000037 acGUI_FontLubalGraph16B_00D8
0803209c g     O .rodata	00000042 acGUI_FontLubalGraph20B_0040
08064360 g     O .rodata	00000028 acGUI_FontAvantGarde16_0054
08013748 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop33
08041a48 g     O .rodata	00000069 acGUI_FontAvantGarde32B_00B1
08030824 g     O .rodata	0000004b acGUI_FontLubalGraph20B_00DD
0804393c g     O .rodata	000000be acGUI_FontAvantGarde32B_0047
08063e8c g     O .rodata	00000009 acGUI_FontAvantGarde16_00A1
08058528 g     O .rodata	0000003c acGUI_FontAvantGarde20B_2020
0804db64 g     O .rodata	00000050 acGUI_FontAvantGarde24B_25CA
0803f128 g     O .rodata	000000a0 acGUI_FontAvantGarde32B_00F4
0803a408 g     O .rodata	00000020 acGUI_FontLubalGraph16_2260
080391d0 g     O .rodata	0000002d acGUI_FontLubalGraph16B_0040
08002c70 g     F .text	000003b0 HAL_RCC_OscConfig
080151a4 g     O .rodata	00000020 acGUI_FontLubalGraph32B_201C
08055470 g     O .rodata	00000069 acGUI_FontAvantGarde24_00BC
200002c4 g     O .data	00000004 GUI_pContext
0802e370 g     O .rodata	00000009 acGUI_FontLubalGraph24_003A
0803d85c g     O .rodata	00000015 acGUI_FontAvantGarde32B_2212
08013760 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop35
0800cd7c g     F .text	000000a4 GUI_PID_StoreState
08010240 g     F .text	00000014 WM_GetDesktopWindowEx
08028214 g     O .rodata	00000062 acGUI_FontLubalGraph24B_0067
08033838 g     O .rodata	0000006c acGUI_FontLubalGraph20_2030
08053f8c g     O .rodata	0000005a acGUI_FontAvantGarde24_00F4
080609d0 g     O .rodata	00000032 acGUI_FontAvantGarde16B_00D0
080395d0 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop12
08030738 g     O .rodata	00000041 acGUI_FontLubalGraph20B_00E1
0802cc04 g     O .rodata	0000000c acGUI_FontLubalGraph24_00B8
0803671c g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop9
08063e4c g     O .rodata	00000028 acGUI_FontAvantGarde16_00A3
080152b0 g     O .rodata	00000098 acGUI_FontLubalGraph32B_03BC
0803a9d4 g     O .rodata	0000000e acGUI_FontLubalGraph16_0131
08051a04 g     O .rodata	00000016 acGUI_FontAvantGarde24B_003A
0802ac88 g     O .rodata	00000062 acGUI_FontLubalGraph24_03A9
08015154 g     O .rodata	00000028 acGUI_FontLubalGraph32B_201E
08055ce4 g     O .rodata	00000042 acGUI_FontAvantGarde24_006F
08013790 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop39
080306c0 g     O .rodata	0000003c acGUI_FontLubalGraph20B_00E3
0804387c g     O .rodata	00000026 acGUI_FontAvantGarde32B_0049
0801cfa4 g     O .rodata	00000098 acGUI_FontLubalGraph32_20AC
08038050 g     O .rodata	00000024 acGUI_FontLubalGraph16B_00DF
08028194 g     O .rodata	0000002a acGUI_FontLubalGraph24B_0069
0803b2c0 g     O .rodata	00000024 acGUI_FontLubalGraph16_00CB
080395b8 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop10
080080d4 g     F .text	00000082 WM_InvalidateRect
08050ae8 g     O .rodata	0000005a acGUI_FontAvantGarde24B_0070
08059b2c g     O .rodata	00000054 acGUI_FontAvantGarde20B_00BC
080584dc g     O .rodata	0000000f acGUI_FontAvantGarde20B_2022
0802b220 g     O .rodata	00000054 acGUI_FontLubalGraph24_00FC
08007714 g     F .text	00000022 WM__GetClientRectEx
20000050 g     O .data	00000010 SCROLLBAR__DefaultProps
08038098 g     O .rodata	00000034 acGUI_FontLubalGraph16B_00DD
08057340 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop42
0806095c g     O .rodata	00000041 acGUI_FontAvantGarde16B_00D2
0801b718 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop3
08013778 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop37
08061e78 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop43
08004650 g     F .text	0000005c BSP_TS_Get_GestureId
08001e3c g     F .text	00000064 PendSV_Handler
08002c4e g     F .text	00000020 uxListRemove
0803757c g     O .rodata	0000000f acGUI_FontLubalGraph16B_2248
0804b774 g     O .rodata	00000078 acGUI_FontAvantGarde32_0050
0800d30c g     F .text	0000005c GUI_DrawHLine
08000fec  w    F .text	00000002 I2C4_ER_IRQHandler
080151c4 g     O .rodata	00000010 acGUI_FontLubalGraph32B_201A
0800baa0 g     F .text	00000214 LCD_DrawBitmap
08059a78 g     O .rodata	00000060 acGUI_FontAvantGarde20B_00BE
0803a79c g     O .rodata	00000028 acGUI_FontLubalGraph16_03BC
08062a6c g     O .rodata	00000024 acGUI_FontAvantGarde16_FFFF
0801b748 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop7
0805be54 g     O .rodata	00000038 acGUI_FontAvantGarde20_25CA
0802d008 g     O .rodata	0000000e acGUI_FontLubalGraph24_00A1
0802bba4 g     O .rodata	00000069 acGUI_FontLubalGraph24_00E0
0803c344 g     O .rodata	00000003 acGUI_FontLubalGraph16_002C
0803b674 g     O .rodata	00000002 acGUI_FontLubalGraph16_00B7
0801b730 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop5
08045bb4 g     O .rodata	0000008c acGUI_FontAvantGarde32_222B
08003836 g     F .text	0000009a HAL_LTDC_IRQHandler
08058e90 g     O .rodata	00000041 acGUI_FontAvantGarde20B_00E8
08057328 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop40
080570c0 g     O .rodata	0000004e acGUI_FontAvantGarde24_0023
0801b760 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop9
08000fec  w    F .text	00000002 DMA2D_IRQHandler
0800dd0c g     F .text	00000014 GUIPROP_EXT__FindChar
0802bacc g     O .rodata	00000069 acGUI_FontLubalGraph24_00E2
0805c4bc g     O .rodata	00000006 acGUI_FontAvantGarde20_02DC
08058fb0 g     O .rodata	0000003c acGUI_FontAvantGarde20B_00E4
080633a0 g     O .rodata	00000014 acGUI_FontAvantGarde16_00EF
08031eb8 g     O .rodata	00000042 acGUI_FontLubalGraph20B_0048
0801356c g     F .text	00000000 _fini
08055528 g     O .rodata	00000003 acGUI_FontAvantGarde24_00B7
08058318 g     O .rodata	00000048 acGUI_FontAvantGarde20B_2126
0805c4cc g     O .rodata	00000008 acGUI_FontAvantGarde20_02DA
08058f18 g     O .rodata	00000051 acGUI_FontAvantGarde20B_00E6
08046908 g     O .rodata	00000012 acGUI_FontAvantGarde32_02DB
0800cc20 g     F .text	00000030 GUI_SelectLayer
080314c4 g     O .rodata	00000024 acGUI_FontLubalGraph20B_00A2
080305c8 g     O .rodata	0000003c acGUI_FontLubalGraph20B_00E7
08051c98 g     O .rodata	0000002a acGUI_FontAvantGarde24B_0031
08057010 g     O .rodata	00000069 acGUI_FontAvantGarde24_0025
0804afe8 g     O .rodata	00000064 acGUI_FontAvantGarde32_005D
0800b548 g     F .text	00000030 LCD_GetPosEx
0800be28 g     F .text	00000010 LCD_SetColor
080314f4 g     O .rodata	00000001 acGUI_FontLubalGraph20B_00A0
08030644 g     O .rodata	00000041 acGUI_FontLubalGraph20B_00E5
08035f2c g     O .rodata	00000048 acGUI_FontLubalGraph20_004B
0803b428 g     O .rodata	0000003c acGUI_FontLubalGraph16_00C4
080468d4 g     O .rodata	00000024 acGUI_FontAvantGarde32_02DD
08015240 g     O .rodata	00000070 acGUI_FontLubalGraph32B_03C0
0802ad3c g     O .rodata	0000000c acGUI_FontLubalGraph24_02C6
08059030 g     O .rodata	0000003c acGUI_FontAvantGarde20B_00E2
08031f40 g     O .rodata	00000037 acGUI_FontLubalGraph20B_0046
0803571c g     O .rodata	0000002d acGUI_FontLubalGraph20_006F
0803e26c g     O .rodata	0000007e acGUI_FontAvantGarde32B_03C0
080151f4 g     O .rodata	00000027 acGUI_FontLubalGraph32B_2014
08057f40 g     O .rodata	0000002c acGUI_FontAvantGarde20B_FFFF
08032774 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop40
0802cbb8 g     O .rodata	00000018 acGUI_FontLubalGraph24_00BB
08051a1c g     O .rodata	00000054 acGUI_FontAvantGarde24B_0039
0802ffdc g     O .rodata	00000021 acGUI_FontLubalGraph20B_0142
08037ff8 g     O .rodata	0000002c acGUI_FontLubalGraph16B_00E1
08035784 g     O .rodata	00000051 acGUI_FontLubalGraph20_006D
0803b39c g     O .rodata	00000046 acGUI_FontLubalGraph16_00C6
08039074 g     O .rodata	0000002d acGUI_FontLubalGraph16B_0048
08031fa4 g     O .rodata	00000042 acGUI_FontLubalGraph20B_0044
0805fe28 g     O .rodata	00000050 acGUI_FontAvantGarde16B_2030
08031a90 g     O .rodata	0000002c acGUI_FontLubalGraph20B_005A
0802ada0 g     O .rodata	0000003c acGUI_FontLubalGraph24_017E
08049fdc g     O .rodata	000000c8 acGUI_FontAvantGarde32_00A9
080590b0 g     O .rodata	00000041 acGUI_FontAvantGarde20B_00E0
0800d1c0 g     F .text	000000e4 GUIPROP_EXT__ClearLine
0805ade8 g     O .rodata	00000003 acGUI_FontAvantGarde20B_002E
0805e580 g     O .rodata	00000030 acGUI_FontAvantGarde20_004B
08045a38 g     O .rodata	00000070 acGUI_FontAvantGarde32_2265
0803966c g     O .rodata	0000000c GUI_FontLubalGraph16_Prop25
0802cad8 g     O .rodata	00000070 acGUI_FontLubalGraph24_00BD
08056ec8 g     O .rodata	00000008 acGUI_FontAvantGarde24_002C
08056f08 g     O .rodata	0000001c acGUI_FontAvantGarde24_002A
080507ac g     O .rodata	0000004c acGUI_FontAvantGarde24B_007D
0805e7c0 g     O .rodata	00000048 acGUI_FontAvantGarde20_0040
0804a274 g     O .rodata	000000a0 acGUI_FontAvantGarde32_00A3
08051ab8 g     O .rodata	00000046 acGUI_FontAvantGarde24B_0037
0801a988 g     O .rodata	000000a2 acGUI_FontLubalGraph32B_0043
08043808 g     O .rodata	00000072 acGUI_FontAvantGarde32B_004A
08037fa8 g     O .rodata	00000028 acGUI_FontLubalGraph16B_00E3
080357fc g     O .rodata	0000003c acGUI_FontLubalGraph20_006B
0803b330 g     O .rodata	00000027 acGUI_FontLubalGraph16_00C8
08025a1c g     O .rodata	0000004b acGUI_FontLubalGraph24B_017E
080340e4 g     O .rodata	00000041 acGUI_FontLubalGraph20_00F2
080670a0 g     O .rodata	0000001c WIDGET_Effect_Simple
0802b32c g     O .rodata	0000005a acGUI_FontLubalGraph24_00F9
08063574 g     O .rodata	00000028 acGUI_FontAvantGarde16_00E2
0800d544 g     F .text	00000070 GUI_DrawGradientV
08031a3c g     O .rodata	0000002c acGUI_FontLubalGraph20B_005C
0805e670 g     O .rodata	00000024 acGUI_FontAvantGarde20_0046
08050820 g     O .rodata	0000004c acGUI_FontAvantGarde24B_007B
08043710 g     O .rodata	0000005f acGUI_FontAvantGarde32B_004C
08034170 g     O .rodata	0000003c acGUI_FontLubalGraph20_00F0
0806196c g     O .rodata	00000007 acGUI_FontAvantGarde16B_003A
080390d4 g     O .rodata	00000024 acGUI_FontLubalGraph16B_0046
08001360 g     F .text	00000010 xTaskGetTickCountFromISR
0805c4d4 g     O .rodata	00000002 acGUI_FontAvantGarde20_02D9
0801a5fc g     O .rodata	0000007e acGUI_FontLubalGraph32B_004A
0801aaac g     O .rodata	000000b4 acGUI_FontLubalGraph32B_0041
0804a184 g     O .rodata	0000008c acGUI_FontAvantGarde32_00A5
0804b60c g     O .rodata	0000008c acGUI_FontAvantGarde32_0052
0805e748 g     O .rodata	00000030 acGUI_FontAvantGarde20_0042
08037b00 g     O .rodata	0000001b acGUI_FontLubalGraph16B_0142
08000fec  w    F .text	00000002 TIM1_UP_TIM10_IRQHandler
08050a68 g     O .rodata	00000021 acGUI_FontAvantGarde24B_0072
08056ebc g     O .rodata	00000003 acGUI_FontAvantGarde24_002E
0803911c g     O .rodata	0000002d acGUI_FontLubalGraph16B_0044
0804ddd8 g     O .rodata	0000000f acGUI_FontAvantGarde24B_2212
08023120 g     O .rodata	000000be acGUI_FontLubalGraph32_0047
080611b4 g     O .rodata	0000001e acGUI_FontAvantGarde16B_0074
0805e6c4 g     O .rodata	0000003c acGUI_FontAvantGarde20_0044
08055624 g     O .rodata	00000042 acGUI_FontAvantGarde24_00B1
0804b0d0 g     O .rodata	00000064 acGUI_FontAvantGarde32_005B
0801a4ec g     O .rodata	0000006c acGUI_FontLubalGraph32B_004C
0801f1a0 g     O .rodata	00000098 acGUI_FontLubalGraph32_00DE
08063524 g     O .rodata	00000028 acGUI_FontAvantGarde16_00E4
08023014 g     O .rodata	0000004c acGUI_FontLubalGraph32_0049
080173c0 g     O .rodata	000000cf acGUI_FontLubalGraph32B_00D5
0801b700 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop1
08037f00 g     O .rodata	00000028 acGUI_FontLubalGraph16B_00E7
08057fcc g     O .rodata	00000046 acGUI_FontAvantGarde20B_25CA
200003dc g     O .data	00000004 WM__ModalLayer
08053edc g     O .rodata	0000005a acGUI_FontAvantGarde24_00F6
0804b51c g     O .rodata	00000078 acGUI_FontAvantGarde32_0054
080619c4 g     O .rodata	0000001e acGUI_FontAvantGarde16B_0037
080608dc g     O .rodata	0000003c acGUI_FontAvantGarde16B_00D4
08050a04 g     O .rodata	00000038 acGUI_FontAvantGarde24B_0074
080508ec g     O .rodata	00000042 acGUI_FontAvantGarde24B_0078
20028788 g     O .bss	00000040 xQueueRegistry
080308b8 g     O .rodata	0000004b acGUI_FontLubalGraph20B_00DB
08038d74 g     O .rodata	00000024 acGUI_FontLubalGraph16B_005A
0800621a g     F .text	00000024 GUI_DRAW__GetXSize
08052ecc g     O .rodata	00000050 acGUI_FontAvantGarde24_25CA
080172b0 g     O .rodata	00000048 acGUI_FontLubalGraph32B_00D7
08037f5c g     O .rodata	00000028 acGUI_FontLubalGraph16B_00E5
08018abc g     O .rodata	00000028 acGUI_FontLubalGraph32B_00AA
08061974 g     O .rodata	00000028 acGUI_FontAvantGarde16B_0039
0802b3d0 g     O .rodata	0000003c acGUI_FontLubalGraph24_00F7
0802f824 g     O .rodata	00000018 acGUI_FontLubalGraph20B_2248
08062ee0 g     O .rodata	0000001e acGUI_FontAvantGarde16_03BC
08015234 g     O .rodata	0000000c acGUI_FontLubalGraph32B_2010
0804585c g     O .rodata	0000007e acGUI_FontAvantGarde32_FFFF
08050988 g     O .rodata	00000042 acGUI_FontAvantGarde24B_0076
08038d40 g     O .rodata	0000001b acGUI_FontLubalGraph16B_005C
0804e810 g     O .rodata	0000002a acGUI_FontAvantGarde24B_0142
08053e44 g     O .rodata	0000004e acGUI_FontAvantGarde24_00F8
0804b3f0 g     O .rodata	000000b4 acGUI_FontAvantGarde32_0056
0806080c g     O .rodata	0000003c acGUI_FontAvantGarde16B_00D8
08016efc g     O .rodata	000000b0 acGUI_FontLubalGraph32B_00DC
08023268 g     O .rodata	00000085 acGUI_FontLubalGraph32_0045
0801643c g     O .rodata	00000048 acGUI_FontLubalGraph32B_00EF
08061420 g     O .rodata	0000001a acGUI_FontAvantGarde16B_005D
0803a80c g     O .rodata	00000006 acGUI_FontLubalGraph16_02D8
08018a54 g     O .rodata	00000040 acGUI_FontLubalGraph32B_00AC
08058360 g     O .rodata	00000031 acGUI_FontAvantGarde20B_2122
080600f8 g     O .rodata	00000031 acGUI_FontAvantGarde16B_0153
0806140c g     O .rodata	00000004 acGUI_FontAvantGarde16B_005F
0802339c g     O .rodata	000000ab acGUI_FontLubalGraph32_0043
08056f9c g     O .rodata	00000006 acGUI_FontAvantGarde24_0027
0803b24c g     O .rodata	00000018 acGUI_FontLubalGraph16_00CF
0801706c g     O .rodata	000000c8 acGUI_FontLubalGraph32B_00DA
08025850 g     O .rodata	00000006 acGUI_FontLubalGraph24B_2010
08060864 g     O .rodata	0000003c acGUI_FontAvantGarde16B_00D6
08033474 g     O .rodata	00000028 acGUI_FontLubalGraph20_2264
0802970c g     O .rodata	0000000c GUI_FontLubalGraph24_Prop35
08061460 g     O .rodata	0000001a acGUI_FontAvantGarde16B_005B
08033bf0 g     O .rodata	0000003c acGUI_FontLubalGraph20_0160
0801d3c8 g     O .rodata	0000000a acGUI_FontLubalGraph32_201A
08038980 g     O .rodata	0000001b acGUI_FontLubalGraph16B_00A2
0803758c g     O .rodata	00000027 acGUI_FontLubalGraph16B_222B
080234e0 g     O .rodata	000000d1 acGUI_FontLubalGraph32_0041
0803a4d4 g     O .rodata	0000002c acGUI_FontLubalGraph16_2211
08068c00 g     O .rodata	00000010 GUI_UC_None
08004b6c g     F .text	00000048 ft5336_ReadID
0803b288 g     O .rodata	0000001a acGUI_FontLubalGraph16_00CD
080003a4 g     F .text	00000002 MemManage_Handler
08038104 g     O .rodata	0000003c acGUI_FontLubalGraph16B_00DB
080610d0 g     O .rodata	00000027 acGUI_FontAvantGarde16B_007B
08039654 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop23
080003c4 g     F .text	00000002 OTG_HS_IRQHandler
0805fcb0 g     O .rodata	00000032 acGUI_FontAvantGarde16B_2206
080389a8 g     O .rodata	00000001 acGUI_FontLubalGraph16B_00A0
08000fec  w    F .text	00000002 DMA1_Stream5_IRQHandler
0802973c g     O .rodata	0000000c GUI_FontLubalGraph24_Prop39
0804e4d4 g     O .rodata	00000008 acGUI_FontAvantGarde24B_02DB
0802e728 g     O .rodata	00000033 acGUI_FontLubalGraph24_0028
08027888 g     O .rodata	00000012 acGUI_FontLubalGraph24B_00B8
0805194c g     O .rodata	00000037 acGUI_FontAvantGarde24B_003E
080519a8 g     O .rodata	00000037 acGUI_FontAvantGarde24B_003C
080323bc g     O .rodata	00000004 acGUI_FontLubalGraph20B_002D
080086f4 g     F .text	00000090 WM__Paint1
0800fbb0 g     F .text	0000002e FRAMEWIN_GetActive
0804b260 g     O .rodata	000000a0 acGUI_FontAvantGarde32_0058
08012f34 g     F .text	00000006 GUIMONO_GetFontInfo
08056090 g     O .rodata	0000000c acGUI_FontAvantGarde24_0060
08000540 g     F .text	00000010 GUI_X_Config
080539e8 g     O .rodata	00000048 acGUI_FontAvantGarde24_0160
080278a4 g     O .rodata	00000060 acGUI_FontLubalGraph24B_00B6
08008156 g     F .text	00000006 WM_InvalidateWindow
0800d0c0 g     F .text	00000016 GUI_FillRectEx
0802d508 g     O .rodata	0000002a acGUI_FontLubalGraph24_0069
0803c5f8 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop31
0800633c g     F .text	0000000c FRAMEWIN_SetDefaultTitleHeight
0802e764 g     O .rodata	00000054 acGUI_FontLubalGraph24_0026
0802fe84 g     O .rodata	00000046 acGUI_FontLubalGraph20B_0178
0805c33c g     O .rodata	00000008 acGUI_FontAvantGarde20_2022
08052068 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop7
0804e4ac g     O .rodata	00000019 acGUI_FontAvantGarde24B_02DD
08029724 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop37
0801d3d4 g     O .rodata	0000000a acGUI_FontLubalGraph32_2019
08035048 g     O .rodata	00000054 acGUI_FontLubalGraph20_00BE
0803590c g     O .rodata	00000024 acGUI_FontLubalGraph20_0066
20028860 g     O .bss	000000c0 GUI_ALLOC__Context
080323c8 g     O .rodata	0000002d acGUI_FontLubalGraph20B_002B
08025d40 g     O .rodata	0000001e acGUI_FontLubalGraph24B_0131
08005d40 g     F .text	00000070 WINDOW_CreateUser
08017730 g     O .rodata	000000cf acGUI_FontLubalGraph32B_00D1
08061c8c g     O .rodata	0000000c GUI_FontAvantGarde16_Prop2
0803587c g     O .rodata	00000048 acGUI_FontLubalGraph20_0068
08061180 g     O .rodata	0000001c acGUI_FontAvantGarde16B_0076
2000018c g     O .data	0000000c DROPDOWN__Skin
0803349c g     O .rodata	00000020 acGUI_FontLubalGraph20_2260
0801d708 g     O .rodata	00000078 acGUI_FontLubalGraph32_017E
0805711c g     O .rodata	0000000f acGUI_FontAvantGarde24_0021
080366ec g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop5
0805a6e8 g     O .rodata	00000054 acGUI_FontAvantGarde20B_0051
080374e8 g     O .rodata	00000024 acGUI_FontLubalGraph16B_FB01
0805a0c0 g     O .rodata	0000001b acGUI_FontAvantGarde20B_0073
08055d60 g     O .rodata	00000058 acGUI_FontAvantGarde24_006D
08017568 g     O .rodata	000000e1 acGUI_FontLubalGraph32B_00D3
08039594 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop7
08052050 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop5
0805b0c0 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop20
0805d3c8 g     O .rodata	00000030 acGUI_FontAvantGarde20_00CD
08059ee4 g     O .rodata	00000001 acGUI_FontAvantGarde20B_00A0
08063050 g     O .rodata	00000024 acGUI_FontAvantGarde16_0160
08008d6c g     F .text	00000038 GUI_MEMDEV_GetYSize
0800026c g     F .text	00000134 memcpy
08053120 g     O .rodata	0000000a acGUI_FontAvantGarde24_2212
0806408c g     O .rodata	0000000a acGUI_FontAvantGarde16_006C
0801d408 g     O .rodata	0000000e acGUI_FontLubalGraph32_2013
0803954c g     O .rodata	0000000c GUI_FontLubalGraph16_Prop1
080366d4 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop3
080393fc g     O .rodata	00000004 acGUI_FontLubalGraph16B_002D
0805a0f8 g     O .rodata	0000003c acGUI_FontAvantGarde20B_0071
2002882c g     O .bss	00000002 GUI_OrgX
080189a4 g     O .rodata	000000a2 acGUI_FontLubalGraph32B_00AE
08061ca4 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop4
08052038 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop3
0801cb48 g     O .rodata	000000c6 acGUI_FontLubalGraph32_220F
0802d6c8 g     O .rodata	0000003c acGUI_FontLubalGraph24_0063
08025708 g     O .rodata	00000015 acGUI_FontLubalGraph24B_2022
08051bfc g     O .rodata	00000054 acGUI_FontAvantGarde24B_0033
0802e8e8 g     O .rodata	00000001 acGUI_FontLubalGraph24_0020
0802b5d0 g     O .rodata	00000069 acGUI_FontLubalGraph24_00F1
0805b0d8 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop22
08063478 g     O .rodata	00000028 acGUI_FontAvantGarde16_00E8
0801a67c g     O .rodata	00000048 acGUI_FontLubalGraph32B_0049
08035960 g     O .rodata	00000048 acGUI_FontLubalGraph20_0064
0805d428 g     O .rodata	0000003c acGUI_FontAvantGarde20_00CB
08037a08 g     O .rodata	00000037 acGUI_FontLubalGraph16B_0178
08061a0c g     O .rodata	00000028 acGUI_FontAvantGarde16B_0035
08064050 g     O .rodata	00000015 acGUI_FontAvantGarde16_006E
08039404 g     O .rodata	0000001c acGUI_FontLubalGraph16B_002B
0803957c g     O .rodata	0000000c GUI_FontLubalGraph16_Prop5
080350f0 g     O .rodata	00000048 acGUI_FontLubalGraph20_00BC
080648ac g     O .rodata	0000001c acGUI_FontAvantGarde16_002B
08008dd0 g     F .text	00000130 GUI_MEMDEV_Draw
0802d768 g     O .rodata	00000046 acGUI_FontLubalGraph24_0061
0800128a g     F .text	00000044 xTaskGenericCreate
08051b54 g     O .rodata	00000054 acGUI_FontAvantGarde24B_0035
0805c748 g     O .rodata	00000030 acGUI_FontAvantGarde20_0141
08010f24 g     F .text	0000004c GUI_MEMDEV_Clear
0803e458 g     O .rodata	00000012 acGUI_FontAvantGarde32B_02DA
08035150 g     O .rodata	00000012 acGUI_FontLubalGraph20_00BA
08061a5c g     O .rodata	00000028 acGUI_FontAvantGarde16B_0033
080634c8 g     O .rodata	00000031 acGUI_FontAvantGarde16_00E6
0805550c g     O .rodata	00000012 acGUI_FontAvantGarde24_00B9
080581a4 g     O .rodata	00000008 acGUI_FontAvantGarde20B_2212
080359d8 g     O .rodata	00000048 acGUI_FontLubalGraph20_0062
080648a4 g     O .rodata	00000002 acGUI_FontAvantGarde16_002D
0800c008 g     F .text	00000010 GUI__ManageCache
08001cfc g     F .text	0000001a vPortFree
08055dc8 g     O .rodata	0000003c acGUI_FontAvantGarde24_006B
0801a88c g     O .rodata	0000006c acGUI_FontLubalGraph32B_0045
080364f4 g     O .rodata	00000002 acGUI_FontLubalGraph20_002E
080555ec g     O .rodata	0000001b acGUI_FontAvantGarde24_00B3
08035a58 g     O .rodata	0000000c acGUI_FontLubalGraph20_0060
0802b518 g     O .rodata	0000005a acGUI_FontLubalGraph24_00F3
0803963c g     O .rodata	0000000c GUI_FontLubalGraph16_Prop21
08044bcc g     O .rodata	0000000c GUI_FontAvantGarde32_Prop30
0802f83c g     O .rodata	00000033 acGUI_FontLubalGraph20B_222B
0805abe8 g     O .rodata	00000030 acGUI_FontAvantGarde20B_0038
08061aa4 g     O .rodata	00000014 acGUI_FontAvantGarde16B_0031
0801a768 g     O .rodata	000000a2 acGUI_FontLubalGraph32B_0047
08046efc g     O .rodata	00000050 acGUI_FontAvantGarde32_0142
08000fec  w    F .text	00000002 OTG_HS_EP1_IN_IRQHandler
08055594 g     O .rodata	0000004b acGUI_FontAvantGarde24_00B5
0803e430 g     O .rodata	00000014 acGUI_FontAvantGarde32B_02DC
0805fd0c g     O .rodata	0000003c acGUI_FontAvantGarde16B_212E
080611f0 g     O .rodata	0000000e acGUI_FontAvantGarde16B_0072
20028830 g     O .bss	00000004 WM_pfHandlePID
08055ff0 g     O .rodata	0000005a acGUI_FontAvantGarde24_0062
08056f24 g     O .rodata	0000003c acGUI_FontAvantGarde24_0029
0805ab98 g     O .rodata	00000014 acGUI_FontAvantGarde20B_003B
08033af8 g     O .rodata	00000030 acGUI_FontLubalGraph20_017E
0803b4a8 g     O .rodata	0000003c acGUI_FontLubalGraph16_00C2
08035164 g     O .rodata	00000010 acGUI_FontLubalGraph20_00B9
0802b02c g     O .rodata	0000002a acGUI_FontLubalGraph24_0142
08021bb8 g     O .rodata	0000007e acGUI_FontLubalGraph32_006E
0803c12c g     O .rodata	0000001e acGUI_FontLubalGraph16_003F
08061138 g     O .rodata	0000001c acGUI_FontAvantGarde16B_0078
08062b64 g     O .rodata	0000002a acGUI_FontAvantGarde16_222B
08061940 g     O .rodata	0000001c acGUI_FontAvantGarde16B_003C
080366bc g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop1
08055f50 g     O .rodata	0000005a acGUI_FontAvantGarde24_0064
0805c1c4 g     O .rodata	00000038 acGUI_FontAvantGarde20_2122
0805d4e0 g     O .rodata	00000040 acGUI_FontAvantGarde20_00C8
0801ab60 g     O .rodata	000000a2 acGUI_FontLubalGraph32B_0040
08059ee8 g     O .rodata	00000010 acGUI_FontAvantGarde20B_007E
08036534 g     O .rodata	0000000f acGUI_FontLubalGraph20_002A
0803c640 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop37
08061228 g     O .rodata	00000028 acGUI_FontAvantGarde16B_0070
08061910 g     O .rodata	0000001c acGUI_FontAvantGarde16B_003E
0803524c g     O .rodata	00000028 acGUI_FontLubalGraph20_00B1
0805c330 g     O .rodata	0000000c acGUI_FontAvantGarde20_2026
08055ee8 g     O .rodata	0000002d acGUI_FontAvantGarde24_0066
080257dc g     O .rodata	00000015 acGUI_FontLubalGraph24B_201D
0803b528 g     O .rodata	00000041 acGUI_FontLubalGraph16_00C0
0802fd9c g     O .rodata	00000008 acGUI_FontLubalGraph20B_02DB
0803c16c g     O .rodata	0000000c acGUI_FontLubalGraph16_003D
08044c2c g     O .rodata	0000000c GUI_FontAvantGarde32_Prop38
0803c658 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop39
08011954 g     F .text	00000040 LCD_SelectLCD
0802fdb0 g     O .rodata	00000009 acGUI_FontLubalGraph20B_02D8
0804cde8 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop28
0800c48e g     F .text	0000005e GUI__MixColors
0802d598 g     O .rodata	00000062 acGUI_FontLubalGraph24_0067
0801d654 g     O .rodata	00000014 acGUI_FontLubalGraph32_02C7
0802e81c g     O .rodata	0000005a acGUI_FontLubalGraph24_0024
0803521c g     O .rodata	00000018 acGUI_FontLubalGraph20_00B3
080640b8 g     O .rodata	0000001a acGUI_FontAvantGarde16_006A
0804cd40 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop14
0803a684 g     O .rodata	00000050 acGUI_FontLubalGraph16_2030
0802e9f4 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop20
0802f754 g     O .rodata	0000002c acGUI_FontLubalGraph20B_FB01
080351c8 g     O .rodata	00000048 acGUI_FontLubalGraph20_00B5
080377a8 g     O .rodata	0000001b acGUI_FontLubalGraph16B_2044
08061e84 g     O .rodata	00000be8 GUI_FontAvantGarde16_CharInfo
080641c4 g     O .rodata	0000001c acGUI_FontAvantGarde16_0061
0805ad80 g     O .rodata	00000030 acGUI_FontAvantGarde20B_0030
0805a078 g     O .rodata	00000024 acGUI_FontAvantGarde20B_0075
0803c628 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop35
0804cdd0 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop26
0802e690 g     O .rodata	00000006 acGUI_FontLubalGraph24_002D
08062dd4 g     O .rodata	00000046 acGUI_FontAvantGarde16_2030
08021060 g     O .rodata	00000020 acGUI_FontLubalGraph32_00B0
080135c8 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop1
200287d4 g     O .bss	00000004 WM__FirstWin
08033710 g     O .rodata	00000048 acGUI_FontLubalGraph20_2126
0805a008 g     O .rodata	0000003f acGUI_FontAvantGarde20B_0077
080648f4 g     O .rodata	0000001c acGUI_FontAvantGarde16_0028
0805ecd4 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop2
0804ed1c g     O .rodata	00000060 acGUI_FontAvantGarde24B_00F2
0804cd58 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop16
20000010 g     O .data	00000028 ft5336_ts_drv
0805ad2c g     O .rodata	00000030 acGUI_FontAvantGarde20B_0032
0803c610 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop33
0803795c g     O .rodata	00000003 acGUI_FontLubalGraph16B_02DB
0803a950 g     O .rodata	00000046 acGUI_FontLubalGraph16_0152
0800be38 g     F .text	00000012 GUI__strlen
0805c380 g     O .rodata	00000038 acGUI_FontAvantGarde20_2020
08048318 g     O .rodata	000000c8 acGUI_FontAvantGarde32_00DD
0804ec60 g     O .rodata	0000005a acGUI_FontAvantGarde24B_00F4
08063d2c g     O .rodata	00000006 acGUI_FontAvantGarde16_00B0
0805ecec g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop4
0805ac48 g     O .rodata	00000030 acGUI_FontAvantGarde20B_0036
0800e3c4 g     F .text	00000010 GUI_ALLOC_AssignMemory
0805d57c g     O .rodata	00000060 acGUI_FontAvantGarde20_00C6
08044b78 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop23
0802d628 g     O .rodata	0000003c acGUI_FontLubalGraph24_0065
080256f0 g     O .rodata	00000018 acGUI_FontLubalGraph24B_2026
08037894 g     O .rodata	00000008 acGUI_FontLubalGraph16B_201D
0804f660 g     O .rodata	00000080 acGUI_FontAvantGarde24B_00D8
0800dc18 g     F .text	00000020 GUI_Clear
08044c14 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop36
08045940 g     O .rodata	00000064 acGUI_FontAvantGarde32_FB01
0802e8cc g     O .rodata	0000000a acGUI_FontLubalGraph24_0022
08015430 g     O .rodata	00000012 acGUI_FontLubalGraph32B_02DA
08048214 g     O .rodata	0000008c acGUI_FontAvantGarde32_00DF
08055e3c g     O .rodata	0000004b acGUI_FontAvantGarde24_0068
0806413c g     O .rodata	0000001c acGUI_FontAvantGarde16_0065
0800328c  w    F .text	00000024 HAL_InitTick
08006f90 g     F .text	00000020 WM_SetUserClipRect
080135f8 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop5
08044b60 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop21
0805d840 g     O .rodata	00000054 acGUI_FontAvantGarde20_00BE
08059f9c g     O .rodata	0000003c acGUI_FontAvantGarde20B_0079
0805acb4 g     O .rodata	0000003c acGUI_FontAvantGarde20B_0034
0805fce4 g     O .rodata	00000028 acGUI_FontAvantGarde16B_2202
08064180 g     O .rodata	0000001c acGUI_FontAvantGarde16_0063
0804cd88 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop20
080649d0 g     O .rodata	00000001 acGUI_FontAvantGarde16_0020
0801e2a8 g     O .rodata	00000054 acGUI_FontLubalGraph32_00F7
0800cc8c g     F .text	0000001a GUI_SelectLCD
08034290 g     O .rodata	0000003c acGUI_FontLubalGraph20_00EA
0805eec0 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop43
0800c474 g     F .text	0000001a GUI__DivideRound32
0803969c g     O .rodata	0000000c GUI_FontLubalGraph16_Prop29
08006a60 g     F .text	0000001c BUTTON_SetDefaultSkin
08008058 g     F .text	00000006 WM__InvalidateRectEx
0800805e g     F .text	0000002a WM__DetachWindow
0805d63c g     O .rodata	0000005a acGUI_FontAvantGarde20_00C4
080649bc g     O .rodata	00000008 acGUI_FontAvantGarde16_0022
0805dc70 g     O .rodata	00000008 acGUI_FontAvantGarde20_007E
08014898 g     O .rodata	0000006c acGUI_FontLubalGraph32B_2215
08064b0c g     O .rodata	00000034 GUI_MEMDEV_DEVICE_32
0805361c g     O .rodata	0000005a acGUI_FontAvantGarde24_2020
08039684 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop27
0800be9e g     F .text	00000076 GUI__SetText
08061d28 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop15
080364fc g     O .rodata	00000006 acGUI_FontLubalGraph20_002C
0802fd84 g     O .rodata	0000000c acGUI_FontLubalGraph20B_02DD
0802e9a0 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop13
08046398 g     O .rodata	00000064 acGUI_FontAvantGarde32_2044
08000fec  w    F .text	00000002 UART4_IRQHandler
080535b0 g     O .rodata	0000000f acGUI_FontAvantGarde24_2022
08028740 g     O .rodata	00000054 acGUI_FontLubalGraph24B_0054
08061d58 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop19
08040e6c g     O .rodata	000000e4 acGUI_FontAvantGarde32B_00C6
080135e0 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop3
0805d6f4 g     O .rodata	0000005a acGUI_FontAvantGarde20_00C2
0805eea8 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop41
0804f42c g     O .rodata	00000072 acGUI_FontAvantGarde24B_00DD
08041c3c g     O .rodata	000000be acGUI_FontAvantGarde32B_00A9
0805e808 g     O .rodata	00000030 acGUI_FontAvantGarde20_003F
0805dca8 g     O .rodata	00000010 acGUI_FontAvantGarde20_007C
0805b120 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop28
08046934 g     O .rodata	00000018 acGUI_FontAvantGarde32_02D8
0805ed04 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop6
0801b868 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop31
0802e9b8 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop15
080287dc g     O .rodata	00000062 acGUI_FontLubalGraph24B_0052
0804e35c g     O .rodata	0000000a acGUI_FontAvantGarde24B_201A
08061d40 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop17
0802e630 g     O .rodata	0000005a acGUI_FontLubalGraph24_002F
0801e168 g     O .rodata	000000bd acGUI_FontLubalGraph32_00F9
08041d0c g     O .rodata	000000b6 acGUI_FontAvantGarde32B_00A7
0804f390 g     O .rodata	00000054 acGUI_FontAvantGarde24B_00DF
0803517c g     O .rodata	00000002 acGUI_FontLubalGraph20_00B7
08063bb8 g     O .rodata	0000001e acGUI_FontAvantGarde16_00BF
08059130 g     O .rodata	00000030 acGUI_FontAvantGarde20B_00DE
08040cd8 g     O .rodata	00000096 acGUI_FontAvantGarde32B_00C8
08005c1c g     F .text	00000124 WINDOW_Callback
08033758 g     O .rodata	00000031 acGUI_FontLubalGraph20_2122
0801b8b0 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop37
0805e890 g     O .rodata	00000014 acGUI_FontAvantGarde20_003B
0806487c g     O .rodata	00000021 acGUI_FontAvantGarde16_002F
08062afc g     O .rodata	00000020 acGUI_FontAvantGarde16_2265
0801491c g     O .rodata	00000093 acGUI_FontLubalGraph32B_2211
0802b460 g     O .rodata	0000005a acGUI_FontLubalGraph24_00F5
0801e394 g     O .rodata	00000098 acGUI_FontLubalGraph32_00F5
0803796c g     O .rodata	00000009 acGUI_FontLubalGraph16B_02D8
0801cca8 g     O .rodata	0000007e acGUI_FontLubalGraph32_2202
08027838 g     O .rodata	00000015 acGUI_FontLubalGraph24B_00BB
08015444 g     O .rodata	00000008 acGUI_FontLubalGraph32B_02D9
08036818 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop30
0801b898 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop35
08009c48 g     F .text	0000000c GUI_MEMDEV_CopyToLCD
0803b920 g     O .rodata	0000002a acGUI_FontLubalGraph16_0077
0805c17c g     O .rodata	00000048 acGUI_FontAvantGarde20_2126
0805ab5c g     O .rodata	00000018 acGUI_FontAvantGarde20B_003D
08063c0c g     O .rodata	00000032 acGUI_FontAvantGarde16_00BD
08027c0c g     O .rodata	00000054 acGUI_FontLubalGraph24B_00A3
08026550 g     O .rodata	00000064 acGUI_FontLubalGraph24B_00E6
080284d8 g     O .rodata	00000030 acGUI_FontLubalGraph24B_005B
08010ec2 g     F .text	0000002a GUI_USAGE_AddRect
0803c1d0 g     O .rodata	0000001e acGUI_FontLubalGraph16_0038
0803ea6c g     O .rodata	00000072 acGUI_FontAvantGarde32B_0141
08037944 g     O .rodata	00000009 acGUI_FontLubalGraph16B_02DD
0803c260 g     O .rodata	00000028 acGUI_FontLubalGraph16_0034
0804e348 g     O .rodata	00000014 acGUI_FontAvantGarde24B_201C
080521f4 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop40
0800cd28 g     F .text	00000054 GUI_PID_GetState
08036830 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop32
08027758 g     O .rodata	00000070 acGUI_FontLubalGraph24B_00BD
0800bd88 g     F .text	00000020 LCD_Index2Color
080136ac g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop20
0805de0c g     O .rodata	0000001b acGUI_FontAvantGarde20_0073
080159e4 g     O .rodata	00000048 acGUI_FontLubalGraph32B_0142
00000200 g       *ABS*	00000000 _Min_Heap_Size
08048470 g     O .rodata	00000090 acGUI_FontAvantGarde32_00DB
08041bb0 g     O .rodata	00000038 acGUI_FontAvantGarde32B_00AC
0805ab08 g     O .rodata	00000030 acGUI_FontAvantGarde20B_003F
0800be4a g     F .text	00000054 GUI__memset
0804edc8 g     O .rodata	00000054 acGUI_FontAvantGarde24B_00F0
08028470 g     O .rodata	00000030 acGUI_FontLubalGraph24B_005D
08027b7c g     O .rodata	00000054 acGUI_FontLubalGraph24B_00A5
08026494 g     O .rodata	00000060 acGUI_FontLubalGraph24B_00E8
0800623e g     F .text	00000024 GUI_DRAW__GetYSize
0805dd60 g     O .rodata	0000003f acGUI_FontAvantGarde20_0077
0805e940 g     O .rodata	00000030 acGUI_FontAvantGarde20_0036
0805220c g     O .rodata	0000000c GUI_FontAvantGarde24_Prop42
08015410 g     O .rodata	00000014 acGUI_FontLubalGraph32B_02DC
080343ec g     O .rodata	0000004e acGUI_FontLubalGraph20_00E5
0801a380 g     O .rodata	000000a2 acGUI_FontLubalGraph32B_004E
0805fff0 g     O .rodata	00000006 acGUI_FontAvantGarde16B_02C6
0803d4f0 g     O .rodata	00000077 acGUI_FontAvantGarde32B_2264
0803b9cc g     O .rodata	00000028 acGUI_FontLubalGraph16_0071
0800e394 g     F .text	00000030 GUI_ALLOC_UnlockH
0805ddc4 g     O .rodata	00000024 acGUI_FontAvantGarde20_0075
0801e4cc g     O .rodata	000000a8 acGUI_FontLubalGraph32_00F3
080338a4 g     O .rodata	0000000c acGUI_FontLubalGraph20_2026
08017134 g     O .rodata	000000c8 acGUI_FontLubalGraph32B_00D9
0806320c g     O .rodata	00000021 acGUI_FontAvantGarde16_00FA
08060b40 g     O .rodata	0000004e acGUI_FontAvantGarde16B_00C7
0802aaec g     O .rodata	00000055 acGUI_FontLubalGraph24_2021
0802fb48 g     O .rodata	0000002c acGUI_FontLubalGraph20B_2044
08059f78 g     O .rodata	00000024 acGUI_FontAvantGarde20B_007A
08043314 g     O .rodata	00000085 acGUI_FontAvantGarde32B_0052
20028834 g     O .bss	00000004 GUI_pfUpdateSoftLayer
0804e368 g     O .rodata	0000000a acGUI_FontAvantGarde24B_2019
08041ae0 g     O .rodata	000000be acGUI_FontAvantGarde32B_00AE
0805e8e0 g     O .rodata	00000030 acGUI_FontAvantGarde20_0038
0803b8dc g     O .rodata	00000028 acGUI_FontLubalGraph16_0079
08005314 g     F .text	00000006 HAL_I2C_GetState
0805fff8 g     O .rodata	00000034 acGUI_FontAvantGarde16B_0192
0805dd0c g     O .rodata	00000030 acGUI_FontAvantGarde20_0079
0802c384 g     O .rodata	00000048 acGUI_FontLubalGraph24_00CE
08048cf0 g     O .rodata	000000b4 acGUI_FontAvantGarde32_00D0
080631cc g     O .rodata	0000001e acGUI_FontAvantGarde16_00FC
08060af0 g     O .rodata	00000027 acGUI_FontAvantGarde16B_00C9
200287d8 g     O .bss	00000004 WM_pfPollPID
08030c9c g     O .rodata	0000003c acGUI_FontLubalGraph20B_00CE
0801d648 g     O .rodata	0000000a acGUI_FontLubalGraph32_02C9
08059f28 g     O .rodata	00000020 acGUI_FontAvantGarde20B_007C
0802fc98 g     O .rodata	0000000c acGUI_FontLubalGraph20B_201D
08059658 g     O .rodata	0000003c acGUI_FontAvantGarde20B_00CB
0803c210 g     O .rodata	00000028 acGUI_FontLubalGraph16_0036
0801e61c g     O .rodata	000000ab acGUI_FontLubalGraph32_00F1
08048b34 g     O .rodata	000000fa acGUI_FontAvantGarde32_00D2
08027aa0 g     O .rodata	0000001c acGUI_FontLubalGraph24B_00AA
08026324 g     O .rodata	00000030 acGUI_FontLubalGraph24B_00ED
0801449c g     O .rodata	0000007e acGUI_FontLubalGraph32B_FB01
08043470 g     O .rodata	00000085 acGUI_FontAvantGarde32B_0050
08006292 g     F .text	00000012 GUI_ARRAY__GetpItemLocked
0804f50c g     O .rodata	0000006c acGUI_FontAvantGarde24B_00DB
08061d10 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop13
08030e24 g     O .rodata	0000005a acGUI_FontLubalGraph20B_00C7
08030d08 g     O .rodata	0000002d acGUI_FontLubalGraph20B_00CC
08026384 g     O .rodata	00000054 acGUI_FontLubalGraph24B_00EB
08063274 g     O .rodata	0000001c acGUI_FontAvantGarde16_00F7
08008830 g     F .text	0000017c WM_Exec
080342cc g     O .rodata	00000041 acGUI_FontLubalGraph20_00E9
08000fec  w    F .text	00000002 CEC_IRQHandler
08058450 g     O .rodata	0000000c acGUI_FontAvantGarde20B_2039
08030dac g     O .rodata	0000003c acGUI_FontLubalGraph20B_00C9
08014db4 g     O .rodata	0000007e acGUI_FontLubalGraph32B_20AC
0803422c g     O .rodata	00000027 acGUI_FontLubalGraph20_00EC
0804ba80 g     O .rodata	0000008c acGUI_FontAvantGarde32_004B
08048768 g     O .rodata	000000f0 acGUI_FontAvantGarde32_00D6
080572d4 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop33
08053598 g     O .rodata	00000018 acGUI_FontAvantGarde24_2026
08034354 g     O .rodata	00000041 acGUI_FontLubalGraph20_00E7
080338b0 g     O .rodata	00000012 acGUI_FontLubalGraph20_2022
08032750 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop37
08063230 g     O .rodata	0000001e acGUI_FontAvantGarde16_00F9
080296f4 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop33
080296dc g     O .rodata	0000000c GUI_FontLubalGraph24_Prop31
08042cac g     O .rodata	0000000e acGUI_FontAvantGarde32B_005F
0805b09c g     O .rodata	0000000c GUI_FontAvantGarde20_Prop17
0804104c g     O .rodata	000000f0 acGUI_FontAvantGarde32B_00C4
080266f0 g     O .rodata	00000069 acGUI_FontLubalGraph24B_00E2
0803a4ac g     O .rodata	00000002 acGUI_FontLubalGraph16_2219
08063c74 g     O .rodata	0000000a acGUI_FontAvantGarde16_00BB
08048948 g     O .rodata	000000f0 acGUI_FontAvantGarde32_00D4
200000b4 g     O .data	00000028 FRAMEWIN__DefaultProps
0803f5ac g     O .rodata	0000008c acGUI_FontAvantGarde32B_00EB
080572ec g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop35
0804122c g     O .rodata	000000f0 acGUI_FontAvantGarde32B_00C2
08024228 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop10
08060ac0 g     O .rodata	00000030 acGUI_FontAvantGarde16B_00CA
0800d0b8 g     F .text	00000008 GUI_GetClientRect
08058444 g     O .rodata	0000000c acGUI_FontAvantGarde20B_203A
0801cc10 g     O .rodata	00000098 acGUI_FontLubalGraph32_2206
08036800 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop28
0803a4b0 g     O .rodata	0000001e acGUI_FontLubalGraph16_2215
08000bb0 g     F .text	00000018 HAL_LTDC_MspDeInit
0803d568 g     O .rodata	0000005b acGUI_FontAvantGarde32B_2260
08042d04 g     O .rodata	00000060 acGUI_FontAvantGarde32B_005D
080368c0 g     O .rodata	00000be8 GUI_FontLubalGraph16B_CharInfo
0803b968 g     O .rodata	0000001c acGUI_FontLubalGraph16_0075
08027c9c g     O .rodata	0000001c acGUI_FontLubalGraph24B_00A1
08026620 g     O .rodata	00000062 acGUI_FontLubalGraph24B_00E4
0805b084 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop15
08041c1c g     O .rodata	00000020 acGUI_FontAvantGarde32B_00AA
08024240 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop12
080276a0 g     O .rodata	00000038 acGUI_FontLubalGraph24B_00BF
08001b10 g     F .text	000000c8 osTimerStart
0801e8cc g     O .rodata	00000098 acGUI_FontLubalGraph32_00EB
08032320 g     O .rodata	00000021 acGUI_FontLubalGraph20B_0031
080341d0 g     O .rodata	00000030 acGUI_FontLubalGraph20_00EE
080367e8 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop26
0803b9a4 g     O .rodata	00000015 acGUI_FontLubalGraph16_0073
0803c2a8 g     O .rodata	0000001e acGUI_FontLubalGraph16_0032
0801b8c8 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop39
08053394 g     O .rodata	00000051 acGUI_FontAvantGarde24_2122
080267cc g     O .rodata	00000070 acGUI_FontLubalGraph24B_00E0
080430e4 g     O .rodata	000000ab acGUI_FontAvantGarde32B_0056
08064100 g     O .rodata	00000028 acGUI_FontAvantGarde16_0067
0803f504 g     O .rodata	00000054 acGUI_FontAvantGarde32B_00ED
080384f4 g     O .rodata	0000003c acGUI_FontLubalGraph16B_00C7
08041418 g     O .rodata	000000fa acGUI_FontAvantGarde32B_00C0
08054d78 g     O .rodata	00000039 acGUI_FontAvantGarde24_00CD
08062cbc g     O .rodata	0000003c acGUI_FontAvantGarde16_212E
08060a74 g     O .rodata	00000027 acGUI_FontAvantGarde16B_00CC
080136c4 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop22
080025ce g     F .text	0000005a xQueueCreateCountingSemaphore
08024258 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop14
08045dc8 g     O .rodata	0000000e acGUI_FontAvantGarde32_2212
08039394 g     O .rodata	00000012 acGUI_FontLubalGraph16B_0031
0800fbde g     F .text	00000028 WM__SendMessageNoPara
0802108c g     O .rodata	000000be acGUI_FontLubalGraph32_00AE
0803c2e8 g     O .rodata	0000001e acGUI_FontLubalGraph16_0030
0802e6a0 g     O .rodata	00000042 acGUI_FontLubalGraph24_002B
080136dc g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop24
0803f428 g     O .rodata	00000064 acGUI_FontAvantGarde32B_00EF
080640d4 g     O .rodata	0000000a acGUI_FontAvantGarde16_0069
08031540 g     O .rodata	0000002a acGUI_FontLubalGraph20B_007B
0805c2ac g     O .rodata	0000000c acGUI_FontAvantGarde20_203A
08022bcc g     O .rodata	000000be acGUI_FontLubalGraph32_004F
08060a28 g     O .rodata	00000024 acGUI_FontAvantGarde16B_00CE
08054df0 g     O .rodata	00000048 acGUI_FontAvantGarde24_00CB
08032768 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop39
08006f2a g     F .text	00000034 WM_InvalidateWindowAndDescs
08028678 g     O .rodata	00000062 acGUI_FontLubalGraph24B_0056
08030c2c g     O .rodata	00000042 acGUI_FontLubalGraph20B_00D0
0800b6b2 g     F .text	0000007e LCD__GetBPP
0803848c g     O .rodata	00000034 acGUI_FontLubalGraph16B_00C9
0802c5ac g     O .rodata	00000085 acGUI_FontLubalGraph24_00C7
2004ffff g       *ABS*	00000000 _estack
08064970 g     O .rodata	00000024 acGUI_FontAvantGarde16_0024
08042f54 g     O .rodata	000000ab acGUI_FontAvantGarde32B_0058
08043218 g     O .rodata	00000072 acGUI_FontAvantGarde32B_0054
08033910 g     O .rodata	0000004b acGUI_FontLubalGraph20_2020
0800d034 g     F .text	00000020 GUI_MULTIBUF_ConfigEx
08059d84 g     O .rodata	00000009 acGUI_FontAvantGarde20B_00A8
080383d0 g     O .rodata	00000024 acGUI_FontLubalGraph16B_00CE
08030b74 g     O .rodata	0000005a acGUI_FontLubalGraph20B_00D2
08008088 g     F .text	0000001e WM_SendMessage
08000fec  w    F .text	00000002 USART1_IRQHandler
080055b2 g     F .text	0000004c FMC_SDRAM_SendCommand
0801370c g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop28
0804e0f4 g     O .rodata	00000054 acGUI_FontAvantGarde24B_20AC
080285a4 g     O .rodata	00000054 acGUI_FontLubalGraph24B_0058
0803afe4 g     O .rodata	00000034 acGUI_FontLubalGraph16_00DA
08061cf8 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop11
080103c0 g     F .text	00000720 GUI_MEMDEV__WriteToActiveOpaque
080595f8 g     O .rodata	00000030 acGUI_FontAvantGarde20B_00CD
080600c8 g     O .rodata	00000030 acGUI_FontAvantGarde16B_0160
0801b880 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop33
08059de0 g     O .rodata	0000001c acGUI_FontAvantGarde20B_00A6
08021200 g     O .rodata	000000be acGUI_FontLubalGraph32_00A9
08057f9c g     O .rodata	00000030 acGUI_FontAvantGarde20B_FB01
0802d4e4 g     O .rodata	00000024 acGUI_FontLubalGraph24_006A
08064914 g     O .rodata	00000028 acGUI_FontAvantGarde16_0026
08032720 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop33
08038410 g     O .rodata	0000001a acGUI_FontLubalGraph16B_00CC
080212cc g     O .rodata	00000073 acGUI_FontLubalGraph32_00A7
08000fec  w    F .text	00000002 TIM8_UP_TIM13_IRQHandler
080136f4 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop26
080337c0 g     O .rodata	0000003c acGUI_FontLubalGraph20_20AC
080134bc g     F .text	000000a4 __register_exitproc
08007064 g     F .text	00000042 WM_SetFocusOnPrevChild
080003d4 g     F .text	00000008 EXTI9_5_IRQHandler
0805958c g     O .rodata	0000002d acGUI_FontAvantGarde20B_00CF
08058adc g     O .rodata	00000038 acGUI_FontAvantGarde20B_00F9
08059eac g     O .rodata	0000002c acGUI_FontAvantGarde20B_00A2
080028cc g     F .text	000000b0 xQueueGiveFromISR
08032738 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop35
080572bc g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop31
080521d0 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop37
080017f4 g     F .text	00000088 xTaskRemoveFromEventList
080389e0 g     O .rodata	00000016 acGUI_FontLubalGraph16B_007B
0802ad1c g     O .rodata	00000003 acGUI_FontLubalGraph24_02D9
08021358 g     O .rodata	00000098 acGUI_FontLubalGraph32_00A5
08056db0 g     O .rodata	0000004b acGUI_FontAvantGarde24_0032
0801d96c g     O .rodata	00000096 acGUI_FontLubalGraph32_0160
08006330 g     F .text	0000000c FRAMEWIN_SetDefaultClientColor
08058b4c g     O .rodata	00000028 acGUI_FontAvantGarde20B_00F7
0805beb4 g     O .rodata	00000028 acGUI_FontAvantGarde20_2264
08059e38 g     O .rodata	00000037 acGUI_FontAvantGarde20B_00A4
0804bf44 g     O .rodata	00000078 acGUI_FontAvantGarde32_0042
080521b8 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop35
080459a4 g     O .rodata	00000093 acGUI_FontAvantGarde32_25CA
080321f4 g     O .rodata	0000002c acGUI_FontLubalGraph20B_0037
08060bd8 g     O .rodata	00000041 acGUI_FontAvantGarde16B_00C5
08003834  w    F .text	00000002 HAL_LTDC_ErrorCallback
0802c258 g     O .rodata	00000090 acGUI_FontLubalGraph24_00D1
080039c8 g     F .text	00000034 HAL_LTDC_EnableColorKeying
0804e320 g     O .rodata	00000014 acGUI_FontAvantGarde24B_201E
08058c30 g     O .rodata	00000041 acGUI_FontAvantGarde20B_00F3
08062f74 g     O .rodata	00000006 acGUI_FontAvantGarde16_02C6
0805bedc g     O .rodata	00000020 acGUI_FontAvantGarde20_2260
0802d3b8 g     O .rodata	00000046 acGUI_FontLubalGraph24_006E
0804c070 g     O .rodata	000000b4 acGUI_FontAvantGarde32_0040
0805e85c g     O .rodata	00000010 acGUI_FontAvantGarde20_003D
08035484 g     O .rodata	0000002a acGUI_FontLubalGraph20_007D
080066be g     F .text	000000a8 GUI_CreateDialogBox
080612dc g     O .rodata	0000001a acGUI_FontAvantGarde16B_006A
08054fa0 g     O .rodata	00000087 acGUI_FontAvantGarde24_00C6
080518a0 g     O .rodata	00000062 acGUI_FontAvantGarde24B_0040
0805d7b0 g     O .rodata	00000060 acGUI_FontAvantGarde20_00C0
080362d0 g     O .rodata	00000008 acGUI_FontLubalGraph20_003A
08060c64 g     O .rodata	0000003c acGUI_FontAvantGarde16B_00C3
08032190 g     O .rodata	00000037 acGUI_FontLubalGraph20B_0039
08058bb0 g     O .rodata	00000041 acGUI_FontAvantGarde20B_00F5
0805dce8 g     O .rodata	00000024 acGUI_FontAvantGarde20_007A
080616ec g     O .rodata	0000001e acGUI_FontAvantGarde16B_004C
08000fec  w    F .text	00000002 I2C3_EV_IRQHandler
08063160 g     O .rodata	00000034 acGUI_FontAvantGarde16_00FE
0804e504 g     O .rodata	0000000c acGUI_FontAvantGarde24B_02C7
08056d08 g     O .rodata	0000005a acGUI_FontAvantGarde24_0034
080517f4 g     O .rodata	00000046 acGUI_FontAvantGarde24B_0042
0803b158 g     O .rodata	00000041 acGUI_FontLubalGraph16_00D3
08030a0c g     O .rodata	00000054 acGUI_FontLubalGraph20B_00D6
08058cb8 g     O .rodata	00000034 acGUI_FontAvantGarde20B_00F1
200287dc g     O .bss	00000002 WM__NumWindows
08067034 g     O .rodata	00000008 GUI_MULTIBUF_APIList
0802511c g     O .rodata	0000003c acGUI_FontLubalGraph24B_2264
08036294 g     O .rodata	0000002d acGUI_FontLubalGraph20_003C
0800cafc g     F .text	00000020 GUI_SetTextMode
08030abc g     O .rodata	0000005a acGUI_FontLubalGraph20B_00D4
0805fe8c g     O .rodata	00000027 acGUI_FontAvantGarde16B_2021
080211c4 g     O .rodata	0000003c acGUI_FontLubalGraph32_00AA
0802c498 g     O .rodata	0000005a acGUI_FontLubalGraph24_00CA
0805ea60 g     O .rodata	00000030 acGUI_FontAvantGarde20_0030
08000fec  w    F .text	00000002 DMA2_Stream3_IRQHandler
08022744 g     O .rodata	000000be acGUI_FontLubalGraph32_0056
0802e964 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop8
08039564 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop3
08032708 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop31
080392c4 g     O .rodata	0000001b acGUI_FontLubalGraph16B_0037
08035a68 g     O .rodata	0000002d acGUI_FontLubalGraph20_005E
08038388 g     O .rodata	0000002d acGUI_FontLubalGraph16B_00D0
08010124 g     F .text	00000036 WM__IsInWindow
0800e852 g     F .text	0000001a GUI_ALLOC_FreePtr
0803b0d8 g     O .rodata	00000041 acGUI_FontLubalGraph16_00D5
08034484 g     O .rodata	00000048 acGUI_FontLubalGraph20_00E3
08019074 g     O .rodata	0000009a acGUI_FontLubalGraph32B_0077
0800e838 g     F .text	0000001a GUI_ALLOC_AllocNoInit
0802d464 g     O .rodata	0000002a acGUI_FontLubalGraph24_006C
08025988 g     O .rodata	00000006 acGUI_FontLubalGraph24B_02D9
08056b64 g     O .rodata	0000001a acGUI_FontAvantGarde24_003B
08051608 g     O .rodata	00000054 acGUI_FontAvantGarde24B_0048
0802c404 g     O .rodata	00000036 acGUI_FontLubalGraph24_00CC
08021154 g     O .rodata	00000048 acGUI_FontLubalGraph32_00AC
0803b018 g     O .rodata	00000034 acGUI_FontLubalGraph16_00D9
08063cec g     O .rodata	00000006 acGUI_FontAvantGarde16_00B4
0803c458 g     O .rodata	00000003 acGUI_FontLubalGraph16_0022
0803b088 g     O .rodata	00000012 acGUI_FontLubalGraph16_00D7
08063d00 g     O .rodata	0000000c acGUI_FontAvantGarde16_00B2
08035ab4 g     O .rodata	00000024 acGUI_FontLubalGraph20_005C
08031508 g     O .rodata	00000027 acGUI_FontLubalGraph20B_007D
08038308 g     O .rodata	00000041 acGUI_FontLubalGraph16B_00D2
0800d0d8 g     F .text	0000005c GUI_FillRect
08013628 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop9
08032258 g     O .rodata	00000037 acGUI_FontLubalGraph20B_0035
0800bcd4 g     F .text	00000092 emWin_LCD_Init
0803c538 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop15
08019180 g     O .rodata	00000070 acGUI_FontLubalGraph32B_0075
0803927c g     O .rodata	00000024 acGUI_FontLubalGraph16B_0039
0802a4c4 g     O .rodata	0000003c acGUI_FontLubalGraph24_2264
0804b954 g     O .rodata	000000c8 acGUI_FontAvantGarde32_004D
08048630 g     O .rodata	000000dc acGUI_FontAvantGarde32_00D8
08031e24 g     O .rodata	00000042 acGUI_FontLubalGraph20B_004B
080552b8 g     O .rodata	00000085 acGUI_FontAvantGarde24_00C0
08039304 g     O .rodata	00000024 acGUI_FontLubalGraph16B_0035
08034514 g     O .rodata	0000004e acGUI_FontLubalGraph20_00E1
0801ae34 g     O .rodata	0000006c acGUI_FontLubalGraph32B_0038
080228b0 g     O .rodata	00000085 acGUI_FontLubalGraph32_0054
08060cdc g     O .rodata	00000041 acGUI_FontAvantGarde16B_00C1
0801e760 g     O .rodata	0000004c acGUI_FontLubalGraph32_00EF
08042de8 g     O .rodata	00000060 acGUI_FontAvantGarde32B_005B
080322c8 g     O .rodata	0000002c acGUI_FontLubalGraph20B_0033
08013610 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop7
0805ea18 g     O .rodata	00000030 acGUI_FontAvantGarde20_0032
08011ebe g     F .text	00000018 GUI__HandleEOLine
08061324 g     O .rodata	00000028 acGUI_FontAvantGarde16B_0067
0803c550 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop17
0800c99c g     F .text	00000014 GUI_Unlock
08063358 g     O .rodata	0000001e acGUI_FontAvantGarde16_00F1
08053328 g     O .rodata	00000069 acGUI_FontAvantGarde24_2126
08000fec  w    F .text	00000002 TIM1_BRK_TIM9_IRQHandler
080102b0 g     F .text	00000090 WM_BringToBottom
0800e138 g     F .text	00000024 GUI_GetCharDistX
0803c468 g     O .rodata	00000001 acGUI_FontLubalGraph16_0020
08055a34 g     O .rodata	0000002c acGUI_FontAvantGarde24_007A
08063ca0 g     O .rodata	0000002c acGUI_FontAvantGarde16_00B6
08000fec  w    F .text	00000002 FLASH_IRQHandler
08022578 g     O .rodata	000000be acGUI_FontLubalGraph32_0058
080003dc g     F .text	00000002 DMA2_Stream4_IRQHandler
08056b10 g     O .rodata	00000019 acGUI_FontAvantGarde24_003D
0800cbf8 g     F .text	00000026 GUI_GetLayerPosEx
0804b7ec g     O .rodata	000000c8 acGUI_FontAvantGarde32_004F
0801e824 g     O .rodata	00000054 acGUI_FontLubalGraph32_00ED
08018e24 g     O .rodata	00000023 acGUI_FontLubalGraph32B_007E
08038214 g     O .rodata	00000037 acGUI_FontLubalGraph16B_00D6
080229ac g     O .rodata	000000ab acGUI_FontLubalGraph32_0052
08058684 g     O .rodata	0000000c acGUI_FontAvantGarde20B_02DC
0803934c g     O .rodata	00000024 acGUI_FontLubalGraph16B_0033
080389b8 g     O .rodata	00000016 acGUI_FontLubalGraph16B_007D
0802c4f4 g     O .rodata	0000005a acGUI_FontLubalGraph24_00C9
08061360 g     O .rodata	0000001c acGUI_FontAvantGarde16B_0065
08039750 g     O .rodata	00000be8 GUI_FontLubalGraph16_CharInfo
08017fa4 g     O .rodata	000000dc acGUI_FontLubalGraph32B_00C4
0804641c g     O .rodata	0000001e acGUI_FontAvantGarde32_2039
080395ac g     O .rodata	0000000c GUI_FontLubalGraph16_Prop9
0800b794 g     F .text	0000005c LCD_DrawPixel
20028838 g     O .bss	00000004 GUI_MTOUCH__pStoreEvent
0802a500 g     O .rodata	00000037 acGUI_FontLubalGraph24_2260
08054cf8 g     O .rodata	00000036 acGUI_FontAvantGarde24_00CF
08061b94 g     O .rodata	00000032 acGUI_FontAvantGarde16B_0026
0802ab94 g     O .rodata	0000000c acGUI_FontLubalGraph24_201E
08006e68 g     F .text	00000012 WM__IsEnabled
08030d70 g     O .rodata	0000003c acGUI_FontLubalGraph20B_00CA
080003a8 g     F .text	00000002 UsageFault_Handler
08058040 g     O .rodata	0000002c acGUI_FontAvantGarde20B_2264
08022b34 g     O .rodata	00000098 acGUI_FontLubalGraph32_0050
08038288 g     O .rodata	0000003c acGUI_FontLubalGraph16B_00D4
08001efc g     F .text	000000a8 xPortStartScheduler
08058394 g     O .rodata	00000041 acGUI_FontAvantGarde20B_2113
0805fad8 g     O .rodata	0000001e acGUI_FontAvantGarde16B_FB02
08016db4 g     O .rodata	0000007e acGUI_FontLubalGraph32B_00DE
0805de3c g     O .rodata	0000003c acGUI_FontAvantGarde20_0071
08017dd0 g     O .rodata	000000d8 acGUI_FontLubalGraph32B_00C6
0803900c g     O .rodata	0000002d acGUI_FontLubalGraph16B_004B
08061b68 g     O .rodata	00000027 acGUI_FontAvantGarde16B_0028
0800e886 g     F .text	00000034 GUI_ALLOC_AllocZero
08009a80 g     F .text	0000004c GUI_MEMDEV_Delete
0804dc74 g     O .rodata	00000023 acGUI_FontAvantGarde24B_2248
08006138 g     F .text	00000010 SCROLLBAR_SetDefaultWidth
08061690 g     O .rodata	00000028 acGUI_FontAvantGarde16B_004E
08017a90 g     O .rodata	0000009a acGUI_FontLubalGraph32B_00CB
0804bddc g     O .rodata	000000a0 acGUI_FontAvantGarde32_0044
0805e9ac g     O .rodata	0000003c acGUI_FontAvantGarde20_0034
0802d318 g     O .rodata	00000062 acGUI_FontLubalGraph24_0070
08025ccc g     O .rodata	0000002a acGUI_FontLubalGraph24B_0142
0803af20 g     O .rodata	0000001e acGUI_FontLubalGraph16_00DE
0804e884 g     O .rodata	00000016 acGUI_FontAvantGarde24B_0131
08056c70 g     O .rodata	0000004b acGUI_FontAvantGarde24_0036
080295a4 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop5
08024288 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop18
0803e244 g     O .rodata	00000018 acGUI_FontAvantGarde32B_2013
08029688 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop24
0801d610 g     O .rodata	0000000a acGUI_FontLubalGraph32_02DB
08028ce8 g     O .rodata	00000062 acGUI_FontLubalGraph24B_0044
080060e4 g     F .text	0000003c WIDGET__DrawTriangle
0803845c g     O .rodata	00000030 acGUI_FontLubalGraph16B_00CA
080612b0 g     O .rodata	0000000a acGUI_FontAvantGarde16B_006C
08005348 g     F .text	00000074 HAL_DMA_Init
0801331c g     F .text	0000009a memset
080143b4 g     O .rodata	00000066 acGUI_FontLubalGraph32B_FFFF
08062f00 g     O .rodata	00000032 acGUI_FontAvantGarde16_03A9
0803af84 g     O .rodata	00000030 acGUI_FontLubalGraph16_00DC
08056bd8 g     O .rodata	0000004b acGUI_FontAvantGarde24_0038
0800665c g     F .text	0000001c DROPDOWN_SetDefaultSkin
08061ae0 g     O .rodata	00000021 acGUI_FontAvantGarde16B_002F
0804694c g     O .rodata	0000000a acGUI_FontAvantGarde32_02C9
0803e2ec g     O .rodata	00000072 acGUI_FontAvantGarde32B_03BC
08001be0 g     F .text	00000050 osMutexWait
080146b8 g     O .rodata	00000036 acGUI_FontLubalGraph32B_2248
0804bd00 g     O .rodata	00000064 acGUI_FontAvantGarde32_0046
08028c4c g     O .rodata	00000054 acGUI_FontLubalGraph24B_0046
0802e40c g     O .rodata	00000046 acGUI_FontLubalGraph24_0037
0800297c g     F .text	00000178 xQueueGenericReceive
08024270 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop16
08002504 g     F .text	00000070 xQueueGenericReset
08027abc g     O .rodata	00000062 acGUI_FontLubalGraph24B_00A9
0805c464 g     O .rodata	00000048 acGUI_FontAvantGarde20_03A9
08061b14 g     O .rodata	00000018 acGUI_FontAvantGarde16B_002B
0801acdc g     O .rodata	00000031 acGUI_FontLubalGraph32B_003D
080296b8 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop28
0804bb98 g     O .rodata	0000008c acGUI_FontAvantGarde32_0048
080295d4 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop9
08018f24 g     O .rodata	00000054 acGUI_FontLubalGraph32B_007A
080612f8 g     O .rodata	0000000a acGUI_FontAvantGarde16B_0069
08055c2c g     O .rodata	0000005a acGUI_FontAvantGarde24_0071
0803e1ec g     O .rodata	00000012 acGUI_FontAvantGarde32B_2019
0803c58c g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop22
0804e610 g     O .rodata	0000006c acGUI_FontAvantGarde24B_0178
08066f28 g     O .rodata	00000100 LCD_aMirror
0803c568 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop19
0802e49c g     O .rodata	00000046 acGUI_FontLubalGraph24_0035
0802842c g     O .rodata	00000005 acGUI_FontLubalGraph24B_005F
08027b2c g     O .rodata	00000040 acGUI_FontLubalGraph24B_00A7
080295bc g     O .rodata	0000000c GUI_FontLubalGraph24_Prop7
08018354 g     O .rodata	000000fa acGUI_FontLubalGraph32B_00C0
08036698 g     O .rodata	00000024 GUI_FontLubalGraph16B
0803dda8 g     O .rodata	00000098 acGUI_FontAvantGarde32B_20AC
080319e0 g     O .rodata	00000004 acGUI_FontLubalGraph20B_005F
0802555c g     O .rodata	0000004b acGUI_FontLubalGraph24B_2113
08061b08 g     O .rodata	00000004 acGUI_FontAvantGarde16B_002D
08062f7c g     O .rodata	00000034 acGUI_FontAvantGarde16_0192
08018e9c g     O .rodata	00000032 acGUI_FontLubalGraph32B_007C
080352d0 g     O .rodata	00000002 acGUI_FontLubalGraph20_00AD
0801ac04 g     O .rodata	0000006c acGUI_FontLubalGraph32B_003F
08035bb4 g     O .rodata	0000006c acGUI_FontLubalGraph20_0057
0802a968 g     O .rodata	00000062 acGUI_FontLubalGraph24_20AC
080296a0 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop26
08005098 g     F .text	0000002c HAL_I2C_DeInit
08051550 g     O .rodata	00000054 acGUI_FontAvantGarde24B_004B
0803c574 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop20
08035b24 g     O .rodata	00000048 acGUI_FontLubalGraph20_0059
080559e4 g     O .rodata	00000014 acGUI_FontAvantGarde24_007C
08035284 g     O .rodata	00000003 acGUI_FontLubalGraph20_00AF
0805a334 g     O .rodata	0000003c acGUI_FontAvantGarde20B_0064
0805aac0 g     O .rodata	00000048 acGUI_FontAvantGarde20B_0040
08031a14 g     O .rodata	00000027 acGUI_FontLubalGraph20B_005D
08018168 g     O .rodata	000000f0 acGUI_FontLubalGraph32B_00C2
0801ad7c g     O .rodata	00000020 acGUI_FontLubalGraph32B_003B
08056e2c g     O .rodata	0000004b acGUI_FontAvantGarde24_0030
08029574 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop1
0803a35c g     O .rodata	0000001e acGUI_FontLubalGraph16_FB02
08052f94 g     O .rodata	00000037 acGUI_FontAvantGarde24_2260
08055998 g     O .rodata	0000000f acGUI_FontAvantGarde24_007E
08028db0 g     O .rodata	00000054 acGUI_FontLubalGraph24B_0042
0805b054 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop11
0805a3a0 g     O .rodata	0000003c acGUI_FontAvantGarde20B_0062
0805aa48 g     O .rodata	00000030 acGUI_FontAvantGarde20B_0042
080123cc g     F .text	00000020 GUI_SetTextAlign
08063ea4 g     O .rodata	0000001a acGUI_FontAvantGarde16_007D
08038d08 g     O .rodata	00000004 acGUI_FontLubalGraph16B_005F
0801d5e8 g     O .rodata	00000018 acGUI_FontLubalGraph32_02DD
08025830 g     O .rodata	00000014 acGUI_FontLubalGraph24B_2014
0800da3c g     F .text	00000038 GUI_DEVICE_UnlinkTaskDevices
0800c018 g     F .text	00000064 GUI__IntersectRects
08028e74 g     O .rodata	00000062 acGUI_FontLubalGraph24B_0040
0802b9fc g     O .rodata	00000062 acGUI_FontLubalGraph24_00E4
0802d238 g     O .rodata	0000002a acGUI_FontLubalGraph24_0074
0804cea8 g     O .rodata	00000be8 GUI_FontAvantGarde24B_CharInfo
08061bfc g     O .rodata	00000024 acGUI_FontAvantGarde16B_0024
0805d8dc g     O .rodata	00000048 acGUI_FontAvantGarde20_00BC
080003ac g     F .text	00000018 SysTick_Handler
0805c784 g     O .rodata	0000003c acGUI_FontAvantGarde20_00FF
08064718 g     O .rodata	00000007 acGUI_FontAvantGarde16_003A
0805b06c g     O .rodata	0000000c GUI_FontAvantGarde20_Prop13
080352f4 g     O .rodata	0000000e acGUI_FontLubalGraph20_00AB
08035c74 g     O .rodata	00000048 acGUI_FontLubalGraph20_0055
2002883c g     O .bss	00000004 GUI__BufferSize
08018f78 g     O .rodata	00000098 acGUI_FontLubalGraph32B_0079
08038d28 g     O .rodata	00000016 acGUI_FontLubalGraph16B_005D
0805173c g     O .rodata	00000054 acGUI_FontAvantGarde24B_0044
08025778 g     O .rodata	00000050 acGUI_FontLubalGraph24B_2020
0800d7be g     F .text	00000008 GUI_DispStringInRect
080632b8 g     O .rodata	00000028 acGUI_FontAvantGarde16_00F5
0805c6b8 g     O .rodata	0000006c acGUI_FontAvantGarde20_0152
0805ae1c g     O .rodata	00000012 acGUI_FontAvantGarde20B_002A
0802d28c g     O .rodata	00000028 acGUI_FontLubalGraph24_0072
08061c44 g     O .rodata	00000008 acGUI_FontAvantGarde16B_0022
08052f58 g     O .rodata	0000003c acGUI_FontAvantGarde24_2264
08035cf8 g     O .rodata	00000030 acGUI_FontLubalGraph20_0053
08025858 g     O .rodata	0000003c acGUI_FontLubalGraph24B_03C0
080516cc g     O .rodata	00000038 acGUI_FontAvantGarde24B_0046
080646f4 g     O .rodata	0000001c acGUI_FontAvantGarde16_003C
08054ecc g     O .rodata	0000004c acGUI_FontAvantGarde24_00C8
080003f0 g     F .text	00000028 CreateWindow
0805a170 g     O .rodata	0000002d acGUI_FontAvantGarde20B_006F
08056a8c g     O .rodata	0000004b acGUI_FontAvantGarde24_003F
0802958c g     O .rodata	0000000c GUI_FontLubalGraph24_Prop3
08063308 g     O .rodata	00000028 acGUI_FontAvantGarde16_00F3
080551b0 g     O .rodata	0000007e acGUI_FontAvantGarde24_00C2
08035d70 g     O .rodata	00000054 acGUI_FontLubalGraph20_0051
08063c94 g     O .rodata	00000008 acGUI_FontAvantGarde16_00B8
0805731c g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop39
0800e6d4 g     F .text	0000003c GUI_ALLOC_GetMaxSize
0805ae90 g     O .rodata	00000005 acGUI_FontAvantGarde20B_0027
08046988 g     O .rodata	000000af acGUI_FontAvantGarde32_0192
08052080 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop9
08046d20 g     O .rodata	000000c4 acGUI_FontAvantGarde32_0153
08061c58 g     O .rodata	00000001 acGUI_FontAvantGarde16B_0020
080550b0 g     O .rodata	0000007e acGUI_FontAvantGarde24_00C4
08019360 g     O .rodata	00000098 acGUI_FontLubalGraph32B_0070
0803e1b8 g     O .rodata	0000001e acGUI_FontAvantGarde32B_201C
0801b09c g     O .rodata	0000007e acGUI_FontLubalGraph32B_0033
08057304 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop37
08007750 g     F .text	0000002c WM_GetClientRect
0805ae30 g     O .rodata	00000030 acGUI_FontAvantGarde20B_0029
0805ed64 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop14
08055bdc g     O .rodata	0000002c acGUI_FontAvantGarde24_0073
080613a4 g     O .rodata	0000001c acGUI_FontAvantGarde16B_0063
0802d078 g     O .rodata	00000033 acGUI_FontLubalGraph24_007B
08033820 g     O .rodata	0000000e acGUI_FontLubalGraph20_203A
0803b1e0 g     O .rodata	00000041 acGUI_FontLubalGraph16_00D1
08035364 g     O .rodata	00000004 acGUI_FontLubalGraph20_00A8
0803bec0 g     O .rodata	00000032 acGUI_FontLubalGraph16_004E
0801af8c g     O .rodata	0000007e acGUI_FontLubalGraph32B_0035
0802157c g     O .rodata	00000042 acGUI_FontLubalGraph32_007D
0803db18 g     O .rodata	000000d1 acGUI_FontAvantGarde32B_212E
0803e1d8 g     O .rodata	00000012 acGUI_FontAvantGarde32B_201A
080534d0 g     O .rodata	00000010 acGUI_FontAvantGarde24_203A
08055b74 g     O .rodata	00000037 acGUI_FontAvantGarde24_0075
0803a820 g     O .rodata	00000006 acGUI_FontLubalGraph16_02C6
0805ed7c g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop16
0802b0a0 g     O .rodata	0000001e acGUI_FontLubalGraph24_0131
080613e8 g     O .rodata	0000001c acGUI_FontAvantGarde16B_0061
08013494 g     F .text	00000028 __libc_fini_array
0805c1fc g     O .rodata	00000041 acGUI_FontAvantGarde20_2113
0803c5d4 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop28
0802e37c g     O .rodata	00000046 acGUI_FontLubalGraph24_0039
08019280 g     O .rodata	00000046 acGUI_FontLubalGraph32B_0072
0802d030 g     O .rodata	00000033 acGUI_FontLubalGraph24_007D
08044c44 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop40
08006348 g     F .text	00000014 FRAMEWIN_SetDefaultTextColor
0805d948 g     O .rodata	0000000e acGUI_FontAvantGarde20_00B9
0803395c g     O .rodata	00000009 acGUI_FontLubalGraph20_201E
0800b8e0 g     F .text	000001c0 LCD__DrawBitmap_1bpp
08035470 g     O .rodata	00000001 acGUI_FontLubalGraph20_00A0
08055ae4 g     O .rodata	00000058 acGUI_FontAvantGarde24_0077
0803bf30 g     O .rodata	0000001e acGUI_FontLubalGraph16_004C
0802cf70 g     O .rodata	00000054 acGUI_FontLubalGraph24_00A3
080463fc g     O .rodata	0000001e acGUI_FontAvantGarde32_203A
2000003c g     O .data	00000004 _pEffectDefault
0806400c g     O .rodata	00000028 acGUI_FontAvantGarde16_0070
0804ce6c g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop39
0805c2b8 g     O .rodata	0000000c acGUI_FontAvantGarde20_2039
0802e52c g     O .rodata	00000046 acGUI_FontLubalGraph24_0033
080243c0 g     O .rodata	00000be8 GUI_FontLubalGraph24B_CharInfo
08063ed0 g     O .rodata	0000001a acGUI_FontAvantGarde16_007B
0802d128 g     O .rodata	0000003c acGUI_FontLubalGraph24_0078
0804cda0 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop22
08000fec  w    F .text	00000002 I2C2_EV_IRQHandler
080353e0 g     O .rodata	0000001c acGUI_FontLubalGraph20_00A4
08063fd4 g     O .rodata	0000000e acGUI_FontAvantGarde16_0072
08064720 g     O .rodata	00000028 acGUI_FontAvantGarde16_0039
0802ceec g     O .rodata	00000054 acGUI_FontLubalGraph24_00A5
080208c0 g     O .rodata	00000113 acGUI_FontLubalGraph32_00C1
08062e30 g     O .rodata	00000030 acGUI_FontAvantGarde16_2021
0805a2e0 g     O .rodata	00000024 acGUI_FontAvantGarde20B_0066
0802abac g     O .rodata	0000000c acGUI_FontLubalGraph24_201C
08010e30 g     F .text	00000060 GUI_USAGE_BM_Create
0804f030 g     O .rodata	00000060 acGUI_FontAvantGarde24B_00E8
0803c5bc g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop26
0804ce54 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop37
0804cdb8 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop24
0805064c g     O .rodata	00000054 acGUI_FontAvantGarde24B_00A5
0804e5b4 g     O .rodata	0000005a acGUI_FontAvantGarde24B_017D
0805fda0 g     O .rodata	00000028 acGUI_FontAvantGarde16B_2113
08035438 g     O .rodata	0000002c acGUI_FontLubalGraph20_00A2
0804ff24 g     O .rodata	0000007e acGUI_FontAvantGarde24B_00C3
08062b90 g     O .rodata	00000019 acGUI_FontAvantGarde16_221E
08053a30 g     O .rodata	0000006e acGUI_FontAvantGarde24_0153
08053834 g     O .rodata	00000072 acGUI_FontAvantGarde24_0192
0805c4f0 g     O .rodata	0000000c acGUI_FontAvantGarde20_02C6
0801b188 g     O .rodata	00000048 acGUI_FontLubalGraph32B_0031
0805a26c g     O .rodata	00000030 acGUI_FontAvantGarde20B_0068
080377d4 g     O .rodata	00000048 acGUI_FontLubalGraph16B_2030
08060d64 g     O .rodata	0000001e acGUI_FontAvantGarde16B_00BF
0805afa8 g     O .rodata	0000000c acGUI_FontAvantGarde20B_0021
08062bac g     O .rodata	00000038 acGUI_FontAvantGarde16_221A
08064768 g     O .rodata	0000001e acGUI_FontAvantGarde16_0037
20000378 g     O .data	0000000c HEADER__Skin
0803c5a4 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop24
0802abb8 g     O .rodata	00000008 acGUI_FontLubalGraph24_201A
08036734 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop11
08048ee0 g     O .rodata	00000064 acGUI_FontAvantGarde32_00CC
080506e8 g     O .rodata	00000054 acGUI_FontAvantGarde24B_00A3
0804f0ec g     O .rodata	0000006e acGUI_FontAvantGarde24B_00E6
0800da14 g     F .text	00000028 GUI_DEVICE_CreateAndLink
0804fe1c g     O .rodata	00000085 acGUI_FontAvantGarde24B_00C5
0802fdbc g     O .rodata	00000006 acGUI_FontLubalGraph20B_02C9
200002a0 g     O .data	00000004 LCD__pSetColorAPI
08044bfc g     O .rodata	0000000c GUI_FontAvantGarde32_Prop34
0805d960 g     O .rodata	00000002 acGUI_FontAvantGarde20_00B7
08000fec  w    F .text	00000002 I2C4_EV_IRQHandler
0805aee0 g     O .rodata	00000048 acGUI_FontAvantGarde20B_0025
08025824 g     O .rodata	0000000c acGUI_FontLubalGraph24B_2018
0805deb4 g     O .rodata	0000002d acGUI_FontAvantGarde20_006F
0802d1c0 g     O .rodata	0000003c acGUI_FontLubalGraph24_0076
08064848 g     O .rodata	00000014 acGUI_FontAvantGarde16_0031
08055a60 g     O .rodata	0000004b acGUI_FontAvantGarde24_0079
08048dec g     O .rodata	00000090 acGUI_FontAvantGarde32_00CE
0802e5bc g     O .rodata	0000002a acGUI_FontLubalGraph24_0031
08014a70 g     O .rodata	00000090 acGUI_FontLubalGraph32B_2206
0805adf4 g     O .rodata	00000008 acGUI_FontAvantGarde20B_002C
0802e94c g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop6
08044be4 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop32
08063f68 g     O .rodata	0000001c acGUI_FontAvantGarde16_0076
08008a8c g     F .text	000000f4 WM_Init
0804e2c4 g     O .rodata	0000005a acGUI_FontAvantGarde24B_2020
080346e8 g     O .rodata	0000005a acGUI_FontLubalGraph20_00DB
0804ce0c g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop31
0805af60 g     O .rodata	00000037 acGUI_FontAvantGarde20B_0023
08039708 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop38
08000fec  w    F .text	00000002 RCC_IRQHandler
0804e254 g     O .rodata	00000012 acGUI_FontAvantGarde24B_2022
08063f9c g     O .rodata	0000001e acGUI_FontAvantGarde16_0074
20028920 g     O .bss	00000010 WM__aCHWinMouseOver
08063074 g     O .rodata	00000031 acGUI_FontAvantGarde16_0153
0805ed34 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop10
0803c408 g     O .rodata	00000027 acGUI_FontLubalGraph16_0024
0805c914 g     O .rodata	00000037 acGUI_FontAvantGarde20_00F8
0800dd5c g     F .text	00000006 GUIPROP_EXT_GetFontInfo
0805d9ac g     O .rodata	00000030 acGUI_FontAvantGarde20_00B5
0805df08 g     O .rodata	0000003f acGUI_FontAvantGarde20_006D
080396f0 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop36
0800eb4c g     F .text	000000b8 GUIPROP_AA4_EXT_DispChar
0804ef18 g     O .rodata	0000005a acGUI_FontAvantGarde24B_00EB
0805ed4c g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop12
08013578 g       .text	00000000 _etext
0805211c g     O .rodata	0000000c GUI_FontAvantGarde24_Prop22
0801b7e4 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop20
0805d9e8 g     O .rodata	00000015 acGUI_FontAvantGarde20_00B3
0800e038 g     F .text	000000a8 GUI__DispLine
0805c97c g     O .rodata	0000003c acGUI_FontAvantGarde20_00F6
0802ea0c g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop22
0804013c g     O .rodata	000000af acGUI_FontAvantGarde32B_00D9
0802fdc4 g     O .rodata	00000010 acGUI_FontLubalGraph20B_02C7
08045b7c g     O .rodata	00000038 acGUI_FontAvantGarde32_2248
0803a9ac g     O .rodata	00000028 acGUI_FontLubalGraph16_0141
0805df54 g     O .rodata	00000030 acGUI_FontAvantGarde20_006B
0802abc0 g     O .rodata	00000008 acGUI_FontLubalGraph24_2019
0805b0b4 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop19
08046958 g     O .rodata	00000018 acGUI_FontAvantGarde32_02C7
08062be4 g     O .rodata	00000002 acGUI_FontAvantGarde16_2219
0804eea4 g     O .rodata	00000033 acGUI_FontAvantGarde24B_00ED
0804a3b4 g     O .rodata	0000006c acGUI_FontAvantGarde32_007D
08028b58 g     O .rodata	0000002a acGUI_FontLubalGraph24B_0049
0801b7fc g     O .rodata	0000000c GUI_FontLubalGraph32_Prop22
0805381c g     O .rodata	0000000c acGUI_FontAvantGarde24_02C7
08050534 g     O .rodata	0000001c acGUI_FontAvantGarde24B_00AA
080158f8 g     O .rodata	000000ea acGUI_FontLubalGraph32B_0152
08004a2c g     F .text	00000014 BSP_LED_On
08001ae0 g     F .text	00000010 osDelay
0802fd08 g     O .rodata	00000037 acGUI_FontLubalGraph20B_03BC
08035394 g     O .rodata	0000000e acGUI_FontLubalGraph20_00A6
08058d7c g     O .rodata	0000002a acGUI_FontAvantGarde20B_00ED
08062c0c g     O .rodata	0000002c acGUI_FontAvantGarde16_2211
080646c8 g     O .rodata	0000001c acGUI_FontAvantGarde16_003E
0802ea24 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop24
0801b844 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop28
08015478 g     O .rodata	0000001e acGUI_FontLubalGraph32B_02C7
0805ead0 g     O .rodata	00000006 acGUI_FontAvantGarde20_002C
08028be8 g     O .rodata	00000062 acGUI_FontLubalGraph24B_0047
0805ca74 g     O .rodata	00000041 acGUI_FontAvantGarde20_00F2
08061d64 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop20
080514b4 g     O .rodata	00000062 acGUI_FontAvantGarde24B_004D
08027a64 g     O .rodata	00000024 acGUI_FontLubalGraph24B_00AC
080262bc g     O .rodata	0000002a acGUI_FontLubalGraph24B_00EF
08058d28 g     O .rodata	00000024 acGUI_FontAvantGarde20B_00EF
0804a43c g     O .rodata	0000006c acGUI_FontAvantGarde32_007B
08014b00 g     O .rodata	00000078 acGUI_FontLubalGraph32B_2202
0805fe10 g     O .rodata	0000000a acGUI_FontAvantGarde16B_203A
08033988 g     O .rodata	00000006 acGUI_FontLubalGraph20_2019
08037978 g     O .rodata	00000006 acGUI_FontLubalGraph16B_02C9
0803689c g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop41
0801b82c g     O .rodata	0000000c GUI_FontLubalGraph32_Prop26
0800b640 g     F .text	00000010 LCD_GetNumColors
08000fec  w    F .text	00000002 UART5_IRQHandler
0801da04 g     O .rodata	000000c4 acGUI_FontLubalGraph32_0153
08026d74 g     O .rodata	0000008c acGUI_FontLubalGraph24B_00D3
0803bfd4 g     O .rodata	00000032 acGUI_FontLubalGraph16_0047
08015468 g     O .rodata	0000000f acGUI_FontLubalGraph32B_02C9
08052188 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop31
08063928 g     O .rodata	00000018 acGUI_FontAvantGarde16_00CC
0802abe4 g     O .rodata	0000000a acGUI_FontLubalGraph24_2013
0805e0e4 g     O .rodata	0000003c acGUI_FontAvantGarde20_0062
080513f0 g     O .rodata	00000070 acGUI_FontAvantGarde24B_004F
080279f8 g     O .rodata	00000062 acGUI_FontLubalGraph24B_00AE
0802e934 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop4
080368b4 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop43
08001fa4 g     F .text	00000064 vPortValidateInterruptPriority
08050024 g     O .rodata	00000085 acGUI_FontAvantGarde24B_00C1
0803c070 g     O .rodata	00000032 acGUI_FontLubalGraph16_0043
08005496 g     F .text	00000086 FMC_SDRAM_Init
080521a0 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop33
08026c74 g     O .rodata	0000007e acGUI_FontLubalGraph24B_00D5
0802e91c g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop2
080505cc g     O .rodata	0000005f acGUI_FontAvantGarde24B_00A7
0803bf98 g     O .rodata	00000014 acGUI_FontLubalGraph16_0049
08048fd4 g     O .rodata	00000090 acGUI_FontAvantGarde32_00CA
0805eb7c g     O .rodata	00000005 acGUI_FontAvantGarde20_0027
0803c3a0 g     O .rodata	00000032 acGUI_FontLubalGraph16_0026
080638ec g     O .rodata	00000024 acGUI_FontAvantGarde16_00CE
080378f0 g     O .rodata	00000024 acGUI_FontLubalGraph16B_03BC
0805e024 g     O .rodata	00000024 acGUI_FontAvantGarde20_0066
0805e078 g     O .rodata	0000003c acGUI_FontAvantGarde20_0064
0802a808 g     O .rodata	00000070 acGUI_FontLubalGraph24_212E
0802aa24 g     O .rodata	0000009a acGUI_FontLubalGraph24_2030
08003a30 g     F .text	00000034 HAL_LTDC_EnableCLUT
08060e5c g     O .rodata	0000002c acGUI_FontAvantGarde16B_00B6
0802ae38 g     O .rodata	0000007e acGUI_FontLubalGraph24_0178
08041514 g     O .rodata	00000085 acGUI_FontAvantGarde32B_00BF
0801451c g     O .rodata	0000008c acGUI_FontLubalGraph32B_25CA
0803c384 g     O .rodata	00000016 acGUI_FontLubalGraph16_0028
080601f4 g     O .rodata	00000034 acGUI_FontAvantGarde16B_00FE
08007c4c g     F .text	0000005c WM__ClipAtParentBorders
08050550 g     O .rodata	00000070 acGUI_FontAvantGarde24B_00A9
08011b7c g     F .text	00000060 GUI_ReadRectEx
08044a48 g     O .rodata	00000001 acGUI_FontAvantGarde32B_0020
08047290 g     O .rodata	0000008c acGUI_FontAvantGarde32_00FB
08026a4c g     O .rodata	0000008c acGUI_FontLubalGraph24B_00DA
080252f4 g     O .rodata	00000050 acGUI_FontLubalGraph24B_2211
0805eb1c g     O .rodata	00000030 acGUI_FontAvantGarde20_0029
0802bd38 g     O .rodata	0000007e acGUI_FontLubalGraph24_00DC
0805ff08 g     O .rodata	00000006 acGUI_FontAvantGarde16B_2019
20000066 g     O .data	00000002 SCROLLBAR__ThumbSizeMin
08036680 g     O .rodata	00000008 acGUI_FontLubalGraph20_0022
08034878 g     O .rodata	0000005a acGUI_FontLubalGraph20_00D6
08017c54 g     O .rodata	00000096 acGUI_FontLubalGraph32B_00C8
08060e50 g     O .rodata	00000008 acGUI_FontAvantGarde16B_00B8
0803e178 g     O .rodata	0000001e acGUI_FontAvantGarde32B_201E
08061dac g     O .rodata	0000000c GUI_FontAvantGarde16_Prop26
0805ff00 g     O .rodata	00000006 acGUI_FontAvantGarde16B_201A
0804714c g     O .rodata	000000b6 acGUI_FontAvantGarde32_00FD
0805c80c g     O .rodata	00000040 acGUI_FontAvantGarde20_00FD
0801d634 g     O .rodata	00000014 acGUI_FontLubalGraph32_02D8
08031174 g     O .rodata	00000042 acGUI_FontLubalGraph20B_00BD
0805d938 g     O .rodata	0000000f acGUI_FontAvantGarde20_00BA
08052164 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop28
0803c028 g     O .rodata	0000001e acGUI_FontLubalGraph16_0045
080012d0 g     F .text	00000074 vTaskStartScheduler
0804a664 g     O .rodata	00000062 acGUI_FontAvantGarde32_0076
0804971c g     O .rodata	000000e1 acGUI_FontAvantGarde32_00C1
08021dd4 g     O .rodata	00000048 acGUI_FontLubalGraph32_006A
0803c520 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop13
0802fb84 g     O .rodata	0000006e acGUI_FontLubalGraph20B_2030
080074c8 g     F .text	00000020 WM_MULTIBUF_Enable
08058894 g     O .rodata	00000060 acGUI_FontAvantGarde20B_0152
08031238 g     O .rodata	00000034 acGUI_FontLubalGraph20B_00B6
0804a584 g     O .rodata	00000054 acGUI_FontAvantGarde32_0078
08066ec0 g     O .rodata	00000034 GUIDRV_Lin_32_API
0805a210 g     O .rodata	00000030 acGUI_FontAvantGarde20B_006B
080591b0 g     O .rodata	0000003c acGUI_FontAvantGarde20B_00DC
08025094 g     O .rodata	0000004b acGUI_FontLubalGraph24B_25CA
08036694 g     O .rodata	00000001 acGUI_FontLubalGraph20_0020
08020ae8 g     O .rodata	00000072 acGUI_FontLubalGraph32_00BF
08061dc4 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop28
0805dfb0 g     O .rodata	00000030 acGUI_FontAvantGarde20_0068
08046fd4 g     O .rodata	000000af acGUI_FontAvantGarde32_00FF
08044ac4 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop8
08007e30 g     F .text	00000020 WM__IsWindow
080339a4 g     O .rodata	00000005 acGUI_FontLubalGraph20_2013
080135a4 g     O .rodata	00000024 GUI_FontLubalGraph32B
08065b10 g     O .rodata	00000024 GUI_Font16_1
0803c508 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop11
08001cac g     F .text	00000050 pvPortMalloc
08068c30 g       .init_array	00000000 __exidx_end
0803788c g     O .rodata	00000008 acGUI_FontLubalGraph16B_201E
08021cf0 g     O .rodata	0000004c acGUI_FontLubalGraph32_006C
0803122c g     O .rodata	00000008 acGUI_FontLubalGraph20B_00B8
08042938 g     O .rodata	000000a0 acGUI_FontAvantGarde32B_0067
0805a1c4 g     O .rodata	0000003f acGUI_FontAvantGarde20B_006D
080521e8 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop39
08013688 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop17
08059228 g     O .rodata	00000040 acGUI_FontAvantGarde20B_00DA
08057268 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop24
080445c4 g     O .rodata	00000010 acGUI_FontAvantGarde32B_002D
0804c2b8 g     O .rodata	0000000e acGUI_FontAvantGarde32_003A
08049380 g     O .rodata	000000fa acGUI_FontAvantGarde32_00C5
0802eacc g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop38
0802e9dc g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop18
080032b0 g     F .text	00000024 HAL_Init
0803e574 g     O .rodata	00000078 acGUI_FontAvantGarde32B_017E
080242a0 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop20
0805b1d4 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop43
08029670 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop22
08034804 g     O .rodata	00000054 acGUI_FontLubalGraph20_00D8
08044aac g     O .rodata	0000000c GUI_FontAvantGarde32_Prop6
080136a0 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop19
0803462c g     O .rodata	00000060 acGUI_FontLubalGraph20_00DD
080254b0 g     O .rodata	00000062 acGUI_FontLubalGraph24B_2126
0803edfc g     O .rodata	0000007e acGUI_FontAvantGarde32B_00FA
0800ca7c g     F .text	00000058 GUITASK_CopyContext
0805c87c g     O .rodata	00000030 acGUI_FontAvantGarde20_00FB
08060ea8 g     O .rodata	00000006 acGUI_FontAvantGarde16B_00B4
0800c280 g     F .text	000001f4 GUI__DrawTwinArc4
080402c0 g     O .rodata	0000005b acGUI_FontAvantGarde32B_00D7
08029658 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop20
080445e8 g     O .rodata	0000005b acGUI_FontAvantGarde32B_002B
08059c78 g     O .rodata	00000028 acGUI_FontAvantGarde20B_00B1
080326e4 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop28
08057280 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop26
08054660 g     O .rodata	0000004b acGUI_FontAvantGarde24_00DF
0804e040 g     O .rodata	00000051 acGUI_FontAvantGarde24B_2122
08028a58 g     O .rodata	00000046 acGUI_FontLubalGraph24B_004C
08037980 g     O .rodata	00000009 acGUI_FontLubalGraph16B_02C7
0804956c g     O .rodata	000000d8 acGUI_FontAvantGarde32_00C3
0802e9c4 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop16
08061ce0 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop9
0805b1bc g     O .rodata	0000000c GUI_FontAvantGarde20_Prop41
0805fef4 g     O .rodata	00000009 acGUI_FontAvantGarde16B_201C
0800cb54 g     F .text	00000040 GL_SetDefault
0804040c g     O .rodata	000000f0 acGUI_FontAvantGarde32B_00D5
080242b8 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop22
08042a24 g     O .rodata	00000070 acGUI_FontAvantGarde32B_0065
08000fec  w    F .text	00000002 RTC_WKUP_IRQHandler
08063964 g     O .rodata	00000024 acGUI_FontAvantGarde16_00CA
0803ed0c g     O .rodata	00000078 acGUI_FontAvantGarde32B_00FC
08036854 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop35
08060ec4 g     O .rodata	0000000c acGUI_FontAvantGarde16B_00B2
0803c694 g     O .rodata	00000be8 GUI_FontAvantGarde32B_CharInfo
08028968 g     O .rodata	00000070 acGUI_FontLubalGraph24B_004E
08026e8c g     O .rodata	00000090 acGUI_FontLubalGraph24B_00D1
080252b0 g     O .rodata	00000038 acGUI_FontLubalGraph24B_2215
08029778 g     O .rodata	00000be8 GUI_FontLubalGraph24_CharInfo
0801dda0 g     O .rodata	000000d8 acGUI_FontLubalGraph32_00FE
080316b8 g     O .rodata	00000018 acGUI_FontLubalGraph20B_0072
08044a00 g     O .rodata	00000020 acGUI_FontAvantGarde32B_0022
0805fedc g     O .rodata	00000009 acGUI_FontAvantGarde16B_201E
08044a94 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop4
080407e4 g     O .rodata	000000c0 acGUI_FontAvantGarde32B_00D1
080242d0 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop24
080534e0 g     O .rodata	00000010 acGUI_FontAvantGarde24_2039
08032578 g     O .rodata	00000001 acGUI_FontLubalGraph20B_0020
08063f2c g     O .rodata	00000015 acGUI_FontAvantGarde16_0078
080345b4 g     O .rodata	0000003c acGUI_FontLubalGraph20_00DF
08061cc8 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop7
08041680 g     O .rodata	000000be acGUI_FontAvantGarde32B_00BD
0801df48 g     O .rodata	000000ab acGUI_FontLubalGraph32_00FC
0800e0e0 g     F .text	0000003c GUI_GetYAdjust
0802416c g     O .rodata	00000012 acGUI_FontLubalGraph32_0022
0803c0c4 g     O .rodata	00000032 acGUI_FontLubalGraph16_0041
0803683c g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop33
08039524 g     O .rodata	00000001 acGUI_FontLubalGraph16B_0020
08031708 g     O .rodata	00000037 acGUI_FontLubalGraph20B_0070
080387c4 g     O .rodata	0000002c acGUI_FontLubalGraph16B_00B6
0802a91c g     O .rodata	0000004b acGUI_FontLubalGraph24_2113
080448fc g     O .rodata	0000008a acGUI_FontAvantGarde32B_0024
08038ae0 g     O .rodata	00000015 acGUI_FontLubalGraph16B_0072
0801e0a8 g     O .rodata	000000bd acGUI_FontLubalGraph32_00FA
08061d7c g     O .rodata	0000000c GUI_FontAvantGarde16_Prop22
08028b04 g     O .rodata	00000054 acGUI_FontLubalGraph24B_004A
08060e28 g     O .rodata	0000000f acGUI_FontAvantGarde16B_00BB
080242e8 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop26
08024194 g     O .rodata	00000001 acGUI_FontLubalGraph32_0020
0803ebac g     O .rodata	000000a8 acGUI_FontAvantGarde32B_00FE
08041800 g     O .rodata	00000032 acGUI_FontAvantGarde32B_00BB
080405ec g     O .rodata	000000fa acGUI_FontAvantGarde32B_00D3
080311fc g     O .rodata	0000000c acGUI_FontLubalGraph20B_00BB
08020dc4 g     O .rodata	0000001e acGUI_FontLubalGraph32_00BB
08038b1c g     O .rodata	00000024 acGUI_FontLubalGraph16B_0070
08052104 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop20
080387b8 g     O .rodata	00000006 acGUI_FontLubalGraph16B_00B8
08031674 g     O .rodata	00000021 acGUI_FontLubalGraph20B_0074
08053814 g     O .rodata	00000008 acGUI_FontAvantGarde24_02C9
08060dc0 g     O .rodata	00000032 acGUI_FontAvantGarde16B_00BD
08000fec  w    F .text	00000002 UART8_IRQHandler
08014ea0 g     O .rodata	00000014 acGUI_FontLubalGraph32B_203A
080546f8 g     O .rodata	00000072 acGUI_FontAvantGarde24_00DD
20000000 g       .data	00000000 _sdata
08064800 g     O .rodata	00000028 acGUI_FontAvantGarde16_0033
08039528 g     O .rodata	00000024 GUI_FontLubalGraph16
080222ec g     O .rodata	00000070 acGUI_FontLubalGraph32_005E
08000fec  w    F .text	00000002 I2C2_ER_IRQHandler
0805214c g     O .rodata	0000000c GUI_FontAvantGarde24_Prop26
080317c8 g     O .rodata	00000021 acGUI_FontLubalGraph20B_006C
08020c30 g     O .rodata	000000d1 acGUI_FontLubalGraph32_00BD
08022244 g     O .rodata	0000007e acGUI_FontLubalGraph32_0061
080446fc g     O .rodata	00000082 acGUI_FontAvantGarde32B_0028
08000fec  w    F .text	00000002 SPI2_IRQHandler
08052134 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop24
08001da4 g     F .text	00000020 SVC_Handler
08038738 g     O .rodata	0000002d acGUI_FontLubalGraph16B_00BD
08031824 g     O .rodata	0000001c acGUI_FontLubalGraph20B_006A
08059ba8 g     O .rodata	0000000e acGUI_FontAvantGarde20B_00B9
0800c10c g     F .text	00000174 GUI__DrawTwinArc2
08013640 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop11
08031624 g     O .rodata	00000028 acGUI_FontLubalGraph20B_0076
08031040 g     O .rodata	0000005a acGUI_FontLubalGraph20B_00C1
08013670 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop15
0802fc88 g     O .rodata	0000000f acGUI_FontLubalGraph20B_201E
0802bc64 g     O .rodata	00000054 acGUI_FontLubalGraph24_00DE
08044790 g     O .rodata	000000ab acGUI_FontAvantGarde32B_0026
0802c750 g     O .rodata	00000090 acGUI_FontLubalGraph24_00C4
08020e54 g     O .rodata	00000084 acGUI_FontLubalGraph32_00B6
08061d94 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop24
0800fc68 g     F .text	00000012 WM__GetFirstSibling
080326b4 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop24
08038798 g     O .rodata	0000000a acGUI_FontLubalGraph16B_00BB
080647b0 g     O .rodata	00000028 acGUI_FontAvantGarde16_0035
080504f8 g     O .rodata	0000001e acGUI_FontAvantGarde24B_00AC
080603fc g     O .rodata	0000001e acGUI_FontAvantGarde16B_00F1
08059bc0 g     O .rodata	00000003 acGUI_FontAvantGarde20B_00B7
0801b814 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop24
08010eec g     F .text	00000038 GUI_MEMDEV_ReduceYSize
0804cca4 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop1
0804ee1c g     O .rodata	0000003c acGUI_FontAvantGarde24B_00EF
08020f84 g     O .rodata	00000014 acGUI_FontLubalGraph32_00B4
08057238 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop20
08038ab4 g     O .rodata	00000012 acGUI_FontLubalGraph16B_0074
08013658 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop13
080547c8 g     O .rodata	0000005a acGUI_FontAvantGarde24_00DB
08033a7c g     O .rodata	00000006 acGUI_FontLubalGraph20_02DC
0805047c g     O .rodata	00000070 acGUI_FontAvantGarde24B_00AE
08059c48 g     O .rodata	00000018 acGUI_FontAvantGarde20B_00B3
08042b2c g     O .rodata	00000070 acGUI_FontAvantGarde32B_0063
08001354 g     F .text	0000000c xTaskGetTickCount
08057250 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop22
08000fec  w    F .text	00000002 USART3_IRQHandler
08038ba4 g     O .rodata	00000012 acGUI_FontLubalGraph16B_006C
080326cc g     O .rodata	0000000c GUI_FontLubalGraph20_Prop26
08056a20 g     O .rodata	00000069 acGUI_FontAvantGarde24_0040
0806002c g     O .rodata	0000001e acGUI_FontAvantGarde16B_017E
08044538 g     O .rodata	00000084 acGUI_FontAvantGarde32B_002F
08006678 g     F .text	0000001c DROPDOWN_SetDefaultColor
08020fc8 g     O .rodata	0000002c acGUI_FontLubalGraph32_00B2
0800d94c g     F .text	00000004 GUI_DEVICE_Delete
0804c714 g     O .rodata	0000003c acGUI_FontAvantGarde32_0031
0803e360 g     O .rodata	000000ab acGUI_FontAvantGarde32B_03A9
08004cbc g     F .text	0000000a ft5336_TS_EnableIT
08059c0c g     O .rodata	00000030 acGUI_FontAvantGarde20B_00B5
0802c870 g     O .rodata	00000090 acGUI_FontLubalGraph24_00C2
08038a7c g     O .rodata	0000001c acGUI_FontLubalGraph16B_0076
0805ff24 g     O .rodata	00000006 acGUI_FontAvantGarde16B_2013
0804283c g     O .rodata	00000060 acGUI_FontAvantGarde32B_006A
0803a500 g     O .rodata	00000037 acGUI_FontLubalGraph16_220F
08042c24 g     O .rodata	00000070 acGUI_FontAvantGarde32B_0061
08038bdc g     O .rodata	00000016 acGUI_FontLubalGraph16B_006A
08005404 g     F .text	00000040 HAL_SDRAM_Init
08032684 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop20
0805c634 g     O .rodata	0000003c acGUI_FontAvantGarde20_0160
0804ccec g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop7
080310f8 g     O .rodata	0000002c acGUI_FontLubalGraph20B_00BF
08060260 g     O .rodata	0000001e acGUI_FontAvantGarde16B_00FC
08014eb4 g     O .rodata	00000014 acGUI_FontLubalGraph32B_2039
0804e4f0 g     O .rodata	0000000c acGUI_FontAvantGarde24B_02D8
080427a0 g     O .rodata	00000026 acGUI_FontAvantGarde32B_006C
08062be8 g     O .rodata	0000001e acGUI_FontAvantGarde16_2215
0800d770 g     F .text	0000004e GUI_DispStringInRectMax
08033a8c g     O .rodata	00000008 acGUI_FontLubalGraph20_02DA
0805da10 g     O .rodata	0000002d acGUI_FontAvantGarde20_00B1
0804ccd4 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop5
0805871c g     O .rodata	00000030 acGUI_FontAvantGarde20B_017E
0805eac8 g     O .rodata	00000002 acGUI_FontAvantGarde20_002E
080101fc g     F .text	00000044 WM_OnKey
0803ac98 g     O .rodata	00000014 acGUI_FontLubalGraph16_00EF
0805c9f4 g     O .rodata	0000003c acGUI_FontAvantGarde20_00F4
08032430 g     O .rodata	00000027 acGUI_FontLubalGraph20B_0028
080602a0 g     O .rodata	00000021 acGUI_FontAvantGarde16B_00FA
08001dc4 g     F .text	0000004c vPortEnterCritical
0803a674 g     O .rodata	00000005 acGUI_FontLubalGraph16_203A
08005096  w    F .text	00000002 HAL_I2C_MspDeInit
0805ed94 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop18
08007500 g     F .text	00000020 WM_IsFocussable
08056978 g     O .rodata	0000003c acGUI_FontAvantGarde24_0042
0800b67c g     F .text	00000010 LCD_GetPalette
0802ff78 g     O .rodata	00000063 acGUI_FontLubalGraph20B_0152
080513a8 g     O .rodata	00000046 acGUI_FontAvantGarde24B_0050
08030ed8 g     O .rodata	0000005a acGUI_FontLubalGraph20B_00C5
08054c8c g     O .rodata	00000069 acGUI_FontAvantGarde24_00D0
0801d0d0 g     O .rodata	0000011d acGUI_FontLubalGraph32_2030
0803bc1c g     O .rodata	00000004 acGUI_FontLubalGraph16_005F
0803ae78 g     O .rodata	00000028 acGUI_FontLubalGraph16_00E2
0804ccbc g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop3
08032460 g     O .rodata	00000037 acGUI_FontLubalGraph20B_0026
08054a90 g     O .rodata	0000007e acGUI_FontAvantGarde24_00D4
0805eb08 g     O .rodata	00000012 acGUI_FontAvantGarde20_002A
0802d808 g     O .rodata	00000030 acGUI_FontLubalGraph24_005D
0805cae8 g     O .rodata	0000003c acGUI_FontAvantGarde20_00F0
080426b0 g     O .rodata	00000054 acGUI_FontAvantGarde32B_006E
080315c4 g     O .rodata	00000028 acGUI_FontLubalGraph20B_0078
08000fec  w    F .text	00000002 SAI1_IRQHandler
0802c990 g     O .rodata	00000090 acGUI_FontLubalGraph24_00C0
080510b8 g     O .rodata	00000062 acGUI_FontAvantGarde24B_0058
08000fec  w    F .text	00000002 FMC_IRQHandler
08014ec8 g     O .rodata	0000010e acGUI_FontLubalGraph32B_2030
0804289c g     O .rodata	00000026 acGUI_FontAvantGarde32B_0069
0803945c g     O .rodata	0000002d acGUI_FontLubalGraph16B_0026
08054b98 g     O .rodata	00000085 acGUI_FontAvantGarde24_00D2
08030f88 g     O .rodata	0000005a acGUI_FontLubalGraph20B_00C3
08015dbc g     O .rodata	00000098 acGUI_FontLubalGraph32B_00FB
080533e8 g     O .rodata	00000050 acGUI_FontAvantGarde24_2113
0803ad78 g     O .rodata	0000002c acGUI_FontLubalGraph16_00E8
08024054 g     O .rodata	00000090 acGUI_FontLubalGraph32_0024
0800059c g     F .text	000000ec k_SetGuiProfile
0803ae28 g     O .rodata	00000028 acGUI_FontLubalGraph16_00E4
080197f4 g     O .rodata	00000048 acGUI_FontLubalGraph32B_0066
08062a90 g     O .rodata	0000001e acGUI_FontAvantGarde16_FB02
08012f3a g     F .text	00000036 GUIMONO_IsInFont
0802be38 g     O .rodata	0000007e acGUI_FontLubalGraph24_00DA
0801d67c g     O .rodata	0000008a acGUI_FontLubalGraph32_0192
0802d7bc g     O .rodata	00000005 acGUI_FontLubalGraph24_005F
080032d4  w    F .text	00000010 HAL_IncTick
08034930 g     O .rodata	0000005a acGUI_FontLubalGraph20_00D4
080349ec g     O .rodata	00000060 acGUI_FontLubalGraph20_00D2
08063b40 g     O .rodata	0000003c acGUI_FontAvantGarde16_00C1
08035e9c g     O .rodata	00000060 acGUI_FontLubalGraph20_004D
0803865c g     O .rodata	00000041 acGUI_FontLubalGraph16B_00C1
20028840 g     O .bss	00000001 GUI_DecChar
0800cb3c g     F .text	00000018 GUI_SetDrawMode
08039440 g     O .rodata	00000016 acGUI_FontLubalGraph16B_0028
0801b37c g     O .rodata	00000054 acGUI_FontLubalGraph32B_0029
08039744 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop43
0803adcc g     O .rodata	00000031 acGUI_FontLubalGraph16_00E6
0801c56c g     O .rodata	00000085 acGUI_FontLubalGraph32_FB02
08031768 g     O .rodata	00000028 acGUI_FontLubalGraph20B_006E
08035e00 g     O .rodata	00000048 acGUI_FontLubalGraph20_004F
080324e8 g     O .rodata	0000003c acGUI_FontLubalGraph20B_0024
08025514 g     O .rodata	00000048 acGUI_FontLubalGraph24B_2122
08063ac8 g     O .rodata	0000003c acGUI_FontAvantGarde16_00C3
0803a754 g     O .rodata	00000006 acGUI_FontLubalGraph16_201D
080198a0 g     O .rodata	00000090 acGUI_FontLubalGraph32B_0064
0805119c g     O .rodata	00000062 acGUI_FontAvantGarde24B_0056
0805ec94 g     O .rodata	0000000c acGUI_FontAvantGarde20_0021
080603a4 g     O .rodata	0000002c acGUI_FontAvantGarde16B_00F3
08023cf0 g     O .rodata	000000a8 acGUI_FontLubalGraph32_002F
08037ac0 g     O .rodata	0000003f acGUI_FontLubalGraph16B_0152
0804c234 g     O .rodata	00000062 acGUI_FontAvantGarde32_003C
08049194 g     O .rodata	000000fa acGUI_FontAvantGarde32_00C7
0803255c g     O .rodata	0000000f acGUI_FontLubalGraph20B_0022
08061590 g     O .rodata	0000001e acGUI_FontAvantGarde16B_0054
08063a50 g     O .rodata	0000003c acGUI_FontAvantGarde16_00C5
08032188 g     O .rodata	00000008 acGUI_FontLubalGraph20B_003A
08021f14 g     O .rodata	000000ab acGUI_FontLubalGraph32_0067
08060ef0 g     O .rodata	00000008 acGUI_FontAvantGarde16B_00B0
08021e1c g     O .rodata	0000004c acGUI_FontLubalGraph32_0069
08002574 g     F .text	0000005a xQueueGenericCreate
0805ec4c g     O .rodata	0000003c acGUI_FontAvantGarde20_0023
080194cc g     O .rodata	000000a8 acGUI_FontLubalGraph32B_006D
0802d870 g     O .rodata	00000030 acGUI_FontLubalGraph24_005B
08007ea0 g     F .text	00000022 WM__RectIsNZ
080394bc g     O .rodata	00000030 acGUI_FontLubalGraph16B_0024
08038a34 g     O .rodata	0000001c acGUI_FontLubalGraph16B_0078
08023db0 g     O .rodata	00000062 acGUI_FontLubalGraph32_002B
08034ab8 g     O .rodata	00000048 acGUI_FontLubalGraph20_00D0
08023d9c g     O .rodata	00000008 acGUI_FontLubalGraph32_002D
08011c28 g     F .text	0000005c LCD_GetpPalConvTableUncached
080566dc g     O .rodata	0000004b acGUI_FontAvantGarde24_004B
08054990 g     O .rodata	0000007e acGUI_FontAvantGarde24_00D6
08044a7c g     O .rodata	0000000c GUI_FontAvantGarde32_Prop2
080615d8 g     O .rodata	00000028 acGUI_FontAvantGarde16B_0052
0800d624 g     F .text	0000014c GUI__DispStringInRect
0804c19c g     O .rodata	00000062 acGUI_FontAvantGarde32_003E
08049064 g     O .rodata	00000096 acGUI_FontAvantGarde32_00C9
08038568 g     O .rodata	00000041 acGUI_FontLubalGraph16B_00C5
0803e46c g     O .rodata	00000008 acGUI_FontAvantGarde32B_02D9
0803d27c g     O .rodata	0000007e acGUI_FontAvantGarde32B_FFFF
0802200c g     O .rodata	00000070 acGUI_FontLubalGraph32_0065
080193f8 g     O .rodata	00000062 acGUI_FontLubalGraph32B_006F
0803269c g     O .rodata	0000000c GUI_FontLubalGraph20_Prop22
08039510 g     O .rodata	00000008 acGUI_FontLubalGraph16B_0022
08060354 g     O .rodata	00000028 acGUI_FontAvantGarde16B_00F5
08038b5c g     O .rodata	0000001c acGUI_FontLubalGraph16B_006E
0801881c g     O .rodata	00000098 acGUI_FontLubalGraph32B_00B5
080003c8 g     F .text	0000000c LTDC_IRQHandler
08015fac g     O .rodata	00000070 acGUI_FontLubalGraph32B_00F8
08018780 g     O .rodata	00000008 acGUI_FontLubalGraph32B_00B7
0804da90 g     O .rodata	00000041 acGUI_FontAvantGarde24B_FFFF
0800dd74 g     F .text	00000038 GUIPROP_EXT_GetCharInfo
0800deac g     F .text	0000003c GUIPROP_GetCharDistX
080334bc g     O .rodata	00000014 acGUI_FontLubalGraph20_2248
0804cd04 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop9
08000820 g     F .text	00000030 GUI_X_InitOS
0806030c g     O .rodata	00000020 acGUI_FontAvantGarde16B_00F7
08007d4c g     F .text	0000003c WM__RemoveWindowFromList
08017990 g     O .rodata	0000007d acGUI_FontLubalGraph32B_00CD
08039274 g     O .rodata	00000006 acGUI_FontLubalGraph16B_003A
08022128 g     O .rodata	00000070 acGUI_FontLubalGraph32_0063
08017890 g     O .rodata	0000006e acGUI_FontLubalGraph32B_00CF
0802beb8 g     O .rodata	0000007e acGUI_FontLubalGraph24_00D9
080133b8 g     F .text	000000ba strcpy
0805e150 g     O .rodata	00000009 acGUI_FontAvantGarde20_0060
0805376c g     O .rodata	00000069 acGUI_FontAvantGarde24_03A9
0803a86c g     O .rodata	00000030 acGUI_FontLubalGraph16_017D
080386e4 g     O .rodata	0000001b acGUI_FontLubalGraph16B_00BF
08018640 g     O .rodata	000000b4 acGUI_FontLubalGraph32B_00BC
08062f34 g     O .rodata	00000009 acGUI_FontAvantGarde16_02DD
0804a894 g     O .rodata	00000098 acGUI_FontAvantGarde32_0070
0803accc g     O .rodata	00000016 acGUI_FontLubalGraph16_00ED
080568b0 g     O .rodata	0000005a acGUI_FontAvantGarde24_0044
0804a72c g     O .rodata	00000050 acGUI_FontAvantGarde32_0074
08052224 g     O .rodata	00000be8 GUI_FontAvantGarde24_CharInfo
0805ebcc g     O .rodata	00000048 acGUI_FontAvantGarde20_0025
0802e19c g     O .rodata	00000070 acGUI_FontLubalGraph24_0041
08003c18 g     F .text	00000748 HAL_RCCEx_PeriphCLKConfig
0803acfc g     O .rodata	00000028 acGUI_FontLubalGraph16_00EB
08015ae4 g     O .rodata	000000b8 acGUI_FontLubalGraph32B_00FF
0804c5fc g     O .rodata	0000008c acGUI_FontAvantGarde32_0033
08062eb0 g     O .rodata	00000003 acGUI_FontAvantGarde16_2018
08029610 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop14
0806108c g     O .rodata	00000009 acGUI_FontAvantGarde16B_007E
08056838 g     O .rodata	0000003c acGUI_FontAvantGarde24_0046
080602c4 g     O .rodata	00000021 acGUI_FontAvantGarde16B_00F9
0804a7c4 g     O .rodata	00000038 acGUI_FontAvantGarde32_0072
08025978 g     O .rodata	0000000f acGUI_FontLubalGraph24B_02DA
080290ec g     O .rodata	00000046 acGUI_FontLubalGraph24B_0035
08027fbc g     O .rodata	00000054 acGUI_FontLubalGraph24B_0070
08033cec g     O .rodata	00000024 acGUI_FontLubalGraph20_0142
08004cc6 g     F .text	0000000a ft5336_TS_DisableIT
08015c54 g     O .rodata	000000d8 acGUI_FontLubalGraph32B_00FD
08029628 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop16
0801871c g     O .rodata	00000028 acGUI_FontLubalGraph32B_00BA
08020e38 g     O .rodata	00000015 acGUI_FontLubalGraph32_00B8
0800b630 g     F .text	00000010 LCD_GetYSize
080385e4 g     O .rodata	0000003c acGUI_FontLubalGraph16B_00C3
08029640 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop18
0804c2c8 g     O .rodata	0000008c acGUI_FontAvantGarde32_0039
08036604 g     O .rodata	00000040 acGUI_FontLubalGraph20_0024
08023ee8 g     O .rodata	000000ab acGUI_FontLubalGraph32_0026
080610c0 g     O .rodata	0000000d acGUI_FontAvantGarde16B_007C
08024300 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop28
0805fdc8 g     O .rodata	00000028 acGUI_FontAvantGarde16B_20AC
0804c4e4 g     O .rodata	0000008c acGUI_FontAvantGarde32_0035
08026ad8 g     O .rodata	0000008c acGUI_FontLubalGraph24B_00D9
0803972c g     O .rodata	0000000c GUI_FontLubalGraph16_Prop41
0802905c g     O .rodata	00000046 acGUI_FontLubalGraph24B_0037
08027f30 g     O .rodata	00000028 acGUI_FontLubalGraph24B_0072
08025960 g     O .rodata	00000010 acGUI_FontLubalGraph24B_02DC
0803dd1c g     O .rodata	0000008c acGUI_FontAvantGarde32B_2113
08058628 g     O .rodata	00000048 acGUI_FontAvantGarde20B_03A9
08056774 g     O .rodata	0000004b acGUI_FontAvantGarde24_0048
08023e88 g     O .rodata	00000058 acGUI_FontLubalGraph32_0028
0801b2e0 g     O .rodata	00000008 acGUI_FontLubalGraph32B_002E
08032370 g     O .rodata	00000046 acGUI_FontLubalGraph20B_002F
08000fec  w    F .text	00000002 OTG_HS_WKUP_IRQHandler
0804c3e0 g     O .rodata	00000078 acGUI_FontAvantGarde32_0037
08061534 g     O .rodata	00000032 acGUI_FontAvantGarde16B_0056
08000fec  w    F .text	00000002 SPI1_IRQHandler
08026bd4 g     O .rodata	0000002d acGUI_FontLubalGraph24B_00D7
08058698 g     O .rodata	00000008 acGUI_FontAvantGarde20B_02DA
08025644 g     O .rodata	0000000e acGUI_FontLubalGraph24B_2039
20000298 g     O .data	00000004 BUTTON__pSkinDefault
08053b38 g     O .rodata	0000002d acGUI_FontAvantGarde24_0142
08031d5c g     O .rodata	00000042 acGUI_FontLubalGraph20B_004E
08067088 g     O .rodata	00000018 LCD_API_ColorConv_M1555I
080614c4 g     O .rodata	00000032 acGUI_FontAvantGarde16B_0058
08047530 g     O .rodata	000000a0 acGUI_FontAvantGarde32_00F6
08016174 g     O .rodata	00000085 acGUI_FontLubalGraph32B_00F4
08018924 g     O .rodata	00000054 acGUI_FontLubalGraph32B_00B1
08035fc8 g     O .rodata	00000048 acGUI_FontLubalGraph20_0048
080195bc g     O .rodata	0000007e acGUI_FontLubalGraph32B_006B
080034fc g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
0801b2f4 g     O .rodata	00000010 acGUI_FontLubalGraph32B_002C
08031df8 g     O .rodata	0000002c acGUI_FontLubalGraph20B_004C
0803a76c g     O .rodata	00000003 acGUI_FontLubalGraph16_2018
0805a5e0 g     O .rodata	00000048 acGUI_FontAvantGarde20B_0056
0800713c g     F .text	000000a8 WM_SetFocus
08000fec  w    F .text	00000002 CAN2_RX1_IRQHandler
080537d8 g     O .rodata	00000010 acGUI_FontAvantGarde24_02DD
0801606c g     O .rodata	0000007e acGUI_FontLubalGraph32B_00F6
08062f4c g     O .rodata	00000006 acGUI_FontAvantGarde16_02DB
080188cc g     O .rodata	0000002c acGUI_FontLubalGraph32B_00B3
08029188 g     O .rodata	00000046 acGUI_FontLubalGraph24B_0033
0805a658 g     O .rodata	00000030 acGUI_FontAvantGarde20B_0054
0803a770 g     O .rodata	00000007 acGUI_FontLubalGraph16_2014
08046574 g     O .rodata	00000012 acGUI_FontAvantGarde32_2022
08016290 g     O .rodata	00000093 acGUI_FontLubalGraph32B_00F2
08047444 g     O .rodata	00000080 acGUI_FontAvantGarde32_00F8
20028844 g     O .bss	00000008 GUI__apDevice
0805cb24 g     O .rodata	00000024 acGUI_FontAvantGarde20_00EF
0802c158 g     O .rodata	0000007e acGUI_FontLubalGraph24_00D3
08038f80 g     O .rodata	0000002d acGUI_FontLubalGraph16B_004E
08029218 g     O .rodata	00000038 acGUI_FontLubalGraph24B_0031
080630f0 g     O .rodata	00000014 acGUI_FontAvantGarde16_0142
0800b618 g     F .text	00000006 LCD_GetSwapXYEx
0802e038 g     O .rodata	00000046 acGUI_FontLubalGraph24_0045
08036058 g     O .rodata	00000030 acGUI_FontLubalGraph20_0046
0801b360 g     O .rodata	0000001c acGUI_FontLubalGraph32B_002A
08001918 g     F .text	0000000c vTaskMissedYield
080512e4 g     O .rodata	00000054 acGUI_FontAvantGarde24B_0052
080163bc g     O .rodata	0000007e acGUI_FontLubalGraph32B_00F0
0805cb78 g     O .rodata	00000027 acGUI_FontAvantGarde20_00ED
20008400 g     O .bss	00000004 osCPU_IdleSpentTime
08038fe8 g     O .rodata	00000024 acGUI_FontLubalGraph16B_004C
08036580 g     O .rodata	0000003c acGUI_FontLubalGraph20_0026
08036560 g     O .rodata	0000001c acGUI_FontLubalGraph20_0028
080360b8 g     O .rodata	00000048 acGUI_FontLubalGraph20_0044
080644d4 g     O .rodata	00000028 acGUI_FontAvantGarde16_004B
0802e0e4 g     O .rodata	00000062 acGUI_FontLubalGraph24_0043
08063988 g     O .rodata	00000024 acGUI_FontAvantGarde16_00C9
08024fa8 g     O .rodata	00000041 acGUI_FontLubalGraph24B_FFFF
080196cc g     O .rodata	00000090 acGUI_FontLubalGraph32B_0068
080393cc g     O .rodata	0000002c acGUI_FontLubalGraph16B_002F
08057298 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop28
08004aac g     F .text	00000014 vApplicationIdleHook
08051254 g     O .rodata	00000046 acGUI_FontAvantGarde24B_0054
08002bea g     F .text	00000016 vListInitialise
0803c1a0 g     O .rodata	00000006 acGUI_FontLubalGraph16_003A
08036148 g     O .rodata	0000003c acGUI_FontLubalGraph20_0042
0803b884 g     O .rodata	00000016 acGUI_FontLubalGraph16_007D
08046c18 g     O .rodata	00000078 acGUI_FontAvantGarde32_0161
08056628 g     O .rodata	00000078 acGUI_FontAvantGarde24_004D
080548e4 g     O .rodata	00000077 acGUI_FontAvantGarde24_00D8
08046620 g     O .rodata	00000090 acGUI_FontAvantGarde32_2020
0804e6b8 g     O .rodata	0000005a acGUI_FontAvantGarde24B_0160
0802ad10 g     O .rodata	0000000c acGUI_FontLubalGraph24_02DA
0802c058 g     O .rodata	0000007e acGUI_FontLubalGraph24_00D5
080537f4 g     O .rodata	00000008 acGUI_FontAvantGarde24_02DB
08000fec  w    F .text	00000002 EXTI15_10_IRQHandler
080639d0 g     O .rodata	00000041 acGUI_FontAvantGarde16_00C7
0803c178 g     O .rodata	00000020 acGUI_FontLubalGraph16_003C
0803a89c g     O .rodata	0000003c acGUI_FontLubalGraph16_0178
0800bd68 g     F .text	00000020 LCD_Color2Index
08044af4 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop12
08056560 g     O .rodata	00000069 acGUI_FontAvantGarde24_004F
08014d40 g     O .rodata	00000072 acGUI_FontLubalGraph32B_2113
0801b58c g     O .rodata	0000008a acGUI_FontLubalGraph32B_0024
08022d60 g     O .rodata	000000f7 acGUI_FontLubalGraph32_004D
0800753c g     F .text	00000038 WM_GetWindowSizeX
0803a7ec g     O .rodata	00000006 acGUI_FontLubalGraph16_02DD
0805ff74 g     O .rodata	00000032 acGUI_FontAvantGarde16B_03A9
0801d420 g     O .rodata	00000070 acGUI_FontLubalGraph32_03C0
0802cc6c g     O .rodata	00000054 acGUI_FontLubalGraph24_00B5
08061634 g     O .rodata	00000028 acGUI_FontAvantGarde16B_0050
0801b434 g     O .rodata	000000a2 acGUI_FontLubalGraph32B_0026
0805edd0 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop23
0805da54 g     O .rodata	00000054 acGUI_FontAvantGarde20_00AE
0802aef4 g     O .rodata	00000048 acGUI_FontLubalGraph24_0160
08019a30 g     O .rodata	00000070 acGUI_FontLubalGraph32B_0061
0800c914 g     F .text	00000036 GUI_TIMER_GetFlag
08025634 g     O .rodata	0000000e acGUI_FontLubalGraph24B_203A
08064528 g     O .rodata	00000028 acGUI_FontAvantGarde16_0048
0805ede8 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop25
080325f4 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop8
0803aecc g     O .rodata	0000002c acGUI_FontLubalGraph16_00E0
0803bc3c g     O .rodata	00000018 acGUI_FontLubalGraph16_005D
0805a49c g     O .rodata	0000002d acGUI_FontAvantGarde20B_005B
0801242c g     F .text	0000001c GUI_SetLineStyle
08022ee0 g     O .rodata	000000ab acGUI_FontLubalGraph32_004B
0803a7fc g     O .rodata	00000003 acGUI_FontLubalGraph16_02DB
080325dc g     O .rodata	0000000c GUI_FontLubalGraph20_Prop6
0803bc74 g     O .rodata	00000018 acGUI_FontLubalGraph16_005B
080325ac g     O .rodata	0000000c GUI_FontLubalGraph20_Prop2
08064584 g     O .rodata	0000001e acGUI_FontAvantGarde16_0046
0804ce24 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop33
0802defc g     O .rodata	0000002a acGUI_FontLubalGraph24_0049
0800cbaa g     F .text	00000016 GUI_SetColor
0802cccc g     O .rodata	0000001b acGUI_FontLubalGraph24_00B3
0805a538 g     O .rodata	00000048 acGUI_FontAvantGarde20B_0058
0800bda8 g     F .text	00000018 LCD_SetColorIndex
0803e7b4 g     O .rodata	000000a8 acGUI_FontAvantGarde32B_0160
0804ce9c g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop43
20000810 g       .bss	00000000 _sbss
08033d40 g     O .rodata	0000001b acGUI_FontLubalGraph20_0131
0804ce3c g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop35
080361d8 g     O .rodata	00000048 acGUI_FontLubalGraph20_0040
0803a77c g     O .rodata	00000002 acGUI_FontLubalGraph16_2010
08062e98 g     O .rodata	00000006 acGUI_FontAvantGarde16_201D
080503e4 g     O .rodata	0000000c acGUI_FontAvantGarde24B_00B4
0804f834 g     O .rodata	00000090 acGUI_FontAvantGarde24B_00D4
0801b698 g     O .rodata	0000001c acGUI_FontLubalGraph32B_0022
080076c4 g     F .text	0000001a WM_GetFirstChild
08062ec0 g     O .rodata	00000002 acGUI_FontAvantGarde16_2010
0804eacc g     O .rodata	00000050 acGUI_FontAvantGarde24B_00F9
0803e058 g     O .rodata	00000090 acGUI_FontAvantGarde32B_2021
080586c4 g     O .rodata	0000000c acGUI_FontAvantGarde20B_02C6
0801f6a0 g     O .rodata	000000d2 acGUI_FontLubalGraph32_00D8
08037834 g     O .rodata	0000002c acGUI_FontLubalGraph16B_2021
0805daac g     O .rodata	00000014 acGUI_FontAvantGarde20_00AC
0804eb6c g     O .rodata	0000003c acGUI_FontAvantGarde24B_00F7
0804f714 g     O .rodata	00000090 acGUI_FontAvantGarde24B_00D6
08050410 g     O .rodata	00000018 acGUI_FontAvantGarde24B_00B2
08007520 g     F .text	0000001c WM_HasFocus
0803c4cc g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop6
0801b6d8 g     O .rodata	00000001 acGUI_FontLubalGraph32B_0020
08064674 g     O .rodata	00000032 acGUI_FontAvantGarde16_0040
080367a0 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop20
0805cc84 g     O .rodata	00000041 acGUI_FontAvantGarde20_00E8
0803c49c g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop2
08044b3c g     O .rodata	0000000c GUI_FontAvantGarde32_Prop18
0801dca8 g     O .rodata	00000038 acGUI_FontLubalGraph32_0131
08049c20 g     O .rodata	00000024 acGUI_FontAvantGarde32_00B9
080255fc g     O .rodata	00000038 acGUI_FontLubalGraph24B_2044
0802df8c g     O .rodata	00000062 acGUI_FontLubalGraph24_0047
08034c08 g     O .rodata	0000003c acGUI_FontLubalGraph20_00CA
080062a4 g     F .text	0000001e GUI_ARRAY_GetNumItems
200287e0 g     O .bss	00000004 WM__hATransWindow
0803c4e4 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop8
0802cd00 g     O .rodata	00000042 acGUI_FontLubalGraph24_00B1
08034b9c g     O .rodata	00000030 acGUI_FontLubalGraph20_00CC
08046554 g     O .rodata	0000001e acGUI_FontAvantGarde32_2026
0805bdc8 g     O .rodata	0000002c acGUI_FontAvantGarde20_FFFF
080035d4 g     F .text	0000004c HAL_MPU_ConfigRegion
080520f8 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop19
08049bec g     O .rodata	00000032 acGUI_FontAvantGarde32_00BA
080076e0 g     F .text	00000018 WM_GetDesktopWindow
08000fec  w    F .text	00000002 OTG_HS_EP1_OUT_IRQHandler
080571a8 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop8
0800cea8 g     F .text	00000056 GUI_MergeRect
0804e39c g     O .rodata	0000000f acGUI_FontAvantGarde24B_2013
08058918 g     O .rodata	00000030 acGUI_FontAvantGarde20B_0141
0801fb94 g     O .rodata	000000fa acGUI_FontLubalGraph32_00D2
08004a40 g     F .text	00000014 BSP_LED_Off
0805dad4 g     O .rodata	0000000f acGUI_FontAvantGarde20_00AA
0800d7f0 g     F .text	00000110 GUI_DispString
0805cd04 g     O .rodata	00000051 acGUI_FontAvantGarde20_00E6
08052098 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop11
0801f99c g     O .rodata	000000fa acGUI_FontLubalGraph32_00D4
0802ea6c g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop30
0803f780 g     O .rodata	000000a8 acGUI_FontAvantGarde32B_00E8
080335b0 g     O .rodata	00000046 acGUI_FontLubalGraph20_2211
0804e9dc g     O .rodata	0000004b acGUI_FontAvantGarde24B_00FC
08041f00 g     O .rodata	00000098 acGUI_FontAvantGarde32B_00A3
08050fe4 g     O .rodata	00000036 acGUI_FontAvantGarde24B_005B
0805edb8 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop21
0802a9cc g     O .rodata	00000038 acGUI_FontLubalGraph24_2044
0802ac34 g     O .rodata	00000054 acGUI_FontLubalGraph24_03BC
0805c240 g     O .rodata	0000003c acGUI_FontAvantGarde20_20AC
0805cd9c g     O .rodata	0000003c acGUI_FontAvantGarde20_00E4
0801f7bc g     O .rodata	000000f0 acGUI_FontLubalGraph32_00D6
08064480 g     O .rodata	00000032 acGUI_FontAvantGarde16_004D
08027ea0 g     O .rodata	0000003c acGUI_FontLubalGraph24B_0075
0804e8f8 g     O .rodata	0000006c acGUI_FontAvantGarde24B_00FE
08041df0 g     O .rodata	00000098 acGUI_FontAvantGarde32B_00A5
0802ea84 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop32
08058a44 g     O .rodata	00000030 acGUI_FontAvantGarde20B_00FC
08064424 g     O .rodata	00000032 acGUI_FontAvantGarde16_004F
08040c40 g     O .rodata	00000096 acGUI_FontAvantGarde32B_00C9
08052e90 g     O .rodata	0000003c acGUI_FontAvantGarde24_FB01
08029014 g     O .rodata	00000046 acGUI_FontLubalGraph24B_0038
08027f08 g     O .rodata	00000028 acGUI_FontLubalGraph24B_0073
0802acfc g     O .rodata	0000000c acGUI_FontLubalGraph24_02DC
08061de8 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop31
08015724 g     O .rodata	00000072 acGUI_FontLubalGraph32B_0161
0804a92c g     O .rodata	00000070 acGUI_FontAvantGarde32_006F
08050f5c g     O .rodata	00000036 acGUI_FontAvantGarde24B_005D
0800b400 g     F .text	00000030 LCD_SetClipRectEx
0805e178 g     O .rodata	0000001e acGUI_FontAvantGarde20_005D
0805ce94 g     O .rodata	00000041 acGUI_FontAvantGarde20_00E0
080070cc g     F .text	00000070 WM_SetFocusOnNextChild
0803bd64 g     O .rodata	00000032 acGUI_FontLubalGraph16_0056
0802bfa8 g     O .rodata	0000002d acGUI_FontLubalGraph24_00D7
0805c058 g     O .rodata	00000054 acGUI_FontAvantGarde20_220F
080589a0 g     O .rodata	0000004b acGUI_FontAvantGarde20B_00FE
0803674c g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop13
0803b750 g     O .rodata	00000014 acGUI_FontLubalGraph16_00AC
08027d0c g     O .rodata	00000013 acGUI_FontLubalGraph24B_007C
080273c0 g     O .rodata	00000080 acGUI_FontLubalGraph24B_00C4
08000fec  w    F .text	00000002 EXTI3_IRQHandler
08000fec  w    F .text	00000002 I2C1_EV_IRQHandler
0803be08 g     O .rodata	00000028 acGUI_FontLubalGraph16_0052
08062eb4 g     O .rodata	00000006 acGUI_FontAvantGarde16_2014
080478d0 g     O .rodata	000000a0 acGUI_FontAvantGarde32_00F0
080123a8 g     F .text	00000024 GUI_UC__NumChars2NumBytes
0802695c g     O .rodata	00000070 acGUI_FontLubalGraph24B_00DC
0803b718 g     O .rodata	00000032 acGUI_FontLubalGraph16_00AE
08006ed8 g     F .text	00000052 WM__DeleteAssocTimer
0805a418 g     O .rodata	00000004 acGUI_FontAvantGarde20B_005F
08050134 g     O .rodata	0000004b acGUI_FontAvantGarde24B_00BF
0803bce8 g     O .rodata	00000032 acGUI_FontLubalGraph16_0058
08036764 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop15
0805b00c g     O .rodata	0000000c GUI_FontAvantGarde20_Prop5
0805e25c g     O .rodata	0000003c acGUI_FontAvantGarde20_0058
08044c5c g     O .rodata	0000000c GUI_FontAvantGarde32_Prop42
08033a28 g     O .rodata	00000048 acGUI_FontLubalGraph20_03A9
08027cbc g     O .rodata	0000001e acGUI_FontLubalGraph24B_007E
080272a8 g     O .rodata	0000007e acGUI_FontLubalGraph24B_00C6
0804f95c g     O .rodata	00000098 acGUI_FontAvantGarde24B_00D2
080137a8 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop41
08050338 g     O .rodata	00000060 acGUI_FontAvantGarde24B_00B6
08063680 g     O .rodata	00000024 acGUI_FontAvantGarde16_00DB
0803b780 g     O .rodata	00000032 acGUI_FontLubalGraph16_00A9
0803c4b4 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop4
0801b7a8 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop15
08060444 g     O .rodata	0000001e acGUI_FontAvantGarde16B_00EF
0805722c g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop19
08026890 g     O .rodata	00000054 acGUI_FontLubalGraph24B_00DE
08049c58 g     O .rodata	00000003 acGUI_FontAvantGarde32_00B7
0806362c g     O .rodata	00000030 acGUI_FontAvantGarde16_00DD
08010cdc g     F .text	0000000c GUI_MEMDEV_Write
080089ac g     F .text	00000010 WM_Activate
08050f30 g     O .rodata	00000005 acGUI_FontAvantGarde24B_005F
08060f60 g     O .rodata	00000032 acGUI_FontAvantGarde16B_00A9
080409c8 g     O .rodata	00000090 acGUI_FontAvantGarde32B_00CE
0805dbf8 g     O .rodata	0000003c acGUI_FontAvantGarde20_00A3
080604c0 g     O .rodata	00000028 acGUI_FontAvantGarde16B_00EB
08050328 g     O .rodata	00000008 acGUI_FontAvantGarde24B_00B8
0801c890 g     O .rodata	00000087 acGUI_FontLubalGraph32_222B
080253f4 g     O .rodata	0000004b acGUI_FontLubalGraph24B_2202
0804fa60 g     O .rodata	00000062 acGUI_FontAvantGarde24B_00D0
0805aff4 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop3
08047b6c g     O .rodata	0000008c acGUI_FontAvantGarde32_00EA
080337fc g     O .rodata	00000024 acGUI_FontLubalGraph20_2044
08018744 g     O .rodata	00000021 acGUI_FontLubalGraph32B_00B9
08015000 g     O .rodata	00000024 acGUI_FontLubalGraph32B_2022
080333e8 g     O .rodata	00000030 acGUI_FontLubalGraph20_FB01
08049d00 g     O .rodata	00000072 acGUI_FontAvantGarde32_00B5
0802b708 g     O .rodata	0000002d acGUI_FontLubalGraph24_00ED
080270ac g     O .rodata	00000050 acGUI_FontLubalGraph24B_00CB
0800e378 g     F .text	0000001c GUI_ALLOC_LockH
08047668 g     O .rodata	000000a0 acGUI_FontAvantGarde32_00F4
0803bdc0 g     O .rodata	00000028 acGUI_FontLubalGraph16_0054
080635ec g     O .rodata	0000001e acGUI_FontAvantGarde16_00DF
08061e30 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop37
0805dc5c g     O .rodata	0000000d acGUI_FontAvantGarde20_00A1
0805c0ac g     O .rodata	0000003c acGUI_FontAvantGarde20_2206
08060484 g     O .rodata	00000016 acGUI_FontAvantGarde16B_00ED
08006ea8 g     F .text	00000030 WM_DeleteTimer
08059d28 g     O .rodata	00000012 acGUI_FontAvantGarde20B_00AA
08034cc4 g     O .rodata	00000060 acGUI_FontLubalGraph20_00C7
0805afdc g     O .rodata	0000000c GUI_FontAvantGarde20_Prop1
080520e0 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop17
0801b7d8 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop19
0805cbc8 g     O .rodata	0000003c acGUI_FontAvantGarde20_00EB
08047a8c g     O .rodata	00000054 acGUI_FontAvantGarde32_00EC
0803b770 g     O .rodata	0000000f acGUI_FontLubalGraph16_00AA
08031380 g     O .rodata	00000012 acGUI_FontLubalGraph20B_00AA
08030428 g     O .rodata	00000021 acGUI_FontLubalGraph20B_00EF
0800b430 g     F .text	0000002c LCD_SetVRAMAddrEx
0802fc20 g     O .rodata	00000034 acGUI_FontLubalGraph20B_2021
0805c0e8 g     O .rodata	00000034 acGUI_FontAvantGarde20_2202
0804ea74 g     O .rodata	00000055 acGUI_FontAvantGarde24B_00FA
0801fd98 g     O .rodata	000000ab acGUI_FontLubalGraph32_00D0
080477a8 g     O .rodata	000000a0 acGUI_FontAvantGarde32_00F2
08061e48 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop39
080259b4 g     O .rodata	00000010 acGUI_FontLubalGraph24B_02C6
08052020 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop1
0800bf14 g     F .text	0000001c GUI__ReduceRect
08000fec  w    F .text	00000002 TIM6_DAC_IRQHandler
08037600 g     O .rodata	0000001b acGUI_FontLubalGraph16B_2215
080061b8 g     F .text	00000010 HEADER_SetDefaultBkColor
080587d4 g     O .rodata	00000030 acGUI_FontAvantGarde20B_0161
080479c0 g     O .rodata	00000078 acGUI_FontAvantGarde32_00EE
08044008 g     O .rodata	00000098 acGUI_FontAvantGarde32B_0039
0801b7c0 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop17
0805db8c g     O .rodata	0000003c acGUI_FontAvantGarde20_00A5
0803b7b8 g     O .rodata	00000024 acGUI_FontLubalGraph16_00A7
08058dd4 g     O .rodata	0000003c acGUI_FontAvantGarde20B_00EB
080215dc g     O .rodata	00000042 acGUI_FontLubalGraph32_007B
0803148c g     O .rodata	00000037 acGUI_FontLubalGraph20B_00A3
08030584 g     O .rodata	00000041 acGUI_FontLubalGraph20B_00E8
08042270 g     O .rodata	00000070 acGUI_FontAvantGarde32B_0078
0805a434 g     O .rodata	0000002d acGUI_FontAvantGarde20B_005D
080571cc g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop11
08034b30 g     O .rodata	0000003c acGUI_FontLubalGraph20_00CE
08008784 g     F .text	000000ac WM__Paint
08043f50 g     O .rodata	00000069 acGUI_FontAvantGarde32B_003C
08024324 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop31
0803194c g     O .rodata	00000028 acGUI_FontLubalGraph20B_0063
0802ea48 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop27
0803b86c g     O .rodata	0000000a acGUI_FontLubalGraph16_00A1
0805b168 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop34
08042000 g     O .rodata	00000026 acGUI_FontAvantGarde32B_00A1
0803f8c8 g     O .rodata	000000c4 acGUI_FontAvantGarde32B_00E6
08031424 g     O .rodata	00000037 acGUI_FontLubalGraph20B_00A5
08009b9c g     F .text	000000ac GUI_MEMDEV_CopyToLCDAt
08000fec  w    F .text	00000002 TAMP_STAMP_IRQHandler
08031c64 g     O .rodata	00000037 acGUI_FontLubalGraph20B_0052
0800b650 g     F .text	00000018 GUI_GetBitsPerPixelEx
0804c86c g     O .rodata	0000000a acGUI_FontAvantGarde32_002C
08024204 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop7
08058564 g     O .rodata	0000000c acGUI_FontAvantGarde20B_201E
08032678 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop19
08003520 g     F .text	00000070 HAL_NVIC_SetPriority
080126f8 g     F .text	00000514 GUI_SPRITE_SetPosition
08055720 g     O .rodata	00000018 acGUI_FontAvantGarde24_00AB
08034c44 g     O .rodata	00000040 acGUI_FontLubalGraph20_00C9
080571e4 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop13
08043fec g     O .rodata	0000001c acGUI_FontAvantGarde32B_003A
080253a4 g     O .rodata	0000004e acGUI_FontLubalGraph24B_2206
08029550 g     O .rodata	00000024 GUI_FontLubalGraph24
0805992c g     O .rodata	0000005a acGUI_FontAvantGarde20B_00C2
080241ec g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop5
0805b150 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop32
08060f58 g     O .rodata	00000008 acGUI_FontAvantGarde16B_00AA
080295f8 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop12
08028f48 g     O .rodata	00000019 acGUI_FontLubalGraph24B_003D
08027600 g     O .rodata	000000a0 acGUI_FontLubalGraph24B_00C0
0802433c g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop33
0804237c g     O .rodata	00000062 acGUI_FontAvantGarde32B_0076
0802ea30 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop25
0805c3dc g     O .rodata	00000006 acGUI_FontAvantGarde20_201A
08060fdc g     O .rodata	00000028 acGUI_FontAvantGarde16B_00A5
0804c8d4 g     O .rodata	0000002d acGUI_FontAvantGarde32_002A
0803a464 g     O .rodata	00000014 acGUI_FontLubalGraph16_221E
0805857c g     O .rodata	0000000c acGUI_FontAvantGarde20B_201C
0803fa34 g     O .rodata	000000a0 acGUI_FontAvantGarde32B_00E4
0802ce94 g     O .rodata	00000044 acGUI_FontLubalGraph24_00A7
08060f38 g     O .rodata	00000010 acGUI_FontAvantGarde16B_00AC
0803a584 g     O .rodata	0000003c acGUI_FontLubalGraph16_212E
080599e8 g     O .rodata	00000060 acGUI_FontAvantGarde20B_00C0
08028ed8 g     O .rodata	00000038 acGUI_FontLubalGraph24B_003F
08027d50 g     O .rodata	00000032 acGUI_FontLubalGraph24B_007A
080274d0 g     O .rodata	00000090 acGUI_FontLubalGraph24B_00C2
0803be6c g     O .rodata	0000001e acGUI_FontLubalGraph16_0050
08037534 g     O .rodata	00000018 acGUI_FontLubalGraph16B_2265
08053494 g     O .rodata	0000003c acGUI_FontAvantGarde24_2044
08049afc g     O .rodata	000000c8 acGUI_FontAvantGarde32_00BC
08002100 g     F .text	0000004e xTimerCreate
0803fcbc g     O .rodata	000000a8 acGUI_FontAvantGarde32B_00E0
08024354 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop35
0805567c g     O .rodata	00000008 acGUI_FontAvantGarde24_00AF
080295e0 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop10
08049958 g     O .rodata	000000dc acGUI_FontAvantGarde32_00BE
08064620 g     O .rodata	0000001e acGUI_FontAvantGarde16_0042
0805c3b8 g     O .rodata	00000009 acGUI_FontAvantGarde20_201E
08008184 g     F .text	00000014 WM__SelectTopLevelLayer
08040abc g     O .rodata	00000064 acGUI_FontAvantGarde32B_00CC
08060f00 g     O .rodata	00000032 acGUI_FontAvantGarde16B_00AE
08038ca4 g     O .rodata	0000001c acGUI_FontLubalGraph16B_0063
08028f9c g     O .rodata	0000001a acGUI_FontLubalGraph24B_003B
080319ac g     O .rodata	00000028 acGUI_FontLubalGraph20B_0061
080034d0 g     F .text	00000008 HAL_GPIO_WritePin
080585b0 g     O .rodata	00000008 acGUI_FontAvantGarde20B_2013
0801c710 g     O .rodata	00000070 acGUI_FontLubalGraph32_2265
08023c08 g     O .rodata	0000005f acGUI_FontLubalGraph32_0031
08012cdc g     F .text	00000050 GUI_DrawPixel
0802436c g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop37
080556fc g     O .rodata	00000006 acGUI_FontAvantGarde24_00AD
08038ec4 g     O .rodata	0000002d acGUI_FontLubalGraph16B_0052
08031cec g     O .rodata	0000002c acGUI_FontLubalGraph20B_0050
0805c3d0 g     O .rodata	00000009 acGUI_FontAvantGarde20_201C
08037ed4 g     O .rodata	0000002c acGUI_FontLubalGraph16B_00E8
0802a764 g     O .rodata	00000054 acGUI_FontLubalGraph24_2206
080375c8 g     O .rodata	00000034 acGUI_FontLubalGraph16B_221A
0803047c g     O .rodata	00000027 acGUI_FontLubalGraph20B_00ED
0803fb74 g     O .rodata	000000a0 acGUI_FontAvantGarde32B_00E2
08040bb0 g     O .rodata	00000090 acGUI_FontAvantGarde32B_00CA
0801ff88 g     O .rodata	00000064 acGUI_FontLubalGraph32_00CC
0802eb14 g     O .rodata	00000be8 GUI_FontLubalGraph20B_CharInfo
08038ce4 g     O .rodata	0000001c acGUI_FontLubalGraph16B_0061
08061e00 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop33
080074aa g     F .text	0000001e WM_MoveWindow
080137c0 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop43
080318ec g     O .rodata	00000028 acGUI_FontLubalGraph20B_0065
0802b92c g     O .rodata	00000064 acGUI_FontLubalGraph24_00E6
0803257c g     O .rodata	00000024 GUI_FontLubalGraph20
0805417c g     O .rodata	0000004b acGUI_FontAvantGarde24_00EE
080645c4 g     O .rodata	00000028 acGUI_FontAvantGarde16_0044
0803019c g     O .rodata	00000041 acGUI_FontLubalGraph20B_00FA
08044128 g     O .rodata	00000072 acGUI_FontAvantGarde32B_0037
08038f2c g     O .rodata	00000024 acGUI_FontLubalGraph16B_0050
0802ce24 g     O .rodata	00000062 acGUI_FontLubalGraph24_00A9
0802a6f4 g     O .rodata	00000070 acGUI_FontLubalGraph24_220F
08021a9c g     O .rodata	000000ab acGUI_FontLubalGraph32_0070
0800d054 g     F .text	00000020 GUI_GotoXY
08060694 g     O .rodata	0000002c acGUI_FontAvantGarde16B_00E0
080520c8 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop15
08047bf8 g     O .rodata	0000008c acGUI_FontAvantGarde32_00E9
08007f4c g     F .text	00000006 WM__Invalidate1Abs
08044464 g     O .rodata	0000004c acGUI_FontAvantGarde32B_0031
08053808 g     O .rodata	0000000c acGUI_FontAvantGarde24_02D8
08058590 g     O .rodata	00000008 acGUI_FontAvantGarde20B_2019
08062f60 g     O .rodata	00000006 acGUI_FontAvantGarde16_02D8
08031394 g     O .rodata	00000042 acGUI_FontLubalGraph20B_00A9
08027e14 g     O .rodata	00000050 acGUI_FontLubalGraph24B_0077
08023b20 g     O .rodata	00000072 acGUI_FontLubalGraph32_0033
08031300 g     O .rodata	00000008 acGUI_FontLubalGraph20B_00B0
080520b0 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop13
0801fea4 g     O .rodata	0000007d acGUI_FontLubalGraph32_00CE
08051d64 g     O .rodata	00000009 acGUI_FontAvantGarde24B_002D
08059d00 g     O .rodata	00000014 acGUI_FontAvantGarde20B_00AC
0803b7e8 g     O .rodata	00000028 acGUI_FontLubalGraph16_00A5
08044234 g     O .rodata	00000085 acGUI_FontAvantGarde32B_0035
08031890 g     O .rodata	00000037 acGUI_FontLubalGraph20B_0067
0800ddac g     F .text	00000014 GUIPROP__FindChar
0802b690 g     O .rodata	0000002a acGUI_FontLubalGraph24_00EF
08068afe g     O .rodata	00000100 GUI__aConvert_255_31
08037dd4 g     O .rodata	00000012 acGUI_FontLubalGraph16B_00EF
200287e4 g     O .bss	00000004 WM__TouchedLayer
080202a4 g     O .rodata	000000ea acGUI_FontLubalGraph32_00C7
0805ff54 g     O .rodata	0000001e acGUI_FontAvantGarde16B_03BC
080032f0 g     F .text	000001e0 HAL_GPIO_Init
0802b63c g     O .rodata	00000054 acGUI_FontLubalGraph24_00F0
08044354 g     O .rodata	00000085 acGUI_FontAvantGarde32B_0033
0803895c g     O .rodata	00000024 acGUI_FontLubalGraph16B_00A3
08004b64 g     F .text	00000004 ft5336_TS_ITStatus
080388b0 g     O .rodata	0000000c acGUI_FontLubalGraph16B_00AA
080313e0 g     O .rodata	00000034 acGUI_FontLubalGraph20B_00A7
080425b8 g     O .rodata	00000085 acGUI_FontAvantGarde32B_0070
08027d84 g     O .rodata	00000054 acGUI_FontLubalGraph24B_0079
080502e0 g     O .rodata	0000001c acGUI_FontAvantGarde24B_00BB
08059cb0 g     O .rodata	00000048 acGUI_FontAvantGarde20B_00AE
08032648 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop15
08059710 g     O .rodata	00000040 acGUI_FontAvantGarde20B_00C8
200287e8 g     O .bss	00000001 WM__CaptureReleaseAuto
0802de08 g     O .rodata	00000046 acGUI_FontLubalGraph24_004C
08051d7c g     O .rodata	00000032 acGUI_FontAvantGarde24B_002B
080462f8 g     O .rodata	000000a0 acGUI_FontAvantGarde32_20AC
08000fec  w    F .text	00000002 EXTI0_IRQHandler
08025344 g     O .rodata	00000060 acGUI_FontLubalGraph24B_220F
08020488 g     O .rodata	00000113 acGUI_FontLubalGraph32_00C5
0804af88 g     O .rodata	00000014 acGUI_FontAvantGarde32_0060
08037e08 g     O .rodata	00000021 acGUI_FontLubalGraph16B_00ED
08061e18 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop35
08062b50 g     O .rodata	00000014 acGUI_FontAvantGarde16_2248
0804e448 g     O .rodata	00000062 acGUI_FontAvantGarde24B_03A9
08059870 g     O .rodata	0000005a acGUI_FontAvantGarde20B_00C4
080541f8 g     O .rodata	00000030 acGUI_FontAvantGarde24_00EC
0803b828 g     O .rodata	00000028 acGUI_FontLubalGraph16_00A3
08038920 g     O .rodata	00000024 acGUI_FontLubalGraph16B_00A5
08052fcc g     O .rodata	0000001e acGUI_FontAvantGarde24_2248
08050200 g     O .rodata	00000070 acGUI_FontAvantGarde24B_00BD
08038c64 g     O .rodata	0000001c acGUI_FontLubalGraph16B_0065
080592a8 g     O .rodata	00000054 acGUI_FontAvantGarde20B_00D8
08042434 g     O .rodata	0000005f acGUI_FontAvantGarde32B_0074
08031310 g     O .rodata	00000042 acGUI_FontLubalGraph20B_00AE
0801dbd4 g     O .rodata	0000004c acGUI_FontLubalGraph32_0142
0805649c g     O .rodata	00000078 acGUI_FontAvantGarde24_0051
08030128 g     O .rodata	00000037 acGUI_FontLubalGraph20B_00FC
080039fc g     F .text	00000034 HAL_LTDC_DisableColorKeying
08032660 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop17
080375fc g     O .rodata	00000002 acGUI_FontLubalGraph16B_2219
080206a4 g     O .rodata	00000108 acGUI_FontLubalGraph32_00C3
08033aa8 g     O .rodata	0000000c acGUI_FontLubalGraph20_02C7
080597b0 g     O .rodata	00000060 acGUI_FontAvantGarde20B_00C6
0802f8e4 g     O .rodata	0000002c acGUI_FontLubalGraph20B_2215
08054274 g     O .rodata	0000004b acGUI_FontAvantGarde24_00EA
08043ea4 g     O .rodata	00000069 acGUI_FontAvantGarde32B_003E
08025bdc g     O .rodata	00000064 acGUI_FontLubalGraph24B_0153
08014c2c g     O .rodata	000000a2 acGUI_FontLubalGraph32B_2126
08014fd8 g     O .rodata	00000028 acGUI_FontLubalGraph32B_2026
0803da84 g     O .rodata	00000093 acGUI_FontAvantGarde32B_2202
08000fec  w    F .text	00000002 TIM4_IRQHandler
0801c4ec g     O .rodata	0000007e acGUI_FontLubalGraph32_FFFF
08060f9c g     O .rodata	00000034 acGUI_FontAvantGarde16B_00A7
080241bc g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop1
08042110 g     O .rodata	00000082 acGUI_FontAvantGarde32B_007B
08038c2c g     O .rodata	00000024 acGUI_FontLubalGraph16B_0067
080301e0 g     O .rodata	00000041 acGUI_FontLubalGraph20B_00F9
080424e8 g     O .rodata	00000038 acGUI_FontAvantGarde32B_0072
08031af4 g     O .rodata	00000042 acGUI_FontLubalGraph20B_0058
0804cbd8 g     O .rodata	00000077 acGUI_FontAvantGarde32_0023
080593d8 g     O .rodata	0000005a acGUI_FontAvantGarde20B_00D4
08031358 g     O .rodata	00000019 acGUI_FontLubalGraph20B_00AC
0805ee18 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop29
0804e094 g     O .rodata	00000060 acGUI_FontAvantGarde24B_2113
08037c28 g     O .rodata	0000002c acGUI_FontLubalGraph16B_00FA
0802deb4 g     O .rodata	00000046 acGUI_FontLubalGraph24_004A
08024fec g     O .rodata	00000054 acGUI_FontLubalGraph24B_FB02
2002884c g     O .bss	00000004 GUI_pfTimerExec
0800815c g     F .text	00000028 WM__GetTopLevelLayer
08051fc8 g     O .rodata	00000012 acGUI_FontAvantGarde24B_0022
0800da74 g     F .text	00000010 GUI_DEVICE_LinkDevices
0805ee00 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop27
08042058 g     O .rodata	00000082 acGUI_FontAvantGarde32B_007D
080388bc g     O .rodata	0000002d acGUI_FontLubalGraph16B_00A9
0804cc68 g     O .rodata	00000014 acGUI_FontAvantGarde32_0021
0800e86c g     F .text	0000001a GUI_ALLOC_FreePtrArray
080557c8 g     O .rodata	00000009 acGUI_FontAvantGarde24_00A8
0805931c g     O .rodata	0000005a acGUI_FontAvantGarde20B_00D6
080241d4 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop3
0803aa18 g     O .rodata	00000041 acGUI_FontLubalGraph16_00FE
08061250 g     O .rodata	0000001c acGUI_FontAvantGarde16B_006F
0805e15c g     O .rodata	00000004 acGUI_FontAvantGarde20_005F
0805ce14 g     O .rodata	0000003c acGUI_FontAvantGarde20_00E2
08037bdc g     O .rodata	00000024 acGUI_FontLubalGraph16B_00FC
08056414 g     O .rodata	0000003c acGUI_FontAvantGarde24_0053
0801d244 g     O .rodata	000000a1 acGUI_FontLubalGraph32_2021
0800ca2c g     F .text	00000050 GUITASK_Init
0800e3d4 g     F .text	00000018 GUI_ALLOC_GetSize
08051f30 g     O .rodata	00000044 acGUI_FontAvantGarde24B_0024
0805c548 g     O .rodata	00000030 acGUI_FontAvantGarde20_017E
0805db3c g     O .rodata	00000040 acGUI_FontAvantGarde20_00A7
08059494 g     O .rodata	00000060 acGUI_FontAvantGarde20B_00D2
080388f0 g     O .rodata	00000021 acGUI_FontLubalGraph16B_00A7
08061734 g     O .rodata	0000001e acGUI_FontAvantGarde16B_004A
08046b58 g     O .rodata	000000c0 acGUI_FontAvantGarde32_0178
08050ee0 g     O .rodata	00000042 acGUI_FontAvantGarde24B_0061
08031b90 g     O .rodata	00000042 acGUI_FontLubalGraph20B_0056
0803ba44 g     O .rodata	0000001c acGUI_FontLubalGraph16_006E
0803ac48 g     O .rodata	00000028 acGUI_FontLubalGraph16_00F1
080312a4 g     O .rodata	0000000c acGUI_FontLubalGraph20B_00B4
080545a0 g     O .rodata	00000060 acGUI_FontAvantGarde24_00E1
0802fecc g     O .rodata	00000030 acGUI_FontLubalGraph20B_0161
0805c3fc g     O .rodata	00000004 acGUI_FontAvantGarde20_2013
0805e454 g     O .rodata	00000030 acGUI_FontAvantGarde20_0050
0805dae4 g     O .rodata	00000054 acGUI_FontAvantGarde20_00A9
08056184 g     O .rodata	0000004b acGUI_FontAvantGarde24_005A
08055994 g     O .rodata	00000001 acGUI_FontAvantGarde24_00A0
08054438 g     O .rodata	0000005a acGUI_FontAvantGarde24_00E5
0802cdc8 g     O .rodata	0000002a acGUI_FontLubalGraph24_00AC
0803a478 g     O .rodata	00000034 acGUI_FontLubalGraph16_221A
0800cf90 g     F .text	00000064 GUI_MULTIBUF_EndEx
08037624 g     O .rodata	00000028 acGUI_FontLubalGraph16B_2211
0804dc3c g     O .rodata	00000037 acGUI_FontAvantGarde24B_2260
0802f7b4 g     O .rodata	00000028 acGUI_FontLubalGraph20B_2265
08033c2c g     O .rodata	00000051 acGUI_FontLubalGraph20_0153
080312c8 g     O .rodata	00000012 acGUI_FontLubalGraph20B_00B2
08038dbc g     O .rodata	0000002d acGUI_FontLubalGraph16B_0058
08031c0c g     O .rodata	0000002c acGUI_FontLubalGraph20B_0054
08059544 g     O .rodata	00000048 acGUI_FontAvantGarde20B_00D0
0805e1d0 g     O .rodata	0000001e acGUI_FontAvantGarde20_005B
08031840 g     O .rodata	00000016 acGUI_FontLubalGraph20B_0069
08006fb0 g     F .text	00000048 WM_SetHasTrans
08050cb4 g     O .rodata	0000001c acGUI_FontAvantGarde24B_0069
0800ce20 g     F .text	00000018 GUI_PID_IsEmpty
08016664 g     O .rodata	00000085 acGUI_FontLubalGraph32B_00EA
08023a10 g     O .rodata	00000085 acGUI_FontLubalGraph32_0035
200083fc g     O .bss	00000004 xIdleHandle
080544f0 g     O .rodata	00000054 acGUI_FontAvantGarde24_00E3
0802f890 g     O .rodata	00000050 acGUI_FontLubalGraph20B_221A
0803abf0 g     O .rodata	0000002c acGUI_FontLubalGraph16_00F3
0804aa00 g     O .rodata	0000009a acGUI_FontAvantGarde32_006D
0804db1c g     O .rodata	00000046 acGUI_FontAvantGarde24B_FB01
0802cd5c g     O .rodata	00000062 acGUI_FontLubalGraph24_00AE
0803ab60 g     O .rodata	00000018 acGUI_FontLubalGraph16_00F7
08053940 g     O .rodata	0000006c acGUI_FontAvantGarde24_0178
0805e3d0 g     O .rodata	00000030 acGUI_FontAvantGarde20_0052
0802b768 g     O .rodata	00000054 acGUI_FontLubalGraph24_00EB
08057130 g     O .rodata	00000024 GUI_FontAvantGarde20B
0802dd0c g     O .rodata	00000070 acGUI_FontLubalGraph24_004E
08050d18 g     O .rodata	00000060 acGUI_FontAvantGarde24B_0067
08019f80 g     O .rodata	00000090 acGUI_FontLubalGraph32B_0055
080638a0 g     O .rodata	00000032 acGUI_FontAvantGarde16_00D0
08032618 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop11
080396d8 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop34
08020094 g     O .rodata	000000af acGUI_FontLubalGraph32_00CA
08036250 g     O .rodata	0000002d acGUI_FontLubalGraph20_003E
08038850 g     O .rodata	00000008 acGUI_FontLubalGraph16B_00B0
0803aba0 g     O .rodata	00000028 acGUI_FontLubalGraph16_00F5
08067114 g     O .rodata	00000034 GUI_MEMDEV_DEVICE_16
08063834 g     O .rodata	0000003c acGUI_FontAvantGarde16_00D2
08038e2c g     O .rodata	0000002d acGUI_FontLubalGraph16B_0056
08037a40 g     O .rodata	00000028 acGUI_FontLubalGraph16B_0161
08049df0 g     O .rodata	00000069 acGUI_FontAvantGarde32_00B1
08034d84 g     O .rodata	00000070 acGUI_FontLubalGraph20_00C5
0805e370 g     O .rodata	00000030 acGUI_FontAvantGarde20_0054
2000840c g     O .bss	00000004 osCPU_Usage
08034e60 g     O .rodata	00000069 acGUI_FontLubalGraph20_00C3
0806107c g     O .rodata	0000000a acGUI_FontAvantGarde16B_00A1
0801a0a0 g     O .rodata	0000006c acGUI_FontLubalGraph32B_0053
08037c54 g     O .rodata	0000002c acGUI_FontLubalGraph16B_00F9
08034f38 g     O .rodata	00000070 acGUI_FontLubalGraph20_00C1
08030090 g     O .rodata	00000046 acGUI_FontLubalGraph20B_00FE
0804c860 g     O .rodata	00000003 acGUI_FontAvantGarde32_002E
08038bf4 g     O .rodata	00000012 acGUI_FontLubalGraph16B_0069
08058588 g     O .rodata	00000008 acGUI_FontAvantGarde20B_201A
0802170c g     O .rodata	00000070 acGUI_FontLubalGraph32_0078
08005c10 g     F .text	0000000c WINDOW_SetDefaultBkColor
08023780 g     O .rodata	00000069 acGUI_FontLubalGraph32_003C
080302b4 g     O .rodata	0000003c acGUI_FontLubalGraph20B_00F5
080617dc g     O .rodata	0000001e acGUI_FontAvantGarde16B_0045
08038e8c g     O .rodata	0000001b acGUI_FontLubalGraph16B_0054
080637bc g     O .rodata	0000003c acGUI_FontAvantGarde16_00D4
200287ec g     O .bss	00000004 WM_MULTIBUF__pAPI
0806102c g     O .rodata	00000032 acGUI_FontAvantGarde16B_00A3
080236e8 g     O .rodata	00000069 acGUI_FontLubalGraph32_003E
0803ab10 g     O .rodata	0000002c acGUI_FontLubalGraph16_00F9
08056104 g     O .rodata	00000044 acGUI_FontAvantGarde24_005C
08055948 g     O .rodata	0000003c acGUI_FontAvantGarde24_00A2
08054360 g     O .rodata	0000005a acGUI_FontAvantGarde24_00E7
08049d88 g     O .rodata	00000034 acGUI_FontAvantGarde32_00B3
0802a3f0 g     O .rodata	00000046 acGUI_FontLubalGraph24_FB01
08033ac0 g     O .rodata	00000038 acGUI_FontLubalGraph20_0192
08019b8c g     O .rodata	0000005a acGUI_FontLubalGraph32B_005C
08061824 g     O .rodata	00000032 acGUI_FontAvantGarde16B_0043
08062fd0 g     O .rodata	00000030 acGUI_FontAvantGarde16_017D
08060640 g     O .rodata	00000028 acGUI_FontAvantGarde16B_00E2
08021914 g     O .rodata	0000004c acGUI_FontLubalGraph32_0074
0803e4b4 g     O .rodata	00000018 acGUI_FontAvantGarde32B_02C6
08032630 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop13
08038860 g     O .rodata	0000002d acGUI_FontLubalGraph16B_00AE
080184c4 g     O .rodata	000000c6 acGUI_FontLubalGraph32B_00BE
08033aa4 g     O .rodata	00000003 acGUI_FontLubalGraph20_02C9
0805fb7c g     O .rodata	00000020 acGUI_FontAvantGarde16B_2260
08030258 g     O .rodata	00000023 acGUI_FontLubalGraph20B_00F7
0803338c g     O .rodata	0000002c acGUI_FontLubalGraph20_FFFF
08019ac8 g     O .rodata	00000070 acGUI_FontLubalGraph32B_005E
08037b7c g     O .rodata	0000002c acGUI_FontLubalGraph16B_00FE
0804aab0 g     O .rodata	00000078 acGUI_FontAvantGarde32_006B
0802b874 g     O .rodata	0000005a acGUI_FontLubalGraph24_00E8
08016814 g     O .rodata	000000a8 acGUI_FontLubalGraph32B_00E7
08005e12 g     F .text	00000034 WIDGET__GetClientRect
08018d9c g     O .rodata	00000060 acGUI_FontLubalGraph32B_00A2
0802a7b8 g     O .rodata	00000050 acGUI_FontLubalGraph24_2202
08029748 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop40
08051ff8 g     O .rodata	00000001 acGUI_FontAvantGarde24B_0020
0803032c g     O .rodata	00000041 acGUI_FontLubalGraph20B_00F3
08012c0c g     F .text	00000018 GUI_GetBkColor
080219a8 g     O .rodata	00000046 acGUI_FontLubalGraph32_0072
080304cc g     O .rodata	00000037 acGUI_FontLubalGraph20B_00EB
080605f0 g     O .rodata	00000028 acGUI_FontAvantGarde16B_00E4
08038894 g     O .rodata	00000010 acGUI_FontLubalGraph16B_00AC
08062d9c g     O .rodata	0000001e acGUI_FontAvantGarde16_2044
0804ae78 g     O .rodata	000000a0 acGUI_FontAvantGarde32_0062
0803d910 g     O .rodata	000000c6 acGUI_FontAvantGarde32B_220F
080466ec g     O .rodata	0000000a acGUI_FontAvantGarde32_201A
080076a4 g     F .text	00000020 WM_GetFocussedWindow
08018cb0 g     O .rodata	00000069 acGUI_FontLubalGraph32B_00A4
080166ec g     O .rodata	00000093 acGUI_FontLubalGraph32B_00E9
08021824 g     O .rodata	00000070 acGUI_FontLubalGraph32_0076
08007616 g     F .text	0000001c WM_GetScrollbarH
0805e2f8 g     O .rodata	00000048 acGUI_FontAvantGarde20_0056
0804ab88 g     O .rodata	0000008c acGUI_FontAvantGarde32_0068
08046fc4 g     O .rodata	0000000e acGUI_FontAvantGarde32_0131
0803aa94 g     O .rodata	00000028 acGUI_FontLubalGraph16_00FC
08000fec  w    F .text	00000002 DMA1_Stream0_IRQHandler
080081e0 g     F .text	0000015c WM_CreateWindowAsChild
0802ce0c g     O .rodata	00000018 acGUI_FontLubalGraph24_00AA
080003a0 g     F .text	00000002 NMI_Handler
08029760 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop42
0801d490 g     O .rodata	000000ab acGUI_FontLubalGraph32_03BC
0806053c g     O .rodata	0000002c acGUI_FontAvantGarde16B_00E8
08004ffe  w    F .text	00000002 HAL_I2C_MspInit
08016484 g     O .rodata	00000072 acGUI_FontLubalGraph32B_00EE
0802380c g     O .rodata	0000000c acGUI_FontLubalGraph32_003A
0805637c g     O .rodata	0000004b acGUI_FontAvantGarde24_0055
0802db90 g     O .rodata	00000054 acGUI_FontLubalGraph24_0052
0803aae4 g     O .rodata	0000002c acGUI_FontLubalGraph16_00FA
08060188 g     O .rodata	0000001e acGUI_FontAvantGarde16B_0141
080303b4 g     O .rodata	0000003c acGUI_FontLubalGraph20B_00F1
0804ad68 g     O .rodata	000000a0 acGUI_FontAvantGarde32_0064
0804ca98 g     O .rodata	000000b4 acGUI_FontAvantGarde32_0025
0802f8e0 g     O .rodata	00000003 acGUI_FontLubalGraph20B_2219
08038814 g     O .rodata	00000006 acGUI_FontLubalGraph16B_00B4
08016568 g     O .rodata	00000069 acGUI_FontLubalGraph32B_00EC
0805806c g     O .rodata	00000024 acGUI_FontAvantGarde20B_2260
08051d0c g     O .rodata	00000050 acGUI_FontAvantGarde24B_002F
0804acb4 g     O .rodata	00000050 acGUI_FontAvantGarde32_0066
0803a39c g     O .rodata	0000002c acGUI_FontLubalGraph16_25CA
0803def4 g     O .rodata	0000011d acGUI_FontAvantGarde32B_2030
08033580 g     O .rodata	00000002 acGUI_FontLubalGraph20_2219
08056288 g     O .rodata	00000087 acGUI_FontAvantGarde24_0057
08060590 g     O .rodata	00000031 acGUI_FontAvantGarde16B_00E6
080145a8 g     O .rodata	00000060 acGUI_FontLubalGraph32B_2265
0802951c g     O .rodata	00000012 acGUI_FontLubalGraph24B_0022
08020144 g     O .rodata	000000af acGUI_FontLubalGraph32_00C9
08006310 g     F .text	0000000c FRAMEWIN_SetDefaultFont
08033584 g     O .rodata	00000024 acGUI_FontLubalGraph20_2215
08038828 g     O .rodata	0000000a acGUI_FontLubalGraph16B_00B2
08037ce0 g     O .rodata	00000028 acGUI_FontLubalGraph16B_00F5
0805fb60 g     O .rodata	0000001b acGUI_FontAvantGarde16B_2264
08061284 g     O .rodata	0000002a acGUI_FontAvantGarde16B_006D
08023914 g     O .rodata	00000072 acGUI_FontLubalGraph32_0037
08024384 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop39
08037e50 g     O .rodata	0000002d acGUI_FontLubalGraph16B_00EB
08001e10 g     F .text	0000002c vPortExitCritical
080325c4 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop4
0804c9dc g     O .rodata	00000008 acGUI_FontAvantGarde32_0027
0801b790 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop13
080396c0 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop32
0802947c g     O .rodata	00000055 acGUI_FontLubalGraph24B_0024
080283d4 g     O .rodata	00000046 acGUI_FontLubalGraph24B_0061
080354c4 g     O .rodata	0000002a acGUI_FontLubalGraph20_007B
080561d0 g     O .rodata	0000005a acGUI_FontAvantGarde24_0059
080538e4 g     O .rodata	0000005a acGUI_FontAvantGarde24_017D
0804c904 g     O .rodata	0000006c acGUI_FontAvantGarde32_0029
08037ca4 g     O .rodata	00000018 acGUI_FontLubalGraph16B_00F7
0800b7f0 g     F .text	0000004c LCD_DrawHLine
08050b88 g     O .rodata	00000037 acGUI_FontAvantGarde24B_006E
08061788 g     O .rodata	00000032 acGUI_FontAvantGarde16B_0047
0803c670 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop41
080378c0 g     O .rodata	00000008 acGUI_FontLubalGraph16B_2013
0805c3e4 g     O .rodata	00000006 acGUI_FontAvantGarde20_2019
08046ab0 g     O .rodata	000000a8 acGUI_FontAvantGarde32_017D
080271bc g     O .rodata	00000064 acGUI_FontLubalGraph24B_00C8
0803213c g     O .rodata	00000010 acGUI_FontLubalGraph20B_003D
0801b778 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop11
0805bdf4 g     O .rodata	00000030 acGUI_FontAvantGarde20_FB02
08023818 g     O .rodata	00000085 acGUI_FontLubalGraph32_0039
08037d30 g     O .rodata	0000002c acGUI_FontLubalGraph16B_00F3
08016aac g     O .rodata	00000098 acGUI_FontLubalGraph32B_00E3
08006148 g     F .text	00000018 SCROLLBAR_SetDefaultColor
08053bb4 g     O .rodata	0000000b acGUI_FontAvantGarde24_0131
0804dbf8 g     O .rodata	00000041 acGUI_FontAvantGarde24B_2264
08063124 g     O .rodata	00000007 acGUI_FontAvantGarde16_0131
0802dc54 g     O .rodata	00000054 acGUI_FontLubalGraph24_0050
08061754 g     O .rodata	0000000a acGUI_FontAvantGarde16B_0049
08019c3c g     O .rodata	0000007e acGUI_FontLubalGraph32B_005A
08058248 g     O .rodata	00000048 acGUI_FontAvantGarde20B_2206
080362d8 g     O .rodata	00000030 acGUI_FontLubalGraph20_0039
08064280 g     O .rodata	00000028 acGUI_FontAvantGarde16_0059
0805a91c g     O .rodata	00000054 acGUI_FontAvantGarde20B_0047
0801b904 g     O .rodata	00000be8 GUI_FontLubalGraph32_CharInfo
08037d88 g     O .rodata	00000028 acGUI_FontLubalGraph16B_00F1
080155ac g     O .rodata	000000af acGUI_FontLubalGraph32B_017D
0802f918 g     O .rodata	00000041 acGUI_FontLubalGraph20B_2211
0800b4bc g     F .text	0000002c LCD_SetVisEx
0803217c g     O .rodata	0000000a acGUI_FontLubalGraph20B_003B
08016974 g     O .rodata	000000a8 acGUI_FontLubalGraph32B_00E5
08018e20 g     O .rodata	00000001 acGUI_FontLubalGraph32B_00A0
08003922 g     F .text	00000038 HAL_LTDC_ConfigColorKeying
0803d9d8 g     O .rodata	000000ab acGUI_FontAvantGarde32B_2206
0805a994 g     O .rodata	00000030 acGUI_FontAvantGarde20B_0045
08016bdc g     O .rodata	000000a8 acGUI_FontLubalGraph32B_00E1
08047d10 g     O .rodata	00000085 acGUI_FontAvantGarde32_00E7
0802954c g     O .rodata	00000001 acGUI_FontLubalGraph24B_0020
0800e3ec g     F .text	00000038 GUI_ALLOC_Free
0800d0a0 g     F .text	00000018 GUI_GetDrawMode
08050c7c g     O .rodata	00000036 acGUI_FontAvantGarde24B_006A
0805a40c g     O .rodata	0000000c acGUI_FontAvantGarde20B_0060
08025b80 g     O .rodata	0000005a acGUI_FontLubalGraph24B_0160
0800e364 g     F .text	00000014 GUI_ALLOC_h2p
0802da3c g     O .rodata	00000070 acGUI_FontLubalGraph24_0056
0805b138 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop30
0803923c g     O .rodata	00000010 acGUI_FontLubalGraph16B_003D
08036338 g     O .rodata	00000030 acGUI_FontLubalGraph20_0037
08063dcc g     O .rodata	00000004 acGUI_FontAvantGarde16_00A8
08057214 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop17
0805cf08 g     O .rodata	00000030 acGUI_FontAvantGarde20_00DE
08051e6c g     O .rodata	00000054 acGUI_FontAvantGarde24B_0026
08000fec  w    F .text	00000002 USART6_IRQHandler
20028850 g     O .bss	00000004 GUI_pLCD_APIList
08050e48 g     O .rodata	00000042 acGUI_FontAvantGarde24B_0063
0803926c g     O .rodata	00000008 acGUI_FontLubalGraph16B_003B
08064258 g     O .rodata	00000028 acGUI_FontAvantGarde16_005A
0802db10 g     O .rodata	00000046 acGUI_FontLubalGraph24_0054
0805ed10 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop7
08019df0 g     O .rodata	000000ea acGUI_FontLubalGraph32B_0057
08012dcc g     F .text	00000150 GUIMONO_DispChar
08050db0 g     O .rodata	00000042 acGUI_FontAvantGarde24B_0065
080571fc g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop15
08035550 g     O .rodata	0000002d acGUI_FontLubalGraph20_0078
08008454 g     F .text	0000000c WM_GetActiveWindow
080636ec g     O .rodata	0000003c acGUI_FontAvantGarde16_00D8
08025654 g     O .rodata	0000009a acGUI_FontLubalGraph24B_2030
08036398 g     O .rodata	00000030 acGUI_FontLubalGraph20_0035
08051e18 g     O .rodata	0000004c acGUI_FontAvantGarde24B_0028
0805ed28 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop9
080355c8 g     O .rodata	0000002d acGUI_FontLubalGraph20_0076
0805bf80 g     O .rodata	00000055 acGUI_FontAvantGarde20_221A
0802439c g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop41
08005000 g     F .text	00000096 HAL_I2C_Init
08003ba4 g     F .text	00000074 HAL_PWREx_EnableOverDrive
08006084 g     F .text	00000042 WIDGET__DrawVLine
0805a898 g     O .rodata	00000030 acGUI_FontAvantGarde20B_004A
080146f0 g     O .rodata	00000082 acGUI_FontLubalGraph32B_222B
08036404 g     O .rodata	00000030 acGUI_FontLubalGraph20_0033
080467ac g     O .rodata	00000072 acGUI_FontAvantGarde32_03BC
080560a4 g     O .rodata	00000023 acGUI_FontAvantGarde24_005E
080558a8 g     O .rodata	00000042 acGUI_FontAvantGarde24_00A4
080542c0 g     O .rodata	00000050 acGUI_FontAvantGarde24_00E9
08019cbc g     O .rodata	00000090 acGUI_FontLubalGraph32B_0059
0802421c g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop9
08013130 g     F .text	00000010 LCD_GetBkColorIndex
08006c50 g     F .text	0000008c BUTTON_CreateUser
08063744 g     O .rodata	0000003c acGUI_FontAvantGarde16_00D6
080396a8 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop30
0802fe18 g     O .rodata	00000030 acGUI_FontLubalGraph20B_017E
0805a838 g     O .rodata	00000024 acGUI_FontAvantGarde20B_004C
0802c634 g     O .rodata	0000008c acGUI_FontLubalGraph24_00C6
080243b4 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop43
080356d4 g     O .rodata	00000048 acGUI_FontLubalGraph20_0070
0804e714 g     O .rodata	0000006e acGUI_FontAvantGarde24B_0153
08055838 g     O .rodata	00000011 acGUI_FontAvantGarde24_00A6
08044b54 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop20
0803bf50 g     O .rodata	00000028 acGUI_FontLubalGraph16_004B
08007632 g     F .text	0000001c WM_GetScrollbarV
00000400 g       *ABS*	00000000 _Min_Stack_Size
080223a0 g     O .rodata	0000005f acGUI_FontLubalGraph32_005C
08061880 g     O .rodata	00000032 acGUI_FontAvantGarde16B_0041
08035670 g     O .rodata	0000001b acGUI_FontLubalGraph20_0072
08058290 g     O .rodata	00000034 acGUI_FontAvantGarde20B_2202
0801a25c g     O .rodata	0000007e acGUI_FontLubalGraph32B_0050
080378a8 g     O .rodata	00000004 acGUI_FontLubalGraph16B_2019
080586a4 g     O .rodata	0000000c acGUI_FontAvantGarde20B_02D8
0805ee60 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop35
0805afb8 g     O .rodata	00000024 GUI_FontAvantGarde20
08000fec  w    F .text	00000002 OTG_FS_IRQHandler
080642d0 g     O .rodata	0000003c acGUI_FontAvantGarde16_0057
0805ee78 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop37
0803ba94 g     O .rodata	00000014 acGUI_FontLubalGraph16_006C
08004b68 g     F .text	00000002 ft5336_TS_ClearIT
08000e14 g     F .text	00000188 LCD_X_DisplayDriver
0803e85c g     O .rodata	000000b6 acGUI_FontAvantGarde32B_0153
08051ffc g     O .rodata	00000024 GUI_FontAvantGarde24
0803bad0 g     O .rodata	0000001a acGUI_FontLubalGraph16_006A
08022444 g     O .rodata	00000085 acGUI_FontLubalGraph32_005A
08068c10 g     O .rodata	00000018 LCD_API_ColorConv_0
080379b8 g     O .rodata	0000001e acGUI_FontLubalGraph16B_017E
0803a6ec g     O .rodata	00000030 acGUI_FontLubalGraph16_2021
08064340 g     O .rodata	0000001e acGUI_FontAvantGarde16_0055
080466d8 g     O .rodata	00000014 acGUI_FontAvantGarde32_201C
0802fcd4 g     O .rodata	00000008 acGUI_FontLubalGraph20B_2013
0800b620 g     F .text	00000010 LCD_GetXSize
08044b9c g     O .rodata	0000000c GUI_FontAvantGarde32_Prop26
08035630 g     O .rodata	00000024 acGUI_FontLubalGraph20_0074
0805a8c8 g     O .rodata	00000018 acGUI_FontAvantGarde20B_0049
08036464 g     O .rodata	00000024 acGUI_FontLubalGraph20_0031
0801cd28 g     O .rodata	000000d1 acGUI_FontLubalGraph32_212E
08000fec  w    F .text	00000002 SPI3_IRQHandler
0805ffb4 g     O .rodata	00000009 acGUI_FontAvantGarde16B_02DC
0804ce84 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop41
0800b83c g     F .text	0000004c LCD_DrawVLine
0802ad48 g     O .rodata	00000055 acGUI_FontLubalGraph24_0192
0803a8d8 g     O .rodata	0000001e acGUI_FontLubalGraph16_0161
08063df8 g     O .rodata	0000000b acGUI_FontAvantGarde16_00A6
080581f4 g     O .rodata	00000054 acGUI_FontAvantGarde20B_220F
08000fec  w    F .text	00000002 TIM1_TRG_COM_TIM11_IRQHandler
0804cd7c g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop19
08053684 g     O .rodata	0000000c acGUI_FontAvantGarde24_201D
0800d92c g     F .text	00000020 GUI_DEVICE__GetpDriver
08044bb4 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop28
080466b0 g     O .rodata	00000014 acGUI_FontAvantGarde32_201E
0805ffc8 g     O .rodata	00000008 acGUI_FontAvantGarde16B_02DA
08000428 g     F .text	00000050 k_BspInit
08011d04 g     F .text	00000010 LCD_AA_SetAndMask
08005f40 g     F .text	00000144 WIDGET_HandleActive
08044adc g     O .rodata	0000000c GUI_FontAvantGarde32_Prop10
080050c4 g     F .text	00000124 HAL_I2C_Mem_Write
0801eb54 g     O .rodata	000000a8 acGUI_FontLubalGraph32_00E7
0804f274 g     O .rodata	0000005a acGUI_FontAvantGarde24B_00E2
08063e2c g     O .rodata	00000020 acGUI_FontAvantGarde16_00A4
0803c688 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop43
08046728 g     O .rodata	0000000c acGUI_FontAvantGarde32_2013
08005ec6 g     F .text	00000036 WIDGET_OrState
08037784 g     O .rodata	00000024 acGUI_FontLubalGraph16B_20AC
08007668 g     F .text	0000001c WM_GetWindowOrgX
08044b24 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop16
08012380 g     F .text	00000028 GUI_UC__GetCharCodeInc
08000fec  w    F .text	00000002 TIM2_IRQHandler
08013598 g     O .rodata	0000000c SCROLLBAR_STSkin
08065cd4 g     O .rodata	0000000c GUI_Font16_1_FontProp1
0804fcd0 g     O .rodata	0000004c acGUI_FontAvantGarde24B_00C8
0802e97c g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop10
0801ea04 g     O .rodata	000000a8 acGUI_FontLubalGraph32_00E9
08021558 g     O .rodata	00000001 acGUI_FontLubalGraph32_00A0
0805d040 g     O .rodata	00000040 acGUI_FontAvantGarde20_00D9
0801565c g     O .rodata	000000c6 acGUI_FontLubalGraph32B_0178
08024198 g     O .rodata	00000024 GUI_FontLubalGraph24B
08004bb4 g     F .text	00000044 ft5336_TS_DetectTouch
0802d94c g     O .rodata	00000062 acGUI_FontLubalGraph24_0058
0804f1bc g     O .rodata	0000005a acGUI_FontAvantGarde24B_00E4
08044b0c g     O .rodata	0000000c GUI_FontAvantGarde32_Prop14
08000478 g     F .text	000000c4 k_TouchUpdate
0800deee g     F .text	00000010 GUIPROP_IsInFont
0803d370 g     O .rodata	00000072 acGUI_FontAvantGarde32B_FB01
080466f8 g     O .rodata	0000000a acGUI_FontAvantGarde32_2019
08050778 g     O .rodata	0000001c acGUI_FontAvantGarde24B_00A1
080214dc g     O .rodata	00000066 acGUI_FontLubalGraph32_00A2
0804cd34 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop13
08049f8c g     O .rodata	00000028 acGUI_FontAvantGarde32_00AB
0805fc40 g     O .rodata	00000008 acGUI_FontAvantGarde16B_2212
0801ef80 g     O .rodata	000000bd acGUI_FontLubalGraph32_00E1
08027868 g     O .rodata	0000001e acGUI_FontLubalGraph24B_00B9
0805ee30 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop31
08014668 g     O .rodata	0000004e acGUI_FontLubalGraph32B_2260
0802af3c g     O .rodata	00000064 acGUI_FontLubalGraph24_0153
08063000 g     O .rodata	00000030 acGUI_FontAvantGarde16_0178
08053da4 g     O .rodata	00000050 acGUI_FontAvantGarde24_00FA
0805d0d4 g     O .rodata	00000020 acGUI_FontAvantGarde20_00D7
0804cd1c g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop11
0804fb68 g     O .rodata	00000039 acGUI_FontAvantGarde24B_00CD
0803ee7c g     O .rodata	0000007e acGUI_FontAvantGarde32B_00F9
0801ee20 g     O .rodata	000000ab acGUI_FontLubalGraph32_00E3
08000fec  w    F .text	00000002 CAN2_RX0_IRQHandler
0802eaf0 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop41
0800990c g     F .text	00000038 GUI_MEMDEV__WriteToActiveAt
08053d0c g     O .rodata	0000004b acGUI_FontAvantGarde24_00FC
0800d17c g     F .text	00000044 GUIPROP_EXT__DispLine
0805b198 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop38
0805ee48 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop33
08041894 g     O .rodata	000000b0 acGUI_FontAvantGarde32B_00B6
0803baec g     O .rodata	00000014 acGUI_FontLubalGraph16_0069
080536b4 g     O .rodata	00000012 acGUI_FontAvantGarde24_2014
0802fce0 g     O .rodata	00000028 acGUI_FontLubalGraph20B_03C0
0801b8e0 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop41
0800189c g     F .text	0000007c xTaskCheckForTimeOut
08061e54 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop40
0805d150 g     O .rodata	0000005a acGUI_FontAvantGarde20_00D5
080583d8 g     O .rodata	0000003c acGUI_FontAvantGarde20B_20AC
0801ecc0 g     O .rodata	000000b4 acGUI_FontLubalGraph32_00E5
0804fac4 g     O .rodata	00000048 acGUI_FontAvantGarde24B_00CF
08064218 g     O .rodata	00000021 acGUI_FontAvantGarde16_005C
080293b8 g     O .rodata	0000000c acGUI_FontLubalGraph24B_0027
080282e0 g     O .rodata	00000062 acGUI_FontLubalGraph24B_0064
08000fec  w    F .text	00000002 TIM7_IRQHandler
08063d80 g     O .rodata	0000000a acGUI_FontAvantGarde16_00AB
0802eb08 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop43
08053c34 g     O .rodata	00000072 acGUI_FontAvantGarde24_00FE
08041878 g     O .rodata	00000012 acGUI_FontAvantGarde32B_00B8
0802e27c g     O .rodata	00000038 acGUI_FontLubalGraph24_003F
08050c18 g     O .rodata	0000001c acGUI_FontAvantGarde24B_006C
080641ec g     O .rodata	0000000f acGUI_FontAvantGarde16_005E
08061e6c g     O .rodata	0000000c GUI_FontAvantGarde16_Prop42
08029418 g     O .rodata	00000062 acGUI_FontLubalGraph24B_0025
08028380 g     O .rodata	00000054 acGUI_FontLubalGraph24B_0062
08063d6c g     O .rodata	00000002 acGUI_FontAvantGarde16_00AD
080367b8 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop22
0804afac g     O .rodata	0000003c acGUI_FontAvantGarde32_005E
080062c2 g     F .text	00000026 GUI_ARRAY_GethItem
0803bb64 g     O .rodata	0000001c acGUI_FontLubalGraph16_0065
0802fcb8 g     O .rodata	00000004 acGUI_FontLubalGraph20B_2019
0805bf5c g     O .rodata	00000024 acGUI_FontAvantGarde20_221E
0805e4cc g     O .rodata	0000003c acGUI_FontAvantGarde20_004E
0805d2c8 g     O .rodata	0000004b acGUI_FontAvantGarde20_00D1
0802fb10 g     O .rodata	00000037 acGUI_FontLubalGraph20B_20AC
0803b5c8 g     O .rodata	0000003c acGUI_FontLubalGraph16_00BD
08001370 g     F .text	00000144 xTaskIncrementTick
0800ce88 g     F .text	00000020 GUI_MoveRect
080292f4 g     O .rodata	00000006 acGUI_FontLubalGraph24B_002E
08028108 g     O .rodata	00000054 acGUI_FontLubalGraph24B_006B
080279a4 g     O .rodata	00000032 acGUI_FontLubalGraph24B_00B1
08026098 g     O .rodata	00000046 acGUI_FontLubalGraph24B_00F6
0805b180 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop36
0803e4cc g     O .rodata	000000a8 acGUI_FontAvantGarde32B_0192
08033830 g     O .rodata	00000007 acGUI_FontLubalGraph20_2039
08039624 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop19
08063d34 g     O .rodata	00000003 acGUI_FontAvantGarde16_00AF
0803bbf8 g     O .rodata	0000001c acGUI_FontLubalGraph16_0061
080367d0 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop24
0802700c g     O .rodata	00000050 acGUI_FontLubalGraph24B_00CD
0803b56c g     O .rodata	0000001e acGUI_FontLubalGraph16_00BF
08033da8 g     O .rodata	0000005a acGUI_FontLubalGraph20_00FE
0803bb28 g     O .rodata	00000028 acGUI_FontLubalGraph16_0067
08013724 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop30
080061e8 g     F .text	00000032 GUI_DRAW__Draw
08000fec  w    F .text	00000002 CAN2_TX_IRQHandler
0805e5e0 g     O .rodata	0000000c acGUI_FontAvantGarde20_0049
08028080 g     O .rodata	0000005a acGUI_FontLubalGraph24B_006D
08027968 g     O .rodata	0000001e acGUI_FontLubalGraph24B_00B3
08026020 g     O .rodata	00000048 acGUI_FontLubalGraph24B_00F8
0801ca9c g     O .rodata	0000000e acGUI_FontLubalGraph32_2212
08063428 g     O .rodata	00000028 acGUI_FontAvantGarde16_00EA
0803c308 g     O .rodata	00000034 acGUI_FontLubalGraph16_002F
08018b88 g     O .rodata	00000010 acGUI_FontLubalGraph32B_00A8
08026f80 g     O .rodata	00000030 acGUI_FontLubalGraph24B_00CF
0804a0a4 g     O .rodata	00000010 acGUI_FontAvantGarde32_00A8
0804f330 g     O .rodata	00000060 acGUI_FontAvantGarde24B_00E0
08060744 g     O .rodata	00000030 acGUI_FontAvantGarde16B_00DC
080395f4 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop15
080633ec g     O .rodata	00000014 acGUI_FontAvantGarde16_00EC
0803a338 g     O .rodata	00000024 acGUI_FontLubalGraph16_FFFF
080151e4 g     O .rodata	00000010 acGUI_FontLubalGraph32B_2018
0803574c g     O .rodata	00000036 acGUI_FontLubalGraph20_006E
0805ffd0 g     O .rodata	00000002 acGUI_FontAvantGarde16B_02D9
0801d830 g     O .rodata	000000d8 acGUI_FontLubalGraph32_0178
08008cf0 g     F .text	0000001c GUI_MEMDEV_Paint1Static
08018c04 g     O .rodata	0000002a acGUI_FontLubalGraph32B_00A6
08067070 g     O .rodata	00000018 LCD_API_ColorConv_M8888I
08059b80 g     O .rodata	00000012 acGUI_FontAvantGarde20B_00BB
080340a0 g     O .rodata	00000041 acGUI_FontLubalGraph20_00F3
08032798 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop43
08034128 g     O .rodata	00000048 acGUI_FontLubalGraph20_00F1
200287f0 g     O .bss	00000008 WM__ahCapture
08047f9c g     O .rodata	00000098 acGUI_FontAvantGarde32_00E3
08043c28 g     O .rodata	00000085 acGUI_FontAvantGarde32B_0042
0804a16c g     O .rodata	00000016 acGUI_FontAvantGarde32_00A6
08025e38 g     O .rodata	00000078 acGUI_FontLubalGraph24B_00FD
0800d074 g     F .text	0000002c GUI_GetOrg
080633b4 g     O .rodata	0000001e acGUI_FontAvantGarde16_00EE
0805bfdc g     O .rodata	00000030 acGUI_FontAvantGarde20_2215
080031dc g     F .text	0000007c HAL_RCC_GetSysClockFreq
0803bba8 g     O .rodata	0000001c acGUI_FontLubalGraph16_0063
080606e8 g     O .rodata	00000028 acGUI_FontAvantGarde16B_00DE
0804fbe0 g     O .rodata	00000048 acGUI_FontAvantGarde24B_00CB
0804b1c0 g     O .rodata	000000a0 acGUI_FontAvantGarde32_0059
0805cf88 g     O .rodata	0000003c acGUI_FontAvantGarde20_00DC
0803b640 g     O .rodata	0000000a acGUI_FontLubalGraph16_00BB
080307f8 g     O .rodata	0000002c acGUI_FontLubalGraph20B_00DE
08046058 g     O .rodata	000000dc acGUI_FontAvantGarde32_212E
08034028 g     O .rodata	0000003c acGUI_FontLubalGraph20_00F5
08000688 g     F .text	00000194 main
08043d70 g     O .rodata	000000be acGUI_FontAvantGarde32B_0040
0805c010 g     O .rodata	00000046 acGUI_FontAvantGarde20_2211
08025f04 g     O .rodata	0000005a acGUI_FontLubalGraph24B_00FB
0801b8f8 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop43
08058aa4 g     O .rodata	00000038 acGUI_FontAvantGarde20B_00FA
080480d4 g     O .rodata	000000a0 acGUI_FontAvantGarde32_00E1
08033fc8 g     O .rodata	00000023 acGUI_FontLubalGraph20_00F7
08037690 g     O .rodata	00000024 acGUI_FontLubalGraph16B_2206
08001c30 g     F .text	0000002e osSemaphoreCreate
08009b48 g     F .text	00000054 GUI_MEMDEV_Select
0803c340 g     O .rodata	00000002 acGUI_FontLubalGraph16_002D
0803b66c g     O .rodata	00000006 acGUI_FontLubalGraph16_00B8
080309ec g     O .rodata	00000020 acGUI_FontLubalGraph20B_00D7
0805a7b4 g     O .rodata	0000003c acGUI_FontAvantGarde20B_004E
08057190 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop6
0805fe1c g     O .rodata	0000000a acGUI_FontAvantGarde16B_2039
08057160 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop2
0800d950 g     F .text	0000004c GUI_DEVICE_Create
0800ec74 g     F .text	000000d4 GUI_AA__DrawCharAA4
08063450 g     O .rodata	00000028 acGUI_FontAvantGarde16_00E9
080376dc g     O .rodata	00000036 acGUI_FontLubalGraph16B_212E
0805bfd8 g     O .rodata	00000002 acGUI_FontAvantGarde20_2219
0802b0c0 g     O .rodata	0000006c acGUI_FontLubalGraph24_00FF
0803a3c8 g     O .rodata	00000020 acGUI_FontLubalGraph16_2265
0803ef7c g     O .rodata	00000069 acGUI_FontAvantGarde32B_00F7
08004a60 g     F .text	00000020 TS_IO_Write
080419b8 g     O .rodata	00000018 acGUI_FontAvantGarde32B_00B4
0804a390 g     O .rodata	00000001 acGUI_FontAvantGarde32_00A0
08005444 g     F .text	0000002e HAL_SDRAM_SendCommand
0800764e g     F .text	0000001a WM_GetParent
08053df4 g     O .rodata	00000050 acGUI_FontAvantGarde24_00F9
080434f8 g     O .rodata	000000be acGUI_FontAvantGarde32B_004F
08030950 g     O .rodata	0000004b acGUI_FontLubalGraph20B_00D9
08057178 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop4
0803b6dc g     O .rodata	0000000e acGUI_FontLubalGraph16_00B2
0800b5e8 g     F .text	00000006 LCD_GetXSizeEx
0802eaa8 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop35
0805b0fc g     O .rodata	0000000c GUI_FontAvantGarde20_Prop25
08032058 g     O .rodata	00000042 acGUI_FontLubalGraph20B_0041
080378cc g     O .rodata	00000023 acGUI_FontLubalGraph16B_03C0
0805d000 g     O .rodata	00000040 acGUI_FontAvantGarde20_00DA
08011ed6 g     F .text	00000176 GUI__ExpandPixelIndicesEx
08041a14 g     O .rodata	00000034 acGUI_FontAvantGarde32B_00B2
08043650 g     O .rodata	000000be acGUI_FontAvantGarde32B_004D
08033f40 g     O .rodata	0000004e acGUI_FontLubalGraph20_00F9
0802a694 g     O .rodata	00000060 acGUI_FontLubalGraph24_2211
08007fb6 g     F .text	00000078 WM__InvalidateRect
08029344 g     O .rodata	00000012 acGUI_FontLubalGraph24B_002A
080261c8 g     O .rodata	00000050 acGUI_FontLubalGraph24B_00F2
0803f088 g     O .rodata	000000a0 acGUI_FontAvantGarde32B_00F5
0805b0e4 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop23
0800cbc0 g     F .text	00000024 GUI__AlphaSuppressMixing
0805b024 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop7
08000bc8 g     F .text	00000070 HAL_LTDC_LineEventCallback
080536ac g     O .rodata	00000008 acGUI_FontAvantGarde24_2018
0802ea90 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop33
0803f318 g     O .rodata	00000078 acGUI_FontAvantGarde32B_00F1
0803686c g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop37
0803ffe4 g     O .rodata	000000a8 acGUI_FontAvantGarde32B_00DB
08004aa8 g     F .text	00000004 TS_IO_Delay
080062e8 g     F .text	00000026 GUI_ARRAY_GetpItemLocked
08029304 g     O .rodata	0000000c acGUI_FontLubalGraph24B_002C
0802612c g     O .rodata	0000004b acGUI_FontLubalGraph24B_00F4
0803960c g     O .rodata	0000000c GUI_FontLubalGraph16_Prop17
0803d708 g     O .rodata	000000d8 acGUI_FontAvantGarde32B_221A
08033e5c g     O .rodata	00000048 acGUI_FontLubalGraph20_00FC
08049f50 g     O .rodata	00000008 acGUI_FontAvantGarde32_00AD
08043ad0 g     O .rodata	00000098 acGUI_FontAvantGarde32B_0044
0803fd64 g     O .rodata	00000085 acGUI_FontAvantGarde32B_00DF
08049e7c g     O .rodata	0000000a acGUI_FontAvantGarde32_00AF
08053fe8 g     O .rodata	00000060 acGUI_FontAvantGarde24_00F3
08036788 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop18
08041ab4 g     O .rodata	0000001c acGUI_FontAvantGarde32B_00B0
080643c8 g     O .rodata	0000003c acGUI_FontAvantGarde16_0051
0800e8bc g     F .text	0000008c GUI_DrawRect
08036710 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop8
08036884 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop39
080554dc g     O .rodata	00000018 acGUI_FontAvantGarde24_00BB
0803f1c8 g     O .rodata	000000a8 acGUI_FontAvantGarde32B_00F3
08033eec g     O .rodata	00000054 acGUI_FontLubalGraph20_00FA
08033a98 g     O .rodata	00000009 acGUI_FontLubalGraph20_02D8
08002628 g     F .text	00000174 xQueueGenericSend
0803fe74 g     O .rodata	000000c8 acGUI_FontAvantGarde32B_00DD
080439fc g     O .rodata	0000005f acGUI_FontAvantGarde32B_0046
080391a0 g     O .rodata	0000002d acGUI_FontLubalGraph16B_0041
0801517c g     O .rodata	00000028 acGUI_FontLubalGraph32B_201D
0802cbe8 g     O .rodata	0000001b acGUI_FontLubalGraph24_00B9
08026274 g     O .rodata	00000046 acGUI_FontLubalGraph24B_00F0
08032780 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop41
0805b03c g     O .rodata	0000000c GUI_FontAvantGarde20_Prop9
08036770 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop16
0803b708 g     O .rodata	0000000a acGUI_FontLubalGraph16_00B0
080540a8 g     O .rodata	00000046 acGUI_FontAvantGarde24_00F1
0802b40c g     O .rodata	00000054 acGUI_FontLubalGraph24_00F6
08038200 g     O .rodata	00000012 acGUI_FontLubalGraph16B_00D7
08063e98 g     O .rodata	00000001 acGUI_FontAvantGarde16_00A0
08030870 g     O .rodata	00000046 acGUI_FontLubalGraph20B_00DC
080235b4 g     O .rodata	000000be acGUI_FontLubalGraph32_0040
0801373c g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop32
0803077c g     O .rodata	00000041 acGUI_FontLubalGraph20B_00E0
08025ac4 g     O .rodata	00000070 acGUI_FontLubalGraph24B_0178
08064388 g     O .rodata	0000001e acGUI_FontAvantGarde16_0053
0805303c g     O .rodata	0000002a acGUI_FontAvantGarde24_221E
080043f8  w    F .text	0000018c BSP_SDRAM_MspInit
080306fc g     O .rodata	0000003c acGUI_FontLubalGraph20B_00E2
0803d7e8 g     O .rodata	00000072 acGUI_FontAvantGarde32B_2215
08029358 g     O .rodata	00000030 acGUI_FontLubalGraph24B_0029
08028278 g     O .rodata	0000002a acGUI_FontLubalGraph24B_0066
08000fec  w    F .text	00000002 DCMI_IRQHandler
0802cc10 g     O .rodata	00000002 acGUI_FontLubalGraph24_00B7
080609a0 g     O .rodata	00000030 acGUI_FontAvantGarde16B_00D1
0802e358 g     O .rodata	00000016 acGUI_FontLubalGraph24_003B
08038184 g     O .rodata	00000041 acGUI_FontLubalGraph16B_00D9
0803b2e4 g     O .rodata	00000024 acGUI_FontLubalGraph16_00CA
080530e0 g     O .rodata	00000003 acGUI_FontAvantGarde24_2219
08013754 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop34
0800cb1c g     F .text	00000020 GUI_SetFont
080086e0 g     F .text	00000014 WM_SetDefault
08050a8c g     O .rodata	0000005a acGUI_FontAvantGarde24B_0071
080395dc g     O .rodata	0000000c GUI_FontLubalGraph16_Prop13
08059ad8 g     O .rodata	00000054 acGUI_FontAvantGarde20B_00BD
0802b274 g     O .rodata	0000005a acGUI_FontLubalGraph24_00FB
080519e0 g     O .rodata	00000024 acGUI_FontAvantGarde24B_003B
0803c348 g     O .rodata	0000001c acGUI_FontLubalGraph16_002B
0803b678 g     O .rodata	00000021 acGUI_FontLubalGraph16_00B6
08000000 g     O .isr_vector	00000000 g_pfnVectors
08005472 g     F .text	00000024 HAL_SDRAM_ProgramRefreshRate
08063e74 g     O .rodata	00000018 acGUI_FontAvantGarde16_00A2
080438a4 g     O .rodata	00000098 acGUI_FontAvantGarde32B_0048
08038074 g     O .rodata	00000024 acGUI_FontLubalGraph16B_00DE
0801b70c g     O .rodata	0000000c GUI_FontLubalGraph32_Prop2
08055d28 g     O .rodata	00000037 acGUI_FontAvantGarde24_006E
080281c0 g     O .rodata	00000054 acGUI_FontLubalGraph24B_0068
08013784 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop38
080085e4 g     F .text	000000fc WM__InitIVRSearch
0803b2a4 g     O .rodata	0000001a acGUI_FontLubalGraph16_00CC
0802ba60 g     O .rodata	00000069 acGUI_FontLubalGraph24_00E3
0802b1ac g     O .rodata	00000072 acGUI_FontLubalGraph24_00FD
080536d4 g     O .rodata	00000006 acGUI_FontAvantGarde24_2010
080584ec g     O .rodata	0000003c acGUI_FontAvantGarde20B_2021
0803d874 g     O .rodata	0000009a acGUI_FontAvantGarde32B_2211
08059a48 g     O .rodata	00000030 acGUI_FontAvantGarde20B_00BF
080380cc g     O .rodata	00000037 acGUI_FontLubalGraph16B_00DC
08058e4c g     O .rodata	00000041 acGUI_FontAvantGarde20B_00E9
08001adc g     F .text	00000004 osThreadGetId
08025200 g     O .rodata	00000031 acGUI_FontLubalGraph24B_221E
08057334 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop41
0800b612 g     F .text	00000006 LCD_GetMirrorYEx
0801376c g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop36
08060918 g     O .rodata	00000041 acGUI_FontAvantGarde16B_00D3
0803b6c4 g     O .rodata	00000006 acGUI_FontLubalGraph16_00B4
20000198 g     O .data	00000038 DROPDOWN__DefaultProps
0801b73c g     O .rodata	0000000c GUI_FontLubalGraph32_Prop6
0800e710 g     F .text	00000034 GUI_ALLOC_RequestSize
08052218 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop43
0802a650 g     O .rodata	00000038 acGUI_FontLubalGraph24_2215
08058ed4 g     O .rodata	00000041 acGUI_FontAvantGarde20B_00E7
0802fa18 g     O .rodata	00000042 acGUI_FontLubalGraph20B_212E
08025234 g     O .rodata	00000072 acGUI_FontLubalGraph24B_221A
0805734c g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop43
0805c4d8 g     O .rodata	00000008 acGUI_FontAvantGarde20_02D8
0802f9ac g     O .rodata	00000037 acGUI_FontLubalGraph20B_2206
0801b724 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop4
08058fec g     O .rodata	00000041 acGUI_FontAvantGarde20B_00E3
080607a4 g     O .rodata	00000034 acGUI_FontAvantGarde16B_00DA
0801b754 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop8
08031efc g     O .rodata	00000042 acGUI_FontLubalGraph20B_0047
0802bb38 g     O .rodata	00000069 acGUI_FontLubalGraph24_00E1
0802e2f8 g     O .rodata	00000019 acGUI_FontLubalGraph24_003D
20028954 g       .bss	00000000 _ebss
08007260 g     F .text	0000001a WM_SendMessageNoPara
0803a764 g     O .rodata	00000003 acGUI_FontLubalGraph16_201A
08055520 g     O .rodata	00000008 acGUI_FontAvantGarde24_00B8
0802ad30 g     O .rodata	0000000c acGUI_FontLubalGraph24_02C7
0805707c g     O .rodata	00000044 acGUI_FontAvantGarde24_0024
08058f6c g     O .rodata	00000041 acGUI_FontAvantGarde20B_00E5
08051cc4 g     O .rodata	00000046 acGUI_FontAvantGarde24B_0030
0805ee90 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop39
08000fec  w    F .text	00000002 CAN1_SCE_IRQHandler
080314e8 g     O .rodata	0000000b acGUI_FontLubalGraph20B_00A1
08030604 g     O .rodata	00000040 acGUI_FontLubalGraph20B_00E6
080071e4 g     F .text	00000010 WM_SetCreateFlags
080610f8 g     O .rodata	00000015 acGUI_FontAvantGarde16B_007A
08051c50 g     O .rodata	00000046 acGUI_FontAvantGarde24B_0032
08031e94 g     O .rodata	00000021 acGUI_FontLubalGraph20B_0049
0805d208 g     O .rodata	00000060 acGUI_FontAvantGarde20_00D3
08005f30 g     F .text	00000010 WIDGET__Init
08006ff8 g     F .text	0000004e WM_SetSize
080375b4 g     O .rodata	00000014 acGUI_FontLubalGraph16B_221E
08035f74 g     O .rodata	00000030 acGUI_FontLubalGraph20_004A
0805552c g     O .rodata	00000066 acGUI_FontAvantGarde24_00B6
08030688 g     O .rodata	00000037 acGUI_FontLubalGraph20B_00E4
0805e5b0 g     O .rodata	00000030 acGUI_FontAvantGarde20_004A
08055e2c g     O .rodata	0000000f acGUI_FontAvantGarde24_0069
08047e5c g     O .rodata	000000a0 acGUI_FontAvantGarde32_00E5
08057110 g     O .rodata	0000000c acGUI_FontAvantGarde24_0022
0803a75c g     O .rodata	00000006 acGUI_FontLubalGraph16_201C
08000fec  w    F .text	00000002 SPI6_IRQHandler
08031f78 g     O .rodata	0000002c acGUI_FontLubalGraph20B_0045
0805906c g     O .rodata	00000041 acGUI_FontAvantGarde20B_00E1
0801521c g     O .rodata	00000015 acGUI_FontLubalGraph32B_2013
0803b358 g     O .rodata	00000041 acGUI_FontLubalGraph16_00C7
0805e778 g     O .rodata	00000048 acGUI_FontAvantGarde20_0041
0803a438 g     O .rodata	0000002a acGUI_FontLubalGraph16_222B
08038024 g     O .rodata	0000002c acGUI_FontLubalGraph16B_00E0
080390a4 g     O .rodata	0000002d acGUI_FontLubalGraph16B_0047
080376b4 g     O .rodata	00000028 acGUI_FontLubalGraph16B_2202
080252a8 g     O .rodata	00000006 acGUI_FontLubalGraph24B_2219
08031fe8 g     O .rodata	00000042 acGUI_FontLubalGraph20B_0043
0803a808 g     O .rodata	00000002 acGUI_FontLubalGraph16_02D9
0805e55c g     O .rodata	00000024 acGUI_FontAvantGarde20_004C
08000fec  w    F .text	00000002 ETH_IRQHandler
08025a68 g     O .rodata	0000005a acGUI_FontLubalGraph24B_017D
0805e700 g     O .rodata	00000048 acGUI_FontAvantGarde20_0043
08030000 g     O .rodata	00000037 acGUI_FontLubalGraph20B_0141
08055668 g     O .rodata	00000012 acGUI_FontAvantGarde24_00B0
080357d8 g     O .rodata	00000024 acGUI_FontLubalGraph20_006C
0801f100 g     O .rodata	000000a0 acGUI_FontLubalGraph32_00DF
200000ac g     O .data	00000004 HEADER__pSkinDefault
08045b18 g     O .rodata	00000062 acGUI_FontAvantGarde32_2260
0801a8f8 g     O .rodata	00000090 acGUI_FontLubalGraph32B_0044
08037fd0 g     O .rodata	00000028 acGUI_FontLubalGraph16B_00E2
0802addc g     O .rodata	0000005a acGUI_FontLubalGraph24_017D
08039060 g     O .rodata	00000012 acGUI_FontLubalGraph16B_0049
0802ad2c g     O .rodata	00000004 acGUI_FontLubalGraph24_02C9
0802d018 g     O .rodata	00000001 acGUI_FontLubalGraph24_00A0
0805adb0 g     O .rodata	00000038 acGUI_FontAvantGarde20B_002F
0800b6ac g     F .text	00000006 LCD_GetVXSizeMax
0802cb48 g     O .rodata	00000070 acGUI_FontLubalGraph24_00BC
0800dba0 g     F .text	0000000c GUI_SetDefaultFont
08000fec  w    F .text	00000002 DMA2_Stream7_IRQHandler
08000fec  w    F .text	00000002 I2C1_ER_IRQHandler
08031a68 g     O .rodata	00000027 acGUI_FontLubalGraph20B_005B
08050798 g     O .rodata	00000014 acGUI_FontAvantGarde24B_007E
08056ec0 g     O .rodata	00000006 acGUI_FontAvantGarde24_002D
0806359c g     O .rodata	00000028 acGUI_FontAvantGarde16_00E1
08033688 g     O .rodata	00000034 acGUI_FontLubalGraph20_2202
0806119c g     O .rodata	00000015 acGUI_FontAvantGarde16B_0075
08051a70 g     O .rodata	00000046 acGUI_FontAvantGarde24B_0038
080390f8 g     O .rodata	00000024 acGUI_FontLubalGraph16B_0045
0804a314 g     O .rodata	00000066 acGUI_FontAvantGarde32_00A2
08008460 g     F .text	00000184 WM__GetNextIVR
080468f8 g     O .rodata	0000000f acGUI_FontAvantGarde32_02DC
08043770 g     O .rodata	00000098 acGUI_FontAvantGarde32B_004B
0801aa2c g     O .rodata	0000007e acGUI_FontLubalGraph32B_0042
0805e694 g     O .rodata	00000030 acGUI_FontAvantGarde20_0045
0802cbd0 g     O .rodata	00000018 acGUI_FontLubalGraph24_00BA
08035838 g     O .rodata	0000001e acGUI_FontLubalGraph20_006A
0801f3f4 g     O .rodata	000000e1 acGUI_FontLubalGraph32_00DB
08050a3c g     O .rodata	0000002c acGUI_FontAvantGarde24B_0073
0802a64c g     O .rodata	00000002 acGUI_FontLubalGraph24_2219
080507f8 g     O .rodata	00000026 acGUI_FontAvantGarde24B_007C
0802ca58 g     O .rodata	0000007e acGUI_FontLubalGraph24_00BE
08045aa8 g     O .rodata	00000070 acGUI_FontAvantGarde32_2264
080060c6 g     F .text	0000001e WIDGET__FillRectEx
08062dc8 g     O .rodata	0000000a acGUI_FontAvantGarde16_2039
0803914c g     O .rodata	0000002d acGUI_FontLubalGraph16B_0043
080611d4 g     O .rodata	0000001c acGUI_FontAvantGarde16B_0073
08056ed0 g     O .rodata	00000036 acGUI_FontAvantGarde24_002B
0803b308 g     O .rodata	00000027 acGUI_FontLubalGraph16_00C9
0806354c g     O .rodata	00000028 acGUI_FontAvantGarde16_00E3
08033bc0 g     O .rodata	00000030 acGUI_FontLubalGraph20_0161
0801a558 g     O .rodata	000000a2 acGUI_FontLubalGraph32B_004B
08037f28 g     O .rodata	00000031 acGUI_FontLubalGraph16B_00E6
08037b1c g     O .rodata	00000024 acGUI_FontLubalGraph16B_0141
08055404 g     O .rodata	00000069 acGUI_FontAvantGarde24_00BD
0800f074 g     F .text	000001a0 SCROLLBAR_DrawSkinFlex
080509cc g     O .rodata	00000037 acGUI_FontAvantGarde24B_0075
08050898 g     O .rodata	00000054 acGUI_FontAvantGarde24B_0079
0804a210 g     O .rodata	00000062 acGUI_FontAvantGarde32_00A4
080231e0 g     O .rodata	00000085 acGUI_FontLubalGraph32_0046
08000fec  w    F .text	00000002 TIM3_IRQHandler
0801f238 g     O .rodata	000000e1 acGUI_FontLubalGraph32_00DD
08000fec  w    F .text	00000002 CAN1_RX1_IRQHandler
200002a4 g     O .data	00000004 GUI__pfMixColors
08055340 g     O .rodata	0000004b acGUI_FontAvantGarde24_00BF
0801a424 g     O .rodata	000000c6 acGUI_FontLubalGraph32B_004D
0803b264 g     O .rodata	00000024 acGUI_FontLubalGraph16_00CE
0804691c g     O .rodata	00000012 acGUI_FontAvantGarde32_02DA
08012cc0 g     F .text	0000001a GUI_GetBitmapPixelIndex
0804b134 g     O .rodata	0000008c acGUI_FontAvantGarde32_005A
08037f84 g     O .rodata	00000024 acGUI_FontLubalGraph16B_00E4
080172f8 g     O .rodata	000000c6 acGUI_FontLubalGraph32B_00D6
08053f38 g     O .rodata	00000054 acGUI_FontAvantGarde24_00F5
08023448 g     O .rodata	00000098 acGUI_FontLubalGraph32_0042
0804dde8 g     O .rodata	00000060 acGUI_FontAvantGarde24B_2211
08018a94 g     O .rodata	00000028 acGUI_FontLubalGraph32B_00AB
0804b698 g     O .rodata	000000dc acGUI_FontAvantGarde32_0051
080619e4 g     O .rodata	00000028 acGUI_FontAvantGarde16B_0036
080608a0 g     O .rodata	0000003c acGUI_FontAvantGarde16B_00D5
08030904 g     O .rodata	0000004b acGUI_FontLubalGraph20B_00DA
08038d5c g     O .rodata	00000016 acGUI_FontLubalGraph16B_005B
08050930 g     O .rodata	00000058 acGUI_FontAvantGarde24B_0077
0802b388 g     O .rodata	00000048 acGUI_FontLubalGraph24_00F8
08023060 g     O .rodata	000000be acGUI_FontLubalGraph32_0048
08000fec  w    F .text	00000002 DMA1_Stream1_IRQHandler
080171fc g     O .rodata	000000b4 acGUI_FontLubalGraph32B_00D8
0804e83c g     O .rodata	00000046 acGUI_FontAvantGarde24B_0141
08018a48 g     O .rodata	0000000c acGUI_FontLubalGraph32B_00AD
0801d780 g     O .rodata	000000af acGUI_FontLubalGraph32_017D
08005e46 g     F .text	0000001a WIDGET__GetInsideRect
0806199c g     O .rodata	00000028 acGUI_FontAvantGarde16B_0038
0804b300 g     O .rodata	000000f0 acGUI_FontAvantGarde32_0057
0803344c g     O .rodata	00000028 acGUI_FontLubalGraph20_2265
080101e8 g     F .text	00000014 WM_PID__SetPrevState
0805e61c g     O .rodata	00000054 acGUI_FontAvantGarde20_0047
08001a84 g     F .text	00000018 pvTaskIncrementMutexHeldCount
08053e94 g     O .rodata	00000048 acGUI_FontAvantGarde24_00F7
0804b04c g     O .rodata	00000084 acGUI_FontAvantGarde32_005C
080080bc g     F .text	00000018 WM__GetClientRectWin
0801303a g     F .text	0000001a WM__SendMessageIfEnabled
080607d8 g     O .rodata	00000034 acGUI_FontAvantGarde16B_00D9
08016e34 g     O .rodata	000000c8 acGUI_FontLubalGraph32B_00DD
08014890 g     O .rodata	00000008 acGUI_FontLubalGraph32B_2219
0801d418 g     O .rodata	00000008 acGUI_FontLubalGraph32_2010
0806143c g     O .rodata	00000021 acGUI_FontAvantGarde16B_005C
0803d6ac g     O .rodata	0000005a acGUI_FontAvantGarde32B_221E
0806012c g     O .rodata	00000046 acGUI_FontAvantGarde16B_0152
0801d3a0 g     O .rodata	00000014 acGUI_FontLubalGraph32_201D
0803899c g     O .rodata	00000009 acGUI_FontLubalGraph16B_00A1
0804dd98 g     O .rodata	00000006 acGUI_FontAvantGarde24B_2219
0804e4dc g     O .rodata	0000000c acGUI_FontAvantGarde24B_02DA
0804b594 g     O .rodata	00000078 acGUI_FontAvantGarde32_0053
08061410 g     O .rodata	0000000f acGUI_FontAvantGarde16B_005E
0804b4a4 g     O .rodata	00000078 acGUI_FontAvantGarde32_0055
0805ff30 g     O .rodata	00000023 acGUI_FontAvantGarde16B_03C0
080232f0 g     O .rodata	000000ab acGUI_FontLubalGraph32_0044
0805d38c g     O .rodata	0000003c acGUI_FontAvantGarde20_00CE
080336bc g     O .rodata	00000054 acGUI_FontLubalGraph20_212E
08016fac g     O .rodata	000000c0 acGUI_FontLubalGraph32B_00DB
0802f870 g     O .rodata	0000001e acGUI_FontLubalGraph20B_221E
08060848 g     O .rodata	0000001c acGUI_FontAvantGarde16B_00D7
0802d704 g     O .rodata	00000062 acGUI_FontLubalGraph24_0062
08000fec  w    F .text	00000002 RTC_Alarm_IRQHandler
0806147c g     O .rodata	0000001e acGUI_FontAvantGarde16B_005A
08029730 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop38
0802d7b0 g     O .rodata	0000000c acGUI_FontLubalGraph24_0060
08056fa4 g     O .rodata	00000069 acGUI_FontAvantGarde24_0026
0804e4c8 g     O .rodata	0000000c acGUI_FontAvantGarde24B_02DC
0803a4d0 g     O .rodata	00000004 acGUI_FontLubalGraph16_2212
0802789c g     O .rodata	00000006 acGUI_FontLubalGraph24B_00B7
08004360 g     F .text	00000098 BSP_SDRAM_Initialization_sequence
08051904 g     O .rodata	00000046 acGUI_FontAvantGarde24B_003F
080296e8 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop32
08051984 g     O .rodata	00000023 acGUI_FontAvantGarde24B_003D
08038140 g     O .rodata	00000041 acGUI_FontLubalGraph16B_00DA
0803364c g     O .rodata	0000003c acGUI_FontLubalGraph20_2206
08029718 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop36
0803de40 g     O .rodata	00000072 acGUI_FontAvantGarde32B_2044
0804df6c g     O .rodata	00000070 acGUI_FontAvantGarde24B_212E
0806195c g     O .rodata	00000010 acGUI_FontAvantGarde16B_003B
080288b0 g     O .rodata	00000054 acGUI_FontLubalGraph24B_0050
0805fb9c g     O .rodata	00000010 acGUI_FontAvantGarde16B_2248
0802e75c g     O .rodata	00000005 acGUI_FontLubalGraph24_0027
08028010 g     O .rodata	00000032 acGUI_FontLubalGraph24B_006F
08027904 g     O .rodata	00000054 acGUI_FontLubalGraph24B_00B5
0803c604 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop32
0800dd20 g     F .text	0000003c GUIPROP_EXT_GetCharDistX
08029700 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop34
0800fc7c g     F .text	00000038 WM_ValidateWindow
08035858 g     O .rodata	00000024 acGUI_FontLubalGraph20_0069
08056f60 g     O .rodata	0000003c acGUI_FontAvantGarde24_0028
080015a4 g     F .text	00000080 vTaskDelay
0803d7e0 g     O .rodata	00000008 acGUI_FontAvantGarde32B_2219
08061c80 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop1
080323c0 g     O .rodata	00000005 acGUI_FontLubalGraph20B_002C
08053068 g     O .rodata	00000078 acGUI_FontAvantGarde24_221A
0800b578 g     F .text	00000030 LCD_SetDevFunc
0803a67c g     O .rodata	00000005 acGUI_FontLubalGraph16_2039
0805d464 g     O .rodata	0000003c acGUI_FontAvantGarde20_00CA
0805c4c4 g     O .rodata	00000008 acGUI_FontAvantGarde20_02DB
08025814 g     O .rodata	0000000e acGUI_FontLubalGraph24B_2019
0800b888 g     F .text	00000058 LCD_FillRect
0803c5ec g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop30
0801764c g     O .rodata	000000e1 acGUI_FontLubalGraph32B_00D2
080539ac g     O .rodata	0000003c acGUI_FontAvantGarde24_0161
08062d50 g     O .rodata	00000021 acGUI_FontAvantGarde16_2113
0806843c g     O .rodata	0000000c GUI_Font13ASCII_Prop1
0800fc06 g     F .text	00000026 WM__GetPrevSibling
0805c4ac g     O .rodata	00000010 acGUI_FontAvantGarde20_02DD
08052074 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop8
0802f9e4 g     O .rodata	00000034 acGUI_FontLubalGraph20B_2202
20028854 g     O .bss	00000002 GUI_OrgY
080323f8 g     O .rodata	0000000f acGUI_FontLubalGraph20B_002A
080374c4 g     O .rodata	00000024 acGUI_FontLubalGraph16B_FB02
08058170 g     O .rodata	00000003 acGUI_FontAvantGarde20B_2219
08007d88 g     F .text	00000010 WM__Client2Screen
0805a09c g     O .rodata	00000024 acGUI_FontAvantGarde20B_0074
0805712c g     O .rodata	00000001 acGUI_FontAvantGarde24_0020
08064034 g     O .rodata	0000001c acGUI_FontAvantGarde16_006F
08017490 g     O .rodata	000000d8 acGUI_FontLubalGraph32B_00D4
0800b45c g     F .text	00000030 LCD_SetVSizeEx
0805205c g     O .rodata	0000000c GUI_FontAvantGarde24_Prop6
08061c98 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop3
0805a73c g     O .rodata	00000030 acGUI_FontAvantGarde20B_0050
080131f0 g     F .text	00000062 memcmp
08035930 g     O .rodata	0000002d acGUI_FontLubalGraph20_0065
080648a8 g     O .rodata	00000003 acGUI_FontAvantGarde16_002C
080080a6 g     F .text	00000016 WM__SendMsgNoData
08039558 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop2
0803509c g     O .rodata	00000054 acGUI_FontLubalGraph20_00BD
08017800 g     O .rodata	00000090 acGUI_FontLubalGraph32B_00D0
0800b48c g     F .text	00000030 LCD_SetSizeEx
0800635c g     F .text	00000044 FRAMEWIN__GetBorderSize
0805a6b8 g     O .rodata	00000030 acGUI_FontAvantGarde20B_0052
08018994 g     O .rodata	0000000f acGUI_FontLubalGraph32B_00AF
08061cb0 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop5
08035a20 g     O .rodata	00000036 acGUI_FontLubalGraph20_0061
0805a0dc g     O .rodata	0000001b acGUI_FontAvantGarde20B_0072
0805b0cc g     O .rodata	0000000c GUI_FontAvantGarde20_Prop21
080395a0 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop8
08059ed8 g     O .rodata	0000000c acGUI_FontAvantGarde20B_00A1
08035018 g     O .rodata	00000030 acGUI_FontLubalGraph20_00BF
0805d3f8 g     O .rodata	00000030 acGUI_FontAvantGarde20_00CC
080358c4 g     O .rodata	00000048 acGUI_FontLubalGraph20_0067
08039400 g     O .rodata	00000004 acGUI_FontLubalGraph16B_002C
0802a5a8 g     O .rodata	0000002a acGUI_FontLubalGraph24_221E
08039588 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop6
08052044 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop4
08051ba8 g     O .rodata	00000054 acGUI_FontAvantGarde24B_0034
080366f8 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop6
080364b8 g     O .rodata	0000003c acGUI_FontLubalGraph20_002F
200286dc g     O .bss	00000004 lcd_timer
0800fd50 g     F .text	0000003c WM__SendTouchMessage
08061a34 g     O .rodata	00000028 acGUI_FontAvantGarde16B_0034
08058118 g     O .rodata	00000055 acGUI_FontAvantGarde20B_221A
080530e4 g     O .rodata	0000003c acGUI_FontAvantGarde24_2215
0805312c g     O .rodata	00000060 acGUI_FontAvantGarde24_2211
08039420 g     O .rodata	00000006 acGUI_FontLubalGraph16B_002A
0801d3e0 g     O .rodata	0000000a acGUI_FontLubalGraph32_2018
08039630 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop20
080634a0 g     O .rodata	00000028 acGUI_FontAvantGarde16_00E7
080359a8 g     O .rodata	0000002d acGUI_FontLubalGraph20_0063
0805086c g     O .rodata	0000002c acGUI_FontAvantGarde24B_007A
08055608 g     O .rodata	0000001b acGUI_FontAvantGarde24_00B2
08051b00 g     O .rodata	00000054 acGUI_FontAvantGarde24B_0036
0802d664 g     O .rodata	00000062 acGUI_FontLubalGraph24_0064
0801a80c g     O .rodata	0000007e acGUI_FontLubalGraph32B_0046
08061a84 g     O .rodata	0000001e acGUI_FontAvantGarde16B_0032
08035138 g     O .rodata	00000015 acGUI_FontLubalGraph20_00BB
200086dc g     O .bss	00020000 aMemory
0802e8d8 g     O .rodata	0000000e acGUI_FontLubalGraph24_0021
0802a5d4 g     O .rodata	00000078 acGUI_FontLubalGraph24_221A
08064068 g     O .rodata	00000023 acGUI_FontAvantGarde16_006D
0802b4bc g     O .rodata	0000005a acGUI_FontLubalGraph24_00F4
080648a0 g     O .rodata	00000002 acGUI_FontAvantGarde16_002E
080581ac g     O .rodata	00000046 acGUI_FontAvantGarde20B_2211
0805bf14 g     O .rodata	00000048 acGUI_FontAvantGarde20_222B
08055e04 g     O .rodata	00000026 acGUI_FontAvantGarde24_006A
0801d3ec g     O .rodata	0000001c acGUI_FontLubalGraph32_2014
0805abb8 g     O .rodata	00000030 acGUI_FontAvantGarde20B_0039
080648c8 g     O .rodata	0000000f acGUI_FontAvantGarde16_002A
08056e78 g     O .rodata	00000044 acGUI_FontAvantGarde24_002F
080618e8 g     O .rodata	00000028 acGUI_FontAvantGarde16B_003F
0801a6c4 g     O .rodata	000000a2 acGUI_FontLubalGraph32B_0048
080634fc g     O .rodata	00000028 acGUI_FontAvantGarde16_00E5
08010274 g     F .text	00000010 WM__AddCriticalHandle
0803e40c g     O .rodata	00000024 acGUI_FontAvantGarde32B_02DD
0803bc8c g     O .rodata	00000028 acGUI_FontLubalGraph16_005A
080257c8 g     O .rodata	00000012 acGUI_FontLubalGraph24B_201E
0802b574 g     O .rodata	0000005a acGUI_FontLubalGraph24_00F2
08014774 g     O .rodata	00000051 acGUI_FontLubalGraph32B_221E
080364f8 g     O .rodata	00000002 acGUI_FontLubalGraph20_002D
08058174 g     O .rodata	00000030 acGUI_FontAvantGarde20B_2215
08039648 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop22
0803b3e4 g     O .rodata	00000041 acGUI_FontLubalGraph16_00C5
0803e444 g     O .rodata	00000012 acGUI_FontAvantGarde32B_02DB
08061ab8 g     O .rodata	00000028 acGUI_FontAvantGarde16B_0030
08044bd8 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop31
08021b48 g     O .rodata	00000070 acGUI_FontLubalGraph32_006F
0805c11c g     O .rodata	00000060 acGUI_FontAvantGarde20_212E
0805c724 g     O .rodata	00000024 acGUI_FontAvantGarde20_0142
08055db8 g     O .rodata	0000000f acGUI_FontAvantGarde24_006C
080147c8 g     O .rodata	000000c8 acGUI_FontLubalGraph32B_221A
08025808 g     O .rodata	0000000c acGUI_FontLubalGraph24B_201A
08010ae0 g     F .text	00000190 GUI_MEMDEV__WriteToActiveAlpha
08061154 g     O .rodata	0000002a acGUI_FontAvantGarde16B_0077
080555e0 g     O .rodata	0000000c acGUI_FontAvantGarde24_00B4
0803b464 g     O .rodata	00000041 acGUI_FontLubalGraph16_00C3
0800cd0c g     F .text	0000001c GUI_SetPenSize
08000fec  w    F .text	00000002 QUADSPI_IRQHandler
08046f4c g     O .rodata	00000078 acGUI_FontAvantGarde32_0141
0803a91c g     O .rodata	00000031 acGUI_FontLubalGraph16_0153
08035234 g     O .rodata	00000015 acGUI_FontLubalGraph20_00B2
080334d0 g     O .rodata	00000033 acGUI_FontLubalGraph20_222B
0800b60c g     F .text	00000006 LCD_GetMirrorXEx
080580f4 g     O .rodata	00000024 acGUI_FontAvantGarde20B_221E
08061200 g     O .rodata	00000028 acGUI_FontAvantGarde16B_0071
0800c838 g     F .text	00000030 GUI_TIMER__GetFirstTimer
08025894 g     O .rodata	00000054 acGUI_FontLubalGraph24B_03BC
08061110 g     O .rodata	00000028 acGUI_FontAvantGarde16B_0079
0804dda0 g     O .rodata	00000038 acGUI_FontAvantGarde24B_2215
0803b4e4 g     O .rodata	00000041 acGUI_FontLubalGraph16_00C1
0806192c g     O .rodata	00000014 acGUI_FontAvantGarde16B_003D
0805604c g     O .rodata	00000042 acGUI_FontAvantGarde24_0061
08035174 g     O .rodata	00000008 acGUI_FontLubalGraph20_00B8
0801d668 g     O .rodata	00000014 acGUI_FontLubalGraph32_02C6
0804673c g     O .rodata	00000070 acGUI_FontAvantGarde32_03C0
08064098 g     O .rodata	0000001e acGUI_FontAvantGarde16_006B
080257f4 g     O .rodata	00000012 acGUI_FontLubalGraph24B_201C
0803c14c g     O .rodata	00000020 acGUI_FontLubalGraph16_003E
0802fda4 g     O .rodata	00000008 acGUI_FontLubalGraph20B_02DA
08021c38 g     O .rodata	000000b6 acGUI_FontLubalGraph32_006D
0803a828 g     O .rodata	00000024 acGUI_FontLubalGraph16_0192
080582c4 g     O .rodata	00000054 acGUI_FontAvantGarde20B_212E
0805d810 g     O .rodata	00000030 acGUI_FontAvantGarde20_00BF
0800df7c g     F .text	0000003c GUI__GetLineNumChars
0802b058 g     O .rodata	00000046 acGUI_FontLubalGraph24_0141
0805abac g     O .rodata	00000009 acGUI_FontAvantGarde20B_003A
0804dd20 g     O .rodata	00000078 acGUI_FontAvantGarde24B_221A
0805d5dc g     O .rodata	00000060 acGUI_FontAvantGarde20_00C5
0805fab4 g     O .rodata	00000024 acGUI_FontAvantGarde16B_FFFF
0803c64c g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop38
0802f728 g     O .rodata	0000002c acGUI_FontLubalGraph20B_FB02
0805a048 g     O .rodata	0000002d acGUI_FontAvantGarde20B_0076
080366e0 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop4
0805e838 g     O .rodata	00000024 acGUI_FontAvantGarde20_003E
0804cd4c g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop15
0805d520 g     O .rodata	0000005a acGUI_FontAvantGarde20_00C7
0806703c g     O .rodata	0000000c GUI_ENC_APIList_EXT
08055e88 g     O .rodata	00000060 acGUI_FontAvantGarde24_0067
080366c8 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop2
0805ad5c g     O .rodata	00000024 acGUI_FontAvantGarde20B_0031
08044a4c g     O .rodata	00000024 GUI_FontAvantGarde32
0805d750 g     O .rodata	00000060 acGUI_FontAvantGarde20_00C1
0805ab74 g     O .rodata	00000024 acGUI_FontAvantGarde20B_003C
0802fdac g     O .rodata	00000002 acGUI_FontLubalGraph20B_02D9
0800fcb4 g     F .text	0000005c WM__IsInModalArea
0804cddc g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop27
08012360 g     F .text	0000000e GUI__CompactPixelIndicesEx
08044c20 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop37
0805dcb8 g     O .rodata	00000030 acGUI_FontAvantGarde20_007B
08055fac g     O .rodata	00000042 acGUI_FontAvantGarde24_0063
08059fd8 g     O .rodata	0000002d acGUI_FontAvantGarde20B_0078
0805acf0 g     O .rodata	0000003c acGUI_FontAvantGarde20B_0033
080648d8 g     O .rodata	0000001c acGUI_FontAvantGarde16_0029
0804cd64 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop17
08055f18 g     O .rodata	00000037 acGUI_FontAvantGarde24_0065
080378a4 g     O .rodata	00000004 acGUI_FontLubalGraph16B_201A
08060a04 g     O .rodata	00000024 acGUI_FontAvantGarde16B_00CF
0800f458 g     F .text	00000294 HEADER_DrawSkinFlex
0805d4a0 g     O .rodata	00000040 acGUI_FontAvantGarde20_00C9
08037960 g     O .rodata	00000006 acGUI_FontLubalGraph16B_02DA
0803c634 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop36
0804cdc4 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop25
08044c38 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop39
0802fd40 g     O .rodata	00000042 acGUI_FontLubalGraph20B_03A9
0802e6f4 g     O .rodata	00000033 acGUI_FontLubalGraph24_0029
080641e0 g     O .rodata	00000006 acGUI_FontAvantGarde16_0060
0804ecbc g     O .rodata	00000060 acGUI_FontAvantGarde24B_00F3
08063cf4 g     O .rodata	0000000c acGUI_FontAvantGarde16_00B3
08064158 g     O .rodata	00000028 acGUI_FontAvantGarde16_0064
080667a4 g     O .rodata	00000024 GUI_Font13_1
20028856 g     O .bss	00000002 GUI__aNumBuffers
08035274 g     O .rodata	0000000f acGUI_FontLubalGraph20_00B0
0803789c g     O .rodata	00000008 acGUI_FontLubalGraph16B_201C
0803c61c g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop34
200287f8 g     O .bss	00000004 WM__pFirstCriticalHandle
0806419c g     O .rodata	00000028 acGUI_FontAvantGarde16_0062
0804f5ec g     O .rodata	00000072 acGUI_FontAvantGarde24B_00D9
0802d5fc g     O .rodata	0000002a acGUI_FontLubalGraph24_0066
0805ac18 g     O .rodata	00000030 acGUI_FontAvantGarde20B_0037
0804ec04 g     O .rodata	0000005a acGUI_FontAvantGarde24B_00F5
08044b84 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop24
0802e878 g     O .rodata	00000054 acGUI_FontLubalGraph24_0023
0805c344 g     O .rodata	0000003c acGUI_FontAvantGarde20_2021
08063d0c g     O .rodata	00000020 acGUI_FontAvantGarde16_00B1
08062dbc g     O .rodata	0000000a acGUI_FontAvantGarde16_203A
0805ac78 g     O .rodata	0000003c acGUI_FontAvantGarde20B_0035
08014904 g     O .rodata	00000015 acGUI_FontLubalGraph32B_2212
080458dc g     O .rodata	00000064 acGUI_FontAvantGarde32_FB02
0805ecf8 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop5
0802e7b8 g     O .rodata	00000062 acGUI_FontLubalGraph24_0025
0802d534 g     O .rodata	00000062 acGUI_FontLubalGraph24_0068
0804e1a0 g     O .rodata	0000009a acGUI_FontAvantGarde24B_2030
080649c4 g     O .rodata	0000000a acGUI_FontAvantGarde16_0021
08015424 g     O .rodata	0000000c acGUI_FontLubalGraph32B_02DB
08039690 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop28
0805b048 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop10
08050460 g     O .rodata	00000012 acGUI_FontAvantGarde24B_00B0
0805ece0 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop3
080255a8 g     O .rodata	00000054 acGUI_FontLubalGraph24B_20AC
0805ecc8 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop1
08036504 g     O .rodata	0000002d acGUI_FontLubalGraph20_002B
08044b6c g     O .rodata	0000000c GUI_FontAvantGarde32_Prop22
0805eeb4 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop42
080089dc g     F .text	00000048 WM_DefaultProc
08064128 g     O .rodata	00000014 acGUI_FontAvantGarde16_0066
0804e380 g     O .rodata	0000001b acGUI_FontAvantGarde24B_2014
08001af0 g     F .text	00000020 osTimerCreate
0802aad0 g     O .rodata	0000001c acGUI_FontLubalGraph24_2022
0801e42c g     O .rodata	000000a0 acGUI_FontLubalGraph32_00F4
0801e6c8 g     O .rodata	00000098 acGUI_FontLubalGraph32_00F0
0802fd90 g     O .rodata	00000009 acGUI_FontLubalGraph20B_02DC
0802e994 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop12
08033418 g     O .rodata	00000034 acGUI_FontLubalGraph20_25CA
08061d4c g     O .rodata	0000000c GUI_FontAvantGarde16_Prop18
08006cdc g     F .text	0000005c BUTTON_SetText
08063030 g     O .rodata	0000001e acGUI_FontAvantGarde16_0161
0801b8a4 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop36
080482a0 g     O .rodata	00000078 acGUI_FontAvantGarde32_00DE
08040f50 g     O .rodata	000000fa acGUI_FontAvantGarde32B_00C5
0804f3e4 g     O .rodata	00000046 acGUI_FontAvantGarde24B_00DE
080535c0 g     O .rodata	0000005a acGUI_FontAvantGarde24_2021
08046930 g     O .rodata	00000004 acGUI_FontAvantGarde32_02D9
0801e2fc g     O .rodata	00000098 acGUI_FontLubalGraph32_00F6
0803b8ac g     O .rodata	00000016 acGUI_FontLubalGraph16_007B
0802a8dc g     O .rodata	00000040 acGUI_FontLubalGraph24_2122
08001344 g     F .text	00000010 vTaskSuspendAll
0805b12c g     O .rodata	0000000c GUI_FontAvantGarde20_Prop29
08035180 g     O .rodata	00000046 acGUI_FontLubalGraph20_00B6
0802e9ac g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop14
08062b34 g     O .rodata	0000001c acGUI_FontAvantGarde16_2260
08064994 g     O .rodata	00000028 acGUI_FontAvantGarde16_0023
0802aac0 g     O .rodata	00000010 acGUI_FontLubalGraph24_2026
08028794 g     O .rodata	00000046 acGUI_FontLubalGraph24B_0053
08040d70 g     O .rodata	000000fa acGUI_FontAvantGarde32B_00C7
0805ee9c g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop40
08041cfc g     O .rodata	00000010 acGUI_FontAvantGarde32B_00A8
0800c52c g     F .text	000000c8 GUI__GetAlphaBuffer
0801e228 g     O .rodata	00000080 acGUI_FontLubalGraph32_00F8
0805d698 g     O .rodata	0000005a acGUI_FontAvantGarde20_00C3
080135ec g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop4
0803c1a8 g     O .rodata	00000028 acGUI_FontLubalGraph16_0039
0805e86c g     O .rodata	00000024 acGUI_FontAvantGarde20_003C
08035210 g     O .rodata	00000009 acGUI_FontLubalGraph20_00B4
080135d4 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop2
08045c88 g     O .rodata	000000d8 acGUI_FontAvantGarde32_221A
0805dc78 g     O .rodata	00000030 acGUI_FontAvantGarde20_007D
20028950 g     O .bss	00000004 LCD__aConvTable
08037914 g     O .rodata	0000002d acGUI_FontLubalGraph16B_03A9
08028840 g     O .rodata	00000070 acGUI_FontLubalGraph24B_0051
08004cd8 g     F .text	0000001c ft5336_Init
08041dc4 g     O .rodata	0000002c acGUI_FontAvantGarde32B_00A6
08011c84 g     F .text	00000004 LCD_GetpPalConvTableBM
080483e0 g     O .rodata	00000090 acGUI_FontAvantGarde32_00DC
0801544c g     O .rodata	00000019 acGUI_FontLubalGraph32B_02D8
0800cbe4 g     F .text	00000014 GUI_GetCursorLayer
08063bd8 g     O .rodata	00000032 acGUI_FontAvantGarde16_00BE
08059160 g     O .rodata	00000050 acGUI_FontAvantGarde20B_00DD
08000fec  w    F .text	00000002 TIM8_CC_IRQHandler
0803ea20 g     O .rodata	0000004c acGUI_FontAvantGarde32B_0142
08028508 g     O .rodata	00000046 acGUI_FontLubalGraph24B_005A
08027c60 g     O .rodata	0000003c acGUI_FontLubalGraph24B_00A2
080265b4 g     O .rodata	00000069 acGUI_FontLubalGraph24B_00E5
0805de28 g     O .rodata	00000012 acGUI_FontAvantGarde20_0072
20000a40 g     O .bss	00000004 pxCurrentTCB
08037950 g     O .rodata	00000009 acGUI_FontLubalGraph16B_02DC
0801b8bc g     O .rodata	0000000c GUI_FontLubalGraph32_Prop38
08037968 g     O .rodata	00000002 acGUI_FontLubalGraph16B_02D9
0805b114 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop27
0805e8a4 g     O .rodata	00000009 acGUI_FontAvantGarde20_003A
08036824 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop31
0805ffe8 g     O .rodata	00000006 acGUI_FontAvantGarde16B_02C7
08027850 g     O .rodata	00000015 acGUI_FontLubalGraph24B_00BA
08025d60 g     O .rodata	0000006c acGUI_FontLubalGraph24B_00FF
08015a2c g     O .rodata	0000007e acGUI_FontLubalGraph32B_0141
080341ac g     O .rodata	00000024 acGUI_FontLubalGraph20_00EF
08048500 g     O .rodata	00000096 acGUI_FontAvantGarde32_00DA
0805dde8 g     O .rodata	00000024 acGUI_FontAvantGarde20_0074
080590f4 g     O .rodata	0000003c acGUI_FontAvantGarde20B_00DF
0805ab38 g     O .rodata	00000024 acGUI_FontAvantGarde20B_003E
080284a0 g     O .rodata	00000038 acGUI_FontLubalGraph24B_005C
08027bd0 g     O .rodata	0000003c acGUI_FontLubalGraph24B_00A4
080264f4 g     O .rodata	0000005a acGUI_FontLubalGraph24B_00E7
08000fec  w    F .text	00000002 DMA1_Stream2_IRQHandler
0805e970 g     O .rodata	0000003c acGUI_FontAvantGarde20_0035
0802ab44 g     O .rodata	00000050 acGUI_FontLubalGraph24_2020
08053720 g     O .rodata	0000004b acGUI_FontAvantGarde24_03BC
0802fcb0 g     O .rodata	00000005 acGUI_FontLubalGraph20B_201A
08062b1c g     O .rodata	00000018 acGUI_FontAvantGarde16_2264
08000418 g     F .text	0000000e MainTask
0803c1f0 g     O .rodata	0000001e acGUI_FontLubalGraph16_0037
080277c8 g     O .rodata	00000070 acGUI_FontLubalGraph24B_00BC
08052200 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop41
0805e910 g     O .rodata	00000030 acGUI_FontAvantGarde20_0037
080344cc g     O .rodata	00000048 acGUI_FontLubalGraph20_00E2
08039660 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop24
08041be8 g     O .rodata	00000032 acGUI_FontAvantGarde32B_00AB
0802114c g     O .rodata	00000008 acGUI_FontLubalGraph32_00AD
08011d4c g     F .text	0000009c LCD_SetPixelAA4_Trans
0804ed7c g     O .rodata	0000004b acGUI_FontAvantGarde24B_00F1
08035a64 g     O .rodata	00000004 acGUI_FontLubalGraph20_005F
08004a80 g     F .text	00000028 TS_IO_Read
08014e34 g     O .rodata	0000006c acGUI_FontLubalGraph32B_2044
080153ec g     O .rodata	00000023 acGUI_FontLubalGraph32B_02DD
0805dd3c g     O .rodata	00000024 acGUI_FontAvantGarde20_0078
0801a2dc g     O .rodata	000000a2 acGUI_FontLubalGraph32B_004F
0803443c g     O .rodata	00000048 acGUI_FontLubalGraph20_00E4
08061d1c g     O .rodata	0000000c GUI_FontAvantGarde16_Prop14
0802fca4 g     O .rodata	0000000a acGUI_FontLubalGraph20B_201C
0803b904 g     O .rodata	0000001c acGUI_FontLubalGraph16_0078
08059f48 g     O .rodata	00000030 acGUI_FontAvantGarde20B_007B
08060b90 g     O .rodata	00000046 acGUI_FontAvantGarde16B_00C6
08039678 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop26
0804339c g     O .rodata	000000d1 acGUI_FontAvantGarde32B_0051
080123ec g     F .text	00000040 GUI_SetOrg
0804e374 g     O .rodata	0000000a acGUI_FontAvantGarde24B_2018
08026354 g     O .rodata	00000030 acGUI_FontLubalGraph24B_00EC
0803c238 g     O .rodata	00000028 acGUI_FontLubalGraph16_0035
08041ba0 g     O .rodata	00000010 acGUI_FontAvantGarde32B_00AD
08059628 g     O .rodata	00000030 acGUI_FontAvantGarde20B_00CC
08032744 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop36
0805fe84 g     O .rodata	00000008 acGUI_FontAvantGarde16B_2022
0805dda0 g     O .rodata	00000024 acGUI_FontAvantGarde20_0076
0801e574 g     O .rodata	000000a8 acGUI_FontLubalGraph32_00F2
0802a878 g     O .rodata	00000062 acGUI_FontLubalGraph24_2126
0804f4a0 g     O .rodata	0000006c acGUI_FontAvantGarde24B_00DC
08060b18 g     O .rodata	00000027 acGUI_FontAvantGarde16B_00C8
08059ef8 g     O .rodata	00000030 acGUI_FontAvantGarde20B_007D
08030cd8 g     O .rodata	0000002d acGUI_FontLubalGraph20B_00CD
0801b85c g     O .rodata	0000000c GUI_FontLubalGraph32_Prop30
08048c30 g     O .rodata	000000c0 acGUI_FontAvantGarde32_00D1
0803b9f4 g     O .rodata	00000032 acGUI_FontLubalGraph16_0070
08059694 g     O .rodata	0000003c acGUI_FontAvantGarde20B_00CA
0803b94c g     O .rodata	0000001c acGUI_FontLubalGraph16_0076
080263d8 g     O .rodata	0000005a acGUI_FontLubalGraph24B_00EA
0805e8b0 g     O .rodata	00000030 acGUI_FontAvantGarde20_0039
0803c288 g     O .rodata	0000001e acGUI_FontLubalGraph16_0033
0800d7c8 g     F .text	00000028 GUI_DispStringAt
0804f578 g     O .rodata	00000072 acGUI_FontAvantGarde24B_00DA
0801441c g     O .rodata	0000007e acGUI_FontLubalGraph32B_FB02
08034310 g     O .rodata	00000041 acGUI_FontLubalGraph20_00E8
08062ad0 g     O .rodata	0000002c acGUI_FontAvantGarde16_25CA
20000350 g     O .data	0000000c SCROLLBAR__Skin
08061d34 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop16
200002c8 g     O .data	00000004 GUI__pFontDefault
080250e0 g     O .rodata	0000003c acGUI_FontLubalGraph24B_2265
0804bb0c g     O .rodata	00000078 acGUI_FontAvantGarde32_004A
08048858 g     O .rodata	000000f0 acGUI_FontAvantGarde32_00D5
08030e80 g     O .rodata	00000058 acGUI_FontLubalGraph20B_00C6
08034398 g     O .rodata	00000051 acGUI_FontLubalGraph20_00E6
08048a38 g     O .rodata	000000fa acGUI_FontAvantGarde32_00D3
0803b9bc g     O .rodata	0000000e acGUI_FontLubalGraph16_0072
0805ffe0 g     O .rodata	00000006 acGUI_FontAvantGarde16B_02C9
08013718 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop29
0800d168 g     F .text	00000012 GUI_Exec
0805eca4 g     O .rodata	00000024 GUI_FontAvantGarde16B
0804113c g     O .rodata	000000f0 acGUI_FontAvantGarde32B_00C3
080296d0 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop30
08042cbc g     O .rodata	00000046 acGUI_FontAvantGarde32B_005E
08030de8 g     O .rodata	0000003c acGUI_FontLubalGraph20B_00C8
0805fe78 g     O .rodata	0000000c acGUI_FontAvantGarde16B_2026
0802ea60 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop29
0805b090 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop16
08005402  w    F .text	00000002 HAL_SDRAM_MspInit
080572e0 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop34
0800dbac g     F .text	0000006c GUI_ClearRect
08004d14 g     F .text	00000088 ft5336_TS_GetTouchInfo
0804131c g     O .rodata	000000fa acGUI_FontAvantGarde32B_00C1
08024234 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop11
08033b28 g     O .rodata	0000003c acGUI_FontLubalGraph20_017D
0803272c g     O .rodata	0000000c GUI_FontLubalGraph20_Prop34
08042d64 g     O .rodata	00000084 acGUI_FontAvantGarde32B_005C
08045dd8 g     O .rodata	0000009a acGUI_FontAvantGarde32_2211
0805b078 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop14
0802675c g     O .rodata	00000070 acGUI_FontLubalGraph24B_00E1
0804cdf4 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop29
0803275c g     O .rodata	0000000c GUI_FontLubalGraph20_Prop38
080061d8 g     F .text	00000010 HEADER_SetDefaultFont
0803f638 g     O .rodata	000000a0 acGUI_FontAvantGarde32B_00EA
08025158 g     O .rodata	00000032 acGUI_FontLubalGraph24B_2260
08063c40 g     O .rodata	00000032 acGUI_FontAvantGarde16_00BC
0804ba1c g     O .rodata	00000064 acGUI_FontAvantGarde32_004C
0804870c g     O .rodata	0000005b acGUI_FontAvantGarde32_00D7
080640e0 g     O .rodata	0000001e acGUI_FontAvantGarde16_0068
08060ca0 g     O .rodata	0000003c acGUI_FontAvantGarde16B_00C2
080367f4 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop27
0803d604 g     O .rodata	000000a8 acGUI_FontAvantGarde32B_222B
08034200 g     O .rodata	0000002a acGUI_FontLubalGraph20_00ED
08054e80 g     O .rodata	0000004c acGUI_FontAvantGarde24_00C9
08027cb8 g     O .rodata	00000001 acGUI_FontLubalGraph24B_00A0
08026684 g     O .rodata	00000069 acGUI_FontLubalGraph24B_00E3
08068c2c g     O .rodata	00000004 _global_impure_ptr
0803b984 g     O .rodata	0000001e acGUI_FontLubalGraph16_0074
08060a9c g     O .rodata	00000024 acGUI_FontAvantGarde16B_00CB
08063c80 g     O .rodata	00000008 acGUI_FontAvantGarde16_00BA
0802424c g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop13
08000fec  w    F .text	00000002 DMA1_Stream3_IRQHandler
08032344 g     O .rodata	0000002c acGUI_FontLubalGraph20B_0030
080631ec g     O .rodata	0000001e acGUI_FontAvantGarde16_00FB
080276d8 g     O .rodata	0000007e acGUI_FontLubalGraph24B_00BE
0800187c g     F .text	00000020 vTaskSetTimeOutState
08054e38 g     O .rodata	00000048 acGUI_FontAvantGarde24_00CA
0801c85c g     O .rodata	00000031 acGUI_FontLubalGraph32_2248
08034254 g     O .rodata	0000003c acGUI_FontLubalGraph20_00EB
080367dc g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop25
08043190 g     O .rodata	00000085 acGUI_FontAvantGarde32B_0055
0803f558 g     O .rodata	00000054 acGUI_FontAvantGarde32B_00EC
08061cec g     O .rodata	0000000c GUI_FontAvantGarde16_Prop10
08038530 g     O .rodata	00000036 acGUI_FontLubalGraph16B_00C6
08032714 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop32
080393a8 g     O .rodata	00000024 acGUI_FontLubalGraph16B_0030
0806493c g     O .rodata	00000032 acGUI_FontAvantGarde16_0025
0803c2c8 g     O .rodata	0000001e acGUI_FontLubalGraph16_0031
0800ce38 g     F .text	00000010 GUI_StoreKey
0805faf8 g     O .rodata	0000001e acGUI_FontAvantGarde16B_FB01
08060a4c g     O .rodata	00000027 acGUI_FontAvantGarde16B_00CD
080572f8 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop36
0802c550 g     O .rodata	0000005a acGUI_FontLubalGraph24_00C8
080136b8 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop21
08024264 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop15
08012d2c g     F .text	000000a0 GL_DrawBitmap
08002af4 g     F .text	00000094 xQueueReceiveFromISR
08030d38 g     O .rodata	00000038 acGUI_FontLubalGraph20B_00CB
08028550 g     O .rodata	00000054 acGUI_FontLubalGraph24B_0059
0805845c g     O .rodata	0000006c acGUI_FontAvantGarde20B_2030
0803f48c g     O .rodata	00000078 acGUI_FontAvantGarde32B_00EE
08030bd0 g     O .rodata	0000005a acGUI_FontLubalGraph20B_00D1
080384c0 g     O .rodata	00000034 acGUI_FontLubalGraph16B_00C8
080136d0 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop23
0803378c g     O .rodata	00000034 acGUI_FontLubalGraph20_2113
0800381c g     F .text	00000018 HAL_LTDC_DeInit
08064910 g     O .rodata	00000004 acGUI_FontAvantGarde16_0027
080338c4 g     O .rodata	0000004b acGUI_FontLubalGraph20_2021
0803156c g     O .rodata	00000020 acGUI_FontLubalGraph20B_007A
080213f0 g     O .rodata	00000054 acGUI_FontLubalGraph32_00A4
0803a780 g     O .rodata	0000001c acGUI_FontLubalGraph16_03C0
08042ebc g     O .rodata	00000098 acGUI_FontAvantGarde32B_0059
0802e698 g     O .rodata	00000008 acGUI_FontLubalGraph24_002C
080286dc g     O .rodata	00000062 acGUI_FontLubalGraph24B_0055
08021080 g     O .rodata	0000000a acGUI_FontLubalGraph32_00AF
200286e0 g     O .bss	000000a8 hltdc
0801b874 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop32
0804328c g     O .rodata	00000085 acGUI_FontAvantGarde32B_0053
0802c34c g     O .rodata	00000036 acGUI_FontLubalGraph24_00CF
08043000 g     O .rodata	000000e4 acGUI_FontAvantGarde32B_0057
08000fec  w    F .text	00000002 USART2_IRQHandler
080053bc g     F .text	00000046 HAL_DMA_DeInit
08059d3c g     O .rodata	00000048 acGUI_FontAvantGarde20B_00A9
08001950 g     F .text	0000008c vTaskPriorityInherit
080595bc g     O .rodata	0000003c acGUI_FontAvantGarde20B_00CE
08057f6c g     O .rodata	00000030 acGUI_FontAvantGarde20B_FB02
080600a0 g     O .rodata	00000028 acGUI_FontAvantGarde16B_0161
080572b0 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop30
08013700 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop27
080383f4 g     O .rodata	0000001a acGUI_FontLubalGraph16B_00CD
0802e6e4 g     O .rodata	0000000f acGUI_FontLubalGraph24_002A
080251b0 g     O .rodata	00000050 acGUI_FontLubalGraph24B_222B
080285f8 g     O .rodata	0000007e acGUI_FontLubalGraph24B_0057
0801358c g     O .rodata	0000000c HEADER_STSkin
08061d04 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop12
080521c4 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop36
0801b88c g     O .rodata	0000000c GUI_FontLubalGraph32_Prop34
0803afb4 g     O .rodata	00000030 acGUI_FontLubalGraph16_00DB
0805217c g     O .rodata	0000000c GUI_FontAvantGarde24_Prop30
0802c1d8 g     O .rodata	0000007e acGUI_FontLubalGraph24_00D2
0804bfbc g     O .rodata	000000b4 acGUI_FontAvantGarde32_0041
08059d90 g     O .rodata	00000050 acGUI_FontAvantGarde20B_00A7
08058b14 g     O .rodata	00000037 acGUI_FontAvantGarde20B_00F8
0803842c g     O .rodata	00000030 acGUI_FontLubalGraph16B_00CB
080572c8 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop32
08004bf8 g     F .text	000000c4 ft5336_TS_GetXY
080136e8 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop25
080055fe g     F .text	0000000c FMC_SDRAM_ProgramRefreshRate
080521ac g     O .rodata	0000000c GUI_FontAvantGarde24_Prop34
08021340 g     O .rodata	00000016 acGUI_FontLubalGraph32_00A6
08045c40 g     O .rodata	00000048 acGUI_FontAvantGarde32_221E
08007de8 g     F .text	00000048 WM__ActivateClipRect
08068c30 g       .init_array	00000000 __exidx_start
08000fec  w    F .text	00000002 DMA2_Stream2_IRQHandler
08059e70 g     O .rodata	0000003c acGUI_FontAvantGarde20B_00A3
08058b74 g     O .rodata	0000003c acGUI_FontAvantGarde20B_00F6
0802d37c g     O .rodata	0000003c acGUI_FontLubalGraph24_006F
0805c4e4 g     O .rodata	0000000c acGUI_FontAvantGarde20_02C7
080389f8 g     O .rodata	00000015 acGUI_FontLubalGraph16B_007A
08062f68 g     O .rodata	00000003 acGUI_FontAvantGarde16_02C9
0804e334 g     O .rodata	00000014 acGUI_FontAvantGarde24B_201D
080051e8 g     F .text	0000012c HAL_I2C_Mem_Read
08058c74 g     O .rodata	00000041 acGUI_FontAvantGarde20B_00F2
08030c70 g     O .rodata	0000002a acGUI_FontLubalGraph20B_00CF
080354f0 g     O .rodata	00000024 acGUI_FontLubalGraph20_007A
08045d64 g     O .rodata	00000064 acGUI_FontAvantGarde32_2215
08059dfc g     O .rodata	0000003c acGUI_FontAvantGarde20B_00A5
0802c2e8 g     O .rodata	00000062 acGUI_FontLubalGraph24_00D0
0802e68c g     O .rodata	00000002 acGUI_FontLubalGraph24_002E
0804be7c g     O .rodata	000000c8 acGUI_FontAvantGarde32_0043
08060c1c g     O .rodata	00000048 acGUI_FontAvantGarde16B_00C4
0805183c g     O .rodata	00000062 acGUI_FontAvantGarde24B_0041
080321c8 g     O .rodata	0000002c acGUI_FontLubalGraph20B_0038
20008408 g     O .bss	00000004 osCPU_IdleStartTime
08005efc g     F .text	00000034 WIDGET_AndState
080532b0 g     O .rodata	00000078 acGUI_FontAvantGarde24_212E
08054f18 g     O .rodata	00000085 acGUI_FontAvantGarde24_00C7
080354b0 g     O .rodata	00000011 acGUI_FontLubalGraph20_007C
0803d478 g     O .rodata	00000077 acGUI_FontAvantGarde32B_2265
08056d64 g     O .rodata	0000004b acGUI_FontAvantGarde24_0033
08058bf4 g     O .rodata	0000003c acGUI_FontAvantGarde20B_00F4
0801d908 g     O .rodata	00000064 acGUI_FontLubalGraph32_0161
0800723a g     F .text	00000026 WM_SendToParent
0803a7c4 g     O .rodata	00000028 acGUI_FontLubalGraph16_03A9
0803a37c g     O .rodata	0000001e acGUI_FontLubalGraph16_FB01
080374a8 g     O .rodata	0000001b acGUI_FontLubalGraph16B_FFFF
0804e510 g     O .rodata	0000000c acGUI_FontAvantGarde24B_02C6
20028930 g     O .bss	00000010 WM__aCHWinModal
08063194 g     O .rodata	00000038 acGUI_FontAvantGarde16_00FD
08030a60 g     O .rodata	0000005a acGUI_FontLubalGraph20B_00D5
0803764c g     O .rodata	00000042 acGUI_FontLubalGraph16B_220F
08035474 g     O .rodata	0000000f acGUI_FontLubalGraph20_007E
08055028 g     O .rodata	00000085 acGUI_FontAvantGarde24_00C5
08013604 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop6
08058cec g     O .rodata	0000003c acGUI_FontAvantGarde20B_00F0
080362c4 g     O .rodata	0000000a acGUI_FontLubalGraph20_003B
08041ad0 g     O .rodata	0000000f acGUI_FontAvantGarde32B_00AF
08032220 g     O .rodata	00000037 acGUI_FontLubalGraph20B_0036
08056dfc g     O .rodata	0000002d acGUI_FontAvantGarde24_0031
0806312c g     O .rodata	00000034 acGUI_FontAvantGarde16_00FF
08051790 g     O .rodata	00000062 acGUI_FontAvantGarde24B_0043
0802d490 g     O .rodata	00000054 acGUI_FontLubalGraph24_006B
08030b18 g     O .rodata	0000005a acGUI_FontLubalGraph20B_00D3
0806170c g     O .rodata	00000028 acGUI_FontAvantGarde16B_004B
0800b5f4 g     F .text	00000006 LCD_GetVXSizeEx
080326fc g     O .rodata	0000000c GUI_FontLubalGraph20_Prop30
0802119c g     O .rodata	00000028 acGUI_FontLubalGraph32_00AB
08033b64 g     O .rodata	0000005a acGUI_FontLubalGraph20_0178
20000268 g     O .data	00000030 BUTTON__DefaultProps
0802d400 g     O .rodata	00000064 acGUI_FontLubalGraph24_006D
0800d2f4 g     F .text	00000016 GUI_DrawRectEx
08039570 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop4
08045d60 g     O .rodata	00000003 acGUI_FontAvantGarde32_2219
080392e0 g     O .rodata	00000024 acGUI_FontLubalGraph16B_0036
0803b09c g     O .rodata	0000003c acGUI_FontLubalGraph16_00D6
0805fb18 g     O .rodata	0000002c acGUI_FontAvantGarde16B_25CA
0800612c g     F .text	0000000c TEXT_SetDefaultTextColor
0805be8c g     O .rodata	00000028 acGUI_FontAvantGarde20_2265
08000fec  w    F .text	00000002 FPU_IRQHandler
0802a488 g     O .rodata	0000003c acGUI_FontLubalGraph24_2265
08000fec  w    F .text	00000002 SPI5_IRQHandler
080392a0 g     O .rodata	00000024 acGUI_FontLubalGraph16B_0038
0800dfb8 g     F .text	0000001e GUI__GetOverlap
0802e958 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop7
08000fec  w    F .text	00000002 DMA1_Stream4_IRQHandler
0805feb4 g     O .rodata	00000027 acGUI_FontAvantGarde16B_2020
0802ad20 g     O .rodata	0000000c acGUI_FontLubalGraph24_02D8
0801e7ac g     O .rodata	00000078 acGUI_FontLubalGraph32_00EE
08022804 g     O .rodata	000000ab acGUI_FontLubalGraph32_0055
0803834c g     O .rodata	0000003c acGUI_FontLubalGraph16B_00D1
080034d8  w    F .text	0000000c HAL_GPIO_EXTI_Callback
08019110 g     O .rodata	00000070 acGUI_FontLubalGraph32B_0076
08032290 g     O .rodata	00000037 acGUI_FontLubalGraph20B_0034
08006e2c g     F .text	0000003c WM__SendMessage
0803c52c g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop14
080585f8 g     O .rodata	00000030 acGUI_FontAvantGarde20B_03BC
080515ec g     O .rodata	0000001c acGUI_FontAvantGarde24B_0049
0802c43c g     O .rodata	0000005a acGUI_FontLubalGraph24_00CB
080296c4 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop29
200287fc g     O .bss	00000004 WM__pExecGestures
080224cc g     O .rodata	000000ab acGUI_FontLubalGraph32_0059
08056b2c g     O .rodata	00000037 acGUI_FontAvantGarde24_003C
08031530 g     O .rodata	00000010 acGUI_FontLubalGraph20B_007C
0804b8b4 g     O .rodata	000000a0 acGUI_FontAvantGarde32_004E
08048598 g     O .rodata	00000096 acGUI_FontAvantGarde32_00D9
08031e68 g     O .rodata	0000002c acGUI_FontLubalGraph20B_004A
0805b1e0 g     O .rodata	00000be8 GUI_FontAvantGarde20_CharInfo
0801adb4 g     O .rodata	0000007e acGUI_FontLubalGraph32B_0039
08022a58 g     O .rodata	000000dc acGUI_FontLubalGraph32_0051
080322f4 g     O .rodata	0000002c acGUI_FontLubalGraph20B_0032
08060d20 g     O .rodata	00000041 acGUI_FontAvantGarde16B_00C0
08042e48 g     O .rodata	00000072 acGUI_FontAvantGarde32B_005A
0805de78 g     O .rodata	0000003c acGUI_FontAvantGarde20_0070
08035a98 g     O .rodata	0000001c acGUI_FontLubalGraph20_005D
08063378 g     O .rodata	00000028 acGUI_FontAvantGarde16_00F0
0806134c g     O .rodata	00000014 acGUI_FontAvantGarde16B_0066
0803c544 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop16
0803c430 g     O .rodata	00000028 acGUI_FontLubalGraph16_0023
08039328 g     O .rodata	00000024 acGUI_FontLubalGraph16B_0034
0803b04c g     O .rodata	0000003c acGUI_FontLubalGraph16_00D8
08035ad8 g     O .rodata	0000001c acGUI_FontLubalGraph20_005B
0801361c g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop8
0805ea48 g     O .rodata	00000018 acGUI_FontAvantGarde20_0031
08018e48 g     O .rodata	00000054 acGUI_FontLubalGraph32B_007D
0802e970 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop9
0804dcec g     O .rodata	00000031 acGUI_FontAvantGarde24B_221E
08056b80 g     O .rodata	0000000b acGUI_FontAvantGarde24_003A
08034564 g     O .rodata	0000004e acGUI_FontLubalGraph20_00E0
08063ccc g     O .rodata	0000001e acGUI_FontAvantGarde16_00B5
0801aea0 g     O .rodata	0000006c acGUI_FontLubalGraph32B_0037
0801e964 g     O .rodata	000000a0 acGUI_FontLubalGraph32_00EA
080191f0 g     O .rodata	00000048 acGUI_FontLubalGraph32B_0074
0802c3cc g     O .rodata	00000036 acGUI_FontLubalGraph24_00CD
0803824c g     O .rodata	0000003c acGUI_FontLubalGraph16B_00D5
08039370 g     O .rodata	00000024 acGUI_FontLubalGraph16B_0032
080314f8 g     O .rodata	0000000f acGUI_FontLubalGraph20B_007E
0800b600 g     F .text	00000006 LCD_GetBitsPerPixelEx
0805c4e0 g     O .rodata	00000003 acGUI_FontAvantGarde20_02C9
08001ea0 g     F .text	00000034 xPortSysTickHandler
0805e9e8 g     O .rodata	00000030 acGUI_FontAvantGarde20_0033
0806137c g     O .rodata	00000028 acGUI_FontAvantGarde16B_0064
08018080 g     O .rodata	000000e6 acGUI_FontLubalGraph32B_00C3
08054db4 g     O .rodata	00000039 acGUI_FontAvantGarde24_00CC
0800085c g     F .text	00000010 GUI_X_Lock
0803dc98 g     O .rodata	00000084 acGUI_FontAvantGarde32B_2122
0802aba0 g     O .rodata	0000000c acGUI_FontLubalGraph24_201D
0801e878 g     O .rodata	00000054 acGUI_FontLubalGraph32_00EC
08063330 g     O .rodata	00000028 acGUI_FontAvantGarde16_00F2
0803af40 g     O .rodata	00000041 acGUI_FontLubalGraph16_00DD
080382c4 g     O .rodata	00000041 acGUI_FontLubalGraph16B_00D3
0803c45c g     O .rodata	0000000a acGUI_FontLubalGraph16_0021
0804df1c g     O .rodata	00000050 acGUI_FontAvantGarde24B_2202
08016d2c g     O .rodata	00000085 acGUI_FontLubalGraph32B_00DF
08063c9c g     O .rodata	00000002 acGUI_FontAvantGarde16_00B7
08054d30 g     O .rodata	00000048 acGUI_FontAvantGarde24_00CE
08058690 g     O .rodata	00000008 acGUI_FontAvantGarde20B_02DB
080389d0 g     O .rodata	0000000d acGUI_FontLubalGraph16B_007C
08022938 g     O .rodata	00000072 acGUI_FontLubalGraph32_0053
08022638 g     O .rodata	0000010a acGUI_FontLubalGraph32_0057
08017ea8 g     O .rodata	000000fa acGUI_FontLubalGraph32B_00C5
0803903c g     O .rodata	00000024 acGUI_FontLubalGraph16B_004A
0804bd64 g     O .rodata	00000078 acGUI_FontAvantGarde32_0045
08061bc8 g     O .rodata	00000032 acGUI_FontAvantGarde16B_0025
080383b8 g     O .rodata	00000016 acGUI_FontLubalGraph16B_00CF
08017b2c g     O .rodata	00000090 acGUI_FontLubalGraph32B_00CA
0803dbec g     O .rodata	000000ab acGUI_FontAvantGarde32B_2126
0800c9b0 g     F .text	0000007c GUI_Lock
0805fbd4 g     O .rodata	00000014 acGUI_FontAvantGarde16B_221E
08001930 g     F .text	00000020 xTaskGetSchedulerState
08058670 g     O .rodata	00000014 acGUI_FontAvantGarde20B_02DD
080389ac g     O .rodata	0000000c acGUI_FontLubalGraph16B_007E
0804bc24 g     O .rodata	000000dc acGUI_FontAvantGarde32_0047
20028858 g     O .bss	00000004 GUI_pUC_API
08061b90 g     O .rodata	00000004 acGUI_FontAvantGarde16B_0027
08000fec  w    F .text	00000002 PVD_IRQHandler
0801d03c g     O .rodata	0000005f acGUI_FontLubalGraph32_2044
080652e8 g     O .rodata	0000000c GUI_Font20_ASCII_Prop1
0804e51c g     O .rodata	0000005a acGUI_FontAvantGarde24B_0192
08029598 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop4
20000810 g     O .data	00000000 .hidden __TMC_END__
0802f6fc g     O .rodata	0000002c acGUI_FontLubalGraph20B_FFFF
08006190 g     F .text	00000018 LISTVIEW_SetDefaultBkColor
080616b8 g     O .rodata	00000032 acGUI_FontAvantGarde16B_004D
08028d4c g     O .rodata	00000062 acGUI_FontLubalGraph24B_0043
0803e25c g     O .rodata	00000010 acGUI_FontAvantGarde32B_2010
0803aef8 g     O .rodata	00000028 acGUI_FontLubalGraph16_00DF
080612bc g     O .rodata	0000001e acGUI_FontAvantGarde16B_006B
080212c0 g     O .rodata	0000000c acGUI_FontLubalGraph32_00A8
080296ac g     O .rodata	0000000c GUI_FontLubalGraph24_Prop27
0804bb84 g     O .rodata	00000014 acGUI_FontAvantGarde32_0049
08061b04 g     O .rodata	00000002 acGUI_FontAvantGarde16B_002E
0802967c g     O .rodata	0000000c GUI_FontLubalGraph24_Prop23
0800b606 g     F .text	00000006 LCD_GetNumColorsEx
08024294 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop19
08033504 g     O .rodata	00000024 acGUI_FontLubalGraph20_221E
20000000 g     O .data	00000004 SystemCoreClock
0802f95c g     O .rodata	0000004e acGUI_FontLubalGraph20B_220F
0802d264 g     O .rodata	00000028 acGUI_FontLubalGraph24_0073
08056cbc g     O .rodata	0000004b acGUI_FontAvantGarde24_0035
08028ca0 g     O .rodata	00000046 acGUI_FontLubalGraph24B_0045
0802d2b4 g     O .rodata	00000062 acGUI_FontLubalGraph24_0071
08029664 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop21
08027b20 g     O .rodata	00000009 acGUI_FontLubalGraph24B_00A8
2002885c g     O .bss	00000004 GUI_pfDispCharStyle
08055c88 g     O .rodata	0000005a acGUI_FontAvantGarde24_0070
08061b2c g     O .rodata	00000012 acGUI_FontAvantGarde16B_002A
0801d61c g     O .rodata	00000012 acGUI_FontLubalGraph32_02DA
080580ac g     O .rodata	00000048 acGUI_FontAvantGarde20B_222B
08029694 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop25
08061304 g     O .rodata	0000001e acGUI_FontAvantGarde16B_0068
08000fec  w    F .text	00000002 TIM1_CC_IRQHandler
0802e454 g     O .rodata	00000046 acGUI_FontLubalGraph24_0036
080295c8 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop8
0803c598 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop23
0803e200 g     O .rodata	00000012 acGUI_FontAvantGarde32B_2018
0802427c g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop17
080295b0 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop6
0803c55c g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop18
080137cc g     O .rodata	00000be8 GUI_FontLubalGraph32B_CharInfo
08028434 g     O .rodata	0000003c acGUI_FontLubalGraph24B_005E
08027b6c g     O .rodata	00000010 acGUI_FontLubalGraph24B_00A6
08026434 g     O .rodata	00000060 acGUI_FontLubalGraph24B_00E9
080061a8 g     F .text	00000010 LISTVIEW_SetDefaultGridColor
080320e0 g     O .rodata	0000002c acGUI_FontLubalGraph20B_003F
08061b0c g     O .rodata	00000006 acGUI_FontAvantGarde16B_002C
0801ad10 g     O .rodata	00000069 acGUI_FontLubalGraph32B_003C
0805c4fc g     O .rodata	0000004b acGUI_FontAvantGarde20_0192
08056c24 g     O .rodata	0000004b acGUI_FontAvantGarde24_0037
0805c7c0 g     O .rodata	0000004b acGUI_FontAvantGarde20_00FE
0805d924 g     O .rodata	00000012 acGUI_FontAvantGarde20_00BB
0803c580 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop21
08062d2c g     O .rodata	00000024 acGUI_FontAvantGarde16_2122
08052fec g     O .rodata	00000050 acGUI_FontAvantGarde24_222B
0801d600 g     O .rodata	0000000f acGUI_FontLubalGraph32_02DC
0805a304 g     O .rodata	0000002d acGUI_FontAvantGarde20B_0065
0800b4e8 g     F .text	00000030 LCD_SetPosEx
08056b8c g     O .rodata	0000004b acGUI_FontAvantGarde24_0039
08000fec  w    F .text	00000002 WWDG_IRQHandler
080319e4 g     O .rodata	0000002d acGUI_FontLubalGraph20B_005E
0801ac70 g     O .rodata	00000069 acGUI_FontLubalGraph32B_003E
200002cc g     O .data	00000004 GUI_pfGetpPalConvTable
08018ed0 g     O .rodata	00000054 acGUI_FontLubalGraph32B_007B
080003aa g     F .text	00000002 DebugMon_Handler
080038d0 g     F .text	00000052 HAL_LTDC_ConfigLayer
0803a818 g     O .rodata	00000006 acGUI_FontLubalGraph16_02C7
20000040 g     O .data	00000010 TEXT__DefaultProps
0800e350 g     F .text	00000014 GUI_ALLOC_FreeFixedBlock
08028e04 g     O .rodata	00000070 acGUI_FontLubalGraph24B_0041
08018258 g     O .rodata	000000fa acGUI_FontLubalGraph32B_00C1
080352d4 g     O .rodata	0000001e acGUI_FontLubalGraph20_00AC
0805a370 g     O .rodata	0000002d acGUI_FontAvantGarde20B_0063
0805aa78 g     O .rodata	00000048 acGUI_FontAvantGarde20B_0041
08025cf8 g     O .rodata	00000046 acGUI_FontLubalGraph24B_0141
08035c20 g     O .rodata	00000054 acGUI_FontLubalGraph20_0056
08064710 g     O .rodata	00000008 acGUI_FontAvantGarde16_003B
08007f52 g     F .text	00000064 WM_InvalidateWindowAndDescsEx
08035d28 g     O .rodata	00000048 acGUI_FontLubalGraph20_0052
08051518 g     O .rodata	00000038 acGUI_FontAvantGarde24B_004C
080515a4 g     O .rodata	00000046 acGUI_FontAvantGarde24B_004A
20028800 g     O .bss	00000008 WM__ahWinFocus
0801ad9c g     O .rodata	00000018 acGUI_FontLubalGraph32B_003A
080154b8 g     O .rodata	0000007e acGUI_FontLubalGraph32B_0192
0805b060 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop12
080559a8 g     O .rodata	0000003c acGUI_FontAvantGarde24_007D
0805aa00 g     O .rodata	00000048 acGUI_FontAvantGarde20B_0043
0803a654 g     O .rodata	0000001e acGUI_FontLubalGraph16_2044
08035b6c g     O .rodata	00000048 acGUI_FontLubalGraph20_0058
08063250 g     O .rodata	00000024 acGUI_FontAvantGarde16_00F8
08035288 g     O .rodata	00000048 acGUI_FontLubalGraph20_00AE
0805d894 g     O .rodata	00000048 acGUI_FontAvantGarde20_00BD
08004600 g     F .text	00000050 BSP_TS_Init
08038d0c g     O .rodata	0000001c acGUI_FontLubalGraph16B_005E
08025720 g     O .rodata	00000055 acGUI_FontLubalGraph24B_2021
08004ac0 g     F .text	0000004c vApplicationTickHook
08025844 g     O .rodata	0000000a acGUI_FontLubalGraph24B_2013
0800bcb4 g     F .text	00000020 LCD_SetClipRectMax
08063290 g     O .rodata	00000028 acGUI_FontAvantGarde16_00F6
08061c20 g     O .rodata	00000024 acGUI_FontAvantGarde16B_0023
080395c4 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop11
080646a8 g     O .rodata	0000001e acGUI_FontAvantGarde16_003F
0803531c g     O .rodata	00000048 acGUI_FontLubalGraph20_00A9
08019010 g     O .rodata	00000062 acGUI_FontLubalGraph32B_0078
08051704 g     O .rodata	00000038 acGUI_FontAvantGarde24B_0045
08052f1c g     O .rodata	0000003c acGUI_FontAvantGarde24_2265
080632e0 g     O .rodata	00000028 acGUI_FontAvantGarde16_00F4
08001ca8 g     F .text	00000004 osMutexRelease
0805165c g     O .rodata	00000070 acGUI_FontAvantGarde24B_0047
08035cbc g     O .rodata	0000003c acGUI_FontLubalGraph20_0054
0800dee8 g     F .text	00000006 GUIPROP_GetFontInfo
08062cf8 g     O .rodata	00000032 acGUI_FontAvantGarde16_2126
0805adfc g     O .rodata	00000020 acGUI_FontAvantGarde20B_002B
0804643c g     O .rodata	00000118 acGUI_FontAvantGarde32_2030
08035304 g     O .rodata	00000018 acGUI_FontLubalGraph20_00AA
0802e5e8 g     O .rodata	00000046 acGUI_FontLubalGraph24_0030
08061c4c g     O .rodata	0000000a acGUI_FontAvantGarde16B_0021
08058014 g     O .rodata	0000002c acGUI_FontAvantGarde20B_2265
08055230 g     O .rodata	00000085 acGUI_FontAvantGarde24_00C1
0802a558 g     O .rodata	00000050 acGUI_FontLubalGraph24_222B
08001a9c g     F .text	0000000a osKernelStart
080646e4 g     O .rodata	00000010 acGUI_FontAvantGarde16_003D
08062f6c g     O .rodata	00000006 acGUI_FontAvantGarde16_02C7
08002150 g     F .text	00000040 xTimerGenericCommand
0802d1fc g     O .rodata	0000003c acGUI_FontLubalGraph24_0075
08029580 g     O .rodata	0000000c GUI_FontLubalGraph24_Prop2
08063e9c g     O .rodata	00000006 acGUI_FontAvantGarde16_007E
08039200 g     O .rodata	0000001b acGUI_FontLubalGraph16B_003F
08063c88 g     O .rodata	0000000c acGUI_FontAvantGarde16_00B9
0806165c g     O .rodata	00000032 acGUI_FontAvantGarde16B_004F
080149b0 g     O .rodata	000000bd acGUI_FontLubalGraph32B_220F
080377c4 g     O .rodata	00000005 acGUI_FontLubalGraph16B_203A
0800b5ee g     F .text	00000006 LCD_GetYSizeEx
08011bf0 g     F .text	00000038 LCD_InitColors
0800d134 g     F .text	00000034 GUI_Exec1
0805ae60 g     O .rodata	00000030 acGUI_FontAvantGarde20B_0028
080559f8 g     O .rodata	0000003c acGUI_FontAvantGarde24_007B
0802abd0 g     O .rodata	00000014 acGUI_FontLubalGraph24_2014
08056ad8 g     O .rodata	00000037 acGUI_FontAvantGarde24_003E
080101bc g     F .text	0000002c WM_Screen2hWin
0800c5f4 g     F .text	000001cc GUI__DoAlphaBlending
0802155c g     O .rodata	00000020 acGUI_FontLubalGraph32_007E
08001724 g     F .text	00000074 vTaskPlaceOnEventList
08055130 g     O .rodata	0000007e acGUI_FontAvantGarde24_00C3
0803b11c g     O .rodata	0000003c acGUI_FontLubalGraph16_00D4
0805a240 g     O .rodata	0000001e acGUI_FontAvantGarde20B_006A
0802d064 g     O .rodata	00000014 acGUI_FontLubalGraph24_007C
08000a58 g     F .text	00000158 HAL_LTDC_MspInit
0805c670 g     O .rodata	00000048 acGUI_FontAvantGarde20_0153
0802d01c g     O .rodata	00000012 acGUI_FontLubalGraph24_007E
08044c50 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop41
0803b19c g     O .rodata	00000041 acGUI_FontLubalGraph16_00D2
0801b00c g     O .rodata	00000090 acGUI_FontLubalGraph32B_0034
0802ced8 g     O .rodata	00000011 acGUI_FontLubalGraph24_00A6
08057310 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop38
0803be8c g     O .rodata	00000032 acGUI_FontLubalGraph16_004F
0805ed70 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop15
08033528 g     O .rodata	00000055 acGUI_FontLubalGraph20_221A
080613c0 g     O .rodata	00000028 acGUI_FontAvantGarde16B_0062
08053aa0 g     O .rodata	00000096 acGUI_FontAvantGarde24_0152
0800cc70 g     F .text	0000001c GUI_SetLayerVisEx
08046de4 g     O .rodata	00000118 acGUI_FontAvantGarde32_0152
0803bef4 g     O .rodata	0000003c acGUI_FontLubalGraph16_004D
080016a0 g     F .text	00000084 vTaskSwitchContext
080192c8 g     O .rodata	00000098 acGUI_FontLubalGraph32B_0071
08063ec0 g     O .rodata	0000000d acGUI_FontAvantGarde16_007C
0803b224 g     O .rodata	00000028 acGUI_FontLubalGraph16_00D0
08000fec  w    F .text	00000002 DMA2_Stream5_IRQHandler
0804deb8 g     O .rodata	00000062 acGUI_FontAvantGarde24B_2206
08035368 g     O .rodata	0000002a acGUI_FontLubalGraph20_00A7
08061b40 g     O .rodata	00000027 acGUI_FontAvantGarde16B_0029
0801307c g     F .text	0000002a WM__ForEachDesc
0805d964 g     O .rodata	00000046 acGUI_FontAvantGarde20_00B6
080215c0 g     O .rodata	0000001a acGUI_FontLubalGraph32_007C
08055c08 g     O .rodata	00000021 acGUI_FontAvantGarde24_0072
08061404 g     O .rodata	00000006 acGUI_FontAvantGarde16B_0060
0805c8e0 g     O .rodata	00000034 acGUI_FontAvantGarde20_00F9
0803c5e0 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop29
08035464 g     O .rodata	0000000c acGUI_FontLubalGraph20_00A1
0805ed88 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop17
0801af0c g     O .rodata	0000007e acGUI_FontLubalGraph32B_0036
08019238 g     O .rodata	00000046 acGUI_FontLubalGraph32B_0073
0803a814 g     O .rodata	00000003 acGUI_FontLubalGraph16_02C9
08003734 g     F .text	000000e8 HAL_LTDC_Init
0802d0ac g     O .rodata	00000028 acGUI_FontLubalGraph24_007A
0805afb4 g     O .rodata	00000001 acGUI_FontAvantGarde20B_0020
0803eae0 g     O .rodata	0000001c acGUI_FontAvantGarde32B_0131
08063eec g     O .rodata	00000015 acGUI_FontAvantGarde16_007A
0805dee4 g     O .rodata	00000024 acGUI_FontAvantGarde20_006E
080377cc g     O .rodata	00000005 acGUI_FontLubalGraph16B_2039
0805ea90 g     O .rodata	00000038 acGUI_FontAvantGarde20_002F
0805da00 g     O .rodata	0000000e acGUI_FontAvantGarde20_00B2
08055aac g     O .rodata	00000037 acGUI_FontAvantGarde24_0078
08035dc4 g     O .rodata	0000003c acGUI_FontLubalGraph20_0050
0805d958 g     O .rodata	00000008 acGUI_FontAvantGarde20_00B8
0805a29c g     O .rodata	00000041 acGUI_FontAvantGarde20B_0067
0805c9b8 g     O .rodata	0000003c acGUI_FontAvantGarde20_00F5
08055bac g     O .rodata	0000002d acGUI_FontAvantGarde24_0074
0802cf40 g     O .rodata	0000002d acGUI_FontLubalGraph24_00A4
0805df84 g     O .rodata	0000001e acGUI_FontAvantGarde20_006A
08033968 g     O .rodata	00000009 acGUI_FontLubalGraph20_201D
0804ce60 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop38
0803a60c g     O .rodata	0000001e acGUI_FontLubalGraph16_2113
0804cd94 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop21
08055b3c g     O .rodata	00000037 acGUI_FontAvantGarde24_0076
08060d84 g     O .rodata	0000003c acGUI_FontAvantGarde16B_00BE
0805a260 g     O .rodata	0000000c acGUI_FontAvantGarde20B_0069
08063fe4 g     O .rodata	00000028 acGUI_FontAvantGarde16_0071
08064748 g     O .rodata	0000001e acGUI_FontAvantGarde16_0038
0805af98 g     O .rodata	0000000f acGUI_FontAvantGarde20B_0022
0800053c g     F .text	00000002 HAL_MspInit
0803e214 g     O .rodata	00000030 acGUI_FontAvantGarde32B_2014
0806485c g     O .rodata	0000001e acGUI_FontAvantGarde16_0030
0803c5c8 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop27
08036728 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop10
20028940 g     O .bss	00000010 WM__aCHWinLast
080506a0 g     O .rodata	00000048 acGUI_FontAvantGarde24B_00A4
0802e3c4 g     O .rodata	00000046 acGUI_FontLubalGraph24_0038
0804ce48 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop36
0804cdac g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop23
0804f090 g     O .rodata	0000005a acGUI_FontAvantGarde24B_00E7
0804e578 g     O .rodata	0000003c acGUI_FontAvantGarde24B_017E
08048da4 g     O .rodata	00000048 acGUI_FontAvantGarde32_00CF
0804fea4 g     O .rodata	0000007e acGUI_FontAvantGarde24B_00C4
0803e67c g     O .rodata	000000c0 acGUI_FontAvantGarde32B_0178
08063b04 g     O .rodata	0000003c acGUI_FontAvantGarde16_00C2
0802e940 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop5
0801d53c g     O .rodata	000000ab acGUI_FontLubalGraph32_03A9
08062e60 g     O .rodata	00000030 acGUI_FontAvantGarde16_2020
08063f84 g     O .rodata	00000015 acGUI_FontAvantGarde16_0075
0800ccd0 g     F .text	0000003a GUI_RectsIntersect
0805ae98 g     O .rodata	00000048 acGUI_FontAvantGarde20B_0026
0801b11c g     O .rodata	0000006c acGUI_FontLubalGraph32B_0032
0803c5b0 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop25
08044c08 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop35
08063b7c g     O .rodata	0000003c acGUI_FontAvantGarde16_00C0
0804e148 g     O .rodata	00000038 acGUI_FontAvantGarde24B_2044
0805c2c4 g     O .rodata	0000006c acGUI_FontAvantGarde20_2030
080019dc g     F .text	000000a8 xTaskPriorityDisinherit
0802e574 g     O .rodata	00000046 acGUI_FontLubalGraph24_0032
0802d164 g     O .rodata	0000005a acGUI_FontLubalGraph24_0077
0804f15c g     O .rodata	00000060 acGUI_FontAvantGarde24B_00E5
0804fd9c g     O .rodata	0000007e acGUI_FontAvantGarde24B_00C6
08063fbc g     O .rodata	00000015 acGUI_FontAvantGarde16_0073
0802e928 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop3
08058840 g     O .rodata	00000051 acGUI_FontAvantGarde20B_0153
08058788 g     O .rodata	0000004b acGUI_FontAvantGarde20B_0178
0801b1d0 g     O .rodata	0000006c acGUI_FontLubalGraph32B_0030
0803c3d4 g     O .rodata	00000032 acGUI_FontLubalGraph16_0025
0803a62c g     O .rodata	00000028 acGUI_FontLubalGraph16_20AC
0805af28 g     O .rodata	00000038 acGUI_FontAvantGarde20B_0024
08003b2e g     F .text	00000040 HAL_LTDC_SetAddress
0802cfc4 g     O .rodata	00000041 acGUI_FontLubalGraph24_00A2
08062e1c g     O .rodata	0000000a acGUI_FontAvantGarde16_2026
0802e4e4 g     O .rodata	00000046 acGUI_FontLubalGraph24_0034
0805073c g     O .rodata	0000003c acGUI_FontAvantGarde24B_00A2
080209d4 g     O .rodata	00000113 acGUI_FontLubalGraph32_00C0
0802fb74 g     O .rodata	00000006 acGUI_FontLubalGraph20B_203A
0802d0d4 g     O .rodata	00000054 acGUI_FontLubalGraph24_0079
0805adec g     O .rodata	00000006 acGUI_FontAvantGarde20B_002D
08034744 g     O .rodata	00000060 acGUI_FontLubalGraph20_00DA
080396fc g     O .rodata	0000000c GUI_FontLubalGraph16_Prop37
0804e268 g     O .rodata	0000005a acGUI_FontAvantGarde24B_2021
0805ed40 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop11
08062e28 g     O .rodata	00000006 acGUI_FontAvantGarde16_2022
0802abc8 g     O .rodata	00000008 acGUI_FontLubalGraph24_2018
08044bf0 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop33
08063f44 g     O .rodata	00000023 acGUI_FontAvantGarde16_0077
0803c39c g     O .rodata	00000003 acGUI_FontLubalGraph16_0027
0804ce00 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop30
08046970 g     O .rodata	00000018 acGUI_FontAvantGarde32_02C6
08053828 g     O .rodata	0000000c acGUI_FontAvantGarde24_02C6
080630a8 g     O .rodata	00000046 acGUI_FontAvantGarde16_0152
0805ed58 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop13
0801b838 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop27
08048e7c g     O .rodata	00000064 acGUI_FontAvantGarde32_00CD
0802ea00 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop21
0803a998 g     O .rodata	00000014 acGUI_FontLubalGraph16_0142
080401ec g     O .rodata	000000d2 acGUI_FontAvantGarde32B_00D8
08052110 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop21
0806715c g     O .rodata	00000024 GUI_Font6x8
080130b4 g     F .text	0000005c LCD_GetPixelIndex
080353a4 g     O .rodata	0000003c acGUI_FontLubalGraph20_00A5
08008198 g     F .text	00000048 WM_SelectWindow
0804ef74 g     O .rodata	0000005a acGUI_FontAvantGarde24B_00EA
08052128 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop23
08000fec  w    F .text	00000002 EXTI2_IRQHandler
08061db8 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop27
08064828 g     O .rodata	0000001e acGUI_FontAvantGarde16_0032
08061dd0 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop29
08015840 g     O .rodata	000000b6 acGUI_FontLubalGraph32B_0153
0802ea18 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop23
0803bfac g     O .rodata	00000028 acGUI_FontLubalGraph16_0048
0802fdd4 g     O .rodata	0000000c acGUI_FontLubalGraph20B_02C6
0800dc90 g     F .text	0000007c GUI_Init
0805c94c g     O .rodata	0000002d acGUI_FontAvantGarde20_00F7
0805d9dc g     O .rodata	00000009 acGUI_FontAvantGarde20_00B4
08015498 g     O .rodata	0000001e acGUI_FontLubalGraph32B_02C6
0804eed8 g     O .rodata	00000040 acGUI_FontAvantGarde24B_00EC
080353fc g     O .rodata	0000003c acGUI_FontLubalGraph20_00A3
0805df48 g     O .rodata	0000000c acGUI_FontAvantGarde20_006C
0804a420 g     O .rodata	0000001a acGUI_FontAvantGarde32_007C
0805eacc g     O .rodata	00000003 acGUI_FontAvantGarde20_002D
08028b84 g     O .rodata	00000062 acGUI_FontLubalGraph24B_0048
08044a20 g     O .rodata	00000026 acGUI_FontAvantGarde32B_0021
08051460 g     O .rodata	00000054 acGUI_FontAvantGarde24B_004E
0805ca30 g     O .rodata	00000041 acGUI_FontAvantGarde20_00F3
0805da40 g     O .rodata	0000000f acGUI_FontAvantGarde20_00B0
08036890 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop40
08058da8 g     O .rodata	0000002a acGUI_FontAvantGarde20B_00EC
08048f44 g     O .rodata	00000090 acGUI_FontAvantGarde32_00CB
08003aee g     F .text	00000040 HAL_LTDC_SetAlpha
0805e120 g     O .rodata	0000002d acGUI_FontAvantGarde20_0061
08062c08 g     O .rodata	00000004 acGUI_FontAvantGarde16_2212
0802e910 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop1
08025440 g     O .rodata	00000070 acGUI_FontLubalGraph24B_212E
0801b850 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop29
0805ead8 g     O .rodata	0000002d acGUI_FontAvantGarde20_002B
0802fb7c g     O .rodata	00000006 acGUI_FontLubalGraph20B_2039
08050474 g     O .rodata	00000008 acGUI_FontAvantGarde24B_00AF
08010c70 g     F .text	0000006c GUI_MEMDEV_WriteAt
0805e0b4 g     O .rodata	0000002d acGUI_FontAvantGarde20_0063
08027a88 g     O .rodata	00000015 acGUI_FontLubalGraph24B_00AB
080262e8 g     O .rodata	0000003c acGUI_FontLubalGraph24B_00EE
08058d4c g     O .rodata	00000030 acGUI_FontAvantGarde20B_00EE
080534f0 g     O .rodata	000000a5 acGUI_FontAvantGarde24_2030
0805b0a8 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop18
0803c36c g     O .rodata	00000016 acGUI_FontLubalGraph16_0029
08006a7c g     F .text	00000046 BUTTON_CreateIndirect
0802abf0 g     O .rodata	00000006 acGUI_FontLubalGraph24_2010
080368a8 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop42
0805cab8 g     O .rodata	00000030 acGUI_FontAvantGarde20_00F1
08033990 g     O .rodata	00000006 acGUI_FontLubalGraph20_2018
20028808 g     O .bss	00000001 WM__PaintCallbackCnt
08026cf4 g     O .rodata	0000007e acGUI_FontLubalGraph24B_00D4
08052170 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop29
0805eb84 g     O .rodata	00000048 acGUI_FontAvantGarde20_0026
08020de4 g     O .rodata	0000002d acGUI_FontLubalGraph32_00BA
0800551c g     F .text	00000096 FMC_SDRAM_Timing_Init
0805eb4c g     O .rodata	00000030 acGUI_FontAvantGarde20_0028
08027a5c g     O .rodata	00000006 acGUI_FontLubalGraph24B_00AD
08052194 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop32
08060e44 g     O .rodata	0000000c acGUI_FontAvantGarde16B_00B9
08017bbc g     O .rodata	00000096 acGUI_FontLubalGraph32B_00C9
08033998 g     O .rodata	00000009 acGUI_FontLubalGraph20_2014
0803498c g     O .rodata	00000060 acGUI_FontLubalGraph20_00D3
08047084 g     O .rodata	000000c8 acGUI_FontAvantGarde32_00FE
0804ffa4 g     O .rodata	0000007e acGUI_FontAvantGarde24B_00C2
080396cc g     O .rodata	0000000c GUI_FontLubalGraph16_Prop33
08044c74 g     O .rodata	00000be8 GUI_FontAvantGarde32_CharInfo
0804efd0 g     O .rodata	00000060 acGUI_FontAvantGarde24B_00E9
0805874c g     O .rodata	0000003c acGUI_FontAvantGarde20B_017D
08026c04 g     O .rodata	00000070 acGUI_FontLubalGraph24B_00D6
0805062c g     O .rodata	00000020 acGUI_FontAvantGarde24B_00A6
080252e8 g     O .rodata	0000000a acGUI_FontLubalGraph24B_2212
0803c008 g     O .rodata	0000001e acGUI_FontLubalGraph16_0046
0800cad4 g     F .text	00000028 GUI_TOUCH_StoreStateEx
08063910 g     O .rodata	00000018 acGUI_FontAvantGarde16_00CD
08052e0c g     O .rodata	00000046 acGUI_FontAvantGarde24_FFFF
0805dfe0 g     O .rodata	00000041 acGUI_FontAvantGarde20_0067
08017cec g     O .rodata	000000e1 acGUI_FontLubalGraph32B_00C7
08060e88 g     O .rodata	0000001e acGUI_FontAvantGarde16B_00B5
080396e4 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop35
08011d14 g     F .text	00000038 LCD_AA_MixColors16
08060228 g     O .rodata	00000038 acGUI_FontAvantGarde16B_00FD
080326c0 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop25
080505c0 g     O .rodata	00000009 acGUI_FontAvantGarde24B_00A8
0803c048 g     O .rodata	00000028 acGUI_FontLubalGraph16_0044
080269cc g     O .rodata	0000007e acGUI_FontLubalGraph24B_00DB
0803c46c g     O .rodata	00000024 GUI_FontAvantGarde32B
0805ff10 g     O .rodata	00000006 acGUI_FontAvantGarde16B_2018
0803c514 g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop12
080076f8 g     F .text	0000001c WM_GetClientWindow
08036644 g     O .rodata	0000003c acGUI_FontLubalGraph20_0023
080348d4 g     O .rodata	0000005a acGUI_FontLubalGraph20_00D5
08025990 g     O .rodata	00000010 acGUI_FontLubalGraph24B_02D8
08020b5c g     O .rodata	000000d1 acGUI_FontLubalGraph32_00BE
080429d8 g     O .rodata	0000004c acGUI_FontAvantGarde32B_0066
0801b7f0 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop21
0805e048 g     O .rodata	0000002d acGUI_FontAvantGarde20_0065
08060e58 g     O .rodata	00000002 acGUI_FontAvantGarde16B_00B7
08001798 g     F .text	0000005c vTaskPlaceOnEventListRestricted
0803e198 g     O .rodata	0000001e acGUI_FontAvantGarde32B_201D
080500ac g     O .rodata	00000085 acGUI_FontAvantGarde24B_00C0
08002c06 g     F .text	00000018 vListInsertEnd
08000fec  w    F .text	00000002 LTDC_ER_IRQHandler
08049800 g     O .rodata	000000e1 acGUI_FontAvantGarde32_00C0
08021d3c g     O .rodata	00000098 acGUI_FontLubalGraph32_006B
080347a4 g     O .rodata	00000060 acGUI_FontLubalGraph20_00D9
080601b0 g     O .rodata	00000041 acGUI_FontAvantGarde16B_00FF
0803e5ec g     O .rodata	00000090 acGUI_FontAvantGarde32B_017D
0803c4fc g     O .rodata	0000000c GUI_FontAvantGarde32B_Prop10
080121b8 g     F .text	000001a8 GUI__ConvertColor2Index
0804a5d8 g     O .rodata	0000008c acGUI_FontAvantGarde32_0077
080586d0 g     O .rodata	0000004b acGUI_FontAvantGarde20B_0192
0803a428 g     O .rodata	00000010 acGUI_FontLubalGraph16_2248
08039714 g     O .rodata	0000000c GUI_FontLubalGraph16_Prop39
08013694 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop18
08057358 g     O .rodata	00000be8 GUI_FontAvantGarde20B_CharInfo
2002880c g     O .bss	00000004 WM__CreateFlags
08034858 g     O .rodata	00000020 acGUI_FontLubalGraph20_00D7
0804947c g     O .rodata	000000f0 acGUI_FontAvantGarde32_00C4
080428c4 g     O .rodata	00000072 acGUI_FontAvantGarde32B_0068
0803126c g     O .rodata	00000037 acGUI_FontLubalGraph20B_00B5
0805a204 g     O .rodata	0000000c acGUI_FontAvantGarde20B_006C
0803c0a4 g     O .rodata	0000001e acGUI_FontLubalGraph16_0042
080591ec g     O .rodata	0000003c acGUI_FontAvantGarde20B_00DB
08001bd8 g     F .text	00000006 osMutexCreate
0800631c g     F .text	00000014 FRAMEWIN_SetDefaultBarColor
08036688 g     O .rodata	0000000c acGUI_FontLubalGraph20_0021
08044ad0 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop9
08061da0 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop25
08049644 g     O .rodata	000000d8 acGUI_FontAvantGarde32_00C2
0802e9e8 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop19
08047204 g     O .rodata	0000008c acGUI_FontAvantGarde32_00FC
0804a4fc g     O .rodata	00000085 acGUI_FontAvantGarde32_0079
0804031c g     O .rodata	000000f0 acGUI_FontAvantGarde32B_00D6
0800dc5c g     F .text	00000034 GUI__Config
08044ab8 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop7
080638d4 g     O .rodata	00000018 acGUI_FontAvantGarde16_00CF
0801d630 g     O .rodata	00000004 acGUI_FontLubalGraph32_02D9
0803ed84 g     O .rodata	00000078 acGUI_FontAvantGarde32B_00FB
080445bc g     O .rodata	00000008 acGUI_FontAvantGarde32B_002E
0805a1a0 g     O .rodata	00000024 acGUI_FontAvantGarde20B_006E
08031234 g     O .rodata	00000003 acGUI_FontLubalGraph20B_00B7
08037764 g     O .rodata	0000001e acGUI_FontLubalGraph16B_2113
0803a84c g     O .rodata	0000001e acGUI_FontLubalGraph16_017E
0805c8ac g     O .rodata	00000034 acGUI_FontAvantGarde20_00FA
08057274 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop25
080289d8 g     O .rodata	0000007e acGUI_FontLubalGraph24B_004D
08026f1c g     O .rodata	00000062 acGUI_FontLubalGraph24B_00D0
0802eac0 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop37
0802e9d0 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop17
080404fc g     O .rodata	000000f0 acGUI_FontAvantGarde32B_00D4
080521dc g     O .rodata	0000000c GUI_FontAvantGarde24_Prop38
08062d74 g     O .rodata	00000028 acGUI_FontAvantGarde16_20AC
0803ec54 g     O .rodata	000000b6 acGUI_FontAvantGarde32B_00FD
08060eb0 g     O .rodata	00000012 acGUI_FontAvantGarde16B_00B3
08041834 g     O .rodata	00000020 acGUI_FontAvantGarde32B_00BA
080326f0 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop29
08036860 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop36
08059c60 g     O .rodata	00000018 acGUI_FontAvantGarde20B_00B2
0805c84c g     O .rodata	00000030 acGUI_FontAvantGarde20_00FC
0805728c g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop27
080445d4 g     O .rodata	00000012 acGUI_FontAvantGarde32B_002C
08028904 g     O .rodata	00000062 acGUI_FontLubalGraph24B_004F
08026e00 g     O .rodata	0000008c acGUI_FontLubalGraph24B_00D2
0803798c g     O .rodata	00000006 acGUI_FontLubalGraph16B_02C6
08063f04 g     O .rodata	00000028 acGUI_FontAvantGarde16_0079
08004a54 g     F .text	0000000c TS_IO_Init
08063940 g     O .rodata	00000024 acGUI_FontAvantGarde16_00CB
08061cd4 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop8
080316d0 g     O .rodata	00000037 acGUI_FontLubalGraph20B_0071
0804c298 g     O .rodata	00000020 acGUI_FontAvantGarde32_003B
08049290 g     O .rodata	000000f0 acGUI_FontAvantGarde32_00C6
0805476c g     O .rodata	0000005a acGUI_FontAvantGarde24_00DC
08044988 g     O .rodata	00000077 acGUI_FontAvantGarde32B_0023
0805fee8 g     O .rodata	00000009 acGUI_FontAvantGarde16B_201D
080242ac g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop21
08013560 g     F .text	00000000 _init
080408a4 g     O .rodata	000000ab acGUI_FontAvantGarde32B_00D0
0802ead8 g     O .rodata	0000000c GUI_FontLubalGraph20B_Prop39
080345f0 g     O .rodata	0000003c acGUI_FontLubalGraph20_00DE
080242c4 g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop23
08052140 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop25
080326d8 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop27
08060ed0 g     O .rodata	00000020 acGUI_FontAvantGarde16B_00B1
0804159c g     O .rodata	000000e4 acGUI_FontAvantGarde32B_00BE
08005db0 g     F .text	0000003e WINDOW_CreateIndirect
0804731c g     O .rodata	00000093 acGUI_FontAvantGarde32_00FA
08038af8 g     O .rodata	00000024 acGUI_FontLubalGraph16B_0071
0805b1c8 g     O .rodata	0000000c GUI_FontAvantGarde20_Prop42
08036848 g     O .rodata	0000000c GUI_FontLubalGraph16B_Prop34
080546ac g     O .rodata	0000004b acGUI_FontAvantGarde24_00DE
08028aa0 g     O .rodata	00000062 acGUI_FontLubalGraph24B_004B
0804e3fc g     O .rodata	0000004b acGUI_FontAvantGarde24B_03BC
08060e38 g     O .rodata	0000000c acGUI_FontAvantGarde16B_00BA
08044aa0 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop5
080406e8 g     O .rodata	000000fa acGUI_FontAvantGarde32B_00D2
080242dc g     O .rodata	0000000c GUI_FontLubalGraph24B_Prop25
080279f0 g     O .rodata	00000008 acGUI_FontLubalGraph24B_00AF
0801dff4 g     O .rodata	000000b4 acGUI_FontLubalGraph32_00FB
08041740 g     O .rodata	000000be acGUI_FontAvantGarde32B_00BC
0803468c g     O .rodata	0000005a acGUI_FontLubalGraph20_00DC
0800cb94 g     F .text	00000016 GUI_SetBkColor
0804483c g     O .rodata	000000be acGUI_FontAvantGarde32B_0025
080311b8 g     O .rodata	00000042 acGUI_FontLubalGraph20B_00BC
0802bf38 g     O .rodata	00000070 acGUI_FontLubalGraph24_00D8
0803c0f8 g     O .rodata	00000032 acGUI_FontLubalGraph16_0040
08045fd4 g     O .rodata	00000084 acGUI_FontAvantGarde32_2202
08061cbc g     O .rodata	0000000c GUI_FontAvantGarde16_Prop6
08013634 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop10
080647d8 g     O .rodata	00000028 acGUI_FontAvantGarde16_0034
08060df4 g     O .rodata	00000032 acGUI_FontAvantGarde16B_00BC
08022198 g     O .rodata	000000ab acGUI_FontLubalGraph32_0062
08060070 g     O .rodata	00000030 acGUI_FontAvantGarde16B_0178
080089bc g     F .text	00000020 WM_Deactivate
080339ac g     O .rodata	00000002 acGUI_FontLubalGraph20_2010
08031208 g     O .rodata	00000012 acGUI_FontLubalGraph20B_00BA
08044678 g     O .rodata	00000082 acGUI_FontAvantGarde32B_0029
08020d04 g     O .rodata	000000be acGUI_FontLubalGraph32_00BC
08008da4 g     F .text	0000002a GUI_MEMDEV_GetDataPtr
08064788 g     O .rodata	00000028 acGUI_FontAvantGarde16_0036
08020ff4 g     O .rodata	00000069 acGUI_FontLubalGraph32_00B1
080387c0 g     O .rodata	00000002 acGUI_FontLubalGraph16B_00B7
0801364c g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop12
080317ec g     O .rodata	00000037 acGUI_FontLubalGraph20B_006B
0803164c g     O .rodata	00000028 acGUI_FontLubalGraph20B_0075
0803ad24 g     O .rodata	00000028 acGUI_FontLubalGraph16_00EA
0803109c g     O .rodata	0000005a acGUI_FontLubalGraph20B_00C0
08052158 g     O .rodata	0000000c GUI_FontAvantGarde24_Prop27
0801367c g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop16
080222c4 g     O .rodata	00000018 acGUI_FontLubalGraph32_0060
0803eafc g     O .rodata	000000af acGUI_FontAvantGarde32B_00FF
0801b808 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop23
08044780 g     O .rodata	00000010 acGUI_FontAvantGarde32B_0027
0802bcb8 g     O .rodata	0000007e acGUI_FontLubalGraph24_00DD
08061d88 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop23
08038768 g     O .rodata	0000002d acGUI_FontLubalGraph16B_00BC
0806041c g     O .rodata	00000028 acGUI_FontAvantGarde16B_00F0
080059b0 g     F .text	00000010 HEADER_SetDefaultSTSkin
08042c94 g     O .rodata	00000018 acGUI_FontAvantGarde32B_0060
08013664 g     O .rodata	0000000c GUI_FontLubalGraph32B_Prop14
08031698 g     O .rodata	00000020 acGUI_FontLubalGraph20B_0073
0804ee58 g     O .rodata	0000004b acGUI_FontAvantGarde24B_00EE
080023d8 g     F .text	00000018 xTimerIsTimerActive
0803121c g     O .rodata	0000000e acGUI_FontLubalGraph20B_00B9
08058414 g     O .rodata	00000030 acGUI_FontAvantGarde20B_2044
08057244 g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop21
08050518 g     O .rodata	0000001c acGUI_FontAvantGarde24B_00AB
08038ac8 g     O .rodata	00000015 acGUI_FontLubalGraph16B_0073
0801b820 g     O .rodata	0000000c GUI_FontLubalGraph32_Prop25
0805c600 g     O .rodata	00000034 acGUI_FontAvantGarde20_0161
0804c750 g     O .rodata	0000008c acGUI_FontAvantGarde32_0030
0802bc10 g     O .rodata	00000054 acGUI_FontLubalGraph24_00DF
080387f0 g     O .rodata	00000024 acGUI_FontLubalGraph16B_00B5
08061d70 g     O .rodata	0000000c GUI_FontAvantGarde16_Prop21
080504ec g     O .rodata	00000009 acGUI_FontAvantGarde24B_00AD
080387a4 g     O .rodata	00000008 acGUI_FontLubalGraph16B_00BA
08059bb8 g     O .rodata	00000008 acGUI_FontAvantGarde20B_00B8
0805725c g     O .rodata	0000000c GUI_FontAvantGarde20B_Prop23
08042a94 g     O .rodata	00000098 acGUI_FontAvantGarde32B_0064
08020f98 g     O .rodata	00000030 acGUI_FontLubalGraph32_00B3
08047708 g     O .rodata	000000a0 acGUI_FontAvantGarde32_00F3
08065420 g     O .rodata	00000024 GUI_Font20_ASCII
0806004c g     O .rodata	00000024 acGUI_FontAvantGarde16B_017D
08032408 g     O .rodata	00000027 acGUI_FontLubalGraph20B_0029
08062e90 g     O .rodata	00000006 acGUI_FontAvantGarde16_201E
08038a98 g     O .rodata	0000001c acGUI_FontLubalGraph16B_0075
08000fec  w    F .text	00000002 CAN2_SCE_IRQHandler
08059c3c g     O .rodata	0000000c acGUI_FontAvantGarde20B_00B4
08042b9c g     O .rodata	00000085 acGUI_FontAvantGarde32B_0062
0805ff18 g     O .rodata	0000000c acGUI_FontAvantGarde16B_2014
20028810 g     O .bss	00000002 WM__NumInvalidWindows
080326a8 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop23
08038bb8 g     O .rodata	00000024 acGUI_FontLubalGraph16B_006B
08023e30 g     O .rodata	00000058 acGUI_FontLubalGraph32_0029
08000fec  w    F .text	00000002 TIM8_BRK_TIM12_IRQHandler
0802d7c4 g     O .rodata	00000042 acGUI_FontLubalGraph24_005E
08054824 g     O .rodata	0000005f acGUI_FontAvantGarde24_00DA
0802c900 g     O .rodata	00000090 acGUI_FontLubalGraph24_00C1
0804ccc8 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop4
08031124 g     O .rodata	0000004d acGUI_FontLubalGraph20B_00BE
08045e74 g     O .rodata	000000c6 acGUI_FontAvantGarde32_220F
08059bc4 g     O .rodata	00000046 acGUI_FontAvantGarde20B_00B6
080427c8 g     O .rodata	00000072 acGUI_FontAvantGarde32B_006B
0804c688 g     O .rodata	0000008c acGUI_FontAvantGarde32_0032
20028814 g     O .bss	00000004 WM__TransWindowCnt
0804a394 g     O .rodata	0000001e acGUI_FontAvantGarde32_007E
0802c7e0 g     O .rodata	00000090 acGUI_FontLubalGraph24_00C3
08006e7a g     F .text	00000022 WM__IsAncestor
08024180 g     O .rodata	00000013 acGUI_FontLubalGraph32_0021
080475d0 g     O .rodata	00000098 acGUI_FontAvantGarde32_00F5
08060280 g     O .rodata	0000001e acGUI_FontAvantGarde16B_00FB
0800cf00 g     F .text	00000080 GUI_MULTIBUF_BeginEx
08045f3c g     O .rodata	00000098 acGUI_FontAvantGarde32_2206
0801dac8 g     O .rodata	0000010a acGUI_FontLubalGraph32_0152
08042704 g     O .rodata	0000009a acGUI_FontAvantGarde32B_006D
08006694 g     F .text	0000002a DROPDOWN__GetpItemLocked
080569b4 g     O .rodata	00000069 acGUI_FontAvantGarde24_0041
08054c20 g     O .rodata	0000006c acGUI_FontAvantGarde24_00D1
08039428 g     O .rodata	00000016 acGUI_FontLubalGraph16B_0029
0805dfa4 g     O .rodata	0000000c acGUI_FontAvantGarde20_0069
0803158c g     O .rodata	00000037 acGUI_FontLubalGraph20B_0079
0804e4e8 g     O .rodata	00000006 acGUI_FontAvantGarde24B_02D9
0802fad4 g     O .rodata	0000003c acGUI_FontLubalGraph20B_2113
08030f34 g     O .rodata	00000054 acGUI_FontLubalGraph20B_00C4
08032498 g     O .rodata	0000004d acGUI_FontLubalGraph20B_0025
0805eda0 g     O .rodata	0000000c GUI_FontAvantGarde16B_Prop19
080387ac g     O .rodata	0000000c acGUI_FontLubalGraph16B_00B9
080240e4 g     O .rodata	00000085 acGUI_FontLubalGraph32_0023
080315ec g     O .rodata	00000038 acGUI_FontLubalGraph20B_0077
08030fe4 g     O .rodata	0000005a acGUI_FontLubalGraph20B_00C2
0802ff38 g     O .rodata	00000040 acGUI_FontLubalGraph20B_0153
08032690 g     O .rodata	0000000c GUI_FontLubalGraph20_Prop21
08015e54 g     O .rodata	000000b0 acGUI_FontLubalGraph32B_00FA
0805ff2c g     O .rodata	00000004 acGUI_FontAvantGarde16B_2010
08062ab0 g     O .rodata	0000001e acGUI_FontAvantGarde16_FB01
08032458 g     O .rodata	00000005 acGUI_FontLubalGraph20B_0027
0804ccb0 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop2
0803948c g     O .rodata	0000002d acGUI_FontLubalGraph16B_0025
08015348 g     O .rodata	000000a2 acGUI_FontLubalGraph32B_03A9
20028820 g     O .bss	00000001 GUI__CharHasTrans
0805111c g     O .rodata	0000007e acGUI_FontAvantGarde24B_0057
08042640 g     O .rodata	00000070 acGUI_FontAvantGarde32B_006F
0803ae00 g     O .rodata	00000028 acGUI_FontLubalGraph16_00E5
08064e38 g     O .rodata	000002f8 GUI_Font20_ASCII_CharInfo
08000fec  w    F .text	00000002 DMA2_Stream1_IRQHandler
0804cce0 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop6
08039458 g     O .rodata	00000004 acGUI_FontLubalGraph16B_0027
08032524 g     O .rodata	00000037 acGUI_FontLubalGraph20B_0023
080386a0 g     O .rodata	00000041 acGUI_FontLubalGraph16B_00C0
08033a70 g     O .rodata	0000000c acGUI_FontLubalGraph20_02DD
0803a74c g     O .rodata	00000006 acGUI_FontLubalGraph16_201E
0801983c g     O .rodata	00000062 acGUI_FontLubalGraph32B_0065
08051200 g     O .rodata	00000054 acGUI_FontAvantGarde24B_0055
080603d0 g     O .rodata	0000002c acGUI_FontAvantGarde16B_00F2
0802207c g     O .rodata	000000ab acGUI_FontLubalGraph32_0064
08038a10 g     O .rodata	00000024 acGUI_FontLubalGraph16B_0079
0802d838 g     O .rodata	00000038 acGUI_FontLubalGraph24_005C
20028818 g     O .bss	00000008 WM__ahDesktopWin
0805eca0 g     O .rodata	00000001 acGUI_FontAvantGarde20_0020
0803ad4c g     O .rodata	0000002c acGUI_FontLubalGraph16_00E9
0803256c g     O .rodata	0000000b acGUI_FontLubalGraph20B_0021
0801b3d0 g     O .rodata	00000054 acGUI_FontLubalGraph32B_0028
08023d98 g     O .rodata	00000003 acGUI_FontLubalGraph32_002E
08034a4c g     O .rodata	00000069 acGUI_FontLubalGraph20_00D1
0804c200 g     O .rodata	00000031 acGUI_FontAvantGarde32_003D
080490fc g     O .rodata	00000096 acGUI_FontAvantGarde32_00C8
08056728 g     O .rodata	0000003c acGUI_FontAvantGarde24_004A
08054a10 g     O .rodata	0000007e acGUI_FontAvantGarde24_00D5
08044644 g     O .rodata	00000032 acGUI_FontAvantGarde32B_002A
080615b0 g     O .rodata	00000028 acGUI_FontAvantGarde16B_0053
08031790 g     O .rodata	00000038 acGUI_FontLubalGraph20B_006D
08033a84 g     O .rodata	00000006 acGUI_FontLubalGraph20_02DB
0801c5f4 g     O .rodata	00000085 acGUI_FontLubalGraph32_FB01
08019574 g     O .rodata	00000048 acGUI_FontLubalGraph32B_006C
08035e48 g     O .rodata	00000054 acGUI_FontLubalGraph20_004E
08019930 g     O .rodata	00000070 acGUI_FontLubalGraph32B_0063
080394ec g     O .rodata	00000024 acGUI_FontLubalGraph16B_0023
08038a50 g     O .rodata	0000002a acGUI_FontLubalGraph16B_0077
08063a8c g     O .rodata	0000003c acGUI_FontAvantGarde16_00C4
08037a8c g     O .rodata	00000031 acGUI_FontLubalGraph16B_0153
0804de48 g     O .rodata	00000070 acGUI_FontAvantGarde24B_220F
0802d8a0 g     O .rodata	00000046 acGUI_FontLubalGraph24_005A
08062ea0 g     O .rodata	00000006 acGUI_FontAvantGarde16_201C
0804c124 g     O .rodata	00000078 acGUI_FontAvantGarde32_003F
08054b10 g     O .rodata	00000085 acGUI_FontAvantGarde24_00D3
08039518 g     O .rodata	00000009 acGUI_FontLubalGraph16B_0021
08061600 g     O .rodata	00000032 acGUI_FontAvantGarde16B_0051
08031740 g     O .rodata	00000028 acGUI_FontLubalGraph20B_006F
0802bdb8 g     O .rodata	0000007e acGUI_FontLubalGraph24_00DB
0803e474 g     O .rodata	00000018 acGUI_FontAvantGarde32B_02D8
0805fc78 g     O .rodata	00000037 acGUI_FontAvantGarde16B_220F
0801de78 g     O .rodata	000000d0 acGUI_FontLubalGraph32_00FD
0803ada4 g     O .rodata	00000028 acGUI_FontLubalGraph16_00E7
0805fbac g     O .rodata	00000027 acGUI_FontAvantGarde16B_222B
0801945c g     O .rodata	00000070 acGUI_FontLubalGraph32B_006E
08062ea8 g     O .rodata	00000003 acGUI_FontAvantGarde16_201A
0803ace4 g     O .rodata	00000016 acGUI_FontLubalGraph16_00EC
0806037c g     O .rodata	00000028 acGUI_FontAvantGarde16B_00F4
080188b4 g     O .rodata	00000018 acGUI_FontLubalGraph32B_00B4
0804ccf8 g     O .rodata	0000000c GUI_FontAvantGarde24B_Prop8
0805ec14 g     O .rodata	00000038 acGUI_FontAvantGarde20_0024
0801601c g     O .rodata	0000004d acGUI_FontLubalGraph32B_00F7
08018788 g     O .rodata	00000093 acGUI_FontLubalGraph32B_00B6
08044a88 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop3
08004b0c g     F .text	00000020 StartIdleMonitor
0800da84 g     F .text	00000070 GUI_CURSOR_SetPositionEx
08021e68 g     O .rodata	000000ab acGUI_FontLubalGraph32_0068
08035efc g     O .rodata	00000030 acGUI_FontLubalGraph20_004C
08000fec  w    F .text	00000002 DMA1_Stream6_IRQHandler
08021fc0 g     O .rodata	0000004c acGUI_FontLubalGraph32_0066
0801dce0 g     O .rodata	000000c0 acGUI_FontLubalGraph32_00FF
08023e14 g     O .rodata	0000001c acGUI_FontLubalGraph32_002A
0806032c g     O .rodata	00000028 acGUI_FontAvantGarde16B_00F6
08044a70 g     O .rodata	0000000c GUI_FontAvantGarde32_Prop1
0804a7fc g     O .rodata	00000098 acGUI_FontAvantGarde32_0071
08015f04 g     O .rodata	000000a8 acGUI_FontLubalGraph32B_00F9
08063a14 g     O .rodata	0000003c acGUI_FontAvantGarde16_00C6
08038b78 g     O .rodata	0000002a acGUI_FontLubalGraph16B_006D
0805ec88 g     O .rodata	0000000a acGUI_FontAvantGarde20_0022
08023da4 g     O .rodata	0000000a acGUI_FontLubalGraph32_002C
0804a4a8 g     O .rodata	00000054 acGUI_FontAvantGarde32_007A
08020e14 g     O .rodata	00000024 acGUI_FontLubalGraph32_00B9
080046ac g     F .text	00000174 BSP_TS_GetState
0804c570 g     O .rodata	0000008c acGUI_FontAvantGarde32_0034
08005e98 g     F .text	0000002e WIDGET_SetState
080186f4 g     O .rodata	00000028 acGUI_FontLubalGraph32B_00BB
0804a77c g     O .rodata	00000046 acGUI_FontAvantGarde32_0073
08011c88 g     F .text	0000007c LCD_InitLUT



Disassembly of section .text:

080001c8 <deregister_tm_clones>:
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <deregister_tm_clones+0x14>)
 80001ca:	4805      	ldr	r0, [pc, #20]	; (80001e0 <deregister_tm_clones+0x18>)
 80001cc:	1a1b      	subs	r3, r3, r0
 80001ce:	2b06      	cmp	r3, #6
 80001d0:	d902      	bls.n	80001d8 <deregister_tm_clones+0x10>
 80001d2:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <deregister_tm_clones+0x1c>)
 80001d4:	b103      	cbz	r3, 80001d8 <deregister_tm_clones+0x10>
 80001d6:	4718      	bx	r3
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	20000813 	.word	0x20000813
 80001e0:	20000810 	.word	0x20000810
 80001e4:	00000000 	.word	0x00000000

080001e8 <register_tm_clones>:
 80001e8:	4905      	ldr	r1, [pc, #20]	; (8000200 <register_tm_clones+0x18>)
 80001ea:	4806      	ldr	r0, [pc, #24]	; (8000204 <register_tm_clones+0x1c>)
 80001ec:	1a09      	subs	r1, r1, r0
 80001ee:	1089      	asrs	r1, r1, #2
 80001f0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001f4:	1049      	asrs	r1, r1, #1
 80001f6:	d002      	beq.n	80001fe <register_tm_clones+0x16>
 80001f8:	4b03      	ldr	r3, [pc, #12]	; (8000208 <register_tm_clones+0x20>)
 80001fa:	b103      	cbz	r3, 80001fe <register_tm_clones+0x16>
 80001fc:	4718      	bx	r3
 80001fe:	4770      	bx	lr
 8000200:	20000810 	.word	0x20000810
 8000204:	20000810 	.word	0x20000810
 8000208:	00000000 	.word	0x00000000

0800020c <__do_global_dtors_aux>:
 800020c:	b510      	push	{r4, lr}
 800020e:	4c06      	ldr	r4, [pc, #24]	; (8000228 <__do_global_dtors_aux+0x1c>)
 8000210:	7823      	ldrb	r3, [r4, #0]
 8000212:	b943      	cbnz	r3, 8000226 <__do_global_dtors_aux+0x1a>
 8000214:	f7ff ffd8 	bl	80001c8 <deregister_tm_clones>
 8000218:	4b04      	ldr	r3, [pc, #16]	; (800022c <__do_global_dtors_aux+0x20>)
 800021a:	b113      	cbz	r3, 8000222 <__do_global_dtors_aux+0x16>
 800021c:	4804      	ldr	r0, [pc, #16]	; (8000230 <__do_global_dtors_aux+0x24>)
 800021e:	f3af 8000 	nop.w
 8000222:	2301      	movs	r3, #1
 8000224:	7023      	strb	r3, [r4, #0]
 8000226:	bd10      	pop	{r4, pc}
 8000228:	20000810 	.word	0x20000810
 800022c:	00000000 	.word	0x00000000
 8000230:	08013560 	.word	0x08013560

08000234 <frame_dummy>:
 8000234:	b508      	push	{r3, lr}
 8000236:	4b08      	ldr	r3, [pc, #32]	; (8000258 <frame_dummy+0x24>)
 8000238:	b11b      	cbz	r3, 8000242 <frame_dummy+0xe>
 800023a:	4908      	ldr	r1, [pc, #32]	; (800025c <frame_dummy+0x28>)
 800023c:	4808      	ldr	r0, [pc, #32]	; (8000260 <frame_dummy+0x2c>)
 800023e:	f3af 8000 	nop.w
 8000242:	4808      	ldr	r0, [pc, #32]	; (8000264 <frame_dummy+0x30>)
 8000244:	6803      	ldr	r3, [r0, #0]
 8000246:	b913      	cbnz	r3, 800024e <frame_dummy+0x1a>
 8000248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800024c:	e7cc      	b.n	80001e8 <register_tm_clones>
 800024e:	4b06      	ldr	r3, [pc, #24]	; (8000268 <frame_dummy+0x34>)
 8000250:	2b00      	cmp	r3, #0
 8000252:	d0f9      	beq.n	8000248 <frame_dummy+0x14>
 8000254:	4798      	blx	r3
 8000256:	e7f7      	b.n	8000248 <frame_dummy+0x14>
 8000258:	00000000 	.word	0x00000000
 800025c:	20000814 	.word	0x20000814
 8000260:	08013560 	.word	0x08013560
 8000264:	20000810 	.word	0x20000810
 8000268:	00000000 	.word	0x00000000

0800026c <memcpy>:
 800026c:	4684      	mov	ip, r0
 800026e:	ea41 0300 	orr.w	r3, r1, r0
 8000272:	f013 0303 	ands.w	r3, r3, #3
 8000276:	d16d      	bne.n	8000354 <memcpy+0xe8>
 8000278:	3a40      	subs	r2, #64	; 0x40
 800027a:	d341      	bcc.n	8000300 <memcpy+0x94>
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	f851 3b04 	ldr.w	r3, [r1], #4
 8000298:	f840 3b04 	str.w	r3, [r0], #4
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a8:	f840 3b04 	str.w	r3, [r0], #4
 80002ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b0:	f840 3b04 	str.w	r3, [r0], #4
 80002b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b8:	f840 3b04 	str.w	r3, [r0], #4
 80002bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c0:	f840 3b04 	str.w	r3, [r0], #4
 80002c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c8:	f840 3b04 	str.w	r3, [r0], #4
 80002cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d0:	f840 3b04 	str.w	r3, [r0], #4
 80002d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d8:	f840 3b04 	str.w	r3, [r0], #4
 80002dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e0:	f840 3b04 	str.w	r3, [r0], #4
 80002e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e8:	f840 3b04 	str.w	r3, [r0], #4
 80002ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f0:	f840 3b04 	str.w	r3, [r0], #4
 80002f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f8:	f840 3b04 	str.w	r3, [r0], #4
 80002fc:	3a40      	subs	r2, #64	; 0x40
 80002fe:	d2bd      	bcs.n	800027c <memcpy+0x10>
 8000300:	3230      	adds	r2, #48	; 0x30
 8000302:	d311      	bcc.n	8000328 <memcpy+0xbc>
 8000304:	f851 3b04 	ldr.w	r3, [r1], #4
 8000308:	f840 3b04 	str.w	r3, [r0], #4
 800030c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000310:	f840 3b04 	str.w	r3, [r0], #4
 8000314:	f851 3b04 	ldr.w	r3, [r1], #4
 8000318:	f840 3b04 	str.w	r3, [r0], #4
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	3a10      	subs	r2, #16
 8000326:	d2ed      	bcs.n	8000304 <memcpy+0x98>
 8000328:	320c      	adds	r2, #12
 800032a:	d305      	bcc.n	8000338 <memcpy+0xcc>
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	3a04      	subs	r2, #4
 8000336:	d2f9      	bcs.n	800032c <memcpy+0xc0>
 8000338:	3204      	adds	r2, #4
 800033a:	d008      	beq.n	800034e <memcpy+0xe2>
 800033c:	07d2      	lsls	r2, r2, #31
 800033e:	bf1c      	itt	ne
 8000340:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000344:	f800 3b01 	strbne.w	r3, [r0], #1
 8000348:	d301      	bcc.n	800034e <memcpy+0xe2>
 800034a:	880b      	ldrh	r3, [r1, #0]
 800034c:	8003      	strh	r3, [r0, #0]
 800034e:	4660      	mov	r0, ip
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	2a08      	cmp	r2, #8
 8000356:	d313      	bcc.n	8000380 <memcpy+0x114>
 8000358:	078b      	lsls	r3, r1, #30
 800035a:	d08d      	beq.n	8000278 <memcpy+0xc>
 800035c:	f010 0303 	ands.w	r3, r0, #3
 8000360:	d08a      	beq.n	8000278 <memcpy+0xc>
 8000362:	f1c3 0304 	rsb	r3, r3, #4
 8000366:	1ad2      	subs	r2, r2, r3
 8000368:	07db      	lsls	r3, r3, #31
 800036a:	bf1c      	itt	ne
 800036c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000370:	f800 3b01 	strbne.w	r3, [r0], #1
 8000374:	d380      	bcc.n	8000278 <memcpy+0xc>
 8000376:	f831 3b02 	ldrh.w	r3, [r1], #2
 800037a:	f820 3b02 	strh.w	r3, [r0], #2
 800037e:	e77b      	b.n	8000278 <memcpy+0xc>
 8000380:	3a04      	subs	r2, #4
 8000382:	d3d9      	bcc.n	8000338 <memcpy+0xcc>
 8000384:	3a01      	subs	r2, #1
 8000386:	f811 3b01 	ldrb.w	r3, [r1], #1
 800038a:	f800 3b01 	strb.w	r3, [r0], #1
 800038e:	d2f9      	bcs.n	8000384 <memcpy+0x118>
 8000390:	780b      	ldrb	r3, [r1, #0]
 8000392:	7003      	strb	r3, [r0, #0]
 8000394:	784b      	ldrb	r3, [r1, #1]
 8000396:	7043      	strb	r3, [r0, #1]
 8000398:	788b      	ldrb	r3, [r1, #2]
 800039a:	7083      	strb	r3, [r0, #2]
 800039c:	4660      	mov	r0, ip
 800039e:	4770      	bx	lr

080003a0 <NMI_Handler>:
 80003a0:	4770      	bx	lr

080003a2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80003a2:	e7fe      	b.n	80003a2 <HardFault_Handler>

080003a4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80003a4:	e7fe      	b.n	80003a4 <MemManage_Handler>

080003a6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80003a6:	e7fe      	b.n	80003a6 <BusFault_Handler>

080003a8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80003a8:	e7fe      	b.n	80003a8 <UsageFault_Handler>

080003aa <DebugMon_Handler>:
 80003aa:	4770      	bx	lr

080003ac <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80003ac:	b508      	push	{r3, lr}
  HAL_IncTick();
 80003ae:	f002 ff91 	bl	80032d4 <HAL_IncTick>
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80003b2:	f001 fabd 	bl	8001930 <xTaskGetSchedulerState>
 80003b6:	2801      	cmp	r0, #1
 80003b8:	d003      	beq.n	80003c2 <SysTick_Handler+0x16>
  {
    xPortSysTickHandler();
  }
}
 80003ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void SysTick_Handler(void)
{
  HAL_IncTick();
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
    xPortSysTickHandler();
 80003be:	f001 bd6f 	b.w	8001ea0 <xPortSysTickHandler>
 80003c2:	bd08      	pop	{r3, pc}

080003c4 <OTG_HS_IRQHandler>:
 80003c4:	4770      	bx	lr
	...

080003c8 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hltdc);
 80003c8:	4801      	ldr	r0, [pc, #4]	; (80003d0 <LTDC_IRQHandler+0x8>)
 80003ca:	f003 ba34 	b.w	8003836 <HAL_LTDC_IRQHandler>
 80003ce:	bf00      	nop
 80003d0:	200286e0 	.word	0x200286e0

080003d4 <EXTI9_5_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI9_5_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8); 
 80003d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003d8:	f003 b884 	b.w	80034e4 <HAL_GPIO_EXTI_IRQHandler>

080003dc <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles DMA2 Stream 5 interrupt request.
  * @param  None
  * @retval None
  */
void DMA2_Stream4_IRQHandler(void)
{
 80003dc:	4770      	bx	lr

080003de <_cbDialog>:
  int NCode;
  int Id;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
 80003de:	6802      	ldr	r2, [r0, #0]
 80003e0:	2a26      	cmp	r2, #38	; 0x26
 80003e2:	d102      	bne.n	80003ea <_cbDialog+0xc>
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
 80003e4:	6880      	ldr	r0, [r0, #8]
 80003e6:	f007 b94d 	b.w	8007684 <WM_GetId>
    }
    break;
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
 80003ea:	f008 baf7 	b.w	80089dc <WM_DefaultProc>
	...

080003f0 <CreateWindow>:
/*********************************************************************
*
*       CreateWindow
*/
WM_HWIN CreateWindow(void);
WM_HWIN CreateWindow(void) {
 80003f0:	b507      	push	{r0, r1, r2, lr}
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 80003f2:	f007 f975 	bl	80076e0 <WM_GetDesktopWindow>
 80003f6:	2300      	movs	r3, #0
 80003f8:	4a05      	ldr	r2, [pc, #20]	; (8000410 <CreateWindow+0x20>)
 80003fa:	2102      	movs	r1, #2
 80003fc:	9301      	str	r3, [sp, #4]
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	4603      	mov	r3, r0
 8000402:	4804      	ldr	r0, [pc, #16]	; (8000414 <CreateWindow+0x24>)
 8000404:	f006 f95b 	bl	80066be <GUI_CreateDialogBox>
  return hWin;
}
 8000408:	b003      	add	sp, #12
 800040a:	f85d fb04 	ldr.w	pc, [sp], #4
 800040e:	bf00      	nop
 8000410:	080003df 	.word	0x080003df
 8000414:	080649e4 	.word	0x080649e4

08000418 <MainTask>:

// USER START (Optionally insert additional public code)
void MainTask(void) {
 8000418:	b508      	push	{r3, lr}
  GUI_Clear();
 800041a:	f00d fbfd 	bl	800dc18 <GUI_Clear>
  CreateWindow();
  /*while(1);*/
}
 800041e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

// USER START (Optionally insert additional public code)
void MainTask(void) {
  GUI_Clear();
  CreateWindow();
 8000422:	f7ff bfe5 	b.w	80003f0 <CreateWindow>
	...

08000428 <k_BspInit>:
  * @brief  Initializes LEDs, SDRAM, touch screen, CRC and SRAM.
  * @param  None 
  * @retval None
  */
void k_BspInit(void)
{
 8000428:	b507      	push	{r0, r1, r2, lr}
  
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800042a:	f004 f8ab 	bl	8004584 <BSP_SDRAM_Init>
  
  BSP_LED_Init(LED1);
 800042e:	2000      	movs	r0, #0
 8000430:	f004 fad6 	bl	80049e0 <BSP_LED_Init>
  
  /* Initialize the Touch screen */
  BSP_TS_Init(420, 272);
 8000434:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000438:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800043c:	f004 f8e0 	bl	8004600 <BSP_TS_Init>

  /* Enable CRC to Unlock GUI */
 __HAL_RCC_CRC_CLK_ENABLE();
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <k_BspInit+0x4c>)
 8000442:	2100      	movs	r1, #0
 8000444:	9100      	str	r1, [sp, #0]
 8000446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000448:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800044c:	631a      	str	r2, [r3, #48]	; 0x30
 800044e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000450:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000454:	9200      	str	r2, [sp, #0]
 8000456:	9a00      	ldr	r2, [sp, #0]
  
 /* Enable Back up SRAM */
__HAL_RCC_BKPSRAM_CLK_ENABLE();
 8000458:	9101      	str	r1, [sp, #4]
 800045a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800045c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000460:	631a      	str	r2, [r3, #48]	; 0x30
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000468:	9301      	str	r3, [sp, #4]
 800046a:	9b01      	ldr	r3, [sp, #4]
  
}
 800046c:	b003      	add	sp, #12
 800046e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000472:	bf00      	nop
 8000474:	40023800 	.word	0x40023800

08000478 <k_TouchUpdate>:
  *         value to the variables u32_TSXCoordinate and u32_TSYCoordinate
  * @param  None
  * @retval None
  */
void k_TouchUpdate(void)
{
 8000478:	b570      	push	{r4, r5, r6, lr}
 800047a:	b08c      	sub	sp, #48	; 0x30
  static GUI_PID_STATE TS_State = {0, 0, 0, 0};
  __IO TS_StateTypeDef  ts;
  uint16_t xDiff, yDiff;  

  BSP_TS_GetState((TS_StateTypeDef *)&ts);
 800047c:	a801      	add	r0, sp, #4
 800047e:	f004 f915 	bl	80046ac <BSP_TS_GetState>

  if((ts.touchX[0] >= LCD_GetXSize()) ||(ts.touchY[0] >= LCD_GetYSize()) ) 
 8000482:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 8000486:	f00b f8cb 	bl	800b620 <LCD_GetXSize>
 800048a:	b2a4      	uxth	r4, r4
 800048c:	4284      	cmp	r4, r0
 800048e:	db07      	blt.n	80004a0 <k_TouchUpdate+0x28>
  {
    ts.touchX[0] = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	f8ad 3006 	strh.w	r3, [sp, #6]
    ts.touchY[0] = 0;
 8000496:	f8ad 3010 	strh.w	r3, [sp, #16]
    ts.touchDetected =0;
 800049a:	f88d 3004 	strb.w	r3, [sp, #4]
 800049e:	e006      	b.n	80004ae <k_TouchUpdate+0x36>
  __IO TS_StateTypeDef  ts;
  uint16_t xDiff, yDiff;  

  BSP_TS_GetState((TS_StateTypeDef *)&ts);

  if((ts.touchX[0] >= LCD_GetXSize()) ||(ts.touchY[0] >= LCD_GetYSize()) ) 
 80004a0:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 80004a4:	f00b f8c4 	bl	800b630 <LCD_GetYSize>
 80004a8:	b2a4      	uxth	r4, r4
 80004aa:	4284      	cmp	r4, r0
 80004ac:	daf0      	bge.n	8000490 <k_TouchUpdate+0x18>
    ts.touchX[0] = 0;
    ts.touchY[0] = 0;
    ts.touchDetected =0;
  }

  xDiff = (TS_State.x > ts.touchX[0]) ? (TS_State.x - ts.touchX[0]) : (ts.touchX[0] - TS_State.x);
 80004ae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80004b2:	4b21      	ldr	r3, [pc, #132]	; (8000538 <k_TouchUpdate+0xc0>)
 80004b4:	b292      	uxth	r2, r2
 80004b6:	6818      	ldr	r0, [r3, #0]
  yDiff = (TS_State.y > ts.touchY[0]) ? (TS_State.y - ts.touchY[0]) : (ts.touchY[0] - TS_State.y);
  
  
  if((TS_State.Pressed != ts.touchDetected ) ||
 80004b8:	7a1c      	ldrb	r4, [r3, #8]
    ts.touchX[0] = 0;
    ts.touchY[0] = 0;
    ts.touchDetected =0;
  }

  xDiff = (TS_State.x > ts.touchX[0]) ? (TS_State.x - ts.touchX[0]) : (ts.touchX[0] - TS_State.x);
 80004ba:	4290      	cmp	r0, r2
 80004bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  yDiff = (TS_State.y > ts.touchY[0]) ? (TS_State.y - ts.touchY[0]) : (ts.touchY[0] - TS_State.y);
 80004c0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    ts.touchX[0] = 0;
    ts.touchY[0] = 0;
    ts.touchDetected =0;
  }

  xDiff = (TS_State.x > ts.touchX[0]) ? (TS_State.x - ts.touchX[0]) : (ts.touchX[0] - TS_State.x);
 80004c4:	bfcc      	ite	gt
 80004c6:	1a80      	subgt	r0, r0, r2
 80004c8:	1a10      	suble	r0, r2, r0
  yDiff = (TS_State.y > ts.touchY[0]) ? (TS_State.y - ts.touchY[0]) : (ts.touchY[0] - TS_State.y);
 80004ca:	b289      	uxth	r1, r1
 80004cc:	685a      	ldr	r2, [r3, #4]
    ts.touchX[0] = 0;
    ts.touchY[0] = 0;
    ts.touchDetected =0;
  }

  xDiff = (TS_State.x > ts.touchX[0]) ? (TS_State.x - ts.touchX[0]) : (ts.touchX[0] - TS_State.x);
 80004ce:	b280      	uxth	r0, r0
  yDiff = (TS_State.y > ts.touchY[0]) ? (TS_State.y - ts.touchY[0]) : (ts.touchY[0] - TS_State.y);
 80004d0:	428a      	cmp	r2, r1
 80004d2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80004d6:	bfcc      	ite	gt
 80004d8:	1a52      	subgt	r2, r2, r1
 80004da:	1a8a      	suble	r2, r1, r2
  
  
  if((TS_State.Pressed != ts.touchDetected ) ||
 80004dc:	f89d 1004 	ldrb.w	r1, [sp, #4]
    ts.touchY[0] = 0;
    ts.touchDetected =0;
  }

  xDiff = (TS_State.x > ts.touchX[0]) ? (TS_State.x - ts.touchX[0]) : (ts.touchX[0] - TS_State.x);
  yDiff = (TS_State.y > ts.touchY[0]) ? (TS_State.y - ts.touchY[0]) : (ts.touchY[0] - TS_State.y);
 80004e0:	b292      	uxth	r2, r2
  
  
  if((TS_State.Pressed != ts.touchDetected ) ||
 80004e2:	428c      	cmp	r4, r1
 80004e4:	d103      	bne.n	80004ee <k_TouchUpdate+0x76>
 80004e6:	281e      	cmp	r0, #30
 80004e8:	d801      	bhi.n	80004ee <k_TouchUpdate+0x76>
     (xDiff > 30 )||
 80004ea:	2a1e      	cmp	r2, #30
 80004ec:	d921      	bls.n	8000532 <k_TouchUpdate+0xba>
      (yDiff > 30))
  {
    TS_State.Pressed = ts.touchDetected;
 80004ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
    TS_State.Layer = 0;//SelLayer;
 80004f2:	2600      	movs	r6, #0
  
  if((TS_State.Pressed != ts.touchDetected ) ||
     (xDiff > 30 )||
      (yDiff > 30))
  {
    TS_State.Pressed = ts.touchDetected;
 80004f4:	4c10      	ldr	r4, [pc, #64]	; (8000538 <k_TouchUpdate+0xc0>)
 80004f6:	721a      	strb	r2, [r3, #8]
    TS_State.Layer = 0;//SelLayer;
 80004f8:	725e      	strb	r6, [r3, #9]
    if(ts.touchDetected) 
 80004fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80004fe:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8000502:	b173      	cbz	r3, 8000522 <k_TouchUpdate+0xaa>
    {
      TS_State.x = ts.touchX[0];
 8000504:	f8bd 3006 	ldrh.w	r3, [sp, #6]
      TS_State.y = ts.touchY[0];
      GUI_TOUCH_StoreStateEx(&TS_State);
 8000508:	4620      	mov	r0, r4
  {
    TS_State.Pressed = ts.touchDetected;
    TS_State.Layer = 0;//SelLayer;
    if(ts.touchDetected) 
    {
      TS_State.x = ts.touchX[0];
 800050a:	b29b      	uxth	r3, r3
 800050c:	6023      	str	r3, [r4, #0]
      TS_State.y = ts.touchY[0];
 800050e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8000512:	b29b      	uxth	r3, r3
 8000514:	6063      	str	r3, [r4, #4]
      GUI_TOUCH_StoreStateEx(&TS_State);
 8000516:	f00c fadd 	bl	800cad4 <GUI_TOUCH_StoreStateEx>
      BSP_LED_On(LED1);
 800051a:	4630      	mov	r0, r6
 800051c:	f004 fa86 	bl	8004a2c <BSP_LED_On>
 8000520:	e007      	b.n	8000532 <k_TouchUpdate+0xba>
    }
    else
    {
      GUI_TOUCH_StoreStateEx(&TS_State);
 8000522:	4620      	mov	r0, r4
 8000524:	f00c fad6 	bl	800cad4 <GUI_TOUCH_StoreStateEx>
      TS_State.x = 0;
      TS_State.y = 0;
      BSP_LED_Off(LED1);
 8000528:	4628      	mov	r0, r5
      BSP_LED_On(LED1);
    }
    else
    {
      GUI_TOUCH_StoreStateEx(&TS_State);
      TS_State.x = 0;
 800052a:	6025      	str	r5, [r4, #0]
      TS_State.y = 0;
 800052c:	6065      	str	r5, [r4, #4]
      BSP_LED_Off(LED1);
 800052e:	f004 fa87 	bl	8004a40 <BSP_LED_Off>
    }
  }
}
 8000532:	b00c      	add	sp, #48	; 0x30
 8000534:	bd70      	pop	{r4, r5, r6, pc}
 8000536:	bf00      	nop
 8000538:	2000082c 	.word	0x2000082c

0800053c <HAL_MspInit>:
 800053c:	4770      	bx	lr
	...

08000540 <GUI_X_Config>:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) 
{
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8000540:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000544:	4801      	ldr	r0, [pc, #4]	; (800054c <GUI_X_Config+0xc>)
 8000546:	f00d bf3d 	b.w	800e3c4 <GUI_ALLOC_AssignMemory>
 800054a:	bf00      	nop
 800054c:	200086dc 	.word	0x200086dc

08000550 <TimerCallback>:
  * @param  n: Timer index 
  * @retval None
  */
static void TimerCallback(void const *n)
{  
  k_TouchUpdate();
 8000550:	f7ff bf92 	b.w	8000478 <k_TouchUpdate>

08000554 <GUIThread>:
  */
static void GUIThread(void const * argument)
{   
  
  /* Demo Startup */  
  GUI_DispStringAt("Starting...", 0, 0);
 8000554:	2200      	movs	r2, #0
 8000556:	4808      	ldr	r0, [pc, #32]	; (8000578 <GUIThread+0x24>)
  * @brief  Start task
  * @param  argument: pointer that is passed to the thread function as start argument.
  * @retval None
  */
static void GUIThread(void const * argument)
{   
 8000558:	b508      	push	{r3, lr}
  
  /* Demo Startup */  
  GUI_DispStringAt("Starting...", 0, 0);
 800055a:	4611      	mov	r1, r2
 800055c:	f00d f934 	bl	800d7c8 <GUI_DispStringAt>
  
  /* Activate the use of memory device feature */
  WM_SetCreateFlags(WM_CF_MEMDEV);
 8000560:	2004      	movs	r0, #4
 8000562:	f006 fe3f 	bl	80071e4 <WM_SetCreateFlags>
    
  MainTask();
 8000566:	f7ff ff57 	bl	8000418 <MainTask>
  
  /* Gui background Task */
  while(1) {
    GUI_Exec(); /* Do the background work ... Update windows etc.) */
 800056a:	f00c fdfd 	bl	800d168 <GUI_Exec>
    osDelay(20); /* Nothing left to do for the moment ... Idle processing */
 800056e:	2014      	movs	r0, #20
 8000570:	f001 fab6 	bl	8001ae0 <osDelay>
 8000574:	e7f9      	b.n	800056a <GUIThread+0x16>
 8000576:	bf00      	nop
 8000578:	08064a1c 	.word	0x08064a1c

0800057c <HAL_Delay>:
  * @param Delay: specifies the delay duration in milliseconds.
  * @retval None
  */

void HAL_Delay (__IO uint32_t Delay)
{
 800057c:	b082      	sub	sp, #8
  while(Delay) 
  {
    if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) 
 800057e:	4a06      	ldr	r2, [pc, #24]	; (8000598 <HAL_Delay+0x1c>)
  * @param Delay: specifies the delay duration in milliseconds.
  * @retval None
  */

void HAL_Delay (__IO uint32_t Delay)
{
 8000580:	9001      	str	r0, [sp, #4]
  while(Delay) 
 8000582:	9b01      	ldr	r3, [sp, #4]
 8000584:	b133      	cbz	r3, 8000594 <HAL_Delay+0x18>
  {
    if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) 
 8000586:	6813      	ldr	r3, [r2, #0]
 8000588:	03db      	lsls	r3, r3, #15
 800058a:	d5fa      	bpl.n	8000582 <HAL_Delay+0x6>
    {
      Delay--;
 800058c:	9b01      	ldr	r3, [sp, #4]
 800058e:	3b01      	subs	r3, #1
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	e7f6      	b.n	8000582 <HAL_Delay+0x6>
    }
  }
}
 8000594:	b002      	add	sp, #8
 8000596:	4770      	bx	lr
 8000598:	e000e010 	.word	0xe000e010

0800059c <k_SetGuiProfile>:
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
}

/* Set gui profile*/
void k_SetGuiProfile(void) 
{
 800059c:	b510      	push	{r4, lr}
  BUTTON_SetDefaultSkin(BUTTON_SKIN_FLEX);
 800059e:	4833      	ldr	r0, [pc, #204]	; (800066c <k_SetGuiProfile+0xd0>)
 80005a0:	f006 fa5e 	bl	8006a60 <BUTTON_SetDefaultSkin>
  DROPDOWN_SetDefaultSkin(DROPDOWN_SKIN_FLEX);
 80005a4:	4832      	ldr	r0, [pc, #200]	; (8000670 <k_SetGuiProfile+0xd4>)
  
  FRAMEWIN_SetDefaultTextColor(0, GUI_WHITE);
  FRAMEWIN_SetDefaultTextColor(1, GUI_WHITE);      
  
  FRAMEWIN_SetDefaultBarColor(0, GUI_STCOLOR_LIGHTBLUE);
 80005a6:	4c33      	ldr	r4, [pc, #204]	; (8000674 <k_SetGuiProfile+0xd8>)

/* Set gui profile*/
void k_SetGuiProfile(void) 
{
  BUTTON_SetDefaultSkin(BUTTON_SKIN_FLEX);
  DROPDOWN_SetDefaultSkin(DROPDOWN_SKIN_FLEX);
 80005a8:	f006 f858 	bl	800665c <DROPDOWN_SetDefaultSkin>
  
  FRAMEWIN_SetDefaultTextColor(0, GUI_WHITE);
 80005ac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80005b0:	2000      	movs	r0, #0
 80005b2:	f005 fec9 	bl	8006348 <FRAMEWIN_SetDefaultTextColor>
  FRAMEWIN_SetDefaultTextColor(1, GUI_WHITE);      
 80005b6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80005ba:	2001      	movs	r0, #1
 80005bc:	f005 fec4 	bl	8006348 <FRAMEWIN_SetDefaultTextColor>
  
  FRAMEWIN_SetDefaultBarColor(0, GUI_STCOLOR_LIGHTBLUE);
 80005c0:	4621      	mov	r1, r4
 80005c2:	2000      	movs	r0, #0
 80005c4:	f005 feaa 	bl	800631c <FRAMEWIN_SetDefaultBarColor>
  FRAMEWIN_SetDefaultBarColor(1, GUI_STCOLOR_LIGHTBLUE);
 80005c8:	4621      	mov	r1, r4
 80005ca:	2001      	movs	r0, #1
 80005cc:	f005 fea6 	bl	800631c <FRAMEWIN_SetDefaultBarColor>
  
  FRAMEWIN_SetDefaultFont(&GUI_FontAvantGarde20B);
 80005d0:	4829      	ldr	r0, [pc, #164]	; (8000678 <k_SetGuiProfile+0xdc>)
 80005d2:	f005 fe9d 	bl	8006310 <FRAMEWIN_SetDefaultFont>
  
  FRAMEWIN_SetDefaultClientColor(GUI_WHITE);  
 80005d6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80005da:	f005 fea9 	bl	8006330 <FRAMEWIN_SetDefaultClientColor>
  FRAMEWIN_SetDefaultTitleHeight(25);
 80005de:	2019      	movs	r0, #25
 80005e0:	f005 feac 	bl	800633c <FRAMEWIN_SetDefaultTitleHeight>
  
  
  WINDOW_SetDefaultBkColor(GUI_WHITE);
 80005e4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80005e8:	f005 fb12 	bl	8005c10 <WINDOW_SetDefaultBkColor>
  
  LISTVIEW_SetDefaultGridColor(GUI_WHITE);
 80005ec:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80005f0:	f005 fdda 	bl	80061a8 <LISTVIEW_SetDefaultGridColor>
  LISTVIEW_SetDefaultBkColor(LISTVIEW_CI_SEL, GUI_STCOLOR_LIGHTBLUE);
 80005f4:	4621      	mov	r1, r4
 80005f6:	2001      	movs	r0, #1
 80005f8:	f005 fdca 	bl	8006190 <LISTVIEW_SetDefaultBkColor>
  DROPDOWN_SetDefaultColor(DROPDOWN_CI_SEL, GUI_STCOLOR_LIGHTBLUE);
 80005fc:	4621      	mov	r1, r4
 80005fe:	2001      	movs	r0, #1
 8000600:	f006 f83a 	bl	8006678 <DROPDOWN_SetDefaultColor>
  LISTVIEW_SetDefaultBkColor(LISTVIEW_CI_SELFOCUS, GUI_STCOLOR_LIGHTBLUE);
 8000604:	4621      	mov	r1, r4
 8000606:	2002      	movs	r0, #2
 8000608:	f005 fdc2 	bl	8006190 <LISTVIEW_SetDefaultBkColor>
  DROPDOWN_SetDefaultColor(DROPDOWN_CI_SELFOCUS, GUI_STCOLOR_LIGHTBLUE);
 800060c:	4621      	mov	r1, r4
 800060e:	2002      	movs	r0, #2
 8000610:	f006 f832 	bl	8006678 <DROPDOWN_SetDefaultColor>
  SCROLLBAR_SetDefaultWidth(8);
 8000614:	2008      	movs	r0, #8
 8000616:	f005 fd8f 	bl	8006138 <SCROLLBAR_SetDefaultWidth>
  SCROLLBAR_SetDefaultSTSkin();
 800061a:	f005 faf1 	bl	8005c00 <SCROLLBAR_SetDefaultSTSkin>
  
  HEADER_SetDefaultBkColor(GUI_STCOLOR_LIGHTBLUE);
 800061e:	4620      	mov	r0, r4
 8000620:	f005 fdca 	bl	80061b8 <HEADER_SetDefaultBkColor>
  HEADER_SetDefaultTextColor(GUI_WHITE);
 8000624:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000628:	f005 fdce 	bl	80061c8 <HEADER_SetDefaultTextColor>
  HEADER_SetDefaultFont(GUI_FONT_16_1);
 800062c:	4813      	ldr	r0, [pc, #76]	; (800067c <k_SetGuiProfile+0xe0>)
 800062e:	f005 fdd3 	bl	80061d8 <HEADER_SetDefaultFont>
  HEADER_SetDefaultSTSkin();
 8000632:	f005 f9bd 	bl	80059b0 <HEADER_SetDefaultSTSkin>
  SCROLLBAR_SetDefaultColor(GUI_STCOLOR_LIGHTBLUE, SCROLLBAR_CI_THUMB);  
 8000636:	2100      	movs	r1, #0
 8000638:	4620      	mov	r0, r4
 800063a:	f005 fd85 	bl	8006148 <SCROLLBAR_SetDefaultColor>
  SCROLLBAR_SetDefaultColor(GUI_STCOLOR_LIGHTBLUE, SCROLLBAR_CI_SHAFT);  
 800063e:	2101      	movs	r1, #1
 8000640:	4620      	mov	r0, r4
 8000642:	f005 fd81 	bl	8006148 <SCROLLBAR_SetDefaultColor>
  SCROLLBAR_SetDefaultColor(GUI_STCOLOR_LIGHTBLUE, SCROLLBAR_CI_ARROW);    
 8000646:	2102      	movs	r1, #2
 8000648:	4620      	mov	r0, r4
 800064a:	f005 fd7d 	bl	8006148 <SCROLLBAR_SetDefaultColor>
  CHOOSEFILE_SetDelim('/');
 800064e:	202f      	movs	r0, #47	; 0x2f
 8000650:	f006 f88a 	bl	8006768 <CHOOSEFILE_SetDelim>
  GUI_SetDefaultFont(GUI_FONT_20_ASCII);
 8000654:	480a      	ldr	r0, [pc, #40]	; (8000680 <k_SetGuiProfile+0xe4>)
 8000656:	f00d faa3 	bl	800dba0 <GUI_SetDefaultFont>
  
  TEXT_SetDefaultTextColor(GUI_STCOLOR_LIGHTBLUE);
 800065a:	4620      	mov	r0, r4
 800065c:	f005 fd66 	bl	800612c <TEXT_SetDefaultTextColor>
  TEXT_SetDefaultFont(&GUI_FontLubalGraph20);
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <k_SetGuiProfile+0xe8>)
}
 8000662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SCROLLBAR_SetDefaultColor(GUI_STCOLOR_LIGHTBLUE, SCROLLBAR_CI_ARROW);    
  CHOOSEFILE_SetDelim('/');
  GUI_SetDefaultFont(GUI_FONT_20_ASCII);
  
  TEXT_SetDefaultTextColor(GUI_STCOLOR_LIGHTBLUE);
  TEXT_SetDefaultFont(&GUI_FontLubalGraph20);
 8000666:	f005 bd5b 	b.w	8006120 <TEXT_SetDefaultFont>
 800066a:	bf00      	nop
 800066c:	08006775 	.word	0x08006775
 8000670:	080063a1 	.word	0x080063a1
 8000674:	00dca939 	.word	0x00dca939
 8000678:	08057130 	.word	0x08057130
 800067c:	08065b10 	.word	0x08065b10
 8000680:	08065420 	.word	0x08065420
 8000684:	0803257c 	.word	0x0803257c

08000688 <main>:
* @brief  Main program
* @param  None
* @retval int
*/
int main(void)
{   
 8000688:	b5f0      	push	{r4, r5, r6, r7, lr}
  * @retval None
  */
__STATIC_INLINE void HAL_MPU_Disable(void)
{
  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800068a:	4c5e      	ldr	r4, [pc, #376]	; (8000804 <main+0x17c>)
 800068c:	b093      	sub	sp, #76	; 0x4c
  
  /* Disable the MPU */
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 800068e:	4e5e      	ldr	r6, [pc, #376]	; (8000808 <main+0x180>)
  /* Configure the MPU attributes as WT for SRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x20010000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000690:	2500      	movs	r5, #0
  * @retval None
  */
__STATIC_INLINE void HAL_MPU_Disable(void)
{
  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000692:	6a63      	ldr	r3, [r4, #36]	; 0x24
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000694:	a806      	add	r0, sp, #24
  /* Disable the MPU */
  HAL_MPU_Disable();

  /* Configure the MPU attributes as WT for SRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x20010000;
 8000696:	4a5d      	ldr	r2, [pc, #372]	; (800080c <main+0x184>)
 8000698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800069c:	6263      	str	r3, [r4, #36]	; 0x24
  
  /* Disable the MPU */
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
 800069e:	6873      	ldr	r3, [r6, #4]
 80006a0:	f023 0301 	bic.w	r3, r3, #1
 80006a4:	6073      	str	r3, [r6, #4]
  
  /* Disable the MPU */
  HAL_MPU_Disable();

  /* Configure the MPU attributes as WT for SRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80006a6:	2301      	movs	r3, #1
  MPU_InitStruct.BaseAddress = 0x20010000;
 80006a8:	9207      	str	r2, [sp, #28]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80006aa:	2211      	movs	r2, #17
  
  /* Disable the MPU */
  HAL_MPU_Disable();

  /* Configure the MPU attributes as WT for SRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80006ac:	f88d 3018 	strb.w	r3, [sp, #24]
  MPU_InitStruct.BaseAddress = 0x20010000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80006b0:	f88d 2020 	strb.w	r2, [sp, #32]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80006b4:	2203      	movs	r2, #3
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80006b6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26

  /* Configure the MPU attributes as WT for SRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x20010000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80006ba:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80006be:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80006c2:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80006c6:	f88d 5019 	strb.w	r5, [sp, #25]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80006ca:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
  MPU_InitStruct.SubRegionDisable = 0x00;
 80006ce:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80006d2:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80006d6:	f002 ff7d 	bl	80035d4 <HAL_MPU_ConfigRegion>
  * @retval None
  */
__STATIC_INLINE void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL   = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80006da:	2305      	movs	r3, #5
 80006dc:	6073      	str	r3, [r6, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80006de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006e4:	6263      	str	r3, [r4, #36]	; 0x24
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
  /* Enable branch prediction */
  SCB->CCR |= (1 <<18); 
 80006e6:	6963      	ldr	r3, [r4, #20]
 80006e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006ec:	6163      	str	r3, [r4, #20]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006ee:	f3bf 8f4f 	dsb	sy
 80006f2:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80006f6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006fa:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006fe:	6963      	ldr	r3, [r4, #20]
 8000700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000704:	6163      	str	r3, [r4, #20]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000706:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800070a:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 800070e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000712:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000716:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800071a:	f3c2 334e 	ubfx	r3, r2, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800071e:	f3c2 02c9 	ubfx	r2, r2, #3, #10
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000722:	0159      	lsls	r1, r3, #5
 8000724:	f643 70e0 	movw	r0, #16352	; 0x3fe0
 8000728:	4008      	ands	r0, r1
    ccsidr = SCB->CCSIDR;

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800072a:	4611      	mov	r1, r2
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800072c:	ea40 7681 	orr.w	r6, r0, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 8000730:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000734:	4d33      	ldr	r5, [pc, #204]	; (8000804 <main+0x17c>)
 8000736:	f8c4 6260 	str.w	r6, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
 800073a:	d2f7      	bcs.n	800072c <main+0xa4>
    } while(sets--);
 800073c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8000740:	d2ef      	bcs.n	8000722 <main+0x9a>
 8000742:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000746:	696b      	ldr	r3, [r5, #20]
 8000748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800074c:	616b      	str	r3, [r5, #20]
 800074e:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000752:	f3bf 8f6f 	isb	sy
  - Configure the Flash ART accelerator on ITCM interface
  - Configure the Systick to generate an interrupt each 1 msec
  - Set NVIC Group Priority to 4
  - Global MSP (MCU Support Package) initialization
  */
  HAL_Init();
 8000756:	f002 fdab 	bl	80032b0 <HAL_Init>
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800075a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2502      	movs	r5, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000760:	2701      	movs	r7, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000762:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000764:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000768:	a806      	add	r0, sp, #24
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076a:	9706      	str	r7, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076c:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 25;
 800076e:	2319      	movs	r3, #25
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000770:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000772:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000774:	f44f 73c8 	mov.w	r3, #400	; 0x190
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000778:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 400;
 800077a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800077c:	f002 fa78 	bl	8002c70 <HAL_RCC_OscConfig>
          
  ret = HAL_PWREx_EnableOverDrive();
 8000780:	f003 fa10 	bl	8003ba4 <HAL_PWREx_EnableOverDrive>

  if(ret != HAL_OK)
 8000784:	4604      	mov	r4, r0
 8000786:	b100      	cbz	r0, 800078a <main+0x102>
 8000788:	e7fe      	b.n	8000788 <main+0x100>
    while(1) { ; }
  }  
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800078a:	230f      	movs	r3, #15
  SystemClock_Config();
  
  k_BspInit();   
  
  /* Create GUI task */
  osThreadDef(GUI_Thread, GUIThread, osPriorityNormal, 0, 2048);
 800078c:	4e20      	ldr	r6, [pc, #128]	; (8000810 <main+0x188>)
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
 800078e:	2106      	movs	r1, #6
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	9003      	str	r0, [sp, #12]
    while(1) { ; }
  }  
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000792:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000794:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
 8000798:	a801      	add	r0, sp, #4
  }  
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800079c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800079e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  SystemClock_Config();
  
  k_BspInit();   
  
  /* Create GUI task */
  osThreadDef(GUI_Thread, GUIThread, osPriorityNormal, 0, 2048);
 80007a2:	ad06      	add	r5, sp, #24
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a4:	9305      	str	r3, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
 80007a6:	f002 fc3b 	bl	8003020 <HAL_RCC_ClockConfig>
  HAL_Init();
  
  /* Configure the system clock @ 200 Mhz */
  SystemClock_Config();
  
  k_BspInit();   
 80007aa:	f7ff fe3d 	bl	8000428 <k_BspInit>
  
  /* Create GUI task */
  osThreadDef(GUI_Thread, GUIThread, osPriorityNormal, 0, 2048);
 80007ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007b2:	6833      	ldr	r3, [r6, #0]
  osThreadCreate (osThread(GUI_Thread), NULL); 
 80007b4:	4621      	mov	r1, r4
 80007b6:	a806      	add	r0, sp, #24
  SystemClock_Config();
  
  k_BspInit();   
  
  /* Create GUI task */
  osThreadDef(GUI_Thread, GUIThread, osPriorityNormal, 0, 2048);
 80007b8:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(GUI_Thread), NULL); 
 80007ba:	f001 f974 	bl	8001aa6 <osThreadCreate>

  /* Initialize GUI */
  GUI_Init();   
 80007be:	f00d fa67 	bl	800dc90 <GUI_Init>
  
  WM_MULTIBUF_Enable(1);
 80007c2:	4638      	mov	r0, r7
 80007c4:	f006 fe80 	bl	80074c8 <WM_MULTIBUF_Enable>
  GUI_SetLayerVisEx (1, 0);
 80007c8:	4621      	mov	r1, r4
 80007ca:	4638      	mov	r0, r7
 80007cc:	f00c fa50 	bl	800cc70 <GUI_SetLayerVisEx>
  GUI_SelectLayer(0);
 80007d0:	4620      	mov	r0, r4
 80007d2:	f00c fa25 	bl	800cc20 <GUI_SelectLayer>
  
  GUI_SetBkColor(GUI_BLACK);
 80007d6:	4620      	mov	r0, r4
 80007d8:	f00c f9dc 	bl	800cb94 <GUI_SetBkColor>
  GUI_Clear();  
 80007dc:	f00d fa1c 	bl	800dc18 <GUI_Clear>

   /* Set General Graphical proprieties */
  k_SetGuiProfile();
 80007e0:	f7ff fedc 	bl	800059c <k_SetGuiProfile>
    
  /* Create Touch screen Timer */
  osTimerDef(TS_Timer, TimerCallback);
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <main+0x18c>)
  lcd_timer =  osTimerCreate(osTimer(TS_Timer), osTimerPeriodic, (void *)0);
 80007e6:	4622      	mov	r2, r4
 80007e8:	4639      	mov	r1, r7
 80007ea:	a801      	add	r0, sp, #4

   /* Set General Graphical proprieties */
  k_SetGuiProfile();
    
  /* Create Touch screen Timer */
  osTimerDef(TS_Timer, TimerCallback);
 80007ec:	9301      	str	r3, [sp, #4]
  lcd_timer =  osTimerCreate(osTimer(TS_Timer), osTimerPeriodic, (void *)0);
 80007ee:	f001 f97f 	bl	8001af0 <osTimerCreate>
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <main+0x190>)

  /* Start the TS Timer */
  osTimerStart(lcd_timer, 100);
 80007f4:	2164      	movs	r1, #100	; 0x64
   /* Set General Graphical proprieties */
  k_SetGuiProfile();
    
  /* Create Touch screen Timer */
  osTimerDef(TS_Timer, TimerCallback);
  lcd_timer =  osTimerCreate(osTimer(TS_Timer), osTimerPeriodic, (void *)0);
 80007f6:	6018      	str	r0, [r3, #0]

  /* Start the TS Timer */
  osTimerStart(lcd_timer, 100);
 80007f8:	f001 f98a 	bl	8001b10 <osTimerStart>

  /* Start scheduler */
  osKernelStart ();
 80007fc:	f001 f94e 	bl	8001a9c <osKernelStart>
 8000800:	e7fe      	b.n	8000800 <main+0x178>
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00
 8000808:	e000ed90 	.word	0xe000ed90
 800080c:	20010000 	.word	0x20010000
 8000810:	08013578 	.word	0x08013578
 8000814:	08000551 	.word	0x08000551
 8000818:	200286dc 	.word	0x200286dc

0800081c <GUI_X_Init>:
 800081c:	4770      	bx	lr
	...

08000820 <GUI_X_InitOS>:
* needs to be in GUIConf.h
*/

/* Init OS */
void GUI_X_InitOS(void)
{ 
 8000820:	b513      	push	{r0, r1, r4, lr}
  /* Create Mutex lock */
  osMutexDef(MUTEX);
 8000822:	2400      	movs	r4, #0
 8000824:	a802      	add	r0, sp, #8
 8000826:	f840 4d08 	str.w	r4, [r0, #-8]!
  
  /* Create the Mutex used by the two threads */
  osMutex = osMutexCreate(osMutex(MUTEX));
 800082a:	f001 f9d5 	bl	8001bd8 <osMutexCreate>
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <GUI_X_InitOS+0x28>)
  
  /* Create Semaphore lock */
  osSemaphoreDef(SEM);
  
  /* Create the Semaphore used by the two threads */
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);  
 8000830:	2101      	movs	r1, #1
{ 
  /* Create Mutex lock */
  osMutexDef(MUTEX);
  
  /* Create the Mutex used by the two threads */
  osMutex = osMutexCreate(osMutex(MUTEX));
 8000832:	6018      	str	r0, [r3, #0]
  
  /* Create Semaphore lock */
  osSemaphoreDef(SEM);
 8000834:	a802      	add	r0, sp, #8
 8000836:	f840 4d04 	str.w	r4, [r0, #-4]!
  
  /* Create the Semaphore used by the two threads */
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);  
 800083a:	f001 f9f9 	bl	8001c30 <osSemaphoreCreate>
 800083e:	4b03      	ldr	r3, [pc, #12]	; (800084c <GUI_X_InitOS+0x2c>)
 8000840:	6018      	str	r0, [r3, #0]
}
 8000842:	b002      	add	sp, #8
 8000844:	bd10      	pop	{r4, pc}
 8000846:	bf00      	nop
 8000848:	20000838 	.word	0x20000838
 800084c:	2000083c 	.word	0x2000083c

08000850 <GUI_X_Unlock>:

void GUI_X_Unlock(void)
{ 
  osMutexRelease(osMutex);
 8000850:	4b01      	ldr	r3, [pc, #4]	; (8000858 <GUI_X_Unlock+0x8>)
 8000852:	6818      	ldr	r0, [r3, #0]
 8000854:	f001 ba28 	b.w	8001ca8 <osMutexRelease>
 8000858:	20000838 	.word	0x20000838

0800085c <GUI_X_Lock>:
}

void GUI_X_Lock(void)
{
  osMutexWait(osMutex , osWaitForever) ;
 800085c:	4b02      	ldr	r3, [pc, #8]	; (8000868 <GUI_X_Lock+0xc>)
 800085e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000862:	6818      	ldr	r0, [r3, #0]
 8000864:	f001 b9bc 	b.w	8001be0 <osMutexWait>
 8000868:	20000838 	.word	0x20000838

0800086c <GUI_X_GetTaskId>:
}

/* Get Task handle */
U32 GUI_X_GetTaskId(void) 
{ 
  return ((U32) osThreadGetId());
 800086c:	f001 b936 	b.w	8001adc <osThreadGetId>

08000870 <DMA2D_CopyBuffer>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 8000870:	b530      	push	{r4, r5, lr}
  {
    return LTDC_PIXEL_FORMAT_ARGB8888;
  } 
  else
  {
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8000872:	2800      	cmp	r0, #0
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
  U32 PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 8000874:	f44f 7500 	mov.w	r5, #512	; 0x200
 8000878:	480c      	ldr	r0, [pc, #48]	; (80008ac <DMA2D_CopyBuffer+0x3c>)
  {
    return LTDC_PIXEL_FORMAT_ARGB8888;
  } 
  else
  {
    return LTDC_PIXEL_FORMAT_ARGB1555;
 800087a:	bf0c      	ite	eq
 800087c:	2400      	moveq	r4, #0
 800087e:	2403      	movne	r4, #3
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
  U32 PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 8000880:	6005      	str	r5, [r0, #0]
  	
  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 8000882:	60c1      	str	r1, [r0, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 8000884:	63c2      	str	r2, [r0, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      
 8000886:	9a04      	ldr	r2, [sp, #16]
 8000888:	6102      	str	r2, [r0, #16]
  DMA2D->OOR     = OffLineDst; 
 800088a:	9a05      	ldr	r2, [sp, #20]
 800088c:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Set up pixel format */  
  DMA2D->FGPFCCR = PixelFormat;  
 800088e:	61c4      	str	r4, [r0, #28]
  
  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 8000890:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000894:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000898:	6443      	str	r3, [r0, #68]	; 0x44
  
  DMA2D->CR     |= DMA2D_CR_START;   
 800089a:	6803      	ldr	r3, [r0, #0]
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6003      	str	r3, [r0, #0]
 
  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START) 
 80008a2:	6803      	ldr	r3, [r0, #0]
 80008a4:	07db      	lsls	r3, r3, #31
 80008a6:	d4fc      	bmi.n	80008a2 <DMA2D_CopyBuffer+0x32>
  {
  }
}
 80008a8:	bd30      	pop	{r4, r5, pc}
 80008aa:	bf00      	nop
 80008ac:	4002b000 	.word	0x4002b000

080008b0 <LCD_LL_CopyRect>:
  * @param  xSize:       X size. 
  * @param  ySize:       Y size.            
  * @retval None.
  */
static void LCD_LL_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize) 
{
 80008b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  U32 AddrSrc, AddrDst;  

  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80008b4:	251c      	movs	r5, #28
 80008b6:	4e10      	ldr	r6, [pc, #64]	; (80008f8 <LCD_LL_CopyRect+0x48>)
  * @param  xSize:       X size. 
  * @param  ySize:       Y size.            
  * @retval None.
  */
static void LCD_LL_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize) 
{
 80008b8:	f8dd e020 	ldr.w	lr, [sp, #32]
  U32 AddrSrc, AddrDst;  

  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80008bc:	4345      	muls	r5, r0
  * @param  xSize:       X size. 
  * @param  ySize:       Y size.            
  * @retval None.
  */
static void LCD_LL_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize) 
{
 80008be:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  U32 AddrSrc, AddrDst;  

  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80008c2:	1977      	adds	r7, r6, r5
 80008c4:	f856 8005 	ldr.w	r8, [r6, r5]
  AddrDst = layer_prop[LayerIndex].address + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 80008c8:	f856 9005 	ldr.w	r9, [r6, r5]
  */
static void LCD_LL_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize) 
{
  U32 AddrSrc, AddrDst;  

  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80008cc:	68fc      	ldr	r4, [r7, #12]
  AddrDst = layer_prop[LayerIndex].address + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 80008ce:	9d07      	ldr	r5, [sp, #28]
  */
static void LCD_LL_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize) 
{
  U32 AddrSrc, AddrDst;  

  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80008d0:	697f      	ldr	r7, [r7, #20]
  AddrDst = layer_prop[LayerIndex].address + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 80008d2:	ebce 0604 	rsb	r6, lr, r4
 80008d6:	fb05 3504 	mla	r5, r5, r4, r3
 80008da:	4673      	mov	r3, lr
 80008dc:	fb02 1104 	mla	r1, r2, r4, r1
 80008e0:	9609      	str	r6, [sp, #36]	; 0x24
 80008e2:	9608      	str	r6, [sp, #32]
 80008e4:	f8cd c01c 	str.w	ip, [sp, #28]
 80008e8:	fb07 9205 	mla	r2, r7, r5, r9
 80008ec:	fb07 8101 	mla	r1, r7, r1, r8
}
 80008f0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
{
  U32 AddrSrc, AddrDst;  

  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
  AddrDst = layer_prop[LayerIndex].address + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 80008f4:	f7ff bfbc 	b.w	8000870 <DMA2D_CopyBuffer>
 80008f8:	200008c4 	.word	0x200008c4

080008fc <LCD_LL_FillRect>:
  * @param  y1:          Y1 position
  * @param  PixelIndex:  Pixel index.             
  * @retval None.
  */
static void LCD_LL_FillRect(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex) 
{
 80008fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000900:	9c08      	ldr	r4, [sp, #32]
 8000902:	4605      	mov	r5, r0
 8000904:	460e      	mov	r6, r1
 8000906:	4690      	mov	r8, r2
 8000908:	4699      	mov	r9, r3
 800090a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  U32 BufferSize, AddrDst;
  int xSize, ySize;
  
  if (GUI_GetDrawMode() == GUI_DM_XOR) 
 800090c:	f00c fbc8 	bl	800d0a0 <GUI_GetDrawMode>
 8000910:	2801      	cmp	r0, #1
 8000912:	d111      	bne.n	8000938 <LCD_LL_FillRect+0x3c>
  {		
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 8000914:	2200      	movs	r2, #0
 8000916:	2119      	movs	r1, #25
 8000918:	4628      	mov	r0, r5
 800091a:	f00a fe2d 	bl	800b578 <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 800091e:	464a      	mov	r2, r9
 8000920:	4641      	mov	r1, r8
 8000922:	4630      	mov	r0, r6
 8000924:	4623      	mov	r3, r4
 8000926:	f00a ffaf 	bl	800b888 <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 800092a:	4628      	mov	r0, r5
 800092c:	4a1e      	ldr	r2, [pc, #120]	; (80009a8 <LCD_LL_FillRect+0xac>)
 800092e:	2119      	movs	r1, #25
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
  }
}
 8000930:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  
  if (GUI_GetDrawMode() == GUI_DM_XOR) 
  {		
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
    LCD_FillRect(x0, y0, x1, y1);
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 8000934:	f00a be20 	b.w	800b578 <LCD_SetDevFunc>
  } 
  else 
  {
    xSize = x1 - x0 + 1;
 8000938:	ebc6 0309 	rsb	r3, r6, r9
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 800093c:	491b      	ldr	r1, [pc, #108]	; (80009ac <LCD_LL_FillRect+0xb0>)
  {
    return LTDC_PIXEL_FORMAT_ARGB8888;
  } 
  else
  {
    return LTDC_PIXEL_FORMAT_ARGB1555;
 800093e:	2d00      	cmp	r5, #0
    LCD_FillRect(x0, y0, x1, y1);
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
  } 
  else 
  {
    xSize = x1 - x0 + 1;
 8000940:	f103 0201 	add.w	r2, r3, #1
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8000944:	f04f 031c 	mov.w	r3, #28
 8000948:	fb03 f305 	mul.w	r3, r3, r5
  {
    return LTDC_PIXEL_FORMAT_ARGB8888;
  } 
  else
  {
    return LTDC_PIXEL_FORMAT_ARGB1555;
 800094c:	bf18      	it	ne
 800094e:	2503      	movne	r5, #3
  else 
  {
    xSize = x1 - x0 + 1;
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8000950:	eb01 0e03 	add.w	lr, r1, r3
 8000954:	58c9      	ldr	r1, [r1, r3]
 8000956:	f8de 000c 	ldr.w	r0, [lr, #12]
 800095a:	f8de 3010 	ldr.w	r3, [lr, #16]
 800095e:	f8de c008 	ldr.w	ip, [lr, #8]
 8000962:	4343      	muls	r3, r0
 8000964:	f8de e014 	ldr.w	lr, [lr, #20]
 8000968:	fb0e f303 	mul.w	r3, lr, r3
 800096c:	fb0c 1103 	mla	r1, ip, r3, r1
 8000970:	fb00 6308 	mla	r3, r0, r8, r6
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 8000974:	1a80      	subs	r0, r0, r2
  else 
  {
    xSize = x1 - x0 + 1;
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8000976:	fb0e 1603 	mla	r6, lr, r3, r1
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 800097a:	ebc8 0304 	rsb	r3, r8, r4
  U32 PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
	
  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 800097e:	490c      	ldr	r1, [pc, #48]	; (80009b0 <LCD_LL_FillRect+0xb4>)
  {
    xSize = x1 - x0 + 1;
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 8000980:	3301      	adds	r3, #1
  U32 PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
	
  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 8000982:	4c0c      	ldr	r4, [pc, #48]	; (80009b4 <LCD_LL_FillRect+0xb8>)

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;                    

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8000984:	b29b      	uxth	r3, r3
  U32 PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
	
  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 8000986:	6021      	str	r1, [r4, #0]
  DMA2D->OCOLR   = ColorIndex;                     
 8000988:	63a7      	str	r7, [r4, #56]	; 0x38

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;                    

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 800098a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
  DMA2D->OCOLR   = ColorIndex;                     

  /* Set up pointers */
  DMA2D->OMAR    = (U32)pDst;                      
 800098e:	63e6      	str	r6, [r4, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->OOR     = OffLine;                        
 8000990:	6420      	str	r0, [r4, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;                    
 8000992:	6365      	str	r5, [r4, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8000994:	6463      	str	r3, [r4, #68]	; 0x44
    
  DMA2D->CR     |= DMA2D_CR_START; 
 8000996:	6823      	ldr	r3, [r4, #0]
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6023      	str	r3, [r4, #0]
  
  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START) 
 800099e:	6823      	ldr	r3, [r4, #0]
 80009a0:	07db      	lsls	r3, r3, #31
 80009a2:	d4fc      	bmi.n	800099e <LCD_LL_FillRect+0xa2>
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
  }
}
 80009a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009a8:	080008fd 	.word	0x080008fd
 80009ac:	200008c4 	.word	0x200008c4
 80009b0:	00030200 	.word	0x00030200
 80009b4:	4002b000 	.word	0x4002b000

080009b8 <LCD_LL_CopyBuffer>:
  * @param  LayerIndex : Layer Index
  * @param  IndexSrc:    index source
  * @param  IndexDst:    index destination           
  * @retval None.
  */
static void LCD_LL_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) {
 80009b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ba:	4617      	mov	r7, r2
  */
static U32 GetBufferSize(U32 LayerIndex) 
{
  U32 BufferSize;

  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 80009bc:	221c      	movs	r2, #28
 80009be:	4e0e      	ldr	r6, [pc, #56]	; (80009f8 <LCD_LL_CopyBuffer+0x40>)
  * @param  LayerIndex : Layer Index
  * @param  IndexSrc:    index source
  * @param  IndexDst:    index destination           
  * @retval None.
  */
static void LCD_LL_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) {
 80009c0:	b085      	sub	sp, #20
  */
static U32 GetBufferSize(U32 LayerIndex) 
{
  U32 BufferSize;

  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 80009c2:	4342      	muls	r2, r0
 80009c4:	18b4      	adds	r4, r6, r2
 80009c6:	68e3      	ldr	r3, [r4, #12]
 80009c8:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80009cc:	6965      	ldr	r5, [r4, #20]
 80009ce:	fb0e fc03 	mul.w	ip, lr, r3
 80009d2:	fb05 f50c 	mul.w	r5, r5, ip
  */
static void LCD_LL_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) {
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 80009d6:	f856 c002 	ldr.w	ip, [r6, r2]
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
 80009da:	58b2      	ldr	r2, [r6, r2]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 80009dc:	2600      	movs	r6, #0
 80009de:	fb05 c101 	mla	r1, r5, r1, ip
 80009e2:	fb05 2207 	mla	r2, r5, r7, r2
 80009e6:	9602      	str	r6, [sp, #8]
 80009e8:	9601      	str	r6, [sp, #4]
 80009ea:	f8cd e000 	str.w	lr, [sp]
 80009ee:	f7ff ff3f 	bl	8000870 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 80009f2:	60a7      	str	r7, [r4, #8]
}
 80009f4:	b005      	add	sp, #20
 80009f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f8:	200008c4 	.word	0x200008c4

080009fc <LCD_LL_DrawBitmap32bpp>:
  * @param  xSize: X size
  * @param  ySize: Y size
  * @retval None
  */
static void LCD_LL_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 80009fc:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8000a00:	9c08      	ldr	r4, [sp, #32]
 8000a02:	469c      	mov	ip, r3
 8000a04:	9b07      	ldr	r3, [sp, #28]
 8000a06:	9407      	str	r4, [sp, #28]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8000a08:	241c      	movs	r4, #28
 8000a0a:	4f12      	ldr	r7, [pc, #72]	; (8000a54 <LCD_LL_DrawBitmap32bpp+0x58>)
 8000a0c:	4344      	muls	r4, r0
  * @param  xSize: X size
  * @param  ySize: Y size
  * @retval None
  */
static void LCD_LL_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 8000a0e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8000a10:	eb07 0804 	add.w	r8, r7, r4
 8000a14:	593c      	ldr	r4, [r7, r4]
 8000a16:	f8d8 700c 	ldr.w	r7, [r8, #12]
  OffLineSrc = (BytesPerLine / 4) - xSize;
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8000a1a:	f8d8 6010 	ldr.w	r6, [r8, #16]
 8000a1e:	fb02 1207 	mla	r2, r2, r7, r1
 8000a22:	2104      	movs	r1, #4
 8000a24:	fb06 fe07 	mul.w	lr, r6, r7
 8000a28:	f8d8 6014 	ldr.w	r6, [r8, #20]
{
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8000a2c:	f8d8 a008 	ldr.w	sl, [r8, #8]
  OffLineSrc = (BytesPerLine / 4) - xSize;
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8000a30:	1aff      	subs	r7, r7, r3
 8000a32:	fb06 fe0e 	mul.w	lr, r6, lr
 8000a36:	9709      	str	r7, [sp, #36]	; 0x24
 8000a38:	fb0a 440e 	mla	r4, sl, lr, r4
 8000a3c:	fb95 f5f1 	sdiv	r5, r5, r1
 8000a40:	1aed      	subs	r5, r5, r3
 8000a42:	fb06 4202 	mla	r2, r6, r2, r4
 8000a46:	4661      	mov	r1, ip
 8000a48:	9508      	str	r5, [sp, #32]
}
 8000a4a:	e8bd 45f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, lr}

  BufferSize = GetBufferSize(LayerIndex);
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
  OffLineSrc = (BytesPerLine / 4) - xSize;
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8000a4e:	f7ff bf0f 	b.w	8000870 <DMA2D_CopyBuffer>
 8000a52:	bf00      	nop
 8000a54:	200008c4 	.word	0x200008c4

08000a58 <HAL_LTDC_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{  
 8000a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef gpio_init_structure;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  
  /* Enable the LTDC clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000a5c:	4c4d      	ldr	r4, [pc, #308]	; (8000b94 <HAL_LTDC_MspInit+0x13c>)
  *           - Peripheral's GPIO Configuration  
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{  
 8000a5e:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef gpio_init_structure;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  
  /* Enable the LTDC clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000a60:	2500      	movs	r5, #0
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 429 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 429/5 = 85 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 85/4 = 21 Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000a62:	484d      	ldr	r0, [pc, #308]	; (8000b98 <HAL_LTDC_MspInit+0x140>)
 8000a64:	2708      	movs	r7, #8
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8000a66:	260e      	movs	r6, #14
{  
  GPIO_InitTypeDef gpio_init_structure;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  
  /* Enable the LTDC clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000a68:	9501      	str	r5, [sp, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8000a6a:	f44f 5880 	mov.w	r8, #4096	; 0x1000
{  
  GPIO_InitTypeDef gpio_init_structure;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  
  /* Enable the LTDC clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000a6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000a70:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8000bac <HAL_LTDC_MspInit+0x154>
{  
  GPIO_InitTypeDef gpio_init_structure;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  
  /* Enable the LTDC clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000a74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a78:	6463      	str	r3, [r4, #68]	; 0x44
 8000a7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 429 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 429/5 = 85 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 85/4 = 21 Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000a7c:	6007      	str	r7, [r0, #0]
{  
  GPIO_InitTypeDef gpio_init_structure;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  
  /* Enable the LTDC clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000a7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	9b01      	ldr	r3, [sp, #4]
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 429 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 429/5 = 85 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 85/4 = 21 Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000a86:	23c0      	movs	r3, #192	; 0xc0
 8000a88:	6143      	str	r3, [r0, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000a8a:	2305      	movs	r3, #5
 8000a8c:	61c3      	str	r3, [r0, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000a8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a92:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);   
 8000a94:	f003 f8c0 	bl	8003c18 <HAL_RCCEx_PeriphCLKConfig>
  
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a98:	9502      	str	r5, [sp, #8]
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000a9a:	a907      	add	r1, sp, #28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);   
  
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000a9e:	483f      	ldr	r0, [pc, #252]	; (8000b9c <HAL_LTDC_MspInit+0x144>)
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);   
  
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa0:	f043 0310 	orr.w	r3, r3, #16
 8000aa4:	6323      	str	r3, [r4, #48]	; 0x30
 8000aa6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	9302      	str	r3, [sp, #8]
 8000aae:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab0:	9503      	str	r5, [sp, #12]
 8000ab2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab8:	6323      	str	r3, [r4, #48]	; 0x30
 8000aba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac0:	9303      	str	r3, [sp, #12]
 8000ac2:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ac4:	9504      	str	r5, [sp, #16]
 8000ac6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000acc:	6323      	str	r3, [r4, #48]	; 0x30
 8000ace:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ad4:	9304      	str	r3, [sp, #16]
 8000ad6:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ad8:	9505      	str	r5, [sp, #20]
 8000ada:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000adc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae0:	6323      	str	r3, [r4, #48]	; 0x30
 8000ae2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ae8:	9305      	str	r3, [sp, #20]
 8000aea:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000aec:	9506      	str	r5, [sp, #24]
 8000aee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000af0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af4:	6323      	str	r3, [r4, #48]	; 0x30
 8000af6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  
  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000af8:	2402      	movs	r4, #2
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOJ_CLK_ENABLE();
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  
  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000afe:	9408      	str	r4, [sp, #32]
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOJ_CLK_ENABLE();
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b00:	9306      	str	r3, [sp, #24]
 8000b02:	9b06      	ldr	r3, [sp, #24]
  
  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8000b04:	2310      	movs	r3, #16
 8000b06:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8000b08:	9509      	str	r5, [sp, #36]	; 0x24
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8000b0a:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8000b0c:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000b0e:	f002 fbef 	bl	80032f0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8000b12:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000b14:	a907      	add	r1, sp, #28
 8000b16:	4822      	ldr	r0, [pc, #136]	; (8000ba0 <HAL_LTDC_MspInit+0x148>)
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8000b18:	f8cd 801c 	str.w	r8, [sp, #28]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000b1c:	9408      	str	r4, [sp, #32]
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8000b1e:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000b20:	f002 fbe6 	bl	80032f0 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 8000b24:	f44f 4367 	mov.w	r3, #59136	; 0xe700
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000b28:	a907      	add	r1, sp, #28
 8000b2a:	4648      	mov	r0, r9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000b2c:	9408      	str	r4, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
 8000b2e:	9307      	str	r3, [sp, #28]
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000b30:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000b32:	f002 fbdd 	bl	80032f0 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8000b36:	f64e 73ff 	movw	r3, #61439	; 0xefff
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8000b3a:	a907      	add	r1, sp, #28
 8000b3c:	4819      	ldr	r0, [pc, #100]	; (8000ba4 <HAL_LTDC_MspInit+0x14c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8000b3e:	9307      	str	r3, [sp, #28]
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000b40:	9408      	str	r4, [sp, #32]
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000b42:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8000b44:	f002 fbd4 	bl	80032f0 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000b48:	9408      	str	r4, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8000b4a:	23f7      	movs	r3, #247	; 0xf7
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8000b4c:	4c16      	ldr	r4, [pc, #88]	; (8000ba8 <HAL_LTDC_MspInit+0x150>)
 8000b4e:	a907      	add	r1, sp, #28
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8000b50:	9307      	str	r3, [sp, #28]
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8000b52:	4620      	mov	r0, r4

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000b54:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8000b56:	f002 fbcb 	bl	80032f0 <HAL_GPIO_Init>
  
  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;     /* LCD_DISP pin has to be manually controlled */
 8000b5a:	f8cd 801c 	str.w	r8, [sp, #28]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000b5e:	f04f 0801 	mov.w	r8, #1
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000b62:	a907      	add	r1, sp, #28
 8000b64:	4648      	mov	r0, r9
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
  
  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;     /* LCD_DISP pin has to be manually controlled */
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000b66:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000b6a:	f002 fbc1 	bl	80032f0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = GPIO_PIN_3;  /* LCD_BL_CTRL pin has to be manually controlled */
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8000b6e:	a907      	add	r1, sp, #28
 8000b70:	4620      	mov	r0, r4
  gpio_init_structure.Pin       = GPIO_PIN_12;     /* LCD_DISP pin has to be manually controlled */
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = GPIO_PIN_3;  /* LCD_BL_CTRL pin has to be manually controlled */
 8000b72:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000b74:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8000b78:	f002 fbba 	bl	80032f0 <HAL_GPIO_Init>

  /* Set LTDC Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(LTDC_IRQn, 0xE, 0);
 8000b7c:	462a      	mov	r2, r5
 8000b7e:	4631      	mov	r1, r6
 8000b80:	2058      	movs	r0, #88	; 0x58
 8000b82:	f002 fccd 	bl	8003520 <HAL_NVIC_SetPriority>
  
  /* Enable LTDC Interrupt */
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000b86:	2058      	movs	r0, #88	; 0x58
 8000b88:	f002 fd02 	bl	8003590 <HAL_NVIC_EnableIRQ>
}
 8000b8c:	b00d      	add	sp, #52	; 0x34
 8000b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	20000840 	.word	0x20000840
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40021800 	.word	0x40021800
 8000ba4:	40022400 	.word	0x40022400
 8000ba8:	40022800 	.word	0x40022800
 8000bac:	40022000 	.word	0x40022000

08000bb0 <HAL_LTDC_MspDeInit>:
  */
void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc)
{
  /* Reset peripherals */
  /* Enable LTDC reset state */
  __HAL_RCC_LTDC_FORCE_RESET();
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <HAL_LTDC_MspDeInit+0x14>)
 8000bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bb4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Release LTDC from reset state */ 
  __HAL_RCC_LTDC_RELEASE_RESET();
 8000bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bbc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24
 8000bc2:	4770      	bx	lr
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <HAL_LTDC_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the specified LTDC.
  * @retval None
  */
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc) {
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	4d19      	ldr	r5, [pc, #100]	; (8000c34 <HAL_LTDC_LineEventCallback+0x6c>)
 8000bce:	4607      	mov	r7, r0
  U32 Addr;
  U32 layer;

  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 8000bd0:	2400      	movs	r4, #0
  {
    if (layer_prop[layer].pending_buffer >= 0) 
 8000bd2:	f04f 091c 	mov.w	r9, #28
 8000bd6:	46a8      	mov	r8, r5
      
      /* Notify STemWin that buffer is used */
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);

      /* Clear pending buffer flag of layer */
      layer_prop[layer].pending_buffer = -1;
 8000bd8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
  U32 Addr;
  U32 layer;

  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
  {
    if (layer_prop[layer].pending_buffer >= 0) 
 8000bdc:	fb09 f304 	mul.w	r3, r9, r4
 8000be0:	eb08 0603 	add.w	r6, r8, r3
 8000be4:	6872      	ldr	r2, [r6, #4]
 8000be6:	2a00      	cmp	r2, #0
 8000be8:	db19      	blt.n	8000c1e <HAL_LTDC_LineEventCallback+0x56>
    {
      /* Calculate address of buffer to be used  as visible frame buffer */
      Addr = layer_prop[layer].address + \
 8000bea:	68e8      	ldr	r0, [r5, #12]
 8000bec:	6929      	ldr	r1, [r5, #16]
 8000bee:	f858 3003 	ldr.w	r3, [r8, r3]
 8000bf2:	4341      	muls	r1, r0
             layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 8000bf4:	6872      	ldr	r2, [r6, #4]
      __HAL_LTDC_LAYER(hltdc, layer)->CFBAR = Addr;
     
      __HAL_LTDC_RELOAD_CONFIG(hltdc);
      
      /* Notify STemWin that buffer is used */
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 8000bf6:	4620      	mov	r0, r4
  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
  {
    if (layer_prop[layer].pending_buffer >= 0) 
    {
      /* Calculate address of buffer to be used  as visible frame buffer */
      Addr = layer_prop[layer].address + \
 8000bf8:	434a      	muls	r2, r1
 8000bfa:	6969      	ldr	r1, [r5, #20]
 8000bfc:	fb01 3302 	mla	r3, r1, r2, r3
             layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
      
      __HAL_LTDC_LAYER(hltdc, layer)->CFBAR = Addr;
 8000c00:	683a      	ldr	r2, [r7, #0]
 8000c02:	f102 0184 	add.w	r1, r2, #132	; 0x84
 8000c06:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
 8000c0a:	628b      	str	r3, [r1, #40]	; 0x28
     
      __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8000c0c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Notify STemWin that buffer is used */
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 8000c14:	6871      	ldr	r1, [r6, #4]
 8000c16:	f00c f9f5 	bl	800d004 <GUI_MULTIBUF_ConfirmEx>

      /* Clear pending buffer flag of layer */
      layer_prop[layer].pending_buffer = -1;
 8000c1a:	f8c6 a004 	str.w	sl, [r6, #4]
  */
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc) {
  U32 Addr;
  U32 layer;

  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 8000c1e:	3401      	adds	r4, #1
 8000c20:	351c      	adds	r5, #28
 8000c22:	2c02      	cmp	r4, #2
 8000c24:	d1da      	bne.n	8000bdc <HAL_LTDC_LineEventCallback+0x14>
      /* Clear pending buffer flag of layer */
      layer_prop[layer].pending_buffer = -1;
    }
  }
  
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8000c26:	4638      	mov	r0, r7
 8000c28:	2100      	movs	r1, #0
}
 8000c2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      /* Clear pending buffer flag of layer */
      layer_prop[layer].pending_buffer = -1;
    }
  }
  
  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8000c2e:	f002 bf9f 	b.w	8003b70 <HAL_LTDC_ProgramLineEvent>
 8000c32:	bf00      	nop
 8000c34:	200008c4 	.word	0x200008c4

08000c38 <LCD_X_Config>:
  *          display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void) 
{
 8000c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  * @retval None
  */
static void LCD_LL_Init(void) 
{ 
  /* DeInit */
  HAL_LTDC_DeInit(&hltdc);
 8000c3a:	4c66      	ldr	r4, [pc, #408]	; (8000dd4 <LCD_X_Config+0x19c>)
  hltdc.Init.AccumulatedActiveW = (XSIZE_PHYS + HSYNC + HBP - 1);
  hltdc.Init.TotalHeigh = (YSIZE_PHYS + VSYNC + VBP + VFP - 1);
  hltdc.Init.TotalWidth = (XSIZE_PHYS + HSYNC + HBP + HFP - 1);
  
  /* background value */
  hltdc.Init.Backcolor.Blue = 0;
 8000c3c:	2500      	movs	r5, #0
  * @retval None
  */
static void LCD_LL_Init(void) 
{ 
  /* DeInit */
  HAL_LTDC_DeInit(&hltdc);
 8000c3e:	4620      	mov	r0, r4
 8000c40:	f002 fdec 	bl	800381c <HAL_LTDC_DeInit>
  
  /* Set LCD Timings */
  hltdc.Init.HorizontalSync = (HSYNC - 1);
 8000c44:	2328      	movs	r3, #40	; 0x28
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hltdc.Instance = LTDC;
  
  HAL_LTDC_Init(&hltdc);
 8000c46:	4620      	mov	r0, r4
  hltdc.Init.AccumulatedActiveW = (XSIZE_PHYS + HSYNC + HBP - 1);
  hltdc.Init.TotalHeigh = (YSIZE_PHYS + VSYNC + VBP + VFP - 1);
  hltdc.Init.TotalWidth = (XSIZE_PHYS + HSYNC + HBP + HFP - 1);
  
  /* background value */
  hltdc.Init.Backcolor.Blue = 0;
 8000c48:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
{ 
  /* DeInit */
  HAL_LTDC_DeInit(&hltdc);
  
  /* Set LCD Timings */
  hltdc.Init.HorizontalSync = (HSYNC - 1);
 8000c4c:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = (VSYNC - 1);
 8000c4e:	2309      	movs	r3, #9
  hltdc.Init.TotalHeigh = (YSIZE_PHYS + VSYNC + VBP + VFP - 1);
  hltdc.Init.TotalWidth = (XSIZE_PHYS + HSYNC + HBP + HFP - 1);
  
  /* background value */
  hltdc.Init.Backcolor.Blue = 0;
  hltdc.Init.Backcolor.Green = 0;
 8000c50:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  /* DeInit */
  HAL_LTDC_DeInit(&hltdc);
  
  /* Set LCD Timings */
  hltdc.Init.HorizontalSync = (HSYNC - 1);
  hltdc.Init.VerticalSync = (VSYNC - 1);
 8000c54:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = (HSYNC + HBP - 1);
 8000c56:	2335      	movs	r3, #53	; 0x35
  hltdc.Init.TotalWidth = (XSIZE_PHYS + HSYNC + HBP + HFP - 1);
  
  /* background value */
  hltdc.Init.Backcolor.Blue = 0;
  hltdc.Init.Backcolor.Green = 0;
  hltdc.Init.Backcolor.Red = 0;  
 8000c58:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
  HAL_LTDC_DeInit(&hltdc);
  
  /* Set LCD Timings */
  hltdc.Init.HorizontalSync = (HSYNC - 1);
  hltdc.Init.VerticalSync = (VSYNC - 1);
  hltdc.Init.AccumulatedHBP = (HSYNC + HBP - 1);
 8000c5c:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = (VSYNC + VBP - 1);
 8000c5e:	230b      	movs	r3, #11
  hltdc.Init.Backcolor.Blue = 0;
  hltdc.Init.Backcolor.Green = 0;
  hltdc.Init.Backcolor.Red = 0;  
  
  /* Polarity */
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c60:	6065      	str	r5, [r4, #4]
  
  /* Set LCD Timings */
  hltdc.Init.HorizontalSync = (HSYNC - 1);
  hltdc.Init.VerticalSync = (VSYNC - 1);
  hltdc.Init.AccumulatedHBP = (HSYNC + HBP - 1);
  hltdc.Init.AccumulatedVBP = (VSYNC + VBP - 1);
 8000c62:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveH = (YSIZE_PHYS + VSYNC + VBP - 1);
 8000c64:	f240 131b 	movw	r3, #283	; 0x11b
  hltdc.Init.Backcolor.Green = 0;
  hltdc.Init.Backcolor.Red = 0;  
  
  /* Polarity */
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8000c68:	60a5      	str	r5, [r4, #8]
  /* Set LCD Timings */
  hltdc.Init.HorizontalSync = (HSYNC - 1);
  hltdc.Init.VerticalSync = (VSYNC - 1);
  hltdc.Init.AccumulatedHBP = (HSYNC + HBP - 1);
  hltdc.Init.AccumulatedVBP = (VSYNC + VBP - 1);
  hltdc.Init.AccumulatedActiveH = (YSIZE_PHYS + VSYNC + VBP - 1);
 8000c6a:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.AccumulatedActiveW = (XSIZE_PHYS + HSYNC + HBP - 1);
 8000c6c:	f240 2315 	movw	r3, #533	; 0x215
  hltdc.Init.Backcolor.Red = 0;  
  
  /* Polarity */
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8000c70:	60e5      	str	r5, [r4, #12]
  hltdc.Init.HorizontalSync = (HSYNC - 1);
  hltdc.Init.VerticalSync = (VSYNC - 1);
  hltdc.Init.AccumulatedHBP = (HSYNC + HBP - 1);
  hltdc.Init.AccumulatedVBP = (VSYNC + VBP - 1);
  hltdc.Init.AccumulatedActiveH = (YSIZE_PHYS + VSYNC + VBP - 1);
  hltdc.Init.AccumulatedActiveW = (XSIZE_PHYS + HSYNC + HBP - 1);
 8000c72:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.TotalHeigh = (YSIZE_PHYS + VSYNC + VBP + VFP - 1);
 8000c74:	f240 131d 	movw	r3, #285	; 0x11d
  
  /* Polarity */
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c78:	6125      	str	r5, [r4, #16]
  hltdc.Init.VerticalSync = (VSYNC - 1);
  hltdc.Init.AccumulatedHBP = (HSYNC + HBP - 1);
  hltdc.Init.AccumulatedVBP = (VSYNC + VBP - 1);
  hltdc.Init.AccumulatedActiveH = (YSIZE_PHYS + VSYNC + VBP - 1);
  hltdc.Init.AccumulatedActiveW = (XSIZE_PHYS + HSYNC + HBP - 1);
  hltdc.Init.TotalHeigh = (YSIZE_PHYS + VSYNC + VBP + VFP - 1);
 8000c7a:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.TotalWidth = (XSIZE_PHYS + HSYNC + HBP + HFP - 1);
 8000c7c:	f240 2335 	movw	r3, #565	; 0x235
 8000c80:	62e3      	str	r3, [r4, #44]	; 0x2c
  /* Polarity */
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hltdc.Instance = LTDC;
 8000c82:	4b55      	ldr	r3, [pc, #340]	; (8000dd8 <LCD_X_Config+0x1a0>)
 8000c84:	6023      	str	r3, [r4, #0]
  
  HAL_LTDC_Init(&hltdc);
 8000c86:	f002 fd55 	bl	8003734 <HAL_LTDC_Init>
  HAL_LTDC_ProgramLineEvent(&hltdc, 0);
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f002 ff6f 	bl	8003b70 <HAL_LTDC_ProgramLineEvent>
  
  /* Enable dithering */
  HAL_LTDC_EnableDither(&hltdc);
 8000c92:	4620      	mov	r0, r4
 8000c94:	f002 fee6 	bl	8003a64 <HAL_LTDC_EnableDither>
  
  /* Enable DMA2D */
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8000c98:	4b50      	ldr	r3, [pc, #320]	; (8000ddc <LCD_X_Config+0x1a4>)
 8000c9a:	9501      	str	r5, [sp, #4]

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8000c9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  
  /* Enable dithering */
  HAL_LTDC_EnableDither(&hltdc);
  
  /* Enable DMA2D */
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8000ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8000ca2:	484f      	ldr	r0, [pc, #316]	; (8000de0 <LCD_X_Config+0x1a8>)
  
  /* Enable dithering */
  HAL_LTDC_EnableDither(&hltdc);
  
  /* Enable DMA2D */
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8000ca4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ca8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
  
  /* Enable dithering */
  HAL_LTDC_EnableDither(&hltdc);
  
  /* Enable DMA2D */
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cb2:	9301      	str	r3, [sp, #4]
 8000cb4:	9b01      	ldr	r3, [sp, #4]

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8000cb6:	f002 fc0b 	bl	80034d0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	4849      	ldr	r0, [pc, #292]	; (8000de4 <LCD_X_Config+0x1ac>)
 8000cc0:	f002 fc06 	bl	80034d0 <HAL_GPIO_WritePin>
    
  /* At first initialize use of multiple buffers on demand */
#if (NUM_BUFFERS > 1)
    for (i = 0; i < GUI_NUM_LAYERS; i++) 
    {
      GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
 8000cc4:	2103      	movs	r1, #3
 8000cc6:	4628      	mov	r0, r5
 8000cc8:	f00c f9b4 	bl	800d034 <GUI_MULTIBUF_ConfigEx>
 8000ccc:	2103      	movs	r1, #3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f00c f9b0 	bl	800d034 <GUI_MULTIBUF_ConfigEx>
    }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 8000cd4:	462b      	mov	r3, r5
 8000cd6:	462a      	mov	r2, r5
 8000cd8:	4943      	ldr	r1, [pc, #268]	; (8000de8 <LCD_X_Config+0x1b0>)
 8000cda:	4844      	ldr	r0, [pc, #272]	; (8000dec <LCD_X_Config+0x1b4>)
 8000cdc:	f00c fe9a 	bl	800da14 <GUI_DEVICE_CreateAndLink>
  
  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 8000ce0:	4628      	mov	r0, r5
 8000ce2:	f00a fc99 	bl	800b618 <LCD_GetSwapXYEx>
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	b160      	cbz	r0, 8000d04 <LCD_X_Config+0xcc>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 8000cea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000cee:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000cf2:	4628      	mov	r0, r5
 8000cf4:	f00a fbca 	bl	800b48c <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8000cf8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000cfc:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000d00:	4628      	mov	r0, r5
 8000d02:	e00a      	b.n	8000d1a <LCD_X_Config+0xe2>
  } else {
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8000d04:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000d08:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000d0c:	f00a fbbe 	bl	800b48c <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8000d10:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000d14:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000d18:	4620      	mov	r0, r4
 8000d1a:	f00a fb9f 	bl	800b45c <LCD_SetVSizeEx>
  }
  #if (GUI_NUM_LAYERS > 1)
    
    /* Set display driver and color conversion for 2nd layer */
    GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_1, COLOR_CONVERSION_1, 0, 1);
 8000d1e:	2301      	movs	r3, #1
 8000d20:	2200      	movs	r2, #0
 8000d22:	4933      	ldr	r1, [pc, #204]	; (8000df0 <LCD_X_Config+0x1b8>)
 8000d24:	4833      	ldr	r0, [pc, #204]	; (8000df4 <LCD_X_Config+0x1bc>)
 8000d26:	f00c fe75 	bl	800da14 <GUI_DEVICE_CreateAndLink>
    
    /* Set size of 2nd layer */
    if (LCD_GetSwapXYEx(1)) {
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f00a fc74 	bl	800b618 <LCD_GetSwapXYEx>
 8000d30:	b158      	cbz	r0, 8000d4a <LCD_X_Config+0x112>
      LCD_SetSizeEx (1, YSIZE_PHYS, XSIZE_PHYS);
 8000d32:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000d36:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f00a fba6 	bl	800b48c <LCD_SetSizeEx>
      LCD_SetVSizeEx(1, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8000d40:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000d44:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000d48:	e00a      	b.n	8000d60 <LCD_X_Config+0x128>
    } else {
      LCD_SetSizeEx (1, XSIZE_PHYS, YSIZE_PHYS);
 8000d4a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000d4e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000d52:	2001      	movs	r0, #1
 8000d54:	f00a fb9a 	bl	800b48c <LCD_SetSizeEx>
      LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8000d58:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000d5c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000d60:	2001      	movs	r0, #1
    }
  #endif
  
    
    /*Initialize GUI Layer structure */
    layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8000d62:	4d25      	ldr	r5, [pc, #148]	; (8000df8 <LCD_X_Config+0x1c0>)
    if (LCD_GetSwapXYEx(1)) {
      LCD_SetSizeEx (1, YSIZE_PHYS, XSIZE_PHYS);
      LCD_SetVSizeEx(1, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
    } else {
      LCD_SetSizeEx (1, XSIZE_PHYS, YSIZE_PHYS);
      LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8000d64:	f00a fb7a 	bl	800b45c <LCD_SetVSizeEx>
    }
  #endif
  
    
    /*Initialize GUI Layer structure */
    layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8000d68:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <LCD_X_Config+0x1c4>)
#if (GUI_NUM_LAYERS > 1)    
    layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
#endif
       
   /* Setting up VRam address and LCD_LL functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 8000d6a:	2400      	movs	r4, #0
 8000d6c:	462e      	mov	r6, r5
    }
  #endif
  
    
    /*Initialize GUI Layer structure */
    layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8000d6e:	602b      	str	r3, [r5, #0]
    
#if (GUI_NUM_LAYERS > 1)    
    layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
 8000d70:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
       
   /* Setting up VRam address and LCD_LL functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
  {

    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8000d74:	4f22      	ldr	r7, [pc, #136]	; (8000e00 <LCD_X_Config+0x1c8>)
    
    /*Initialize GUI Layer structure */
    layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
    
#if (GUI_NUM_LAYERS > 1)    
    layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
 8000d76:	61eb      	str	r3, [r5, #28]
       
   /* Setting up VRam address and LCD_LL functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
  {

    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8000d78:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
     
    layer_prop[i].pending_buffer = -1;
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8000d80:	4620      	mov	r0, r4
       
   /* Setting up VRam address and LCD_LL functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
  {

    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8000d82:	61ab      	str	r3, [r5, #24]
     
    layer_prop[i].pending_buffer = -1;
 8000d84:	231c      	movs	r3, #28
 8000d86:	4363      	muls	r3, r4
 8000d88:	18f2      	adds	r2, r6, r3
 8000d8a:	6051      	str	r1, [r2, #4]

    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8000d8c:	58f1      	ldr	r1, [r6, r3]
 8000d8e:	f00a fb4f 	bl	800b430 <LCD_SetVRAMAddrEx>

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8000d92:	4620      	mov	r0, r4
 8000d94:	f00a fc34 	bl	800b600 <LCD_GetBitsPerPixelEx>

    /* Set LCD_LL functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 8000d98:	4a1a      	ldr	r2, [pc, #104]	; (8000e04 <LCD_X_Config+0x1cc>)

    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8000d9a:	10c0      	asrs	r0, r0, #3

    /* Set LCD_LL functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 8000d9c:	2121      	movs	r1, #33	; 0x21

    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8000d9e:	6168      	str	r0, [r5, #20]

    /* Set LCD_LL functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 8000da0:	4620      	mov	r0, r4
 8000da2:	f00a fbe9 	bl	800b578 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))LCD_LL_CopyRect);
 8000da6:	4a18      	ldr	r2, [pc, #96]	; (8000e08 <LCD_X_Config+0x1d0>)
 8000da8:	2123      	movs	r1, #35	; 0x23
 8000daa:	4620      	mov	r0, r4
 8000dac:	f00a fbe4 	bl	800b578 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 8000db0:	4a16      	ldr	r2, [pc, #88]	; (8000e0c <LCD_X_Config+0x1d4>)
 8000db2:	2119      	movs	r1, #25
 8000db4:	4620      	mov	r0, r4
 8000db6:	f00a fbdf 	bl	800b578 <LCD_SetDevFunc>
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static inline U32 LCD_LL_GetPixelformat(U32 LayerIndex)
{
  if (LayerIndex == 0)
 8000dba:	b12c      	cbz	r4, 8000dc8 <LCD_X_Config+0x190>
#if (GUI_NUM_LAYERS > 1)    
    layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
#endif
       
   /* Setting up VRam address and LCD_LL functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 8000dbc:	3401      	adds	r4, #1
 8000dbe:	351c      	adds	r5, #28
 8000dc0:	2c02      	cmp	r4, #2
 8000dc2:	d1d9      	bne.n	8000d78 <LCD_X_Config+0x140>
    /* Set up drawing routine for 32bpp bitmap using DMA2D */
    if (LCD_LL_GetPixelformat(i) == LTDC_PIXEL_FORMAT_ARGB8888) {
     LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))LCD_LL_DrawBitmap32bpp);     /* Set up drawing routine for 32bpp bitmap using DMA2D. Makes only sense with ARGB8888 */
    }    
  }
}
 8000dc4:	b003      	add	sp, #12
 8000dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))LCD_LL_CopyRect);
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);

    /* Set up drawing routine for 32bpp bitmap using DMA2D */
    if (LCD_LL_GetPixelformat(i) == LTDC_PIXEL_FORMAT_ARGB8888) {
     LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))LCD_LL_DrawBitmap32bpp);     /* Set up drawing routine for 32bpp bitmap using DMA2D. Makes only sense with ARGB8888 */
 8000dc8:	4a11      	ldr	r2, [pc, #68]	; (8000e10 <LCD_X_Config+0x1d8>)
 8000dca:	2128      	movs	r1, #40	; 0x28
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f00a fbd3 	bl	800b578 <LCD_SetDevFunc>
 8000dd2:	e7f3      	b.n	8000dbc <LCD_X_Config+0x184>
 8000dd4:	200286e0 	.word	0x200286e0
 8000dd8:	40016800 	.word	0x40016800
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40022000 	.word	0x40022000
 8000de4:	40022800 	.word	0x40022800
 8000de8:	08067070 	.word	0x08067070
 8000dec:	08066ec0 	.word	0x08066ec0
 8000df0:	08067088 	.word	0x08067088
 8000df4:	08066ef4 	.word	0x08066ef4
 8000df8:	200008c4 	.word	0x200008c4
 8000dfc:	c0200000 	.word	0xc0200000
 8000e00:	08064a34 	.word	0x08064a34
 8000e04:	080009b9 	.word	0x080009b9
 8000e08:	080008b1 	.word	0x080008b1
 8000e0c:	080008fd 	.word	0x080008fd
 8000e10:	080009fd 	.word	0x080009fd

08000e14 <LCD_X_DisplayDriver>:
  int r = 0;
  U32 addr;
  int xPos, yPos;
  U32 Color;
    
  switch (Cmd) 
 8000e14:	3901      	subs	r1, #1
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) 
{
 8000e16:	b530      	push	{r4, r5, lr}
 8000e18:	4604      	mov	r4, r0
 8000e1a:	b08f      	sub	sp, #60	; 0x3c
 8000e1c:	4615      	mov	r5, r2
  int r = 0;
  U32 addr;
  int xPos, yPos;
  U32 Color;
    
  switch (Cmd) 
 8000e1e:	290d      	cmp	r1, #13
 8000e20:	f200 80b3 	bhi.w	8000f8a <LCD_X_DisplayDriver+0x176>
 8000e24:	e8df f001 	tbb	[pc, r1]
 8000e28:	533cb107 	.word	0x533cb107
 8000e2c:	7b7e605a 	.word	0x7b7e605a
 8000e30:	97b19167 	.word	0x97b19167
 8000e34:	4ca1      	.short	0x4ca1
  */
static void LCD_LL_LayerInit(U32 LayerIndex) 
{
  LTDC_LayerCfgTypeDef   layer_cfg;
  
  if (LayerIndex < GUI_NUM_LAYERS) 
 8000e36:	2801      	cmp	r0, #1
 8000e38:	f200 80a5 	bhi.w	8000f86 <LCD_X_DisplayDriver+0x172>
  { 
    /* Layer configuration */
    layer_cfg.WindowX0 = 0;
 8000e3c:	2300      	movs	r3, #0
    layer_cfg.WindowX1 = XSIZE_PHYS;
    layer_cfg.WindowY0 = 0;
    layer_cfg.WindowY1 = YSIZE_PHYS; 
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
    layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
 8000e3e:	4d55      	ldr	r5, [pc, #340]	; (8000f94 <LCD_X_DisplayDriver+0x180>)
  
  if (LayerIndex < GUI_NUM_LAYERS) 
  { 
    /* Layer configuration */
    layer_cfg.WindowX0 = 0;
    layer_cfg.WindowX1 = XSIZE_PHYS;
 8000e40:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
    layer_cfg.WindowY0 = 0;
    layer_cfg.WindowY1 = YSIZE_PHYS; 
 8000e44:	f44f 7188 	mov.w	r1, #272	; 0x110
  {
    return LTDC_PIXEL_FORMAT_ARGB8888;
  } 
  else
  {
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8000e48:	429c      	cmp	r4, r3
  LTDC_LayerCfgTypeDef   layer_cfg;
  
  if (LayerIndex < GUI_NUM_LAYERS) 
  { 
    /* Layer configuration */
    layer_cfg.WindowX0 = 0;
 8000e4a:	9301      	str	r3, [sp, #4]
    layer_cfg.WindowX1 = XSIZE_PHYS;
    layer_cfg.WindowY0 = 0;
 8000e4c:	9303      	str	r3, [sp, #12]
  {
    return LTDC_PIXEL_FORMAT_ARGB8888;
  } 
  else
  {
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8000e4e:	bf0c      	ite	eq
 8000e50:	461a      	moveq	r2, r3
 8000e52:	2203      	movne	r2, #3
    layer_cfg.WindowY0 = 0;
    layer_cfg.WindowY1 = YSIZE_PHYS; 
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
    layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
    layer_cfg.Alpha = 255;
    layer_cfg.Alpha0 = 0;
 8000e54:	9307      	str	r3, [sp, #28]
    /* Layer configuration */
    layer_cfg.WindowX0 = 0;
    layer_cfg.WindowX1 = XSIZE_PHYS;
    layer_cfg.WindowY0 = 0;
    layer_cfg.WindowY1 = YSIZE_PHYS; 
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8000e56:	9205      	str	r2, [sp, #20]
    layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
 8000e58:	221c      	movs	r2, #28
    layer_cfg.Alpha = 255;
    layer_cfg.Alpha0 = 0;
    layer_cfg.Backcolor.Blue = 0;
 8000e5a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    layer_cfg.WindowX0 = 0;
    layer_cfg.WindowX1 = XSIZE_PHYS;
    layer_cfg.WindowY0 = 0;
    layer_cfg.WindowY1 = YSIZE_PHYS; 
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
    layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
 8000e5e:	4362      	muls	r2, r4
    layer_cfg.Alpha = 255;
    layer_cfg.Alpha0 = 0;
    layer_cfg.Backcolor.Blue = 0;
    layer_cfg.Backcolor.Green = 0;
 8000e60:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    layer_cfg.WindowX0 = 0;
    layer_cfg.WindowX1 = XSIZE_PHYS;
    layer_cfg.WindowY0 = 0;
    layer_cfg.WindowY1 = YSIZE_PHYS; 
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
    layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
 8000e64:	58aa      	ldr	r2, [r5, r2]
    layer_cfg.Alpha = 255;
    layer_cfg.Alpha0 = 0;
    layer_cfg.Backcolor.Blue = 0;
    layer_cfg.Backcolor.Green = 0;
    layer_cfg.Backcolor.Red = 0;
 8000e66:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000e6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    layer_cfg.WindowX0 = 0;
    layer_cfg.WindowX1 = XSIZE_PHYS;
    layer_cfg.WindowY0 = 0;
    layer_cfg.WindowY1 = YSIZE_PHYS; 
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
    layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
 8000e6e:	920a      	str	r2, [sp, #40]	; 0x28
    layer_cfg.Alpha = 255;
 8000e70:	22ff      	movs	r2, #255	; 0xff
    layer_cfg.Alpha0 = 0;
    layer_cfg.Backcolor.Blue = 0;
    layer_cfg.Backcolor.Green = 0;
    layer_cfg.Backcolor.Red = 0;
    layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000e72:	9308      	str	r3, [sp, #32]
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e74:	2307      	movs	r3, #7
  
  if (LayerIndex < GUI_NUM_LAYERS) 
  { 
    /* Layer configuration */
    layer_cfg.WindowX0 = 0;
    layer_cfg.WindowX1 = XSIZE_PHYS;
 8000e76:	9002      	str	r0, [sp, #8]
    layer_cfg.WindowY0 = 0;
    layer_cfg.WindowY1 = YSIZE_PHYS; 
 8000e78:	9104      	str	r1, [sp, #16]
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
    layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
    layer_cfg.Alpha = 255;
 8000e7a:	9206      	str	r2, [sp, #24]
    layer_cfg.Backcolor.Red = 0;
    layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
    layer_cfg.ImageWidth = XSIZE_PHYS;
    layer_cfg.ImageHeight = YSIZE_PHYS;
    HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, LayerIndex);  
 8000e7c:	4622      	mov	r2, r4
    layer_cfg.Backcolor.Blue = 0;
    layer_cfg.Backcolor.Green = 0;
    layer_cfg.Backcolor.Red = 0;
    layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
    layer_cfg.ImageWidth = XSIZE_PHYS;
 8000e7e:	900b      	str	r0, [sp, #44]	; 0x2c
    layer_cfg.ImageHeight = YSIZE_PHYS;
 8000e80:	910c      	str	r1, [sp, #48]	; 0x30
    HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, LayerIndex);  
 8000e82:	a901      	add	r1, sp, #4
 8000e84:	4844      	ldr	r0, [pc, #272]	; (8000f98 <LCD_X_DisplayDriver+0x184>)
    layer_cfg.Alpha0 = 0;
    layer_cfg.Backcolor.Blue = 0;
    layer_cfg.Backcolor.Green = 0;
    layer_cfg.Backcolor.Red = 0;
    layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e86:	9309      	str	r3, [sp, #36]	; 0x24
    layer_cfg.ImageWidth = XSIZE_PHYS;
    layer_cfg.ImageHeight = YSIZE_PHYS;
    HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, LayerIndex);  
 8000e88:	f002 fd22 	bl	80038d0 <HAL_LTDC_ConfigLayer>
    
    /* Enable LUT on demand */
    if (LCD_GetBitsPerPixelEx(LayerIndex) <= 8) 
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	f00a fbb7 	bl	800b600 <LCD_GetBitsPerPixelEx>
 8000e92:	2808      	cmp	r0, #8
 8000e94:	dc77      	bgt.n	8000f86 <LCD_X_DisplayDriver+0x172>
    {
      /* Enable usage of LUT for all modes with <= 8bpp*/
      HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 8000e96:	4621      	mov	r1, r4
 8000e98:	483f      	ldr	r0, [pc, #252]	; (8000f98 <LCD_X_DisplayDriver+0x184>)
 8000e9a:	f002 fdc9 	bl	8003a30 <HAL_LTDC_EnableCLUT>
 8000e9e:	e072      	b.n	8000f86 <LCD_X_DisplayDriver+0x172>
  case LCD_X_INITCONTROLLER: 
    LCD_LL_LayerInit(LayerIndex);
    break;

  case LCD_X_SETORG: 
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8000ea0:	231c      	movs	r3, #28
 8000ea2:	493c      	ldr	r1, [pc, #240]	; (8000f94 <LCD_X_DisplayDriver+0x180>)
 8000ea4:	4343      	muls	r3, r0
 8000ea6:	18ca      	adds	r2, r1, r3
 8000ea8:	58c8      	ldr	r0, [r1, r3]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8000eaa:	6869      	ldr	r1, [r5, #4]
 8000eac:	68d3      	ldr	r3, [r2, #12]
 8000eae:	434b      	muls	r3, r1
 8000eb0:	6951      	ldr	r1, [r2, #20]
 8000eb2:	4622      	mov	r2, r4
 8000eb4:	fb01 0103 	mla	r1, r1, r3, r0
 8000eb8:	4837      	ldr	r0, [pc, #220]	; (8000f98 <LCD_X_DisplayDriver+0x184>)
 8000eba:	f002 fe38 	bl	8003b2e <HAL_LTDC_SetAddress>
 8000ebe:	e062      	b.n	8000f86 <LCD_X_DisplayDriver+0x172>
    break;

  case LCD_X_SHOWBUFFER: 
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 8000ec0:	231c      	movs	r3, #28
 8000ec2:	4934      	ldr	r1, [pc, #208]	; (8000f94 <LCD_X_DisplayDriver+0x180>)
 8000ec4:	6812      	ldr	r2, [r2, #0]
 8000ec6:	fb03 1400 	mla	r4, r3, r0, r1
 8000eca:	6062      	str	r2, [r4, #4]
 8000ecc:	e05b      	b.n	8000f86 <LCD_X_DisplayDriver+0x172>
    break;

  case LCD_X_SETLUTENTRY: 
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4629      	mov	r1, r5
 8000ed4:	4830      	ldr	r0, [pc, #192]	; (8000f98 <LCD_X_DisplayDriver+0x184>)
 8000ed6:	f002 fd40 	bl	800395a <HAL_LTDC_ConfigCLUT>
 8000eda:	e054      	b.n	8000f86 <LCD_X_DisplayDriver+0x172>
    break;

  case LCD_X_ON: 
    __HAL_LTDC_ENABLE(&hltdc);
 8000edc:	4b2e      	ldr	r3, [pc, #184]	; (8000f98 <LCD_X_DisplayDriver+0x184>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	6993      	ldr	r3, [r2, #24]
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	e004      	b.n	8000ef2 <LCD_X_DisplayDriver+0xde>
    break;

  case LCD_X_OFF: 
    __HAL_LTDC_DISABLE(&hltdc);
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <LCD_X_DisplayDriver+0x184>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	6993      	ldr	r3, [r2, #24]
 8000eee:	f023 0301 	bic.w	r3, r3, #1
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	e047      	b.n	8000f86 <LCD_X_DisplayDriver+0x172>
    break;
    
  case LCD_X_SETVIS:
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 8000ef6:	6813      	ldr	r3, [r2, #0]
 8000ef8:	01c4      	lsls	r4, r0, #7
 8000efa:	4a27      	ldr	r2, [pc, #156]	; (8000f98 <LCD_X_DisplayDriver+0x184>)
 8000efc:	2b01      	cmp	r3, #1
    {
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 8000efe:	6813      	ldr	r3, [r2, #0]
    }
    else
    {
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex); 
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc); 
 8000f00:	6812      	ldr	r2, [r2, #0]
    break;
    
  case LCD_X_SETVIS:
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
    {
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex); 
 8000f02:	f103 0384 	add.w	r3, r3, #132	; 0x84
 8000f06:	5919      	ldr	r1, [r3, r4]
 8000f08:	bf0c      	ite	eq
 8000f0a:	f041 0101 	orreq.w	r1, r1, #1
    }
    else
    {
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex); 
 8000f0e:	f021 0101 	bicne.w	r1, r1, #1
 8000f12:	5119      	str	r1, [r3, r4]
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc); 
 8000f14:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6253      	str	r3, [r2, #36]	; 0x24
 8000f1c:	e033      	b.n	8000f86 <LCD_X_DisplayDriver+0x172>
    break;
    
  case LCD_X_SETPOS: 
    HAL_LTDC_SetWindowPosition(&hltdc, 
 8000f1e:	4603      	mov	r3, r0
 8000f20:	ca06      	ldmia	r2, {r1, r2}
 8000f22:	e00e      	b.n	8000f42 <LCD_X_DisplayDriver+0x12e>
                               ((LCD_X_SETPOS_INFO *)pData)->yPos, 
                               LayerIndex);
    break;

  case LCD_X_SETSIZE:
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 8000f24:	aa01      	add	r2, sp, #4
 8000f26:	4669      	mov	r1, sp
 8000f28:	f00b fe66 	bl	800cbf8 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 8000f2c:	4a19      	ldr	r2, [pc, #100]	; (8000f94 <LCD_X_DisplayDriver+0x180>)
 8000f2e:	231c      	movs	r3, #28
 8000f30:	fb03 2304 	mla	r3, r3, r4, r2
 8000f34:	682a      	ldr	r2, [r5, #0]
 8000f36:	60da      	str	r2, [r3, #12]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 8000f38:	686a      	ldr	r2, [r5, #4]
 8000f3a:	611a      	str	r2, [r3, #16]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 8000f3c:	4623      	mov	r3, r4
 8000f3e:	e89d 0006 	ldmia.w	sp, {r1, r2}
 8000f42:	4815      	ldr	r0, [pc, #84]	; (8000f98 <LCD_X_DisplayDriver+0x184>)
 8000f44:	f002 fda6 	bl	8003a94 <HAL_LTDC_SetWindowPosition>
 8000f48:	e01d      	b.n	8000f86 <LCD_X_DisplayDriver+0x172>
    break;

  case LCD_X_SETALPHA:
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	6829      	ldr	r1, [r5, #0]
 8000f4e:	4812      	ldr	r0, [pc, #72]	; (8000f98 <LCD_X_DisplayDriver+0x184>)
 8000f50:	f002 fdcd 	bl	8003aee <HAL_LTDC_SetAlpha>
 8000f54:	e017      	b.n	8000f86 <LCD_X_DisplayDriver+0x172>
    break;

  case LCD_X_SETCHROMAMODE:
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 8000f56:	6815      	ldr	r5, [r2, #0]
    {
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 8000f58:	4601      	mov	r1, r0
 8000f5a:	480f      	ldr	r0, [pc, #60]	; (8000f98 <LCD_X_DisplayDriver+0x184>)
  case LCD_X_SETALPHA:
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
    break;

  case LCD_X_SETCHROMAMODE:
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 8000f5c:	b115      	cbz	r5, 8000f64 <LCD_X_DisplayDriver+0x150>
    {
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 8000f5e:	f002 fd33 	bl	80039c8 <HAL_LTDC_EnableColorKeying>
 8000f62:	e010      	b.n	8000f86 <LCD_X_DisplayDriver+0x172>
    }
    else
    {
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
 8000f64:	f002 fd4a 	bl	80039fc <HAL_LTDC_DisableColorKeying>
 8000f68:	e00d      	b.n	8000f86 <LCD_X_DisplayDriver+0x172>
    }
    break;

  case LCD_X_SETCHROMA:

    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8000f6a:	6813      	ldr	r3, [r2, #0]
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
    
    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 8000f6c:	0419      	lsls	r1, r3, #16
 8000f6e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8000f72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000f76:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8000f7a:	4311      	orrs	r1, r2
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <LCD_X_DisplayDriver+0x184>)
 8000f80:	4319      	orrs	r1, r3
 8000f82:	f002 fcce 	bl	8003922 <HAL_LTDC_ConfigColorKeying>
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) 
{
  int r = 0;
 8000f86:	2000      	movs	r0, #0
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
    
    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
    break;
 8000f88:	e001      	b.n	8000f8e <LCD_X_DisplayDriver+0x17a>

  default:
    r = -1;
 8000f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  return r;
}
 8000f8e:	b00f      	add	sp, #60	; 0x3c
 8000f90:	bd30      	pop	{r4, r5, pc}
 8000f92:	bf00      	nop
 8000f94:	200008c4 	.word	0x200008c4
 8000f98:	200286e0 	.word	0x200286e0

08000f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fa2:	e003      	b.n	8000fac <LoopCopyDataInit>

08000fa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000faa:	3104      	adds	r1, #4

08000fac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fac:	480b      	ldr	r0, [pc, #44]	; (8000fdc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fb0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fb2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fb4:	d3f6      	bcc.n	8000fa4 <CopyDataInit>
  ldr  r2, =_sbss
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fb8:	e002      	b.n	8000fc0 <LoopFillZerobss>

08000fba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fbc:	f842 3b04 	str.w	r3, [r2], #4

08000fc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fc4:	d3f9      	bcc.n	8000fba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fc6:	f000 f813 	bl	8000ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fca:	f012 f8e9 	bl	80131a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fce:	f7ff fb5b 	bl	8000688 <main>
  bx  lr    
 8000fd2:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fd4:	2004ffff 	.word	0x2004ffff
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000fd8:	08068c3c 	.word	0x08068c3c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fe0:	20000810 	.word	0x20000810
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000fe4:	20000810 	.word	0x20000810
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fe8:	20028954 	.word	0x20028954

08000fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC_IRQHandler>
	...

08000ff0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff0:	490f      	ldr	r1, [pc, #60]	; (8001030 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ff2:	2000      	movs	r0, #0
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <SystemInit+0x44>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	f042 0201 	orr.w	r2, r2, #1
 8001008:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800100a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001012:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001016:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <SystemInit+0x48>)
 800101a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001022:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001024:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001026:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800102a:	608b      	str	r3, [r1, #8]
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000ed00 	.word	0xe000ed00
 8001034:	40023800 	.word	0x40023800
 8001038:	24003010 	.word	0x24003010

0800103c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800103c:	4a06      	ldr	r2, [pc, #24]	; (8001058 <prvResetNextTaskUnblockTime+0x1c>)
 800103e:	6813      	ldr	r3, [r2, #0]
 8001040:	6819      	ldr	r1, [r3, #0]
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <prvResetNextTaskUnblockTime+0x20>)
 8001044:	b911      	cbnz	r1, 800104c <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001046:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800104a:	e003      	b.n	8001054 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800104c:	6812      	ldr	r2, [r2, #0]
 800104e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8001050:	68d2      	ldr	r2, [r2, #12]
 8001052:	6852      	ldr	r2, [r2, #4]
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	4770      	bx	lr
 8001058:	20000910 	.word	0x20000910
 800105c:	20000004 	.word	0x20000004

08001060 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <prvAddCurrentTaskToDelayedList+0x3c>)
 8001062:	681a      	ldr	r2, [r3, #0]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8001064:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001066:	6050      	str	r0, [r2, #4]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8001068:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 800106a:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <prvAddCurrentTaskToDelayedList+0x40>)
 800106c:	6812      	ldr	r2, [r2, #0]
 800106e:	4290      	cmp	r0, r2
 8001070:	d207      	bcs.n	8001082 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001072:	4a0c      	ldr	r2, [pc, #48]	; (80010a4 <prvAddCurrentTaskToDelayedList+0x44>)
 8001074:	6810      	ldr	r0, [r2, #0]
 8001076:	6819      	ldr	r1, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800107c:	3104      	adds	r1, #4
 800107e:	f001 bdce 	b.w	8002c1e <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001082:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <prvAddCurrentTaskToDelayedList+0x48>)
 8001084:	6810      	ldr	r0, [r2, #0]
 8001086:	6819      	ldr	r1, [r3, #0]
 8001088:	3104      	adds	r1, #4
 800108a:	f001 fdc8 	bl	8002c1e <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <prvAddCurrentTaskToDelayedList+0x4c>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4294      	cmp	r4, r2
 8001094:	d200      	bcs.n	8001098 <prvAddCurrentTaskToDelayedList+0x38>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8001096:	601c      	str	r4, [r3, #0]
 8001098:	bd10      	pop	{r4, pc}
 800109a:	bf00      	nop
 800109c:	20000a40 	.word	0x20000a40
 80010a0:	20000a58 	.word	0x20000a58
 80010a4:	20000a5c 	.word	0x20000a5c
 80010a8:	20000910 	.word	0x20000910
 80010ac:	20000004 	.word	0x20000004

080010b0 <xTaskGenericCreate.part.5>:
	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 80010b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010b4:	469a      	mov	sl, r3
 80010b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80010b8:	4681      	mov	r9, r0
 80010ba:	460e      	mov	r6, r1
 80010bc:	4615      	mov	r5, r2
 80010be:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010c0:	b93b      	cbnz	r3, 80010d2 <xTaskGenericCreate.part.5+0x22>
 80010c2:	0090      	lsls	r0, r2, #2
 80010c4:	f000 fdf2 	bl	8001cac <pvPortMalloc>

		if( pxStack != NULL )
 80010c8:	4683      	mov	fp, r0
 80010ca:	2800      	cmp	r0, #0
 80010cc:	f000 80b2 	beq.w	8001234 <xTaskGenericCreate.part.5+0x184>
 80010d0:	e000      	b.n	80010d4 <xTaskGenericCreate.part.5+0x24>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010d2:	469b      	mov	fp, r3

		if( pxStack != NULL )
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80010d4:	205c      	movs	r0, #92	; 0x5c
 80010d6:	f000 fde9 	bl	8001cac <pvPortMalloc>

			if( pxNewTCB != NULL )
 80010da:	4604      	mov	r4, r0
 80010dc:	b188      	cbz	r0, 8001102 <xTaskGenericCreate.part.5+0x52>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 80010de:	00ad      	lsls	r5, r5, #2
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 80010e0:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 80010e4:	21a5      	movs	r1, #165	; 0xa5
 80010e6:	4658      	mov	r0, fp
 80010e8:	462a      	mov	r2, r5
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80010ea:	3d04      	subs	r5, #4
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 80010ec:	f012 f916 	bl	801331c <memset>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80010f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010f2:	f104 0233 	add.w	r2, r4, #51	; 0x33
 80010f6:	441d      	add	r5, r3
 80010f8:	1e73      	subs	r3, r6, #1
 80010fa:	360f      	adds	r6, #15
 80010fc:	f025 0507 	bic.w	r5, r5, #7
 8001100:	e005      	b.n	800110e <xTaskGenericCreate.part.5+0x5e>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 8001102:	4658      	mov	r0, fp
 8001104:	f000 fdfa 	bl	8001cfc <vPortFree>
 8001108:	e094      	b.n	8001234 <xTaskGenericCreate.part.5+0x184>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800110a:	429e      	cmp	r6, r3
 800110c:	d006      	beq.n	800111c <xTaskGenericCreate.part.5+0x6c>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800110e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001112:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001116:	7819      	ldrb	r1, [r3, #0]
 8001118:	2900      	cmp	r1, #0
 800111a:	d1f6      	bne.n	800110a <xTaskGenericCreate.part.5+0x5a>
 800111c:	2f0b      	cmp	r7, #11
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800111e:	f04f 0800 	mov.w	r8, #0
 8001122:	46bb      	mov	fp, r7
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001124:	f104 0604 	add.w	r6, r4, #4
 8001128:	bf28      	it	cs
 800112a:	f04f 0b0b 	movcs.w	fp, #11
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800112e:	f884 8043 	strb.w	r8, [r4, #67]	; 0x43
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001132:	4630      	mov	r0, r6

	pxTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
 8001134:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8001138:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 800113c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001140:	f001 fd5e 	bl	8002c00 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8001144:	f104 0018 	add.w	r0, r4, #24
 8001148:	f001 fd5a 	bl	8002c00 <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800114c:	f1cb 030c 	rsb	r3, fp, #12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 8001150:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001154:	4652      	mov	r2, sl
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001156:	61a3      	str	r3, [r4, #24]
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001158:	4649      	mov	r1, r9
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800115a:	6124      	str	r4, [r4, #16]
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800115c:	4628      	mov	r0, r5
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800115e:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
 8001160:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001164:	f000 fe0e 	bl	8001d84 <pxPortInitialiseStack>
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8001168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800116a:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 800116c:	b103      	cbz	r3, 8001170 <xTaskGenericCreate.part.5+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800116e:	601c      	str	r4, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8001170:	f000 fe28 	bl	8001dc4 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8001174:	4a31      	ldr	r2, [pc, #196]	; (800123c <xTaskGenericCreate.part.5+0x18c>)
			if( pxCurrentTCB == NULL )
 8001176:	4d32      	ldr	r5, [pc, #200]	; (8001240 <xTaskGenericCreate.part.5+0x190>)

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 8001178:	6813      	ldr	r3, [r2, #0]
 800117a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8001268 <xTaskGenericCreate.part.5+0x1b8>
 800117e:	3301      	adds	r3, #1
 8001180:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 8001182:	682b      	ldr	r3, [r5, #0]
 8001184:	bb3b      	cbnz	r3, 80011d6 <xTaskGenericCreate.part.5+0x126>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8001186:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001188:	6812      	ldr	r2, [r2, #0]
 800118a:	2a01      	cmp	r2, #1
 800118c:	d12b      	bne.n	80011e6 <xTaskGenericCreate.part.5+0x136>
 800118e:	4698      	mov	r8, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001190:	eb09 0008 	add.w	r0, r9, r8
 8001194:	f108 0814 	add.w	r8, r8, #20
 8001198:	f001 fd27 	bl	8002bea <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800119c:	f1b8 0ff0 	cmp.w	r8, #240	; 0xf0
 80011a0:	d1f6      	bne.n	8001190 <xTaskGenericCreate.part.5+0xe0>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80011a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800126c <xTaskGenericCreate.part.5+0x1bc>
	vListInitialise( &xDelayedTaskList2 );
 80011a6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8001270 <xTaskGenericCreate.part.5+0x1c0>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80011aa:	4650      	mov	r0, sl
 80011ac:	f001 fd1d 	bl	8002bea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80011b0:	4640      	mov	r0, r8
 80011b2:	f001 fd1a 	bl	8002bea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80011b6:	4823      	ldr	r0, [pc, #140]	; (8001244 <xTaskGenericCreate.part.5+0x194>)
 80011b8:	f001 fd17 	bl	8002bea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80011bc:	4822      	ldr	r0, [pc, #136]	; (8001248 <xTaskGenericCreate.part.5+0x198>)
 80011be:	f001 fd14 	bl	8002bea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80011c2:	4822      	ldr	r0, [pc, #136]	; (800124c <xTaskGenericCreate.part.5+0x19c>)
 80011c4:	f001 fd11 	bl	8002bea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80011c8:	4b21      	ldr	r3, [pc, #132]	; (8001250 <xTaskGenericCreate.part.5+0x1a0>)
 80011ca:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <xTaskGenericCreate.part.5+0x1a4>)
 80011d0:	f8c3 8000 	str.w	r8, [r3]
 80011d4:	e007      	b.n	80011e6 <xTaskGenericCreate.part.5+0x136>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <xTaskGenericCreate.part.5+0x1a8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	b923      	cbnz	r3, 80011e6 <xTaskGenericCreate.part.5+0x136>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80011dc:	682b      	ldr	r3, [r5, #0]
 80011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e0:	429f      	cmp	r7, r3
 80011e2:	d300      	bcc.n	80011e6 <xTaskGenericCreate.part.5+0x136>
					{
						pxCurrentTCB = pxNewTCB;
 80011e4:	602c      	str	r4, [r5, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80011e6:	4a1d      	ldr	r2, [pc, #116]	; (800125c <xTaskGenericCreate.part.5+0x1ac>)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80011e8:	491d      	ldr	r1, [pc, #116]	; (8001260 <xTaskGenericCreate.part.5+0x1b0>)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80011ea:	6813      	ldr	r3, [r2, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 80011f0:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80011f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011f4:	2401      	movs	r4, #1
 80011f6:	680b      	ldr	r3, [r1, #0]
 80011f8:	fa04 f002 	lsl.w	r0, r4, r2
 80011fc:	4303      	orrs	r3, r0
 80011fe:	2014      	movs	r0, #20
 8001200:	600b      	str	r3, [r1, #0]
 8001202:	4631      	mov	r1, r6
 8001204:	fb00 9002 	mla	r0, r0, r2, r9
 8001208:	f001 fcfd 	bl	8002c06 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 800120c:	f000 fe00 	bl	8001e10 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <xTaskGenericCreate.part.5+0x1a8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	b15b      	cbz	r3, 800122e <xTaskGenericCreate.part.5+0x17e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8001216:	682b      	ldr	r3, [r5, #0]
 8001218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121a:	429f      	cmp	r7, r3
 800121c:	d907      	bls.n	800122e <xTaskGenericCreate.part.5+0x17e>
			{
				taskYIELD_IF_USING_PREEMPTION();
 800121e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <xTaskGenericCreate.part.5+0x1b4>)
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	f3bf 8f4f 	dsb	sy
 800122a:	f3bf 8f6f 	isb	sy
	{
		if( xSchedulerRunning != pdFALSE )
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 800122e:	4620      	mov	r0, r4
 8001230:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8001238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800123c:	20000a78 	.word	0x20000a78
 8001240:	20000a40 	.word	0x20000a40
 8001244:	20000a44 	.word	0x20000a44
 8001248:	2000091c 	.word	0x2000091c
 800124c:	200008fc 	.word	0x200008fc
 8001250:	20000910 	.word	0x20000910
 8001254:	20000a5c 	.word	0x20000a5c
 8001258:	20000914 	.word	0x20000914
 800125c:	20000a60 	.word	0x20000a60
 8001260:	20000a7c 	.word	0x20000a7c
 8001264:	e000ed04 	.word	0xe000ed04
 8001268:	20000948 	.word	0x20000948
 800126c:	20000a64 	.word	0x20000a64
 8001270:	20000930 	.word	0x20000930

08001274 <prvTaskIsTaskSuspended.part.0>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001278:	b672      	cpsid	i
 800127a:	f383 8811 	msr	BASEPRI, r3
 800127e:	f3bf 8f6f 	isb	sy
 8001282:	f3bf 8f4f 	dsb	sy
 8001286:	b662      	cpsie	i
 8001288:	e7fe      	b.n	8001288 <prvTaskIsTaskSuspended.part.0+0x14>

0800128a <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800128a:	b470      	push	{r4, r5, r6}
 800128c:	ac03      	add	r4, sp, #12
 800128e:	cc70      	ldmia	r4, {r4, r5, r6}
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 8001290:	b950      	cbnz	r0, 80012a8 <xTaskGenericCreate+0x1e>
 8001292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001296:	b672      	cpsid	i
 8001298:	f383 8811 	msr	BASEPRI, r3
 800129c:	f3bf 8f6f 	isb	sy
 80012a0:	f3bf 8f4f 	dsb	sy
 80012a4:	b662      	cpsie	i
 80012a6:	e7fe      	b.n	80012a6 <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 80012a8:	2c0b      	cmp	r4, #11
 80012aa:	d90a      	bls.n	80012c2 <xTaskGenericCreate+0x38>
 80012ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b0:	b672      	cpsid	i
 80012b2:	f383 8811 	msr	BASEPRI, r3
 80012b6:	f3bf 8f6f 	isb	sy
 80012ba:	f3bf 8f4f 	dsb	sy
 80012be:	b662      	cpsie	i
 80012c0:	e7fe      	b.n	80012c0 <xTaskGenericCreate+0x36>
 80012c2:	9605      	str	r6, [sp, #20]
 80012c4:	9504      	str	r5, [sp, #16]
 80012c6:	9403      	str	r4, [sp, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 80012c8:	bc70      	pop	{r4, r5, r6}
 80012ca:	f7ff bef1 	b.w	80010b0 <xTaskGenericCreate.part.5>
	...

080012d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80012d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80012d2:	2400      	movs	r4, #0
 80012d4:	2280      	movs	r2, #128	; 0x80
 80012d6:	4917      	ldr	r1, [pc, #92]	; (8001334 <vTaskStartScheduler+0x64>)
 80012d8:	9402      	str	r4, [sp, #8]
 80012da:	4623      	mov	r3, r4
 80012dc:	9401      	str	r4, [sp, #4]
 80012de:	9400      	str	r4, [sp, #0]
 80012e0:	4815      	ldr	r0, [pc, #84]	; (8001338 <vTaskStartScheduler+0x68>)
 80012e2:	f7ff fee5 	bl	80010b0 <xTaskGenericCreate.part.5>
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80012e6:	2801      	cmp	r0, #1
 80012e8:	d116      	bne.n	8001318 <vTaskStartScheduler+0x48>
		{
			xReturn = xTimerCreateTimerTask();
 80012ea:	f000 fee3 	bl	80020b4 <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80012ee:	2801      	cmp	r0, #1
 80012f0:	d112      	bne.n	8001318 <vTaskStartScheduler+0x48>
 80012f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012f6:	b672      	cpsid	i
 80012f8:	f383 8811 	msr	BASEPRI, r3
 80012fc:	f3bf 8f6f 	isb	sy
 8001300:	f3bf 8f4f 	dsb	sy
 8001304:	b662      	cpsie	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <vTaskStartScheduler+0x6c>)
 8001308:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <vTaskStartScheduler+0x70>)
 800130c:	601c      	str	r4, [r3, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 800130e:	b004      	add	sp, #16
 8001310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001314:	f000 bdf2 	b.w	8001efc <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8001318:	b950      	cbnz	r0, 8001330 <vTaskStartScheduler+0x60>
 800131a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800131e:	b672      	cpsid	i
 8001320:	f383 8811 	msr	BASEPRI, r3
 8001324:	f3bf 8f6f 	isb	sy
 8001328:	f3bf 8f4f 	dsb	sy
 800132c:	b662      	cpsie	i
 800132e:	e7fe      	b.n	800132e <vTaskStartScheduler+0x5e>
	}
}
 8001330:	b004      	add	sp, #16
 8001332:	bd10      	pop	{r4, pc}
 8001334:	08064a3c 	.word	0x08064a3c
 8001338:	08001625 	.word	0x08001625
 800133c:	20000914 	.word	0x20000914
 8001340:	20000a58 	.word	0x20000a58

08001344 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001344:	4a02      	ldr	r2, [pc, #8]	; (8001350 <vTaskSuspendAll+0xc>)
 8001346:	6813      	ldr	r3, [r2, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000a38 	.word	0x20000a38

08001354 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001354:	4b01      	ldr	r3, [pc, #4]	; (800135c <xTaskGetTickCount+0x8>)
 8001356:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000a58 	.word	0x20000a58

08001360 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001360:	b508      	push	{r3, lr}
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001362:	f000 fe1f 	bl	8001fa4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
 8001366:	4b01      	ldr	r3, [pc, #4]	; (800136c <xTaskGetTickCountFromISR+0xc>)
 8001368:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 800136a:	bd08      	pop	{r3, pc}
 800136c:	20000a58 	.word	0x20000a58

08001370 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001370:	4b45      	ldr	r3, [pc, #276]	; (8001488 <xTaskIncrementTick+0x118>)
 8001372:	681b      	ldr	r3, [r3, #0]

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001378:	2b00      	cmp	r3, #0
 800137a:	d144      	bne.n	8001406 <xTaskIncrementTick+0x96>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 800137c:	4b43      	ldr	r3, [pc, #268]	; (800148c <xTaskIncrementTick+0x11c>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	3201      	adds	r2, #1
 8001382:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8001384:	681d      	ldr	r5, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 8001386:	b9cd      	cbnz	r5, 80013bc <xTaskIncrementTick+0x4c>
			{
				taskSWITCH_DELAYED_LISTS();
 8001388:	4b41      	ldr	r3, [pc, #260]	; (8001490 <xTaskIncrementTick+0x120>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	b152      	cbz	r2, 80013a6 <xTaskIncrementTick+0x36>
 8001390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001394:	b672      	cpsid	i
 8001396:	f383 8811 	msr	BASEPRI, r3
 800139a:	f3bf 8f6f 	isb	sy
 800139e:	f3bf 8f4f 	dsb	sy
 80013a2:	b662      	cpsie	i
 80013a4:	e7fe      	b.n	80013a4 <xTaskIncrementTick+0x34>
 80013a6:	4a3b      	ldr	r2, [pc, #236]	; (8001494 <xTaskIncrementTick+0x124>)
 80013a8:	6819      	ldr	r1, [r3, #0]
 80013aa:	6810      	ldr	r0, [r2, #0]
 80013ac:	6018      	str	r0, [r3, #0]
 80013ae:	6011      	str	r1, [r2, #0]
 80013b0:	4a39      	ldr	r2, [pc, #228]	; (8001498 <xTaskIncrementTick+0x128>)
 80013b2:	6813      	ldr	r3, [r2, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	f7ff fe40 	bl	800103c <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 80013bc:	4c37      	ldr	r4, [pc, #220]	; (800149c <xTaskIncrementTick+0x12c>)
 80013be:	f04f 0b00 	mov.w	fp, #0
 80013c2:	4e37      	ldr	r6, [pc, #220]	; (80014a0 <xTaskIncrementTick+0x130>)
 80013c4:	6823      	ldr	r3, [r4, #0]
 80013c6:	9401      	str	r4, [sp, #4]
 80013c8:	429d      	cmp	r5, r3
 80013ca:	4f36      	ldr	r7, [pc, #216]	; (80014a4 <xTaskIncrementTick+0x134>)
 80013cc:	d30b      	bcc.n	80013e6 <xTaskIncrementTick+0x76>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013ce:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001490 <xTaskIncrementTick+0x120>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 80013d2:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 80014b0 <xTaskIncrementTick+0x140>
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013d6:	f8d8 2000 	ldr.w	r2, [r8]
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	b9e2      	cbnz	r2, 8001418 <xTaskIncrementTick+0xa8>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 80013de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013e2:	9b01      	ldr	r3, [sp, #4]
 80013e4:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80013ea:	2214      	movs	r2, #20
 80013ec:	434a      	muls	r2, r1
 80013ee:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 80013f0:	2a02      	cmp	r2, #2

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80013f2:	4a2d      	ldr	r2, [pc, #180]	; (80014a8 <xTaskIncrementTick+0x138>)
 80013f4:	6812      	ldr	r2, [r2, #0]
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
 80013f6:	bf28      	it	cs
 80013f8:	f04f 0b01 	movcs.w	fp, #1

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80013fc:	2a00      	cmp	r2, #0
 80013fe:	d139      	bne.n	8001474 <xTaskIncrementTick+0x104>
			{
				vApplicationTickHook();
 8001400:	f003 fb5e 	bl	8004ac0 <vApplicationTickHook>
 8001404:	e036      	b.n	8001474 <xTaskIncrementTick+0x104>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001406:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <xTaskIncrementTick+0x138>)

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001408:	f04f 0b00 	mov.w	fp, #0
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800140c:	6813      	ldr	r3, [r2, #0]
 800140e:	3301      	adds	r3, #1
 8001410:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8001412:	f003 fb55 	bl	8004ac0 <vApplicationTickHook>
 8001416:	e02d      	b.n	8001474 <xTaskIncrementTick+0x104>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001418:	f8d8 2000 	ldr.w	r2, [r8]
 800141c:	68d2      	ldr	r2, [r2, #12]
 800141e:	68d4      	ldr	r4, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8001420:	6861      	ldr	r1, [r4, #4]

						if( xConstTickCount < xItemValue )
 8001422:	428d      	cmp	r5, r1
 8001424:	d202      	bcs.n	800142c <xTaskIncrementTick+0xbc>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8001426:	9b01      	ldr	r3, [sp, #4]
 8001428:	6019      	str	r1, [r3, #0]
							break;
 800142a:	e7dc      	b.n	80013e6 <xTaskIncrementTick+0x76>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800142c:	f104 0a04 	add.w	sl, r4, #4
 8001430:	4650      	mov	r0, sl
 8001432:	f001 fc0c 	bl	8002c4e <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001436:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001438:	b119      	cbz	r1, 8001442 <xTaskIncrementTick+0xd2>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800143a:	f104 0018 	add.w	r0, r4, #24
 800143e:	f001 fc06 	bl	8002c4e <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8001442:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001444:	2301      	movs	r3, #1
 8001446:	f8d9 1000 	ldr.w	r1, [r9]
 800144a:	fa03 fe00 	lsl.w	lr, r3, r0
 800144e:	ea4e 0101 	orr.w	r1, lr, r1
 8001452:	f04f 0e14 	mov.w	lr, #20
 8001456:	f8c9 1000 	str.w	r1, [r9]
 800145a:	4651      	mov	r1, sl
 800145c:	fb0e 6000 	mla	r0, lr, r0, r6
 8001460:	f001 fbd1 	bl	8002c06 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001464:	6838      	ldr	r0, [r7, #0]
 8001466:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001468:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 800146a:	4291      	cmp	r1, r2
 800146c:	bf28      	it	cs
 800146e:	f04f 0b01 	movcs.w	fp, #1
 8001472:	e7b0      	b.n	80013d6 <xTaskIncrementTick+0x66>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001474:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <xTaskIncrementTick+0x13c>)
 8001476:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 8001478:	2a00      	cmp	r2, #0
 800147a:	bf18      	it	ne
 800147c:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8001480:	4658      	mov	r0, fp
 8001482:	b003      	add	sp, #12
 8001484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001488:	20000a38 	.word	0x20000a38
 800148c:	20000a58 	.word	0x20000a58
 8001490:	20000910 	.word	0x20000910
 8001494:	20000a5c 	.word	0x20000a5c
 8001498:	20000a3c 	.word	0x20000a3c
 800149c:	20000004 	.word	0x20000004
 80014a0:	20000948 	.word	0x20000948
 80014a4:	20000a40 	.word	0x20000a40
 80014a8:	20000944 	.word	0x20000944
 80014ac:	20000a80 	.word	0x20000a80
 80014b0:	20000a7c 	.word	0x20000a7c

080014b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80014b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80014b8:	4c31      	ldr	r4, [pc, #196]	; (8001580 <xTaskResumeAll+0xcc>)
 80014ba:	6823      	ldr	r3, [r4, #0]
 80014bc:	b953      	cbnz	r3, 80014d4 <xTaskResumeAll+0x20>
 80014be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014c2:	b672      	cpsid	i
 80014c4:	f383 8811 	msr	BASEPRI, r3
 80014c8:	f3bf 8f6f 	isb	sy
 80014cc:	f3bf 8f4f 	dsb	sy
 80014d0:	b662      	cpsie	i
 80014d2:	e7fe      	b.n	80014d2 <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80014d4:	f000 fc76 	bl	8001dc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	3b01      	subs	r3, #1
 80014dc:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	b10b      	cbz	r3, 80014e6 <xTaskResumeAll+0x32>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 80014e2:	2400      	movs	r4, #0
 80014e4:	e047      	b.n	8001576 <xTaskResumeAll+0xc2>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <xTaskResumeAll+0xd0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f9      	beq.n	80014e2 <xTaskResumeAll+0x2e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80014ee:	4d26      	ldr	r5, [pc, #152]	; (8001588 <xTaskResumeAll+0xd4>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 80014f0:	4e26      	ldr	r6, [pc, #152]	; (800158c <xTaskResumeAll+0xd8>)
 80014f2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80015a0 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80014f6:	682b      	ldr	r3, [r5, #0]
 80014f8:	b303      	cbz	r3, 800153c <xTaskResumeAll+0x88>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80014fa:	68eb      	ldr	r3, [r5, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 80014fc:	2701      	movs	r7, #1
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80014fe:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001500:	f104 0904 	add.w	r9, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001504:	f104 0018 	add.w	r0, r4, #24
 8001508:	f001 fba1 	bl	8002c4e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800150c:	4648      	mov	r0, r9
 800150e:	f001 fb9e 	bl	8002c4e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001512:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001514:	6833      	ldr	r3, [r6, #0]
 8001516:	2014      	movs	r0, #20
 8001518:	fa07 f102 	lsl.w	r1, r7, r2
 800151c:	fb00 8002 	mla	r0, r0, r2, r8
 8001520:	430b      	orrs	r3, r1
 8001522:	4649      	mov	r1, r9
 8001524:	6033      	str	r3, [r6, #0]
 8001526:	f001 fb6e 	bl	8002c06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <xTaskResumeAll+0xdc>)
 800152c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001532:	429a      	cmp	r2, r3
 8001534:	d3df      	bcc.n	80014f6 <xTaskResumeAll+0x42>
					{
						xYieldPending = pdTRUE;
 8001536:	4b17      	ldr	r3, [pc, #92]	; (8001594 <xTaskResumeAll+0xe0>)
 8001538:	601f      	str	r7, [r3, #0]
 800153a:	e7da      	b.n	80014f2 <xTaskResumeAll+0x3e>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800153c:	4c16      	ldr	r4, [pc, #88]	; (8001598 <xTaskResumeAll+0xe4>)
 800153e:	6823      	ldr	r3, [r4, #0]
 8001540:	b963      	cbnz	r3, 800155c <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8001542:	4b14      	ldr	r3, [pc, #80]	; (8001594 <xTaskResumeAll+0xe0>)
 8001544:	681c      	ldr	r4, [r3, #0]
 8001546:	2c01      	cmp	r4, #1
 8001548:	d1cb      	bne.n	80014e2 <xTaskResumeAll+0x2e>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800154a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <xTaskResumeAll+0xe8>)
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	f3bf 8f4f 	dsb	sy
 8001556:	f3bf 8f6f 	isb	sy
 800155a:	e00c      	b.n	8001576 <xTaskResumeAll+0xc2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 800155c:	4d0d      	ldr	r5, [pc, #52]	; (8001594 <xTaskResumeAll+0xe0>)
 800155e:	2601      	movs	r6, #1
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8001560:	6823      	ldr	r3, [r4, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0ed      	beq.n	8001542 <xTaskResumeAll+0x8e>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8001566:	f7ff ff03 	bl	8001370 <xTaskIncrementTick>
 800156a:	b100      	cbz	r0, 800156e <xTaskResumeAll+0xba>
						{
							xYieldPending = pdTRUE;
 800156c:	602e      	str	r6, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 800156e:	6823      	ldr	r3, [r4, #0]
 8001570:	3b01      	subs	r3, #1
 8001572:	6023      	str	r3, [r4, #0]
 8001574:	e7f4      	b.n	8001560 <xTaskResumeAll+0xac>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001576:	f000 fc4b 	bl	8001e10 <vPortExitCritical>

	return xAlreadyYielded;
}
 800157a:	4620      	mov	r0, r4
 800157c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001580:	20000a38 	.word	0x20000a38
 8001584:	20000a78 	.word	0x20000a78
 8001588:	20000a44 	.word	0x20000a44
 800158c:	20000a7c 	.word	0x20000a7c
 8001590:	20000a40 	.word	0x20000a40
 8001594:	20000a80 	.word	0x20000a80
 8001598:	20000944 	.word	0x20000944
 800159c:	e000ed04 	.word	0xe000ed04
 80015a0:	20000948 	.word	0x20000948

080015a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80015a4:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80015a6:	b940      	cbnz	r0, 80015ba <vTaskDelay+0x16>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 80015a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <vTaskDelay+0x6c>)
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	f3bf 8f4f 	dsb	sy
 80015b4:	f3bf 8f6f 	isb	sy
 80015b8:	bd38      	pop	{r3, r4, r5, pc}


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <vTaskDelay+0x70>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	b153      	cbz	r3, 80015d6 <vTaskDelay+0x32>
 80015c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c4:	b672      	cpsid	i
 80015c6:	f383 8811 	msr	BASEPRI, r3
 80015ca:	f3bf 8f6f 	isb	sy
 80015ce:	f3bf 8f4f 	dsb	sy
 80015d2:	b662      	cpsie	i
 80015d4:	e7fe      	b.n	80015d4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80015d6:	f7ff feb5 	bl	8001344 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <vTaskDelay+0x74>)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80015dc:	4d0f      	ldr	r5, [pc, #60]	; (800161c <vTaskDelay+0x78>)
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	18c4      	adds	r4, r0, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80015e2:	6828      	ldr	r0, [r5, #0]
 80015e4:	3004      	adds	r0, #4
 80015e6:	f001 fb32 	bl	8002c4e <uxListRemove>
 80015ea:	b940      	cbnz	r0, 80015fe <vTaskDelay+0x5a>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80015ec:	682b      	ldr	r3, [r5, #0]
 80015ee:	490c      	ldr	r1, [pc, #48]	; (8001620 <vTaskDelay+0x7c>)
 80015f0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80015f2:	2301      	movs	r3, #1
 80015f4:	680a      	ldr	r2, [r1, #0]
 80015f6:	4083      	lsls	r3, r0
 80015f8:	ea22 0303 	bic.w	r3, r2, r3
 80015fc:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80015fe:	4620      	mov	r0, r4
 8001600:	f7ff fd2e 	bl	8001060 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001604:	f7ff ff56 	bl	80014b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001608:	2800      	cmp	r0, #0
 800160a:	d0cd      	beq.n	80015a8 <vTaskDelay+0x4>
 800160c:	bd38      	pop	{r3, r4, r5, pc}
 800160e:	bf00      	nop
 8001610:	e000ed04 	.word	0xe000ed04
 8001614:	20000a38 	.word	0x20000a38
 8001618:	20000a58 	.word	0x20000a58
 800161c:	20000a40 	.word	0x20000a40
 8001620:	20000a7c 	.word	0x20000a7c

08001624 <prvIdleTask>:
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8001624:	4d19      	ldr	r5, [pc, #100]	; (800168c <prvIdleTask+0x68>)
 8001626:	462e      	mov	r6, r5
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001628:	b580      	push	{r7, lr}
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800162a:	4f19      	ldr	r7, [pc, #100]	; (8001690 <prvIdleTask+0x6c>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800162c:	682b      	ldr	r3, [r5, #0]
 800162e:	b1f3      	cbz	r3, 800166e <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 8001630:	f7ff fe88 	bl	8001344 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001634:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 8001636:	f7ff ff3d 	bl	80014b4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800163a:	2c00      	cmp	r4, #0
 800163c:	d0f6      	beq.n	800162c <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800163e:	f000 fbc1 	bl	8001dc4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <prvIdleTask+0x6c>)
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001648:	1d20      	adds	r0, r4, #4
 800164a:	f001 fb00 	bl	8002c4e <uxListRemove>
					--uxCurrentNumberOfTasks;
 800164e:	4a11      	ldr	r2, [pc, #68]	; (8001694 <prvIdleTask+0x70>)
 8001650:	6813      	ldr	r3, [r2, #0]
 8001652:	3b01      	subs	r3, #1
 8001654:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 8001656:	6833      	ldr	r3, [r6, #0]
 8001658:	3b01      	subs	r3, #1
 800165a:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 800165c:	f000 fbd8 	bl	8001e10 <vPortExitCritical>
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 8001660:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001662:	f000 fb4b 	bl	8001cfc <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 8001666:	4620      	mov	r0, r4
 8001668:	f000 fb48 	bl	8001cfc <vPortFree>
 800166c:	e7de      	b.n	800162c <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <prvIdleTask+0x74>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d907      	bls.n	8001686 <prvIdleTask+0x62>
			{
				taskYIELD();
 8001676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <prvIdleTask+0x78>)
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	f3bf 8f4f 	dsb	sy
 8001682:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8001686:	f003 fa11 	bl	8004aac <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 800168a:	e7ce      	b.n	800162a <prvIdleTask+0x6>
 800168c:	20000918 	.word	0x20000918
 8001690:	2000091c 	.word	0x2000091c
 8001694:	20000a78 	.word	0x20000a78
 8001698:	20000948 	.word	0x20000948
 800169c:	e000ed04 	.word	0xe000ed04

080016a0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <vTaskSwitchContext+0x70>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <vTaskSwitchContext+0x74>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80016a6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80016a8:	b112      	cbz	r2, 80016b0 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80016aa:	2201      	movs	r2, #1
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	bd10      	pop	{r4, pc}
	}
	else
	{
		xYieldPending = pdFALSE;
 80016b0:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 80016b2:	f003 fa3b 	bl	8004b2c <EndIdleMonitor>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <vTaskSwitchContext+0x78>)
 80016b8:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80016ba:	fab3 f383 	clz	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2214      	movs	r2, #20
 80016c2:	4916      	ldr	r1, [pc, #88]	; (800171c <vTaskSwitchContext+0x7c>)
 80016c4:	f1c3 031f 	rsb	r3, r3, #31
 80016c8:	435a      	muls	r2, r3
 80016ca:	588c      	ldr	r4, [r1, r2]
 80016cc:	1888      	adds	r0, r1, r2
 80016ce:	b954      	cbnz	r4, 80016e6 <vTaskSwitchContext+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80016d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016d4:	b672      	cpsid	i
 80016d6:	f383 8811 	msr	BASEPRI, r3
 80016da:	f3bf 8f6f 	isb	sy
 80016de:	f3bf 8f4f 	dsb	sy
 80016e2:	b662      	cpsie	i
 80016e4:	e7fe      	b.n	80016e4 <vTaskSwitchContext+0x44>
 80016e6:	6844      	ldr	r4, [r0, #4]
 80016e8:	3208      	adds	r2, #8
 80016ea:	6864      	ldr	r4, [r4, #4]
 80016ec:	440a      	add	r2, r1
 80016ee:	4294      	cmp	r4, r2
 80016f0:	6044      	str	r4, [r0, #4]
 80016f2:	bf04      	itt	eq
 80016f4:	6862      	ldreq	r2, [r4, #4]
 80016f6:	6042      	streq	r2, [r0, #4]
 80016f8:	2214      	movs	r2, #20
 80016fa:	fb02 1303 	mla	r3, r2, r3, r1
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <vTaskSwitchContext+0x80>)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001708:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
 800170a:	f003 b9ff 	b.w	8004b0c <StartIdleMonitor>
 800170e:	bf00      	nop
 8001710:	20000a38 	.word	0x20000a38
 8001714:	20000a80 	.word	0x20000a80
 8001718:	20000a7c 	.word	0x20000a7c
 800171c:	20000948 	.word	0x20000948
 8001720:	20000a40 	.word	0x20000a40

08001724 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001724:	b538      	push	{r3, r4, r5, lr}
 8001726:	460d      	mov	r5, r1
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 8001728:	b950      	cbnz	r0, 8001740 <vTaskPlaceOnEventList+0x1c>
 800172a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800172e:	b672      	cpsid	i
 8001730:	f383 8811 	msr	BASEPRI, r3
 8001734:	f3bf 8f6f 	isb	sy
 8001738:	f3bf 8f4f 	dsb	sy
 800173c:	b662      	cpsie	i
 800173e:	e7fe      	b.n	800173e <vTaskPlaceOnEventList+0x1a>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001740:	4c11      	ldr	r4, [pc, #68]	; (8001788 <vTaskPlaceOnEventList+0x64>)
 8001742:	6821      	ldr	r1, [r4, #0]
 8001744:	3118      	adds	r1, #24
 8001746:	f001 fa6a 	bl	8002c1e <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800174a:	6820      	ldr	r0, [r4, #0]
 800174c:	3004      	adds	r0, #4
 800174e:	f001 fa7e 	bl	8002c4e <uxListRemove>
 8001752:	b940      	cbnz	r0, 8001766 <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	490d      	ldr	r1, [pc, #52]	; (800178c <vTaskPlaceOnEventList+0x68>)
 8001758:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800175a:	2301      	movs	r3, #1
 800175c:	680a      	ldr	r2, [r1, #0]
 800175e:	4083      	lsls	r3, r0
 8001760:	ea22 0303 	bic.w	r3, r2, r3
 8001764:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8001766:	1c6b      	adds	r3, r5, #1
 8001768:	d106      	bne.n	8001778 <vTaskPlaceOnEventList+0x54>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800176a:	6821      	ldr	r1, [r4, #0]
 800176c:	4808      	ldr	r0, [pc, #32]	; (8001790 <vTaskPlaceOnEventList+0x6c>)
 800176e:	3104      	adds	r1, #4
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001774:	f001 ba47 	b.w	8002c06 <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <vTaskPlaceOnEventList+0x70>)
 800177a:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800177c:	4428      	add	r0, r5
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800177e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001782:	f7ff bc6d 	b.w	8001060 <prvAddCurrentTaskToDelayedList>
 8001786:	bf00      	nop
 8001788:	20000a40 	.word	0x20000a40
 800178c:	20000a7c 	.word	0x20000a7c
 8001790:	200008fc 	.word	0x200008fc
 8001794:	20000a58 	.word	0x20000a58

08001798 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
 8001798:	b538      	push	{r3, r4, r5, lr}
 800179a:	460d      	mov	r5, r1
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
 800179c:	b950      	cbnz	r0, 80017b4 <vTaskPlaceOnEventListRestricted+0x1c>
 800179e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a2:	b672      	cpsid	i
 80017a4:	f383 8811 	msr	BASEPRI, r3
 80017a8:	f3bf 8f6f 	isb	sy
 80017ac:	f3bf 8f4f 	dsb	sy
 80017b0:	b662      	cpsie	i
 80017b2:	e7fe      	b.n	80017b2 <vTaskPlaceOnEventListRestricted+0x1a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80017b4:	4c0c      	ldr	r4, [pc, #48]	; (80017e8 <vTaskPlaceOnEventListRestricted+0x50>)
 80017b6:	6821      	ldr	r1, [r4, #0]
 80017b8:	3118      	adds	r1, #24
 80017ba:	f001 fa24 	bl	8002c06 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80017be:	6820      	ldr	r0, [r4, #0]
 80017c0:	3004      	adds	r0, #4
 80017c2:	f001 fa44 	bl	8002c4e <uxListRemove>
 80017c6:	b940      	cbnz	r0, 80017da <vTaskPlaceOnEventListRestricted+0x42>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	4908      	ldr	r1, [pc, #32]	; (80017ec <vTaskPlaceOnEventListRestricted+0x54>)
 80017cc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80017ce:	2301      	movs	r3, #1
 80017d0:	680a      	ldr	r2, [r1, #0]
 80017d2:	4083      	lsls	r3, r0
 80017d4:	ea22 0303 	bic.w	r3, r2, r3
 80017d8:	600b      	str	r3, [r1, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <vTaskPlaceOnEventListRestricted+0x58>)
 80017dc:	6818      	ldr	r0, [r3, #0]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 80017de:	4428      	add	r0, r5
	}
 80017e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 80017e4:	f7ff bc3c 	b.w	8001060 <prvAddCurrentTaskToDelayedList>
 80017e8:	20000a40 	.word	0x20000a40
 80017ec:	20000a7c 	.word	0x20000a7c
 80017f0:	20000a58 	.word	0x20000a58

080017f4 <xTaskRemoveFromEventList>:
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80017f4:	68c3      	ldr	r3, [r0, #12]

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80017f6:	b570      	push	{r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80017f8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80017fa:	b954      	cbnz	r4, 8001812 <xTaskRemoveFromEventList+0x1e>
 80017fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001800:	b672      	cpsid	i
 8001802:	f383 8811 	msr	BASEPRI, r3
 8001806:	f3bf 8f6f 	isb	sy
 800180a:	f3bf 8f4f 	dsb	sy
 800180e:	b662      	cpsie	i
 8001810:	e7fe      	b.n	8001810 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001812:	f104 0518 	add.w	r5, r4, #24
 8001816:	4628      	mov	r0, r5
 8001818:	f001 fa19 	bl	8002c4e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <xTaskRemoveFromEventList+0x70>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	b983      	cbnz	r3, 8001844 <xTaskRemoveFromEventList+0x50>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8001822:	1d26      	adds	r6, r4, #4
 8001824:	4630      	mov	r0, r6
 8001826:	f001 fa12 	bl	8002c4e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800182a:	490f      	ldr	r1, [pc, #60]	; (8001868 <xTaskRemoveFromEventList+0x74>)
 800182c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800182e:	2301      	movs	r3, #1
 8001830:	680a      	ldr	r2, [r1, #0]
 8001832:	2014      	movs	r0, #20
 8001834:	40ab      	lsls	r3, r5
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
 800183a:	4631      	mov	r1, r6
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <xTaskRemoveFromEventList+0x78>)
 800183e:	fb00 3005 	mla	r0, r0, r5, r3
 8001842:	e001      	b.n	8001848 <xTaskRemoveFromEventList+0x54>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001844:	4629      	mov	r1, r5
 8001846:	480a      	ldr	r0, [pc, #40]	; (8001870 <xTaskRemoveFromEventList+0x7c>)
 8001848:	f001 f9dd 	bl	8002c06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <xTaskRemoveFromEventList+0x80>)
 800184e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	429a      	cmp	r2, r3
 8001856:	d903      	bls.n	8001860 <xTaskRemoveFromEventList+0x6c>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001858:	2001      	movs	r0, #1
 800185a:	4b07      	ldr	r3, [pc, #28]	; (8001878 <xTaskRemoveFromEventList+0x84>)
 800185c:	6018      	str	r0, [r3, #0]
 800185e:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		xReturn = pdFALSE;
 8001860:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	20000a38 	.word	0x20000a38
 8001868:	20000a7c 	.word	0x20000a7c
 800186c:	20000948 	.word	0x20000948
 8001870:	20000a44 	.word	0x20000a44
 8001874:	20000a40 	.word	0x20000a40
 8001878:	20000a80 	.word	0x20000a80

0800187c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800187c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 800187e:	b908      	cbnz	r0, 8001884 <vTaskSetTimeOutState+0x8>
 8001880:	f7ff fcf8 	bl	8001274 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <vTaskSetTimeOutState+0x18>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800188a:	4b03      	ldr	r3, [pc, #12]	; (8001898 <vTaskSetTimeOutState+0x1c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6043      	str	r3, [r0, #4]
 8001890:	bd08      	pop	{r3, pc}
 8001892:	bf00      	nop
 8001894:	20000a3c 	.word	0x20000a3c
 8001898:	20000a58 	.word	0x20000a58

0800189c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800189c:	b538      	push	{r3, r4, r5, lr}
 800189e:	460d      	mov	r5, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80018a0:	4604      	mov	r4, r0
 80018a2:	b950      	cbnz	r0, 80018ba <xTaskCheckForTimeOut+0x1e>
 80018a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a8:	b672      	cpsid	i
 80018aa:	f383 8811 	msr	BASEPRI, r3
 80018ae:	f3bf 8f6f 	isb	sy
 80018b2:	f3bf 8f4f 	dsb	sy
 80018b6:	b662      	cpsie	i
 80018b8:	e7fe      	b.n	80018b8 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 80018ba:	b951      	cbnz	r1, 80018d2 <xTaskCheckForTimeOut+0x36>
 80018bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018c0:	b672      	cpsid	i
 80018c2:	f383 8811 	msr	BASEPRI, r3
 80018c6:	f3bf 8f6f 	isb	sy
 80018ca:	f3bf 8f4f 	dsb	sy
 80018ce:	b662      	cpsie	i
 80018d0:	e7fe      	b.n	80018d0 <xTaskCheckForTimeOut+0x34>

	taskENTER_CRITICAL();
 80018d2:	f000 fa77 	bl	8001dc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <xTaskCheckForTimeOut+0x74>)
 80018d8:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80018da:	682b      	ldr	r3, [r5, #0]
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	d010      	beq.n	8001902 <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80018e0:	4a0c      	ldr	r2, [pc, #48]	; (8001914 <xTaskCheckForTimeOut+0x78>)
 80018e2:	6820      	ldr	r0, [r4, #0]
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	4290      	cmp	r0, r2
 80018e8:	6862      	ldr	r2, [r4, #4]
 80018ea:	d001      	beq.n	80018f0 <xTaskCheckForTimeOut+0x54>
 80018ec:	4291      	cmp	r1, r2
 80018ee:	d20a      	bcs.n	8001906 <xTaskCheckForTimeOut+0x6a>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 80018f0:	1a88      	subs	r0, r1, r2
 80018f2:	4283      	cmp	r3, r0
 80018f4:	d907      	bls.n	8001906 <xTaskCheckForTimeOut+0x6a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 80018f6:	1a52      	subs	r2, r2, r1
			vTaskSetTimeOutState( pxTimeOut );
 80018f8:	4620      	mov	r0, r4
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 80018fa:	4413      	add	r3, r2
 80018fc:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80018fe:	f7ff ffbd 	bl	800187c <vTaskSetTimeOutState>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
 8001902:	2400      	movs	r4, #0
 8001904:	e000      	b.n	8001908 <xTaskCheckForTimeOut+0x6c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8001906:	2401      	movs	r4, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8001908:	f000 fa82 	bl	8001e10 <vPortExitCritical>

	return xReturn;
}
 800190c:	4620      	mov	r0, r4
 800190e:	bd38      	pop	{r3, r4, r5, pc}
 8001910:	20000a58 	.word	0x20000a58
 8001914:	20000a3c 	.word	0x20000a3c

08001918 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 8001918:	2201      	movs	r2, #1
 800191a:	4b01      	ldr	r3, [pc, #4]	; (8001920 <vTaskMissedYield+0x8>)
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	4770      	bx	lr
 8001920:	20000a80 	.word	0x20000a80

08001924 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8001924:	4b01      	ldr	r3, [pc, #4]	; (800192c <xTaskGetCurrentTaskHandle+0x8>)
 8001926:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000a40 	.word	0x20000a40

08001930 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <xTaskGetSchedulerState+0x18>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	b133      	cbz	r3, 8001944 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <xTaskGetSchedulerState+0x1c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800193c:	bf0c      	ite	eq
 800193e:	2002      	moveq	r0, #2
 8001940:	2000      	movne	r0, #0
 8001942:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001944:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 8001946:	4770      	bx	lr
 8001948:	20000914 	.word	0x20000914
 800194c:	20000a38 	.word	0x20000a38

08001950 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8001950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8001954:	4604      	mov	r4, r0
 8001956:	2800      	cmp	r0, #0
 8001958:	d038      	beq.n	80019cc <vTaskPriorityInherit+0x7c>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800195a:	4d1d      	ldr	r5, [pc, #116]	; (80019d0 <vTaskPriorityInherit+0x80>)
 800195c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800195e:	682a      	ldr	r2, [r5, #0]
 8001960:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001962:	4293      	cmp	r3, r2
 8001964:	d232      	bcs.n	80019cc <vTaskPriorityInherit+0x7c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001966:	6982      	ldr	r2, [r0, #24]
 8001968:	2a00      	cmp	r2, #0
 800196a:	db04      	blt.n	8001976 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800196c:	682a      	ldr	r2, [r5, #0]
 800196e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001970:	f1c2 020c 	rsb	r2, r2, #12
 8001974:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001976:	4e17      	ldr	r6, [pc, #92]	; (80019d4 <vTaskPriorityInherit+0x84>)
 8001978:	2714      	movs	r7, #20
 800197a:	6962      	ldr	r2, [r4, #20]
 800197c:	fb07 6303 	mla	r3, r7, r3, r6
 8001980:	429a      	cmp	r2, r3
 8001982:	d120      	bne.n	80019c6 <vTaskPriorityInherit+0x76>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001984:	f104 0804 	add.w	r8, r4, #4
 8001988:	4640      	mov	r0, r8
 800198a:	f001 f960 	bl	8002c4e <uxListRemove>
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <vTaskPriorityInherit+0x88>)
 8001990:	b948      	cbnz	r0, 80019a6 <vTaskPriorityInherit+0x56>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001992:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001994:	4347      	muls	r7, r0
 8001996:	59f2      	ldr	r2, [r6, r7]
 8001998:	b92a      	cbnz	r2, 80019a6 <vTaskPriorityInherit+0x56>
 800199a:	2201      	movs	r2, #1
 800199c:	6819      	ldr	r1, [r3, #0]
 800199e:	4082      	lsls	r2, r0
 80019a0:	ea21 0202 	bic.w	r2, r1, r2
 80019a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80019a6:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 80019a8:	2001      	movs	r0, #1
 80019aa:	4641      	mov	r1, r8
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80019ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019ae:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80019b0:	4090      	lsls	r0, r2
 80019b2:	681c      	ldr	r4, [r3, #0]
 80019b4:	4320      	orrs	r0, r4
 80019b6:	6018      	str	r0, [r3, #0]
 80019b8:	2014      	movs	r0, #20
 80019ba:	fb00 6002 	mla	r0, r0, r2, r6
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80019be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 80019c2:	f001 b920 	b.w	8002c06 <vListInsertEnd>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80019c6:	682b      	ldr	r3, [r5, #0]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80019cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019d0:	20000a40 	.word	0x20000a40
 80019d4:	20000948 	.word	0x20000948
 80019d8:	20000a7c 	.word	0x20000a7c

080019dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80019dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 80019de:	4604      	mov	r4, r0
 80019e0:	b908      	cbnz	r0, 80019e6 <xTaskPriorityDisinherit+0xa>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 80019e2:	2000      	movs	r0, #0
 80019e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80019e6:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <xTaskPriorityDisinherit+0x9c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4298      	cmp	r0, r3
 80019ec:	d00a      	beq.n	8001a04 <xTaskPriorityDisinherit+0x28>
 80019ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f2:	b672      	cpsid	i
 80019f4:	f383 8811 	msr	BASEPRI, r3
 80019f8:	f3bf 8f6f 	isb	sy
 80019fc:	f3bf 8f4f 	dsb	sy
 8001a00:	b662      	cpsie	i
 8001a02:	e7fe      	b.n	8001a02 <xTaskPriorityDisinherit+0x26>

			configASSERT( pxTCB->uxMutexesHeld );
 8001a04:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001a06:	b953      	cbnz	r3, 8001a1e <xTaskPriorityDisinherit+0x42>
 8001a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a0c:	b672      	cpsid	i
 8001a0e:	f383 8811 	msr	BASEPRI, r3
 8001a12:	f3bf 8f6f 	isb	sy
 8001a16:	f3bf 8f4f 	dsb	sy
 8001a1a:	b662      	cpsie	i
 8001a1c:	e7fe      	b.n	8001a1c <xTaskPriorityDisinherit+0x40>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001a1e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8001a20:	3b01      	subs	r3, #1

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001a22:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8001a24:	6503      	str	r3, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001a26:	4291      	cmp	r1, r2
 8001a28:	d0db      	beq.n	80019e2 <xTaskPriorityDisinherit+0x6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1d9      	bne.n	80019e2 <xTaskPriorityDisinherit+0x6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001a2e:	1d05      	adds	r5, r0, #4
 8001a30:	4e12      	ldr	r6, [pc, #72]	; (8001a7c <xTaskPriorityDisinherit+0xa0>)
 8001a32:	4628      	mov	r0, r5
 8001a34:	f001 f90b 	bl	8002c4e <uxListRemove>
 8001a38:	4a11      	ldr	r2, [pc, #68]	; (8001a80 <xTaskPriorityDisinherit+0xa4>)
 8001a3a:	b950      	cbnz	r0, 8001a52 <xTaskPriorityDisinherit+0x76>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001a3c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001a3e:	2114      	movs	r1, #20
 8001a40:	4379      	muls	r1, r7
 8001a42:	5873      	ldr	r3, [r6, r1]
 8001a44:	b92b      	cbnz	r3, 8001a52 <xTaskPriorityDisinherit+0x76>
 8001a46:	2301      	movs	r3, #1
 8001a48:	6810      	ldr	r0, [r2, #0]
 8001a4a:	40bb      	lsls	r3, r7
 8001a4c:	ea20 0303 	bic.w	r3, r0, r3
 8001a50:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001a52:	6ce3      	ldr	r3, [r4, #76]	; 0x4c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
 8001a54:	6810      	ldr	r0, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a56:	f1c3 010c 	rsb	r1, r3, #12
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001a5a:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a5c:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8001a5e:	2401      	movs	r4, #1
 8001a60:	fa04 f103 	lsl.w	r1, r4, r3
 8001a64:	4308      	orrs	r0, r1
 8001a66:	4629      	mov	r1, r5
 8001a68:	6010      	str	r0, [r2, #0]
 8001a6a:	2014      	movs	r0, #20
 8001a6c:	fb00 6003 	mla	r0, r0, r3, r6
 8001a70:	f001 f8c9 	bl	8002c06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001a74:	4620      	mov	r0, r4
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 8001a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a78:	20000a40 	.word	0x20000a40
 8001a7c:	20000948 	.word	0x20000948
 8001a80:	20000a7c 	.word	0x20000a7c

08001a84 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <pvTaskIncrementMutexHeldCount+0x14>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	b11a      	cbz	r2, 8001a92 <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8001a8a:	6819      	ldr	r1, [r3, #0]
 8001a8c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001a8e:	3201      	adds	r2, #1
 8001a90:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 8001a92:	6818      	ldr	r0, [r3, #0]
	}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000a40 	.word	0x20000a40

08001a9c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001a9c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001a9e:	f7ff fc17 	bl	80012d0 <vTaskStartScheduler>
  
  return osOK;
}
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	bd08      	pop	{r3, pc}

08001aa6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001aa6:	b570      	push	{r4, r5, r6, lr}
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8001aa8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001aac:	b086      	sub	sp, #24
 8001aae:	2500      	movs	r5, #0
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ab0:	8a02      	ldrh	r2, [r0, #16]
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8001ab2:	2c84      	cmp	r4, #132	; 0x84
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001ab4:	460b      	mov	r3, r1
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
    fpriority += (priority - osPriorityIdle);
 8001ab6:	bf14      	ite	ne
 8001ab8:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001aba:	462c      	moveq	r4, r5
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001abc:	e890 0042 	ldmia.w	r0, {r1, r6}
 8001ac0:	a805      	add	r0, sp, #20
 8001ac2:	9503      	str	r5, [sp, #12]
 8001ac4:	9502      	str	r5, [sp, #8]
 8001ac6:	9001      	str	r0, [sp, #4]
 8001ac8:	4630      	mov	r0, r6
 8001aca:	9400      	str	r4, [sp, #0]
 8001acc:	f7ff fbdd 	bl	800128a <xTaskGenericCreate>
 8001ad0:	2801      	cmp	r0, #1
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
  }
  
  return handle;
 8001ad2:	bf0c      	ite	eq
 8001ad4:	9805      	ldreq	r0, [sp, #20]
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
 8001ad6:	2000      	movne	r0, #0
  }
  
  return handle;
}
 8001ad8:	b006      	add	sp, #24
 8001ada:	bd70      	pop	{r4, r5, r6, pc}

08001adc <osThreadGetId>:
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 8001adc:	f7ff bf22 	b.w	8001924 <xTaskGetCurrentTaskHandle>

08001ae0 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	bf08      	it	eq
 8001ae4:	2001      	moveq	r0, #1
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001ae6:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001ae8:	f7ff fd5c 	bl	80015a4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001aec:	2000      	movs	r0, #0
 8001aee:	bd08      	pop	{r3, pc}

08001af0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8001af0:	b507      	push	{r0, r1, r2, lr}
#if (configUSE_TIMERS == 1)
  return xTimerCreate((const char *)"",
 8001af2:	6803      	ldr	r3, [r0, #0]
 8001af4:	3901      	subs	r1, #1
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <osTimerCreate+0x1c>)
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	4613      	mov	r3, r2
 8001afc:	424a      	negs	r2, r1
 8001afe:	414a      	adcs	r2, r1
 8001b00:	2101      	movs	r1, #1
 8001b02:	f000 fafd 	bl	8002100 <xTimerCreate>
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
#else 
	return NULL;
#endif
}
 8001b06:	b003      	add	sp, #12
 8001b08:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b0c:	08064a27 	.word	0x08064a27

08001b10 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8001b10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
	portBASE_TYPE taskWoken = pdFALSE;
 8001b14:	f04f 0800 	mov.w	r8, #0
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8001b18:	4605      	mov	r5, r0
 8001b1a:	460f      	mov	r7, r1
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
	portBASE_TYPE taskWoken = pdFALSE;
 8001b1c:	f8cd 800c 	str.w	r8, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  if (xTimerIsTimerActive(timer_id) != pdFALSE)
 8001b20:	f000 fc5a 	bl	80023d8 <xTimerIsTimerActive>
 8001b24:	4604      	mov	r4, r0
 8001b26:	b1e0      	cbz	r0, 8001b62 <osTimerStart+0x52>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b28:	f3ef 8605 	mrs	r6, IPSR
  {
    if (inHandlerMode()) 
 8001b2c:	b166      	cbz	r6, 8001b48 <osTimerStart+0x38>
    {
      if(xTimerResetFromISR(timer_id, &taskWoken) != pdPASS)
 8001b2e:	f7ff fc17 	bl	8001360 <xTaskGetTickCountFromISR>
 8001b32:	f8cd 8000 	str.w	r8, [sp]
 8001b36:	4602      	mov	r2, r0
 8001b38:	ab03      	add	r3, sp, #12
 8001b3a:	2107      	movs	r1, #7
 8001b3c:	4628      	mov	r0, r5
 8001b3e:	f000 fb07 	bl	8002150 <xTimerGenericCommand>
 8001b42:	2801      	cmp	r0, #1
 8001b44:	d142      	bne.n	8001bcc <osTimerStart+0xbc>
 8001b46:	e024      	b.n	8001b92 <osTimerStart+0x82>
        result = osOK;
      }
    }
    else
    {
      if (xTimerReset(timer_id, 0) != pdPASS)
 8001b48:	f7ff fc04 	bl	8001354 <xTaskGetTickCount>
 8001b4c:	4633      	mov	r3, r6
 8001b4e:	4602      	mov	r2, r0
 8001b50:	2102      	movs	r1, #2
 8001b52:	9600      	str	r6, [sp, #0]
 8001b54:	4628      	mov	r0, r5
 8001b56:	f000 fafb 	bl	8002150 <xTimerGenericCommand>
 8001b5a:	2801      	cmp	r0, #1
 8001b5c:	d136      	bne.n	8001bcc <osTimerStart+0xbc>
        result = osErrorOS;
      else   
        result = osOK;
 8001b5e:	2000      	movs	r0, #0
 8001b60:	e035      	b.n	8001bce <osTimerStart+0xbe>
    }
  }
  else
  {
    if (ticks == 0)
      ticks = 1;
 8001b62:	2f00      	cmp	r7, #0
 8001b64:	bf08      	it	eq
 8001b66:	2701      	moveq	r7, #1
 8001b68:	f3ef 8605 	mrs	r6, IPSR
    
    if (inHandlerMode()) 
 8001b6c:	b1ee      	cbz	r6, 8001baa <osTimerStart+0x9a>
    {
      if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS) 
 8001b6e:	9000      	str	r0, [sp, #0]
 8001b70:	ab03      	add	r3, sp, #12
 8001b72:	463a      	mov	r2, r7
 8001b74:	2109      	movs	r1, #9
 8001b76:	4628      	mov	r0, r5
 8001b78:	f000 faea 	bl	8002150 <xTimerGenericCommand>
 8001b7c:	2801      	cmp	r0, #1
 8001b7e:	d125      	bne.n	8001bcc <osTimerStart+0xbc>
        result = osErrorOS;
      else
      {
        xTimerStartFromISR(timer_id, &taskWoken);
 8001b80:	f7ff fbee 	bl	8001360 <xTaskGetTickCountFromISR>
 8001b84:	9400      	str	r4, [sp, #0]
 8001b86:	4602      	mov	r2, r0
 8001b88:	ab03      	add	r3, sp, #12
 8001b8a:	2106      	movs	r1, #6
 8001b8c:	4628      	mov	r0, r5
 8001b8e:	f000 fadf 	bl	8002150 <xTimerGenericCommand>
        portEND_SWITCHING_ISR(taskWoken);
 8001b92:	9b03      	ldr	r3, [sp, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0e2      	beq.n	8001b5e <osTimerStart+0x4e>
 8001b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <osTimerStart+0xc4>)
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	f3bf 8f4f 	dsb	sy
 8001ba4:	f3bf 8f6f 	isb	sy
 8001ba8:	e7d9      	b.n	8001b5e <osTimerStart+0x4e>
        result = osOK; 
      }
    }
    else 
    {
      if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8001baa:	9600      	str	r6, [sp, #0]
 8001bac:	4633      	mov	r3, r6
 8001bae:	463a      	mov	r2, r7
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	4628      	mov	r0, r5
 8001bb4:	f000 facc 	bl	8002150 <xTimerGenericCommand>
 8001bb8:	2801      	cmp	r0, #1
 8001bba:	4604      	mov	r4, r0
 8001bbc:	d106      	bne.n	8001bcc <osTimerStart+0xbc>
        result = osErrorOS;
      else
      {
        if (xTimerStart(timer_id, 0) != pdPASS)
 8001bbe:	f7ff fbc9 	bl	8001354 <xTaskGetTickCount>
 8001bc2:	9600      	str	r6, [sp, #0]
 8001bc4:	4633      	mov	r3, r6
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	4621      	mov	r1, r4
 8001bca:	e7c3      	b.n	8001b54 <osTimerStart+0x44>
          result = osErrorOS;
 8001bcc:	20ff      	movs	r0, #255	; 0xff
  }
#else 
  result = osErrorOS;
#endif
  return result;
}
 8001bce:	b004      	add	sp, #16
 8001bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bd4:	e000ed04 	.word	0xe000ed04

08001bd8 <osMutexCreate>:
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
#if ( configUSE_MUTEXES == 1)
  return xSemaphoreCreateMutex(); 
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f000 bddf 	b.w	800279c <xQueueCreateMutex>
	...

08001be0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8001be0:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001be2:	2400      	movs	r4, #0
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8001be4:	460a      	mov	r2, r1
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001be6:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8001be8:	b1e8      	cbz	r0, 8001c26 <osMutexWait+0x46>
 8001bea:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8001bee:	b19b      	cbz	r3, 8001c18 <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8001bf0:	aa01      	add	r2, sp, #4
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	f000 ff7e 	bl	8002af4 <xQueueReceiveFromISR>
 8001bf8:	2801      	cmp	r0, #1
 8001bfa:	d001      	beq.n	8001c00 <osMutexWait+0x20>
      return osErrorOS;
 8001bfc:	20ff      	movs	r0, #255	; 0xff
 8001bfe:	e013      	b.n	8001c28 <osMutexWait+0x48>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001c00:	9b01      	ldr	r3, [sp, #4]
 8001c02:	b173      	cbz	r3, 8001c22 <osMutexWait+0x42>
 8001c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <osMutexWait+0x4c>)
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	f3bf 8f4f 	dsb	sy
 8001c10:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8001c14:	4620      	mov	r0, r4
 8001c16:	e007      	b.n	8001c28 <osMutexWait+0x48>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f000 feaf 	bl	800297c <xQueueGenericReceive>
 8001c1e:	2801      	cmp	r0, #1
 8001c20:	d1ec      	bne.n	8001bfc <osMutexWait+0x1c>
    return osErrorOS;
  }
  
  return osOK;
 8001c22:	2000      	movs	r0, #0
 8001c24:	e000      	b.n	8001c28 <osMutexWait+0x48>
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
  
  
  if (mutex_id == NULL) {
    return osErrorParameter;
 8001c26:	2080      	movs	r0, #128	; 0x80
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8001c28:	b002      	add	sp, #8
 8001c2a:	bd10      	pop	{r4, pc}
 8001c2c:	e000ed04 	.word	0xe000ed04

08001c30 <osSemaphoreCreate>:
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 8001c30:	2901      	cmp	r1, #1
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 8001c32:	4608      	mov	r0, r1
 8001c34:	b510      	push	{r4, lr}
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 8001c36:	d10b      	bne.n	8001c50 <osSemaphoreCreate+0x20>
    vSemaphoreCreateBinary(sema);
 8001c38:	2203      	movs	r2, #3
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	f000 fc9a 	bl	8002574 <xQueueGenericCreate>
 8001c40:	4604      	mov	r4, r0
 8001c42:	b150      	cbz	r0, 8001c5a <osSemaphoreCreate+0x2a>
 8001c44:	2300      	movs	r3, #0
 8001c46:	461a      	mov	r2, r3
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f000 fced 	bl	8002628 <xQueueGenericSend>
 8001c4e:	e004      	b.n	8001c5a <osSemaphoreCreate+0x2a>
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 8001c50:	2100      	movs	r1, #0
#else
  return NULL;
#endif
}
 8001c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 8001c56:	f000 bcba 	b.w	80025ce <xQueueCreateCountingSemaphore>
#else
  return NULL;
#endif
}
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	bd10      	pop	{r4, pc}
	...

08001c60 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001c60:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8001c62:	2400      	movs	r4, #0
 8001c64:	9401      	str	r4, [sp, #4]
 8001c66:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 8001c6a:	b18b      	cbz	r3, 8001c90 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001c6c:	a901      	add	r1, sp, #4
 8001c6e:	f000 fe2d 	bl	80028cc <xQueueGiveFromISR>
 8001c72:	2801      	cmp	r0, #1
 8001c74:	d112      	bne.n	8001c9c <osSemaphoreRelease+0x3c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001c76:	9b01      	ldr	r3, [sp, #4]
 8001c78:	b90b      	cbnz	r3, 8001c7e <osSemaphoreRelease+0x1e>
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
  osStatus result = osOK;
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	e00f      	b.n	8001c9e <osSemaphoreRelease+0x3e>
  
  if (inHandlerMode()) {
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <osSemaphoreRelease+0x44>)
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	f3bf 8f4f 	dsb	sy
 8001c8a:	f3bf 8f6f 	isb	sy
 8001c8e:	e7f4      	b.n	8001c7a <osSemaphoreRelease+0x1a>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001c90:	461a      	mov	r2, r3
 8001c92:	4619      	mov	r1, r3
 8001c94:	f000 fcc8 	bl	8002628 <xQueueGenericSend>
 8001c98:	2801      	cmp	r0, #1
 8001c9a:	d0ee      	beq.n	8001c7a <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 8001c9c:	20ff      	movs	r0, #255	; 0xff
    }
  }
  
  return result;
}
 8001c9e:	b002      	add	sp, #8
 8001ca0:	bd10      	pop	{r4, pc}
 8001ca2:	bf00      	nop
 8001ca4:	e000ed04 	.word	0xe000ed04

08001ca8 <osMutexRelease>:
 8001ca8:	f7ff bfda 	b.w	8001c60 <osSemaphoreRelease>

08001cac <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001cac:	b538      	push	{r3, r4, r5, lr}
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8001cae:	0743      	lsls	r3, r0, #29
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001cb0:	4604      	mov	r4, r0
	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001cb2:	bf1c      	itt	ne
 8001cb4:	f020 0407 	bicne.w	r4, r0, #7
 8001cb8:	3408      	addne	r4, #8
		}
	#endif

	vTaskSuspendAll();
 8001cba:	f7ff fb43 	bl	8001344 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8001cbe:	4a0c      	ldr	r2, [pc, #48]	; (8001cf0 <pvPortMalloc+0x44>)
 8001cc0:	6813      	ldr	r3, [r2, #0]
 8001cc2:	b91b      	cbnz	r3, 8001ccc <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <pvPortMalloc+0x48>)
 8001cc6:	f023 0307 	bic.w	r3, r3, #7
 8001cca:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8001ccc:	490a      	ldr	r1, [pc, #40]	; (8001cf8 <pvPortMalloc+0x4c>)
 8001cce:	f247 70f7 	movw	r0, #30711	; 0x77f7
 8001cd2:	680b      	ldr	r3, [r1, #0]
 8001cd4:	441c      	add	r4, r3
 8001cd6:	4284      	cmp	r4, r0
 8001cd8:	d805      	bhi.n	8001ce6 <pvPortMalloc+0x3a>
 8001cda:	42a3      	cmp	r3, r4
 8001cdc:	d203      	bcs.n	8001ce6 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8001cde:	6815      	ldr	r5, [r2, #0]
			xNextFreeByte += xWantedSize;
 8001ce0:	600c      	str	r4, [r1, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8001ce2:	441d      	add	r5, r3
 8001ce4:	e000      	b.n	8001ce8 <pvPortMalloc+0x3c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 8001ce6:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001ce8:	f7ff fbe4 	bl	80014b4 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 8001cec:	4628      	mov	r0, r5
 8001cee:	bd38      	pop	{r3, r4, r5, pc}
 8001cf0:	20000a88 	.word	0x20000a88
 8001cf4:	20000a94 	.word	0x20000a94
 8001cf8:	20000a84 	.word	0x20000a84

08001cfc <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8001cfc:	b150      	cbz	r0, 8001d14 <vPortFree+0x18>
 8001cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d02:	b672      	cpsid	i
 8001d04:	f383 8811 	msr	BASEPRI, r3
 8001d08:	f3bf 8f6f 	isb	sy
 8001d0c:	f3bf 8f4f 	dsb	sy
 8001d10:	b662      	cpsie	i
 8001d12:	e7fe      	b.n	8001d12 <vPortFree+0x16>
 8001d14:	4770      	bx	lr
	...

08001d18 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <prvTaskExitError+0x34>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	d00a      	beq.n	8001d36 <prvTaskExitError+0x1e>
 8001d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d24:	b672      	cpsid	i
 8001d26:	f383 8811 	msr	BASEPRI, r3
 8001d2a:	f3bf 8f6f 	isb	sy
 8001d2e:	f3bf 8f4f 	dsb	sy
 8001d32:	b662      	cpsie	i
 8001d34:	e7fe      	b.n	8001d34 <prvTaskExitError+0x1c>
 8001d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d3a:	b672      	cpsid	i
 8001d3c:	f383 8811 	msr	BASEPRI, r3
 8001d40:	f3bf 8f6f 	isb	sy
 8001d44:	f3bf 8f4f 	dsb	sy
 8001d48:	b662      	cpsie	i
 8001d4a:	e7fe      	b.n	8001d4a <prvTaskExitError+0x32>
 8001d4c:	20000008 	.word	0x20000008

08001d50 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001d50:	4806      	ldr	r0, [pc, #24]	; (8001d6c <prvPortStartFirstTask+0x1c>)
 8001d52:	6800      	ldr	r0, [r0, #0]
 8001d54:	6800      	ldr	r0, [r0, #0]
 8001d56:	f380 8808 	msr	MSP, r0
 8001d5a:	b662      	cpsie	i
 8001d5c:	b661      	cpsie	f
 8001d5e:	f3bf 8f4f 	dsb	sy
 8001d62:	f3bf 8f6f 	isb	sy
 8001d66:	df00      	svc	0
 8001d68:	bf00      	nop
 8001d6a:	0000      	.short	0x0000
 8001d6c:	e000ed08 	.word	0xe000ed08

08001d70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001d70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001d80 <vPortEnableVFP+0x10>
 8001d74:	6801      	ldr	r1, [r0, #0]
 8001d76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001d7a:	6001      	str	r1, [r0, #0]
 8001d7c:	4770      	bx	lr
 8001d7e:	0000      	.short	0x0000
 8001d80:	e000ed88 	.word	0xe000ed88

08001d84 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001d84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001d88:	f840 2c20 	str.w	r2, [r0, #-32]
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8001d8c:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <pxPortInitialiseStack+0x1c>)
	*pxTopOfStack = portINITIAL_EXEC_RETURN;

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8001d92:	3844      	subs	r0, #68	; 0x44

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001d94:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001d96:	f06f 0302 	mvn.w	r3, #2
 8001d9a:	6203      	str	r3, [r0, #32]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	08001d19 	.word	0x08001d19

08001da4 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <pxCurrentTCBConst2>)
 8001da6:	6819      	ldr	r1, [r3, #0]
 8001da8:	6808      	ldr	r0, [r1, #0]
 8001daa:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dae:	f380 8809 	msr	PSP, r0
 8001db2:	f3bf 8f6f 	isb	sy
 8001db6:	f04f 0000 	mov.w	r0, #0
 8001dba:	f380 8811 	msr	BASEPRI, r0
 8001dbe:	4770      	bx	lr

08001dc0 <pxCurrentTCBConst2>:
 8001dc0:	20000a40 	.word	0x20000a40

08001dc4 <vPortEnterCritical>:
 8001dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc8:	b672      	cpsid	i
 8001dca:	f383 8811 	msr	BASEPRI, r3
 8001dce:	f3bf 8f6f 	isb	sy
 8001dd2:	f3bf 8f4f 	dsb	sy
 8001dd6:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001dd8:	4a0b      	ldr	r2, [pc, #44]	; (8001e08 <vPortEnterCritical+0x44>)
 8001dda:	6813      	ldr	r3, [r2, #0]
 8001ddc:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001dde:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001de0:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001de2:	d10f      	bne.n	8001e04 <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <vPortEnterCritical+0x48>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001dec:	d00a      	beq.n	8001e04 <vPortEnterCritical+0x40>
 8001dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df2:	b672      	cpsid	i
 8001df4:	f383 8811 	msr	BASEPRI, r3
 8001df8:	f3bf 8f6f 	isb	sy
 8001dfc:	f3bf 8f4f 	dsb	sy
 8001e00:	b662      	cpsie	i
 8001e02:	e7fe      	b.n	8001e02 <vPortEnterCritical+0x3e>
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	e000ed04 	.word	0xe000ed04

08001e10 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8001e10:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <vPortExitCritical+0x28>)
 8001e12:	6813      	ldr	r3, [r2, #0]
 8001e14:	b953      	cbnz	r3, 8001e2c <vPortExitCritical+0x1c>
 8001e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e1a:	b672      	cpsid	i
 8001e1c:	f383 8811 	msr	BASEPRI, r3
 8001e20:	f3bf 8f6f 	isb	sy
 8001e24:	f3bf 8f4f 	dsb	sy
 8001e28:	b662      	cpsie	i
 8001e2a:	e7fe      	b.n	8001e2a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001e30:	b90b      	cbnz	r3, 8001e36 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001e32:	f383 8811 	msr	BASEPRI, r3
 8001e36:	4770      	bx	lr
 8001e38:	20000008 	.word	0x20000008

08001e3c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001e3c:	f3ef 8009 	mrs	r0, PSP
 8001e40:	f3bf 8f6f 	isb	sy
 8001e44:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <pxCurrentTCBConst>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	f01e 0f10 	tst.w	lr, #16
 8001e4c:	bf08      	it	eq
 8001e4e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001e52:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e56:	6010      	str	r0, [r2, #0]
 8001e58:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001e5c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001e60:	b672      	cpsid	i
 8001e62:	f380 8811 	msr	BASEPRI, r0
 8001e66:	f3bf 8f4f 	dsb	sy
 8001e6a:	f3bf 8f6f 	isb	sy
 8001e6e:	b662      	cpsie	i
 8001e70:	f7ff fc16 	bl	80016a0 <vTaskSwitchContext>
 8001e74:	f04f 0000 	mov.w	r0, #0
 8001e78:	f380 8811 	msr	BASEPRI, r0
 8001e7c:	bc08      	pop	{r3}
 8001e7e:	6819      	ldr	r1, [r3, #0]
 8001e80:	6808      	ldr	r0, [r1, #0]
 8001e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e86:	f01e 0f10 	tst.w	lr, #16
 8001e8a:	bf08      	it	eq
 8001e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001e90:	f380 8809 	msr	PSP, r0
 8001e94:	f3bf 8f6f 	isb	sy
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop

08001e9c <pxCurrentTCBConst>:
 8001e9c:	20000a40 	.word	0x20000a40

08001ea0 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001ea0:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001ea2:	f3ef 8311 	mrs	r3, BASEPRI
 8001ea6:	f04f 0250 	mov.w	r2, #80	; 0x50
 8001eaa:	b672      	cpsid	i
 8001eac:	f382 8811 	msr	BASEPRI, r2
 8001eb0:	f3bf 8f6f 	isb	sy
 8001eb4:	f3bf 8f4f 	dsb	sy
 8001eb8:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001eba:	f7ff fa59 	bl	8001370 <xTaskIncrementTick>
 8001ebe:	b118      	cbz	r0, 8001ec8 <xPortSysTickHandler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ec4:	4b02      	ldr	r3, [pc, #8]	; (8001ed0 <xPortSysTickHandler+0x30>)
 8001ec6:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f383 8811 	msr	BASEPRI, r3
 8001ece:	bd08      	pop	{r3, pc}
 8001ed0:	e000ed04 	.word	0xe000ed04

08001ed4 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <vPortSetupTimerInterrupt+0x1c>)
 8001ed6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ee0:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <vPortSetupTimerInterrupt+0x20>)
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001ee6:	2207      	movs	r2, #7
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <vPortSetupTimerInterrupt+0x24>)
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	e000e014 	.word	0xe000e014
 8001ef8:	e000e010 	.word	0xe000e010

08001efc <xPortStartScheduler>:
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001efc:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <xPortStartScheduler+0x90>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001efe:	b513      	push	{r0, r1, r4, lr}
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001f00:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001f02:	2100      	movs	r1, #0
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001f08:	22ff      	movs	r2, #255	; 0xff
 8001f0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001f0c:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001f0e:	4a20      	ldr	r2, [pc, #128]	; (8001f90 <xPortStartScheduler+0x94>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001f16:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001f1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f1e:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001f20:	2207      	movs	r2, #7
 8001f22:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <xPortStartScheduler+0x98>)
 8001f24:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001f26:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001f2a:	1e54      	subs	r4, r2, #1
 8001f2c:	0600      	lsls	r0, r0, #24
 8001f2e:	d508      	bpl.n	8001f42 <xPortStartScheduler+0x46>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001f30:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001f34:	2101      	movs	r1, #1
 8001f36:	0052      	lsls	r2, r2, #1
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	f88d 2003 	strb.w	r2, [sp, #3]
 8001f3e:	4622      	mov	r2, r4
 8001f40:	e7f1      	b.n	8001f26 <xPortStartScheduler+0x2a>
 8001f42:	b101      	cbz	r1, 8001f46 <xPortStartScheduler+0x4a>
 8001f44:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	0212      	lsls	r2, r2, #8
 8001f4a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001f4e:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001f50:	9b01      	ldr	r3, [sp, #4]
 8001f52:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <xPortStartScheduler+0x90>)
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <xPortStartScheduler+0x9c>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001f60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001f68:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001f6a:	f7ff ffb3 	bl	8001ed4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001f6e:	2200      	movs	r2, #0
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <xPortStartScheduler+0xa0>)
 8001f72:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001f74:	f7ff fefc 	bl	8001d70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001f78:	4a09      	ldr	r2, [pc, #36]	; (8001fa0 <xPortStartScheduler+0xa4>)
 8001f7a:	6813      	ldr	r3, [r2, #0]
 8001f7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001f80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001f82:	f7ff fee5 	bl	8001d50 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8001f86:	f7ff fec7 	bl	8001d18 <prvTaskExitError>
 8001f8a:	bf00      	nop
 8001f8c:	e000e400 	.word	0xe000e400
 8001f90:	2000828c 	.word	0x2000828c
 8001f94:	20008290 	.word	0x20008290
 8001f98:	e000ed20 	.word	0xe000ed20
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	e000ef34 	.word	0xe000ef34

08001fa4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8001fa4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001fa8:	2b0f      	cmp	r3, #15
 8001faa:	d910      	bls.n	8001fce <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001fac:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <vPortValidateInterruptPriority+0x54>)
 8001fae:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001fb0:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <vPortValidateInterruptPriority+0x58>)
 8001fb2:	7812      	ldrb	r2, [r2, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d90a      	bls.n	8001fce <vPortValidateInterruptPriority+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fbc:	b672      	cpsid	i
 8001fbe:	f383 8811 	msr	BASEPRI, r3
 8001fc2:	f3bf 8f6f 	isb	sy
 8001fc6:	f3bf 8f4f 	dsb	sy
 8001fca:	b662      	cpsie	i
 8001fcc:	e7fe      	b.n	8001fcc <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001fce:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <vPortValidateInterruptPriority+0x5c>)
 8001fd0:	4a0c      	ldr	r2, [pc, #48]	; (8002004 <vPortValidateInterruptPriority+0x60>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d90a      	bls.n	8001ff4 <vPortValidateInterruptPriority+0x50>
 8001fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe2:	b672      	cpsid	i
 8001fe4:	f383 8811 	msr	BASEPRI, r3
 8001fe8:	f3bf 8f6f 	isb	sy
 8001fec:	f3bf 8f4f 	dsb	sy
 8001ff0:	b662      	cpsie	i
 8001ff2:	e7fe      	b.n	8001ff2 <vPortValidateInterruptPriority+0x4e>
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000e3f0 	.word	0xe000e3f0
 8001ffc:	2000828c 	.word	0x2000828c
 8002000:	e000ed0c 	.word	0xe000ed0c
 8002004:	20008290 	.word	0x20008290

08002008 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8002008:	4291      	cmp	r1, r2
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800200a:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800200c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800200e:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002010:	d806      	bhi.n	8002020 <prvInsertTimerInActiveList+0x18>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8002012:	1ad2      	subs	r2, r2, r3
 8002014:	6983      	ldr	r3, [r0, #24]
 8002016:	429a      	cmp	r2, r3
 8002018:	d20d      	bcs.n	8002036 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800201a:	1d01      	adds	r1, r0, #4
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <prvInsertTimerInActiveList+0x34>)
 800201e:	e005      	b.n	800202c <prvInsertTimerInActiveList+0x24>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002020:	429a      	cmp	r2, r3
 8002022:	d201      	bcs.n	8002028 <prvInsertTimerInActiveList+0x20>
 8002024:	4299      	cmp	r1, r3
 8002026:	d206      	bcs.n	8002036 <prvInsertTimerInActiveList+0x2e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002028:	1d01      	adds	r1, r0, #4
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <prvInsertTimerInActiveList+0x38>)
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	f000 fdf6 	bl	8002c1e <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
 8002032:	2000      	movs	r0, #0
 8002034:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002036:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8002038:	bd08      	pop	{r3, pc}
 800203a:	bf00      	nop
 800203c:	200082c8 	.word	0x200082c8
 8002040:	20008294 	.word	0x20008294

08002044 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8002046:	4c15      	ldr	r4, [pc, #84]	; (800209c <prvCheckForValidListAndQueue+0x58>)
static void prvCheckForValidListAndQueue( void )
{
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002048:	f7ff febc 	bl	8001dc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800204c:	6825      	ldr	r5, [r4, #0]
 800204e:	bb05      	cbnz	r5, 8002092 <prvCheckForValidListAndQueue+0x4e>
		{
			vListInitialise( &xActiveTimerList1 );
 8002050:	4f13      	ldr	r7, [pc, #76]	; (80020a0 <prvCheckForValidListAndQueue+0x5c>)
			vListInitialise( &xActiveTimerList2 );
 8002052:	4e14      	ldr	r6, [pc, #80]	; (80020a4 <prvCheckForValidListAndQueue+0x60>)
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
 8002054:	4638      	mov	r0, r7
 8002056:	f000 fdc8 	bl	8002bea <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800205a:	4630      	mov	r0, r6
 800205c:	f000 fdc5 	bl	8002bea <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <prvCheckForValidListAndQueue+0x64>)
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002062:	462a      	mov	r2, r5
 8002064:	210c      	movs	r1, #12
	{
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
 8002066:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002068:	200a      	movs	r0, #10
		if( xTimerQueue == NULL )
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <prvCheckForValidListAndQueue+0x68>)
 800206c:	601e      	str	r6, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800206e:	f000 fa81 	bl	8002574 <xQueueGenericCreate>
 8002072:	6020      	str	r0, [r4, #0]
			configASSERT( xTimerQueue );
 8002074:	b950      	cbnz	r0, 800208c <prvCheckForValidListAndQueue+0x48>
 8002076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800207a:	b672      	cpsid	i
 800207c:	f383 8811 	msr	BASEPRI, r3
 8002080:	f3bf 8f6f 	isb	sy
 8002084:	f3bf 8f4f 	dsb	sy
 8002088:	b662      	cpsie	i
 800208a:	e7fe      	b.n	800208a <prvCheckForValidListAndQueue+0x46>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800208c:	4908      	ldr	r1, [pc, #32]	; (80020b0 <prvCheckForValidListAndQueue+0x6c>)
 800208e:	f000 fd7b 	bl	8002b88 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8002092:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002096:	f7ff bebb 	b.w	8001e10 <vPortExitCritical>
 800209a:	bf00      	nop
 800209c:	200082c4 	.word	0x200082c4
 80020a0:	20008298 	.word	0x20008298
 80020a4:	200082ac 	.word	0x200082ac
 80020a8:	20008294 	.word	0x20008294
 80020ac:	200082c8 	.word	0x200082c8
 80020b0:	08064a41 	.word	0x08064a41

080020b4 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80020b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80020b6:	f7ff ffc5 	bl	8002044 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <xTimerCreateTimerTask+0x40>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	b15b      	cbz	r3, 80020d8 <xTimerCreateTimerTask+0x24>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 80020c0:	2300      	movs	r3, #0
 80020c2:	2204      	movs	r2, #4
 80020c4:	490c      	ldr	r1, [pc, #48]	; (80020f8 <xTimerCreateTimerTask+0x44>)
 80020c6:	9200      	str	r2, [sp, #0]
 80020c8:	2280      	movs	r2, #128	; 0x80
 80020ca:	9303      	str	r3, [sp, #12]
 80020cc:	9302      	str	r3, [sp, #8]
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	480a      	ldr	r0, [pc, #40]	; (80020fc <xTimerCreateTimerTask+0x48>)
 80020d2:	f7ff f8da 	bl	800128a <xTaskGenericCreate>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80020d6:	b950      	cbnz	r0, 80020ee <xTimerCreateTimerTask+0x3a>
 80020d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020dc:	b672      	cpsid	i
 80020de:	f383 8811 	msr	BASEPRI, r3
 80020e2:	f3bf 8f6f 	isb	sy
 80020e6:	f3bf 8f4f 	dsb	sy
 80020ea:	b662      	cpsie	i
 80020ec:	e7fe      	b.n	80020ec <xTimerCreateTimerTask+0x38>
	return xReturn;
}
 80020ee:	b005      	add	sp, #20
 80020f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80020f4:	200082c4 	.word	0x200082c4
 80020f8:	08064a46 	.word	0x08064a46
 80020fc:	08002219 	.word	0x08002219

08002100 <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002104:	4680      	mov	r8, r0
 8002106:	4617      	mov	r7, r2
 8002108:	461e      	mov	r6, r3
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800210a:	460d      	mov	r5, r1
 800210c:	b189      	cbz	r1, 8002132 <xTimerCreate+0x32>
	{
		pxNewTimer = NULL;
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800210e:	202c      	movs	r0, #44	; 0x2c
 8002110:	f7ff fdcc 	bl	8001cac <pvPortMalloc>
		if( pxNewTimer != NULL )
 8002114:	4604      	mov	r4, r0
 8002116:	b1b8      	cbz	r0, 8002148 <xTimerCreate+0x48>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
 8002118:	f7ff ff94 	bl	8002044 <prvCheckForValidListAndQueue>
			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
			pxNewTimer->uxAutoReload = uxAutoReload;
			pxNewTimer->pvTimerID = pvTimerID;
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800211c:	9b06      	ldr	r3, [sp, #24]
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
 800211e:	f8c4 8000 	str.w	r8, [r4]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
			pxNewTimer->uxAutoReload = uxAutoReload;
			pxNewTimer->pvTimerID = pvTimerID;
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002122:	1d20      	adds	r0, r4, #4
			created/initialised. */
			prvCheckForValidListAndQueue();

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002124:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8002126:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8002128:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800212a:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800212c:	f000 fd68 	bl	8002c00 <vListInitialiseItem>
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	return ( TimerHandle_t ) pxNewTimer;
 8002130:	e00a      	b.n	8002148 <xTimerCreate+0x48>
 8002132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002136:	b672      	cpsid	i
 8002138:	f383 8811 	msr	BASEPRI, r3
 800213c:	f3bf 8f6f 	isb	sy
 8002140:	f3bf 8f4f 	dsb	sy
 8002144:	b662      	cpsie	i
 8002146:	e7fe      	b.n	8002146 <xTimerCreate+0x46>
}
 8002148:	4620      	mov	r0, r4
 800214a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002150 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002150:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002152:	4c0e      	ldr	r4, [pc, #56]	; (800218c <xTimerGenericCommand+0x3c>)
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002154:	4605      	mov	r5, r0
 8002156:	4616      	mov	r6, r2
 8002158:	461a      	mov	r2, r3
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800215a:	6820      	ldr	r0, [r4, #0]
 800215c:	b1a0      	cbz	r0, 8002188 <xTimerGenericCommand+0x38>
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800215e:	2905      	cmp	r1, #5
	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002160:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002162:	9602      	str	r6, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002164:	9503      	str	r5, [sp, #12]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002166:	dc0b      	bgt.n	8002180 <xTimerGenericCommand+0x30>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002168:	f7ff fbe2 	bl	8001930 <xTaskGetSchedulerState>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800216c:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800216e:	2802      	cmp	r0, #2
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002170:	a901      	add	r1, sp, #4
 8002172:	6820      	ldr	r0, [r4, #0]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002174:	bf0c      	ite	eq
 8002176:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002178:	461a      	movne	r2, r3
 800217a:	f000 fa55 	bl	8002628 <xQueueGenericSend>
 800217e:	e003      	b.n	8002188 <xTimerGenericCommand+0x38>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002180:	2300      	movs	r3, #0
 8002182:	a901      	add	r1, sp, #4
 8002184:	f000 fb3e 	bl	8002804 <xQueueGenericSendFromISR>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
 8002188:	b004      	add	sp, #16
 800218a:	bd70      	pop	{r4, r5, r6, pc}
 800218c:	200082c4 	.word	0x200082c4

08002190 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002190:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002194:	4e1e      	ldr	r6, [pc, #120]	; (8002210 <prvSwitchTimerLists+0x80>)
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002196:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800219a:	4637      	mov	r7, r6
 800219c:	6833      	ldr	r3, [r6, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	b36a      	cbz	r2, 80021fe <prvSwitchTimerLists+0x6e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80021a2:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80021a4:	68dc      	ldr	r4, [r3, #12]
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80021a6:	681d      	ldr	r5, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80021a8:	f104 0904 	add.w	r9, r4, #4
 80021ac:	4648      	mov	r0, r9
 80021ae:	f000 fd4e 	bl	8002c4e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80021b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021b4:	4620      	mov	r0, r4
 80021b6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80021b8:	69e3      	ldr	r3, [r4, #28]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d1ee      	bne.n	800219c <prvSwitchTimerLists+0xc>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80021be:	69a3      	ldr	r3, [r4, #24]
 80021c0:	442b      	add	r3, r5
			if( xReloadTime > xNextExpireTime )
 80021c2:	429d      	cmp	r5, r3
 80021c4:	d206      	bcs.n	80021d4 <prvSwitchTimerLists+0x44>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80021c6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80021c8:	4649      	mov	r1, r9
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
			if( xReloadTime > xNextExpireTime )
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80021ca:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80021cc:	6838      	ldr	r0, [r7, #0]
 80021ce:	f000 fd26 	bl	8002c1e <vListInsert>
 80021d2:	e7e3      	b.n	800219c <prvSwitchTimerLists+0xc>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8cd 8000 	str.w	r8, [sp]
 80021da:	462a      	mov	r2, r5
 80021dc:	4620      	mov	r0, r4
 80021de:	4619      	mov	r1, r3
 80021e0:	f7ff ffb6 	bl	8002150 <xTimerGenericCommand>
				configASSERT( xResult );
 80021e4:	2800      	cmp	r0, #0
 80021e6:	d1d9      	bne.n	800219c <prvSwitchTimerLists+0xc>
 80021e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ec:	b672      	cpsid	i
 80021ee:	f383 8811 	msr	BASEPRI, r3
 80021f2:	f3bf 8f6f 	isb	sy
 80021f6:	f3bf 8f4f 	dsb	sy
 80021fa:	b662      	cpsie	i
 80021fc:	e7fe      	b.n	80021fc <prvSwitchTimerLists+0x6c>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 80021fe:	4a05      	ldr	r2, [pc, #20]	; (8002214 <prvSwitchTimerLists+0x84>)
 8002200:	4903      	ldr	r1, [pc, #12]	; (8002210 <prvSwitchTimerLists+0x80>)
 8002202:	6810      	ldr	r0, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002204:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8002206:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
}
 8002208:	b003      	add	sp, #12
 800220a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800220e:	bf00      	nop
 8002210:	20008294 	.word	0x20008294
 8002214:	200082c8 	.word	0x200082c8

08002218 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800221c:	4d6a      	ldr	r5, [pc, #424]	; (80023c8 <prvTimerTask+0x1b0>)
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800221e:	b089      	sub	sp, #36	; 0x24
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 8002220:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80023d4 <prvTimerTask+0x1bc>
 8002224:	462f      	mov	r7, r5
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002226:	682b      	ldr	r3, [r5, #0]
 8002228:	681c      	ldr	r4, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800222a:	b11c      	cbz	r4, 8002234 <prvTimerTask+0x1c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f8d3 9000 	ldr.w	r9, [r3]
 8002232:	e000      	b.n	8002236 <prvTimerTask+0x1e>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002234:	46a1      	mov	r9, r4
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002236:	f7ff f885 	bl	8001344 <vTaskSuspendAll>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800223a:	f7ff f88b 	bl	8001354 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 800223e:	4b63      	ldr	r3, [pc, #396]	; (80023cc <prvTimerTask+0x1b4>)
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002240:	4682      	mov	sl, r0

	if( xTimeNow < xLastTime )
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	461e      	mov	r6, r3
 8002246:	4290      	cmp	r0, r2
 8002248:	d206      	bcs.n	8002258 <prvTimerTask+0x40>
 800224a:	9303      	str	r3, [sp, #12]
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
 800224c:	f04f 0b01 	mov.w	fp, #1

	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
 8002250:	f7ff ff9e 	bl	8002190 <prvSwitchTimerLists>
 8002254:	9b03      	ldr	r3, [sp, #12]
 8002256:	e001      	b.n	800225c <prvTimerTask+0x44>
		*pxTimerListsWereSwitched = pdTRUE;
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002258:	f04f 0b00 	mov.w	fp, #0
	}

	xLastTime = xTimeNow;
 800225c:	f8c3 a000 	str.w	sl, [r3]
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
 8002260:	f1bb 0f00 	cmp.w	fp, #0
 8002264:	d141      	bne.n	80022ea <prvTimerTask+0xd2>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002266:	b36c      	cbz	r4, 80022c4 <prvTimerTask+0xac>
 8002268:	45ca      	cmp	sl, r9
 800226a:	d32b      	bcc.n	80022c4 <prvTimerTask+0xac>
			{
				( void ) xTaskResumeAll();
 800226c:	f7ff f922 	bl	80014b4 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	68dc      	ldr	r4, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002276:	1d20      	adds	r0, r4, #4
 8002278:	f000 fce9 	bl	8002c4e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800227c:	69e3      	ldr	r3, [r4, #28]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d11c      	bne.n	80022bc <prvTimerTask+0xa4>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8002282:	69a1      	ldr	r1, [r4, #24]
 8002284:	464b      	mov	r3, r9
 8002286:	4652      	mov	r2, sl
 8002288:	4620      	mov	r0, r4
 800228a:	4449      	add	r1, r9
 800228c:	f7ff febc 	bl	8002008 <prvInsertTimerInActiveList>
 8002290:	2801      	cmp	r0, #1
 8002292:	d113      	bne.n	80022bc <prvTimerTask+0xa4>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002294:	f8cd b000 	str.w	fp, [sp]
 8002298:	465b      	mov	r3, fp
 800229a:	464a      	mov	r2, r9
 800229c:	4659      	mov	r1, fp
 800229e:	4620      	mov	r0, r4
 80022a0:	f7ff ff56 	bl	8002150 <xTimerGenericCommand>
			configASSERT( xResult );
 80022a4:	b950      	cbnz	r0, 80022bc <prvTimerTask+0xa4>
 80022a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022aa:	b672      	cpsid	i
 80022ac:	f383 8811 	msr	BASEPRI, r3
 80022b0:	f3bf 8f6f 	isb	sy
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	b662      	cpsie	i
 80022ba:	e7fe      	b.n	80022ba <prvTimerTask+0xa2>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80022bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022be:	4620      	mov	r0, r4
 80022c0:	4798      	blx	r3
 80022c2:	e045      	b.n	8002350 <prvTimerTask+0x138>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 80022c4:	4b42      	ldr	r3, [pc, #264]	; (80023d0 <prvTimerTask+0x1b8>)
 80022c6:	ebca 0109 	rsb	r1, sl, r9
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	f000 fc70 	bl	8002bb0 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 80022d0:	f7ff f8f0 	bl	80014b4 <xTaskResumeAll>
 80022d4:	2800      	cmp	r0, #0
 80022d6:	d13b      	bne.n	8002350 <prvTimerTask+0x138>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 80022d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80022dc:	f8c8 3000 	str.w	r3, [r8]
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	f3bf 8f6f 	isb	sy
 80022e8:	e032      	b.n	8002350 <prvTimerTask+0x138>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 80022ea:	f7ff f8e3 	bl	80014b4 <xTaskResumeAll>
 80022ee:	e02f      	b.n	8002350 <prvTimerTask+0x138>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80022f0:	2300      	movs	r3, #0
 80022f2:	a905      	add	r1, sp, #20
 80022f4:	f8d9 0000 	ldr.w	r0, [r9]
 80022f8:	461a      	mov	r2, r3
 80022fa:	f000 fb3f 	bl	800297c <xQueueGenericReceive>
 80022fe:	2800      	cmp	r0, #0
 8002300:	d091      	beq.n	8002226 <prvTimerTask+0xe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002302:	9b05      	ldr	r3, [sp, #20]
 8002304:	2b00      	cmp	r3, #0
 8002306:	dbf3      	blt.n	80022f0 <prvTimerTask+0xd8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002308:	9c07      	ldr	r4, [sp, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800230a:	6963      	ldr	r3, [r4, #20]
 800230c:	b113      	cbz	r3, 8002314 <prvTimerTask+0xfc>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800230e:	1d20      	adds	r0, r4, #4
 8002310:	f000 fc9d 	bl	8002c4e <uxListRemove>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002314:	f7ff f81e 	bl	8001354 <xTaskGetTickCount>

	if( xTimeNow < xLastTime )
 8002318:	6833      	ldr	r3, [r6, #0]
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800231a:	4683      	mov	fp, r0

	if( xTimeNow < xLastTime )
 800231c:	4298      	cmp	r0, r3
 800231e:	d201      	bcs.n	8002324 <prvTimerTask+0x10c>
	{
		prvSwitchTimerLists();
 8002320:	f7ff ff36 	bl	8002190 <prvSwitchTimerLists>
 8002324:	9a05      	ldr	r2, [sp, #20]
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
	}

	xLastTime = xTimeNow;
 8002326:	f8c6 b000 	str.w	fp, [r6]
 800232a:	2a09      	cmp	r2, #9
 800232c:	d8e0      	bhi.n	80022f0 <prvTimerTask+0xd8>
 800232e:	2301      	movs	r3, #1
 8002330:	4093      	lsls	r3, r2
 8002332:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 8002336:	d131      	bne.n	800239c <prvTimerTask+0x184>
 8002338:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 800233c:	d00b      	beq.n	8002356 <prvTimerTask+0x13e>
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800233e:	69a1      	ldr	r1, [r4, #24]
 8002340:	465a      	mov	r2, fp
 8002342:	9b06      	ldr	r3, [sp, #24]
 8002344:	4620      	mov	r0, r4
 8002346:	4419      	add	r1, r3
 8002348:	f7ff fe5e 	bl	8002008 <prvInsertTimerInActiveList>
 800234c:	2801      	cmp	r0, #1
 800234e:	d008      	beq.n	8002362 <prvTimerTask+0x14a>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002350:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80023d0 <prvTimerTask+0x1b8>
 8002354:	e7cc      	b.n	80022f0 <prvTimerTask+0xd8>
 8002356:	069b      	lsls	r3, r3, #26
 8002358:	d5ca      	bpl.n	80022f0 <prvTimerTask+0xd8>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
 800235a:	4620      	mov	r0, r4
 800235c:	f7ff fcce 	bl	8001cfc <vPortFree>
 8002360:	e7f6      	b.n	8002350 <prvTimerTask+0x138>
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002364:	4620      	mov	r0, r4
 8002366:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002368:	69e3      	ldr	r3, [r4, #28]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d1f0      	bne.n	8002350 <prvTimerTask+0x138>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800236e:	69a2      	ldr	r2, [r4, #24]
 8002370:	4653      	mov	r3, sl
 8002372:	9906      	ldr	r1, [sp, #24]
 8002374:	4620      	mov	r0, r4
 8002376:	f8cd a000 	str.w	sl, [sp]
 800237a:	440a      	add	r2, r1
 800237c:	4651      	mov	r1, sl
 800237e:	f7ff fee7 	bl	8002150 <xTimerGenericCommand>
							configASSERT( xResult );
 8002382:	2800      	cmp	r0, #0
 8002384:	d1e4      	bne.n	8002350 <prvTimerTask+0x138>
 8002386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238a:	b672      	cpsid	i
 800238c:	f383 8811 	msr	BASEPRI, r3
 8002390:	f3bf 8f6f 	isb	sy
 8002394:	f3bf 8f4f 	dsb	sy
 8002398:	b662      	cpsie	i
 800239a:	e7fe      	b.n	800239a <prvTimerTask+0x182>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800239c:	9906      	ldr	r1, [sp, #24]
 800239e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80023a0:	b951      	cbnz	r1, 80023b8 <prvTimerTask+0x1a0>
 80023a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a6:	b672      	cpsid	i
 80023a8:	f383 8811 	msr	BASEPRI, r3
 80023ac:	f3bf 8f6f 	isb	sy
 80023b0:	f3bf 8f4f 	dsb	sy
 80023b4:	b662      	cpsie	i
 80023b6:	e7fe      	b.n	80023b6 <prvTimerTask+0x19e>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80023b8:	465b      	mov	r3, fp
 80023ba:	465a      	mov	r2, fp
 80023bc:	4459      	add	r1, fp
 80023be:	4620      	mov	r0, r4
 80023c0:	f7ff fe22 	bl	8002008 <prvInsertTimerInActiveList>
 80023c4:	e7c4      	b.n	8002350 <prvTimerTask+0x138>
 80023c6:	bf00      	nop
 80023c8:	20008294 	.word	0x20008294
 80023cc:	200082c0 	.word	0x200082c0
 80023d0:	200082c4 	.word	0x200082c4
 80023d4:	e000ed04 	.word	0xe000ed04

080023d8 <xTimerIsTimerActive>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80023d8:	b510      	push	{r4, lr}
 80023da:	4604      	mov	r4, r0
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80023dc:	f7ff fcf2 	bl	8001dc4 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 80023e0:	6964      	ldr	r4, [r4, #20]
 80023e2:	3400      	adds	r4, #0
 80023e4:	bf18      	it	ne
 80023e6:	2401      	movne	r4, #1
	}
	taskEXIT_CRITICAL();
 80023e8:	f7ff fd12 	bl	8001e10 <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80023ec:	4620      	mov	r0, r4
 80023ee:	bd10      	pop	{r4, pc}

080023f0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80023f0:	b538      	push	{r3, r4, r5, lr}
 80023f2:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80023f4:	6c02      	ldr	r2, [r0, #64]	; 0x40

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80023f6:	4604      	mov	r4, r0
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80023f8:	b932      	cbnz	r2, 8002408 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023fa:	6805      	ldr	r5, [r0, #0]
 80023fc:	bb45      	cbnz	r5, 8002450 <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80023fe:	6840      	ldr	r0, [r0, #4]
 8002400:	f7ff faec 	bl	80019dc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002404:	6065      	str	r5, [r4, #4]
 8002406:	e024      	b.n	8002452 <prvCopyDataToQueue+0x62>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002408:	b96d      	cbnz	r5, 8002426 <prvCopyDataToQueue+0x36>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800240a:	6880      	ldr	r0, [r0, #8]
 800240c:	f7fd ff2e 	bl	800026c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002410:	68a2      	ldr	r2, [r4, #8]
 8002412:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002414:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002416:	6862      	ldr	r2, [r4, #4]
 8002418:	4293      	cmp	r3, r2
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800241a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800241c:	d318      	bcc.n	8002450 <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800241e:	6823      	ldr	r3, [r4, #0]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8002420:	4628      	mov	r0, r5
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002422:	60a3      	str	r3, [r4, #8]
 8002424:	e015      	b.n	8002452 <prvCopyDataToQueue+0x62>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002426:	68c0      	ldr	r0, [r0, #12]
 8002428:	f7fd ff20 	bl	800026c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800242c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800242e:	68e2      	ldr	r2, [r4, #12]
 8002430:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002432:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002434:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002436:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002438:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800243a:	bf3e      	ittt	cc
 800243c:	6862      	ldrcc	r2, [r4, #4]
 800243e:	189b      	addcc	r3, r3, r2
 8002440:	60e3      	strcc	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002442:	2d02      	cmp	r5, #2
 8002444:	d104      	bne.n	8002450 <prvCopyDataToQueue+0x60>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002446:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002448:	b113      	cbz	r3, 8002450 <prvCopyDataToQueue+0x60>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 800244a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800244c:	3b01      	subs	r3, #1
 800244e:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8002450:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8002452:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002454:	3301      	adds	r3, #1
 8002456:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 8002458:	bd38      	pop	{r3, r4, r5, pc}

0800245a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800245a:	4603      	mov	r3, r0
 800245c:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800245e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002460:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002462:	b162      	cbz	r2, 800247e <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002464:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002466:	685c      	ldr	r4, [r3, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002468:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800246a:	42a1      	cmp	r1, r4

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800246c:	60d9      	str	r1, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 800246e:	f85d 4b04 	ldr.w	r4, [sp], #4
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002472:	bf24      	itt	cs
 8002474:	6819      	ldrcs	r1, [r3, #0]
 8002476:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002478:	68d9      	ldr	r1, [r3, #12]
 800247a:	f7fd bef7 	b.w	800026c <memcpy>
	}
}
 800247e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002482:	4770      	bx	lr

08002484 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002484:	b538      	push	{r3, r4, r5, lr}
 8002486:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002488:	f7ff fc9c 	bl	8001dc4 <vPortEnterCritical>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800248c:	f104 0524 	add.w	r5, r4, #36	; 0x24
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002490:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002492:	2b00      	cmp	r3, #0
 8002494:	dd0b      	ble.n	80024ae <prvUnlockQueue+0x2a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002498:	b14b      	cbz	r3, 80024ae <prvUnlockQueue+0x2a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800249a:	4628      	mov	r0, r5
 800249c:	f7ff f9aa 	bl	80017f4 <xTaskRemoveFromEventList>
 80024a0:	b108      	cbz	r0, 80024a6 <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 80024a2:	f7ff fa39 	bl	8001918 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 80024a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80024a8:	3b01      	subs	r3, #1
 80024aa:	64a3      	str	r3, [r4, #72]	; 0x48
 80024ac:	e7f0      	b.n	8002490 <prvUnlockQueue+0xc>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024b2:	f104 0510 	add.w	r5, r4, #16
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80024b6:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80024b8:	f7ff fcaa 	bl	8001e10 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80024bc:	f7ff fc82 	bl	8001dc4 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80024c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	dd0b      	ble.n	80024de <prvUnlockQueue+0x5a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024c6:	6923      	ldr	r3, [r4, #16]
 80024c8:	b14b      	cbz	r3, 80024de <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024ca:	4628      	mov	r0, r5
 80024cc:	f7ff f992 	bl	80017f4 <xTaskRemoveFromEventList>
 80024d0:	b108      	cbz	r0, 80024d6 <prvUnlockQueue+0x52>
				{
					vTaskMissedYield();
 80024d2:	f7ff fa21 	bl	8001918 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 80024d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024d8:	3b01      	subs	r3, #1
 80024da:	6463      	str	r3, [r4, #68]	; 0x44
 80024dc:	e7f0      	b.n	80024c0 <prvUnlockQueue+0x3c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024e2:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80024e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 80024e8:	f7ff bc92 	b.w	8001e10 <vPortExitCritical>

080024ec <xQueueGenericCreate.part.1>:
 80024ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f0:	b672      	cpsid	i
 80024f2:	f383 8811 	msr	BASEPRI, r3
 80024f6:	f3bf 8f6f 	isb	sy
 80024fa:	f3bf 8f4f 	dsb	sy
 80024fe:	b662      	cpsie	i
 8002500:	e7fe      	b.n	8002500 <xQueueGenericCreate.part.1+0x14>
	...

08002504 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002504:	b538      	push	{r3, r4, r5, lr}
 8002506:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002508:	4604      	mov	r4, r0
 800250a:	b908      	cbnz	r0, 8002510 <xQueueGenericReset+0xc>
 800250c:	f7ff ffee 	bl	80024ec <xQueueGenericCreate.part.1>

	taskENTER_CRITICAL();
 8002510:	f7ff fc58 	bl	8001dc4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002514:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002516:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002518:	6822      	ldr	r2, [r4, #0]
 800251a:	4343      	muls	r3, r0
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800251c:	60a2      	str	r2, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800251e:	18d1      	adds	r1, r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002520:	1a1b      	subs	r3, r3, r0
 8002522:	4413      	add	r3, r2

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002524:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002526:	2100      	movs	r1, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002528:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800252a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800252e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8002530:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8002532:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8002534:	b985      	cbnz	r5, 8002558 <xQueueGenericReset+0x54>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002536:	6923      	ldr	r3, [r4, #16]
 8002538:	b1b3      	cbz	r3, 8002568 <xQueueGenericReset+0x64>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800253a:	f104 0010 	add.w	r0, r4, #16
 800253e:	f7ff f959 	bl	80017f4 <xTaskRemoveFromEventList>
 8002542:	2801      	cmp	r0, #1
 8002544:	d110      	bne.n	8002568 <xQueueGenericReset+0x64>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <xQueueGenericReset+0x6c>)
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	f3bf 8f4f 	dsb	sy
 8002552:	f3bf 8f6f 	isb	sy
 8002556:	e007      	b.n	8002568 <xQueueGenericReset+0x64>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002558:	f104 0010 	add.w	r0, r4, #16
 800255c:	f000 fb45 	bl	8002bea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002560:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002564:	f000 fb41 	bl	8002bea <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002568:	f7ff fc52 	bl	8001e10 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 800256c:	2001      	movs	r0, #1
 800256e:	bd38      	pop	{r3, r4, r5, pc}
 8002570:	e000ed04 	.word	0xe000ed04

08002574 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8002574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002576:	460d      	mov	r5, r1
 8002578:	4617      	mov	r7, r2

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800257a:	4606      	mov	r6, r0
 800257c:	b950      	cbnz	r0, 8002594 <xQueueGenericCreate+0x20>
 800257e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002582:	b672      	cpsid	i
 8002584:	f383 8811 	msr	BASEPRI, r3
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	b662      	cpsie	i
 8002592:	e7fe      	b.n	8002592 <xQueueGenericCreate+0x1e>

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002594:	b111      	cbz	r1, 800259c <xQueueGenericCreate+0x28>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002596:	4348      	muls	r0, r1
 8002598:	3001      	adds	r0, #1
 800259a:	e000      	b.n	800259e <xQueueGenericCreate+0x2a>
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
 800259c:	4608      	mov	r0, r1
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800259e:	3054      	adds	r0, #84	; 0x54
 80025a0:	f7ff fb84 	bl	8001cac <pvPortMalloc>

	if( pcAllocatedBuffer != NULL )
 80025a4:	4604      	mov	r4, r0
 80025a6:	b130      	cbz	r0, 80025b6 <xQueueGenericCreate+0x42>
	{
		pxNewQueue = ( Queue_t * ) pcAllocatedBuffer; /*lint !e826 MISRA The buffer cannot be too small because it was dimensioned by sizeof( Queue_t ) + xQueueSizeInBytes. */

		if( uxItemSize == ( UBaseType_t ) 0 )
 80025a8:	b90d      	cbnz	r5, 80025ae <xQueueGenericCreate+0x3a>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025aa:	6020      	str	r0, [r4, #0]
 80025ac:	e005      	b.n	80025ba <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area - adding the padding bytes to get a better alignment. */
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 80025ae:	f100 0354 	add.w	r3, r0, #84	; 0x54
 80025b2:	6003      	str	r3, [r0, #0]
 80025b4:	e001      	b.n	80025ba <xQueueGenericCreate+0x46>
 80025b6:	f7ff ff99 	bl	80024ec <xQueueGenericCreate.part.1>
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
 80025ba:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025bc:	2101      	movs	r1, #1
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
		pxNewQueue->uxItemSize = uxItemSize;
 80025be:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025c0:	4620      	mov	r0, r4
 80025c2:	f7ff ff9f 	bl	8002504 <xQueueGenericReset>

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
 80025c6:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
	}

	configASSERT( xReturn );

	return xReturn;
}
 80025ca:	4620      	mov	r0, r4
 80025cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080025ce <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80025ce:	b510      	push	{r4, lr}
 80025d0:	460c      	mov	r4, r1
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80025d2:	b950      	cbnz	r0, 80025ea <xQueueCreateCountingSemaphore+0x1c>
 80025d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d8:	b672      	cpsid	i
 80025da:	f383 8811 	msr	BASEPRI, r3
 80025de:	f3bf 8f6f 	isb	sy
 80025e2:	f3bf 8f4f 	dsb	sy
 80025e6:	b662      	cpsie	i
 80025e8:	e7fe      	b.n	80025e8 <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80025ea:	4288      	cmp	r0, r1
 80025ec:	d20a      	bcs.n	8002604 <xQueueCreateCountingSemaphore+0x36>
 80025ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f2:	b672      	cpsid	i
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	b662      	cpsie	i
 8002602:	e7fe      	b.n	8002602 <xQueueCreateCountingSemaphore+0x34>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002604:	2202      	movs	r2, #2
 8002606:	2100      	movs	r1, #0
 8002608:	f7ff ffb4 	bl	8002574 <xQueueGenericCreate>

		if( xHandle != NULL )
 800260c:	b108      	cbz	r0, 8002612 <xQueueCreateCountingSemaphore+0x44>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800260e:	6384      	str	r4, [r0, #56]	; 0x38
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( xHandle );
		return xHandle;
 8002610:	bd10      	pop	{r4, pc}
 8002612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002616:	b672      	cpsid	i
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	b662      	cpsie	i
 8002626:	e7fe      	b.n	8002626 <xQueueCreateCountingSemaphore+0x58>

08002628 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800262c:	4689      	mov	r9, r1
 800262e:	9201      	str	r2, [sp, #4]
 8002630:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002632:	4604      	mov	r4, r0
 8002634:	b950      	cbnz	r0, 800264c <xQueueGenericSend+0x24>
 8002636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263a:	b672      	cpsid	i
 800263c:	f383 8811 	msr	BASEPRI, r3
 8002640:	f3bf 8f6f 	isb	sy
 8002644:	f3bf 8f4f 	dsb	sy
 8002648:	b662      	cpsie	i
 800264a:	e7fe      	b.n	800264a <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800264c:	b961      	cbnz	r1, 8002668 <xQueueGenericSend+0x40>
 800264e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002650:	b153      	cbz	r3, 8002668 <xQueueGenericSend+0x40>
 8002652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002656:	b672      	cpsid	i
 8002658:	f383 8811 	msr	BASEPRI, r3
 800265c:	f3bf 8f6f 	isb	sy
 8002660:	f3bf 8f4f 	dsb	sy
 8002664:	b662      	cpsie	i
 8002666:	e7fe      	b.n	8002666 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002668:	2f02      	cmp	r7, #2
 800266a:	d10d      	bne.n	8002688 <xQueueGenericSend+0x60>
 800266c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800266e:	2b01      	cmp	r3, #1
 8002670:	d00a      	beq.n	8002688 <xQueueGenericSend+0x60>
 8002672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002676:	b672      	cpsid	i
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	b662      	cpsie	i
 8002686:	e7fe      	b.n	8002686 <xQueueGenericSend+0x5e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002688:	f7ff f952 	bl	8001930 <xTaskGetSchedulerState>
 800268c:	b910      	cbnz	r0, 8002694 <xQueueGenericSend+0x6c>
 800268e:	9e01      	ldr	r6, [sp, #4]
 8002690:	b10e      	cbz	r6, 8002696 <xQueueGenericSend+0x6e>
 8002692:	e073      	b.n	800277c <xQueueGenericSend+0x154>
 8002694:	2600      	movs	r6, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8002696:	f04f 0800 	mov.w	r8, #0
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 800269a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8002798 <xQueueGenericSend+0x170>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800269e:	f7ff fb91 	bl	8001dc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80026a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d301      	bcc.n	80026ae <xQueueGenericSend+0x86>
 80026aa:	2f02      	cmp	r7, #2
 80026ac:	d11a      	bne.n	80026e4 <xQueueGenericSend+0xbc>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026ae:	463a      	mov	r2, r7
 80026b0:	4649      	mov	r1, r9
 80026b2:	4620      	mov	r0, r4
 80026b4:	f7ff fe9c 	bl	80023f0 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026ba:	b133      	cbz	r3, 80026ca <xQueueGenericSend+0xa2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 80026bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026c0:	f7ff f898 	bl	80017f4 <xTaskRemoveFromEventList>
 80026c4:	2801      	cmp	r0, #1
 80026c6:	d109      	bne.n	80026dc <xQueueGenericSend+0xb4>
 80026c8:	e000      	b.n	80026cc <xQueueGenericSend+0xa4>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80026ca:	b138      	cbz	r0, 80026dc <xQueueGenericSend+0xb4>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80026cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d0:	4b31      	ldr	r3, [pc, #196]	; (8002798 <xQueueGenericSend+0x170>)
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80026dc:	f7ff fb98 	bl	8001e10 <vPortExitCritical>
				return pdPASS;
 80026e0:	2001      	movs	r0, #1
 80026e2:	e056      	b.n	8002792 <xQueueGenericSend+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026e4:	9d01      	ldr	r5, [sp, #4]
 80026e6:	b91d      	cbnz	r5, 80026f0 <xQueueGenericSend+0xc8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80026e8:	f7ff fb92 	bl	8001e10 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80026ec:	4628      	mov	r0, r5
 80026ee:	e050      	b.n	8002792 <xQueueGenericSend+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80026f0:	b916      	cbnz	r6, 80026f8 <xQueueGenericSend+0xd0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80026f2:	a802      	add	r0, sp, #8
 80026f4:	f7ff f8c2 	bl	800187c <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80026f8:	f7ff fb8a 	bl	8001e10 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80026fc:	f7fe fe22 	bl	8001344 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002700:	f7ff fb60 	bl	8001dc4 <vPortEnterCritical>
 8002704:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002706:	3301      	adds	r3, #1
 8002708:	d101      	bne.n	800270e <xQueueGenericSend+0xe6>
 800270a:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
 800270e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002710:	3301      	adds	r3, #1
 8002712:	d101      	bne.n	8002718 <xQueueGenericSend+0xf0>
 8002714:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
 8002718:	f7ff fb7a 	bl	8001e10 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800271c:	a901      	add	r1, sp, #4
 800271e:	a802      	add	r0, sp, #8
 8002720:	f7ff f8bc 	bl	800189c <xTaskCheckForTimeOut>
 8002724:	bb18      	cbnz	r0, 800276e <xQueueGenericSend+0x146>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002726:	f7ff fb4d 	bl	8001dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800272a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800272c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800272e:	f7ff fb6f 	bl	8001e10 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002732:	42ae      	cmp	r6, r5
 8002734:	d115      	bne.n	8002762 <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002736:	9901      	ldr	r1, [sp, #4]
 8002738:	f104 0010 	add.w	r0, r4, #16
 800273c:	f7fe fff2 	bl	8001724 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002740:	4620      	mov	r0, r4
 8002742:	f7ff fe9f 	bl	8002484 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002746:	f7fe feb5 	bl	80014b4 <xTaskResumeAll>
 800274a:	b108      	cbz	r0, 8002750 <xQueueGenericSend+0x128>
 800274c:	2601      	movs	r6, #1
 800274e:	e7a6      	b.n	800269e <xQueueGenericSend+0x76>
				{
					portYIELD_WITHIN_API();
 8002750:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002754:	f8ca 3000 	str.w	r3, [sl]
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	e7f4      	b.n	800274c <xQueueGenericSend+0x124>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002762:	4620      	mov	r0, r4
 8002764:	f7ff fe8e 	bl	8002484 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002768:	f7fe fea4 	bl	80014b4 <xTaskResumeAll>
 800276c:	e7ee      	b.n	800274c <xQueueGenericSend+0x124>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800276e:	4620      	mov	r0, r4
 8002770:	f7ff fe88 	bl	8002484 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002774:	f7fe fe9e 	bl	80014b4 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002778:	2000      	movs	r0, #0
 800277a:	e00a      	b.n	8002792 <xQueueGenericSend+0x16a>
 800277c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002780:	b672      	cpsid	i
 8002782:	f383 8811 	msr	BASEPRI, r3
 8002786:	f3bf 8f6f 	isb	sy
 800278a:	f3bf 8f4f 	dsb	sy
 800278e:	b662      	cpsie	i
 8002790:	e7fe      	b.n	8002790 <xQueueGenericSend+0x168>
		}
	}
}
 8002792:	b004      	add	sp, #16
 8002794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002798:	e000ed04 	.word	0xe000ed04

0800279c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	4606      	mov	r6, r0
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 80027a0:	2054      	movs	r0, #84	; 0x54
 80027a2:	f7ff fa83 	bl	8001cac <pvPortMalloc>
		if( pxNewQueue != NULL )
 80027a6:	4604      	mov	r4, r0
 80027a8:	b950      	cbnz	r0, 80027c0 <xQueueCreateMutex+0x24>
 80027aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ae:	b672      	cpsid	i
 80027b0:	f383 8811 	msr	BASEPRI, r3
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	b662      	cpsie	i
 80027be:	e7fe      	b.n	80027be <xQueueCreateMutex+0x22>

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 80027c0:	2301      	movs	r3, #1
		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80027c2:	2500      	movs	r5, #0
			pxNewQueue->xRxLock = queueUNLOCKED;
			pxNewQueue->xTxLock = queueUNLOCKED;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
 80027c4:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 80027c8:	3010      	adds	r0, #16

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 80027ca:	62c3      	str	r3, [r0, #44]	; 0x2c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
 80027cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			pxNewQueue->u.pcReadFrom = NULL;

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80027d0:	6285      	str	r5, [r0, #40]	; 0x28
		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80027d2:	f840 5c0c 	str.w	r5, [r0, #-12]
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
 80027d6:	6343      	str	r3, [r0, #52]	; 0x34
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80027d8:	f840 5c10 	str.w	r5, [r0, #-16]
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
			pxNewQueue->xTxLock = queueUNLOCKED;
 80027dc:	6383      	str	r3, [r0, #56]	; 0x38
			pxNewQueue->pxMutexHolder = NULL;
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 80027de:	f840 5c08 	str.w	r5, [r0, #-8]
			pxNewQueue->u.pcReadFrom = NULL;
 80027e2:	f840 5c04 	str.w	r5, [r0, #-4]
			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 80027e6:	6305      	str	r5, [r0, #48]	; 0x30
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 80027e8:	f000 f9ff 	bl	8002bea <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 80027ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80027f0:	f000 f9fb 	bl	8002bea <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80027f4:	462b      	mov	r3, r5
 80027f6:	462a      	mov	r2, r5
 80027f8:	4629      	mov	r1, r5
 80027fa:	4620      	mov	r0, r4
 80027fc:	f7ff ff14 	bl	8002628 <xQueueGenericSend>
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
 8002800:	4620      	mov	r0, r4
 8002802:	bd70      	pop	{r4, r5, r6, pc}

08002804 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002808:	460e      	mov	r6, r1
 800280a:	4690      	mov	r8, r2
 800280c:	461d      	mov	r5, r3
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800280e:	4604      	mov	r4, r0
 8002810:	b950      	cbnz	r0, 8002828 <xQueueGenericSendFromISR+0x24>
 8002812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002816:	b672      	cpsid	i
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	b662      	cpsie	i
 8002826:	e7fe      	b.n	8002826 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002828:	b961      	cbnz	r1, 8002844 <xQueueGenericSendFromISR+0x40>
 800282a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800282c:	b153      	cbz	r3, 8002844 <xQueueGenericSendFromISR+0x40>
 800282e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002832:	b672      	cpsid	i
 8002834:	f383 8811 	msr	BASEPRI, r3
 8002838:	f3bf 8f6f 	isb	sy
 800283c:	f3bf 8f4f 	dsb	sy
 8002840:	b662      	cpsie	i
 8002842:	e7fe      	b.n	8002842 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002844:	2d02      	cmp	r5, #2
 8002846:	d10d      	bne.n	8002864 <xQueueGenericSendFromISR+0x60>
 8002848:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800284a:	2b01      	cmp	r3, #1
 800284c:	d00a      	beq.n	8002864 <xQueueGenericSendFromISR+0x60>
 800284e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002852:	b672      	cpsid	i
 8002854:	f383 8811 	msr	BASEPRI, r3
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	b662      	cpsie	i
 8002862:	e7fe      	b.n	8002862 <xQueueGenericSendFromISR+0x5e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002864:	f7ff fb9e 	bl	8001fa4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002868:	f3ef 8711 	mrs	r7, BASEPRI
 800286c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002870:	b672      	cpsid	i
 8002872:	f383 8811 	msr	BASEPRI, r3
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	b662      	cpsie	i
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002880:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002882:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002884:	429a      	cmp	r2, r3
 8002886:	d301      	bcc.n	800288c <xQueueGenericSendFromISR+0x88>
 8002888:	2d02      	cmp	r5, #2
 800288a:	d11a      	bne.n	80028c2 <xQueueGenericSendFromISR+0xbe>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800288c:	462a      	mov	r2, r5
 800288e:	4631      	mov	r1, r6
 8002890:	4620      	mov	r0, r4
 8002892:	f7ff fdad 	bl	80023f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8002896:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002898:	3301      	adds	r3, #1
 800289a:	d10d      	bne.n	80028b8 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800289c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800289e:	b173      	cbz	r3, 80028be <xQueueGenericSendFromISR+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028a4:	f7fe ffa6 	bl	80017f4 <xTaskRemoveFromEventList>
 80028a8:	b148      	cbz	r0, 80028be <xQueueGenericSendFromISR+0xba>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80028aa:	f1b8 0f00 	cmp.w	r8, #0
 80028ae:	d006      	beq.n	80028be <xQueueGenericSendFromISR+0xba>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80028b0:	2001      	movs	r0, #1
 80028b2:	f8c8 0000 	str.w	r0, [r8]
 80028b6:	e005      	b.n	80028c4 <xQueueGenericSendFromISR+0xc0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 80028b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80028ba:	3301      	adds	r3, #1
 80028bc:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
 80028be:	2001      	movs	r0, #1
 80028c0:	e000      	b.n	80028c4 <xQueueGenericSendFromISR+0xc0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80028c2:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028c4:	f387 8811 	msr	BASEPRI, r7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 80028c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080028cc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80028cc:	b570      	push	{r4, r5, r6, lr}
 80028ce:	460d      	mov	r5, r1
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80028d0:	4604      	mov	r4, r0
 80028d2:	b950      	cbnz	r0, 80028ea <xQueueGiveFromISR+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d8:	b672      	cpsid	i
 80028da:	f383 8811 	msr	BASEPRI, r3
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	f3bf 8f4f 	dsb	sy
 80028e6:	b662      	cpsie	i
 80028e8:	e7fe      	b.n	80028e8 <xQueueGiveFromISR+0x1c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80028ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80028ec:	b153      	cbz	r3, 8002904 <xQueueGiveFromISR+0x38>
 80028ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f2:	b672      	cpsid	i
 80028f4:	f383 8811 	msr	BASEPRI, r3
 80028f8:	f3bf 8f6f 	isb	sy
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	b662      	cpsie	i
 8002902:	e7fe      	b.n	8002902 <xQueueGiveFromISR+0x36>

	/* Normally a mutex would not be given from an interrupt, and doing so is
	definitely wrong if there is a mutex holder as priority inheritance makes no
	sense for an interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002904:	6803      	ldr	r3, [r0, #0]
 8002906:	b90b      	cbnz	r3, 800290c <xQueueGiveFromISR+0x40>
 8002908:	6843      	ldr	r3, [r0, #4]
 800290a:	bb4b      	cbnz	r3, 8002960 <xQueueGiveFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800290c:	f7ff fb4a 	bl	8001fa4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002910:	f3ef 8611 	mrs	r6, BASEPRI
 8002914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002918:	b672      	cpsid	i
 800291a:	f383 8811 	msr	BASEPRI, r3
 800291e:	f3bf 8f6f 	isb	sy
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	b662      	cpsie	i
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8002928:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800292a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800292c:	429a      	cmp	r2, r3
 800292e:	d215      	bcs.n	800295c <xQueueGiveFromISR+0x90>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
 8002930:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002932:	3301      	adds	r3, #1
 8002934:	63a3      	str	r3, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8002936:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002938:	3301      	adds	r3, #1
 800293a:	d10a      	bne.n	8002952 <xQueueGiveFromISR+0x86>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800293c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800293e:	b15b      	cbz	r3, 8002958 <xQueueGiveFromISR+0x8c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002940:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002944:	f7fe ff56 	bl	80017f4 <xTaskRemoveFromEventList>
 8002948:	b130      	cbz	r0, 8002958 <xQueueGiveFromISR+0x8c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800294a:	b12d      	cbz	r5, 8002958 <xQueueGiveFromISR+0x8c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800294c:	2001      	movs	r0, #1
 800294e:	6028      	str	r0, [r5, #0]
 8002950:	e011      	b.n	8002976 <xQueueGiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8002952:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002954:	3301      	adds	r3, #1
 8002956:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
 8002958:	2001      	movs	r0, #1
 800295a:	e00c      	b.n	8002976 <xQueueGiveFromISR+0xaa>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800295c:	2000      	movs	r0, #0
 800295e:	e00a      	b.n	8002976 <xQueueGiveFromISR+0xaa>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	b672      	cpsid	i
 8002966:	f383 8811 	msr	BASEPRI, r3
 800296a:	f3bf 8f6f 	isb	sy
 800296e:	f3bf 8f4f 	dsb	sy
 8002972:	b662      	cpsie	i
 8002974:	e7fe      	b.n	8002974 <xQueueGiveFromISR+0xa8>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002976:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 800297a:	bd70      	pop	{r4, r5, r6, pc}

0800297c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800297c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002980:	4688      	mov	r8, r1
 8002982:	9201      	str	r2, [sp, #4]
 8002984:	469a      	mov	sl, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002986:	4604      	mov	r4, r0
 8002988:	b950      	cbnz	r0, 80029a0 <xQueueGenericReceive+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800298a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298e:	b672      	cpsid	i
 8002990:	f383 8811 	msr	BASEPRI, r3
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	b662      	cpsie	i
 800299e:	e7fe      	b.n	800299e <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029a0:	b961      	cbnz	r1, 80029bc <xQueueGenericReceive+0x40>
 80029a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80029a4:	b153      	cbz	r3, 80029bc <xQueueGenericReceive+0x40>
 80029a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029aa:	b672      	cpsid	i
 80029ac:	f383 8811 	msr	BASEPRI, r3
 80029b0:	f3bf 8f6f 	isb	sy
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	b662      	cpsie	i
 80029ba:	e7fe      	b.n	80029ba <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029bc:	f7fe ffb8 	bl	8001930 <xTaskGetSchedulerState>
 80029c0:	b910      	cbnz	r0, 80029c8 <xQueueGenericReceive+0x4c>
 80029c2:	9e01      	ldr	r6, [sp, #4]
 80029c4:	b10e      	cbz	r6, 80029ca <xQueueGenericReceive+0x4e>
 80029c6:	e085      	b.n	8002ad4 <xQueueGenericReceive+0x158>
 80029c8:	2600      	movs	r6, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 80029ca:	2700      	movs	r7, #0

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 80029cc:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8002af0 <xQueueGenericReceive+0x174>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80029d0:	f7ff f9f8 	bl	8001dc4 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029d6:	b363      	cbz	r3, 8002a32 <xQueueGenericReceive+0xb6>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029d8:	4641      	mov	r1, r8
 80029da:	4620      	mov	r0, r4
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80029dc:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029de:	f7ff fd3c 	bl	800245a <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80029e2:	f1ba 0f00 	cmp.w	sl, #0
 80029e6:	d110      	bne.n	8002a0a <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 80029e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029ea:	3b01      	subs	r3, #1
 80029ec:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	b913      	cbnz	r3, 80029f8 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80029f2:	f7ff f847 	bl	8001a84 <pvTaskIncrementMutexHeldCount>
 80029f6:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029f8:	6923      	ldr	r3, [r4, #16]
 80029fa:	b1b3      	cbz	r3, 8002a2a <xQueueGenericReceive+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80029fc:	f104 0010 	add.w	r0, r4, #16
 8002a00:	f7fe fef8 	bl	80017f4 <xTaskRemoveFromEventList>
 8002a04:	2801      	cmp	r0, #1
 8002a06:	d110      	bne.n	8002a2a <xQueueGenericReceive+0xae>
 8002a08:	e007      	b.n	8002a1a <xQueueGenericReceive+0x9e>
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8002a0c:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a0e:	b163      	cbz	r3, 8002a2a <xQueueGenericReceive+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a10:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002a14:	f7fe feee 	bl	80017f4 <xTaskRemoveFromEventList>
 8002a18:	b138      	cbz	r0, 8002a2a <xQueueGenericReceive+0xae>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a1e:	4b34      	ldr	r3, [pc, #208]	; (8002af0 <xQueueGenericReceive+0x174>)
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	f3bf 8f4f 	dsb	sy
 8002a26:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8002a2a:	f7ff f9f1 	bl	8001e10 <vPortExitCritical>
				return pdPASS;
 8002a2e:	2001      	movs	r0, #1
 8002a30:	e05b      	b.n	8002aea <xQueueGenericReceive+0x16e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a32:	9d01      	ldr	r5, [sp, #4]
 8002a34:	b91d      	cbnz	r5, 8002a3e <xQueueGenericReceive+0xc2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a36:	f7ff f9eb 	bl	8001e10 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002a3a:	4628      	mov	r0, r5
 8002a3c:	e055      	b.n	8002aea <xQueueGenericReceive+0x16e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a3e:	b916      	cbnz	r6, 8002a46 <xQueueGenericReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002a40:	a802      	add	r0, sp, #8
 8002a42:	f7fe ff1b 	bl	800187c <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a46:	f7ff f9e3 	bl	8001e10 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a4a:	f7fe fc7b 	bl	8001344 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a4e:	f7ff f9b9 	bl	8001dc4 <vPortEnterCritical>
 8002a52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a54:	3301      	adds	r3, #1
 8002a56:	d100      	bne.n	8002a5a <xQueueGenericReceive+0xde>
 8002a58:	6467      	str	r7, [r4, #68]	; 0x44
 8002a5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	d100      	bne.n	8002a62 <xQueueGenericReceive+0xe6>
 8002a60:	64a7      	str	r7, [r4, #72]	; 0x48
 8002a62:	f7ff f9d5 	bl	8001e10 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a66:	a901      	add	r1, sp, #4
 8002a68:	a802      	add	r0, sp, #8
 8002a6a:	f7fe ff17 	bl	800189c <xTaskCheckForTimeOut>
 8002a6e:	bb50      	cbnz	r0, 8002ac6 <xQueueGenericReceive+0x14a>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a70:	f7ff f9a8 	bl	8001dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a74:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002a76:	f7ff f9cb 	bl	8001e10 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a7a:	b9f5      	cbnz	r5, 8002aba <xQueueGenericReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	b933      	cbnz	r3, 8002a8e <xQueueGenericReceive+0x112>
					{
						taskENTER_CRITICAL();
 8002a80:	f7ff f9a0 	bl	8001dc4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002a84:	6860      	ldr	r0, [r4, #4]
 8002a86:	f7fe ff63 	bl	8001950 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8002a8a:	f7ff f9c1 	bl	8001e10 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a8e:	9901      	ldr	r1, [sp, #4]
 8002a90:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002a94:	f7fe fe46 	bl	8001724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f7ff fcf3 	bl	8002484 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a9e:	f7fe fd09 	bl	80014b4 <xTaskResumeAll>
 8002aa2:	b108      	cbz	r0, 8002aa8 <xQueueGenericReceive+0x12c>
 8002aa4:	2601      	movs	r6, #1
 8002aa6:	e793      	b.n	80029d0 <xQueueGenericReceive+0x54>
				{
					portYIELD_WITHIN_API();
 8002aa8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002aac:	f8c9 3000 	str.w	r3, [r9]
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	e7f4      	b.n	8002aa4 <xQueueGenericReceive+0x128>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002aba:	4620      	mov	r0, r4
 8002abc:	f7ff fce2 	bl	8002484 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ac0:	f7fe fcf8 	bl	80014b4 <xTaskResumeAll>
 8002ac4:	e7ee      	b.n	8002aa4 <xQueueGenericReceive+0x128>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	f7ff fcdc 	bl	8002484 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002acc:	f7fe fcf2 	bl	80014b4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	e00a      	b.n	8002aea <xQueueGenericReceive+0x16e>
 8002ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad8:	b672      	cpsid	i
 8002ada:	f383 8811 	msr	BASEPRI, r3
 8002ade:	f3bf 8f6f 	isb	sy
 8002ae2:	f3bf 8f4f 	dsb	sy
 8002ae6:	b662      	cpsie	i
 8002ae8:	e7fe      	b.n	8002ae8 <xQueueGenericReceive+0x16c>
		}
	}
}
 8002aea:	b004      	add	sp, #16
 8002aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002af0:	e000ed04 	.word	0xe000ed04

08002af4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af6:	460e      	mov	r6, r1
 8002af8:	4617      	mov	r7, r2
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002afa:	4604      	mov	r4, r0
 8002afc:	b950      	cbnz	r0, 8002b14 <xQueueReceiveFromISR+0x20>
 8002afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b02:	b672      	cpsid	i
 8002b04:	f383 8811 	msr	BASEPRI, r3
 8002b08:	f3bf 8f6f 	isb	sy
 8002b0c:	f3bf 8f4f 	dsb	sy
 8002b10:	b662      	cpsie	i
 8002b12:	e7fe      	b.n	8002b12 <xQueueReceiveFromISR+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b14:	b961      	cbnz	r1, 8002b30 <xQueueReceiveFromISR+0x3c>
 8002b16:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002b18:	b153      	cbz	r3, 8002b30 <xQueueReceiveFromISR+0x3c>
 8002b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1e:	b672      	cpsid	i
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	b662      	cpsie	i
 8002b2e:	e7fe      	b.n	8002b2e <xQueueReceiveFromISR+0x3a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b30:	f7ff fa38 	bl	8001fa4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b34:	f3ef 8511 	mrs	r5, BASEPRI
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	b672      	cpsid	i
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	b662      	cpsie	i

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b4c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002b4e:	b1c0      	cbz	r0, 8002b82 <xQueueReceiveFromISR+0x8e>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b50:	4631      	mov	r1, r6
 8002b52:	4620      	mov	r0, r4
 8002b54:	f7ff fc81 	bl	800245a <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 8002b58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	63a3      	str	r3, [r4, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
 8002b5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b60:	3301      	adds	r3, #1
 8002b62:	d10a      	bne.n	8002b7a <xQueueReceiveFromISR+0x86>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b64:	6923      	ldr	r3, [r4, #16]
 8002b66:	b15b      	cbz	r3, 8002b80 <xQueueReceiveFromISR+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b68:	f104 0010 	add.w	r0, r4, #16
 8002b6c:	f7fe fe42 	bl	80017f4 <xTaskRemoveFromEventList>
 8002b70:	b130      	cbz	r0, 8002b80 <xQueueReceiveFromISR+0x8c>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002b72:	b12f      	cbz	r7, 8002b80 <xQueueReceiveFromISR+0x8c>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002b74:	2001      	movs	r0, #1
 8002b76:	6038      	str	r0, [r7, #0]
 8002b78:	e003      	b.n	8002b82 <xQueueReceiveFromISR+0x8e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
 8002b7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	6463      	str	r3, [r4, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002b80:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b82:	f385 8811 	msr	BASEPRI, r5
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 8002b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b88 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b88:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b8a:	4a08      	ldr	r2, [pc, #32]	; (8002bac <vQueueAddToRegistry+0x24>)
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b8c:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b8e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8002b92:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8002b96:	b925      	cbnz	r5, 8002ba2 <vQueueAddToRegistry+0x1a>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b98:	4a04      	ldr	r2, [pc, #16]	; (8002bac <vQueueAddToRegistry+0x24>)
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b9a:	6060      	str	r0, [r4, #4]
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b9c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002ba0:	bd30      	pop	{r4, r5, pc}
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d1f2      	bne.n	8002b8e <vQueueAddToRegistry+0x6>
 8002ba8:	bd30      	pop	{r4, r5, pc}
 8002baa:	bf00      	nop
 8002bac:	20028788 	.word	0x20028788

08002bb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 8002bb0:	b538      	push	{r3, r4, r5, lr}
 8002bb2:	4604      	mov	r4, r0
 8002bb4:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002bb6:	f7ff f905 	bl	8001dc4 <vPortEnterCritical>
 8002bba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <vQueueWaitForMessageRestricted+0x14>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	6463      	str	r3, [r4, #68]	; 0x44
 8002bc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	d101      	bne.n	8002bce <vQueueWaitForMessageRestricted+0x1e>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	64a3      	str	r3, [r4, #72]	; 0x48
 8002bce:	f7ff f91f 	bl	8001e10 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002bd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bd4:	b923      	cbnz	r3, 8002be0 <vQueueWaitForMessageRestricted+0x30>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002bdc:	f7fe fddc 	bl	8001798 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002be0:	4620      	mov	r0, r4
	}
 8002be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002be6:	f7ff bc4d 	b.w	8002484 <prvUnlockQueue>

08002bea <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bea:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bf2:	6043      	str	r3, [r0, #4]
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bf4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bf6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bf8:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bfa:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bfc:	6003      	str	r3, [r0, #0]
 8002bfe:	4770      	bx	lr

08002c00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	6103      	str	r3, [r0, #16]
 8002c04:	4770      	bx	lr

08002c06 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c06:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c08:	689a      	ldr	r2, [r3, #8]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c0a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c0c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c12:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002c14:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c16:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002c18:	3301      	adds	r3, #1
 8002c1a:	6003      	str	r3, [r0, #0]
 8002c1c:	4770      	bx	lr

08002c1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c1e:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c20:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c22:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c24:	d101      	bne.n	8002c2a <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c26:	6903      	ldr	r3, [r0, #16]
 8002c28:	e007      	b.n	8002c3a <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c2a:	f100 0308 	add.w	r3, r0, #8
 8002c2e:	685c      	ldr	r4, [r3, #4]
 8002c30:	6825      	ldr	r5, [r4, #0]
 8002c32:	42aa      	cmp	r2, r5
 8002c34:	d301      	bcc.n	8002c3a <vListInsert+0x1c>
 8002c36:	4623      	mov	r3, r4
 8002c38:	e7f9      	b.n	8002c2e <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c3e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c40:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c42:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002c44:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c46:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002c48:	3301      	adds	r3, #1
 8002c4a:	6003      	str	r3, [r0, #0]
 8002c4c:	bd30      	pop	{r4, r5, pc}

08002c4e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c4e:	6841      	ldr	r1, [r0, #4]
 8002c50:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002c52:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c54:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c56:	6882      	ldr	r2, [r0, #8]
 8002c58:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c5a:	6859      	ldr	r1, [r3, #4]
 8002c5c:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c5e:	bf08      	it	eq
 8002c60:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002c62:	2200      	movs	r2, #0
 8002c64:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	3801      	subs	r0, #1
 8002c6a:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c70:	6803      	ldr	r3, [r0, #0]
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c76:	07dd      	lsls	r5, r3, #31
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c78:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7a:	d403      	bmi.n	8002c84 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	0798      	lsls	r0, r3, #30
 8002c80:	d470      	bmi.n	8002d64 <HAL_RCC_OscConfig+0xf4>
 8002c82:	e0c3      	b.n	8002e0c <HAL_RCC_OscConfig+0x19c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c84:	4ba4      	ldr	r3, [pc, #656]	; (8002f18 <HAL_RCC_OscConfig+0x2a8>)
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	f002 020c 	and.w	r2, r2, #12
 8002c8c:	2a04      	cmp	r2, #4
 8002c8e:	d007      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	f002 020c 	and.w	r2, r2, #12
 8002c96:	2a08      	cmp	r2, #8
 8002c98:	d10b      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x42>
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	0259      	lsls	r1, r3, #9
 8002c9e:	d508      	bpl.n	8002cb2 <HAL_RCC_OscConfig+0x42>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	4b9d      	ldr	r3, [pc, #628]	; (8002f18 <HAL_RCC_OscConfig+0x2a8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	039a      	lsls	r2, r3, #14
 8002ca6:	d5e9      	bpl.n	8002c7c <HAL_RCC_OscConfig+0xc>
 8002ca8:	6863      	ldr	r3, [r4, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1e6      	bne.n	8002c7c <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8002cae:	2001      	movs	r0, #1
 8002cb0:	e1b1      	b.n	8003016 <HAL_RCC_OscConfig+0x3a6>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8002cb2:	4d99      	ldr	r5, [pc, #612]	; (8002f18 <HAL_RCC_OscConfig+0x2a8>)
 8002cb4:	682b      	ldr	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	462e      	mov	r6, r5
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8002cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cbc:	602b      	str	r3, [r5, #0]
 8002cbe:	682b      	ldr	r3, [r5, #0]
 8002cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc4:	602b      	str	r3, [r5, #0]
 8002cc6:	682b      	ldr	r3, [r5, #0]
 8002cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ccc:	602b      	str	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cce:	f000 fb09 	bl	80032e4 <HAL_GetTick>
 8002cd2:	4607      	mov	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd4:	6833      	ldr	r3, [r6, #0]
 8002cd6:	4d90      	ldr	r5, [pc, #576]	; (8002f18 <HAL_RCC_OscConfig+0x2a8>)
 8002cd8:	039b      	lsls	r3, r3, #14
 8002cda:	d507      	bpl.n	8002cec <HAL_RCC_OscConfig+0x7c>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cdc:	f000 fb02 	bl	80032e4 <HAL_GetTick>
 8002ce0:	1bc0      	subs	r0, r0, r7
 8002ce2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002ce6:	d9f5      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x64>
        {
          return HAL_TIMEOUT;
 8002ce8:	2003      	movs	r0, #3
 8002cea:	e194      	b.n	8003016 <HAL_RCC_OscConfig+0x3a6>
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cec:	682b      	ldr	r3, [r5, #0]
 8002cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf2:	602b      	str	r3, [r5, #0]
 8002cf4:	6863      	ldr	r3, [r4, #4]
 8002cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfa:	d103      	bne.n	8002d04 <HAL_RCC_OscConfig+0x94>
 8002cfc:	682b      	ldr	r3, [r5, #0]
 8002cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d02:	e005      	b.n	8002d10 <HAL_RCC_OscConfig+0xa0>
 8002d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d08:	d108      	bne.n	8002d1c <HAL_RCC_OscConfig+0xac>
 8002d0a:	682b      	ldr	r3, [r5, #0]
 8002d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d10:	602b      	str	r3, [r5, #0]
 8002d12:	682b      	ldr	r3, [r5, #0]
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d18:	602b      	str	r3, [r5, #0]
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0xbe>
 8002d1c:	682a      	ldr	r2, [r5, #0]
 8002d1e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d22:	602a      	str	r2, [r5, #0]
 8002d24:	682a      	ldr	r2, [r5, #0]
 8002d26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d2a:	602a      	str	r2, [r5, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d2c:	b16b      	cbz	r3, 8002d4a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2e:	f000 fad9 	bl	80032e4 <HAL_GetTick>
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	4d79      	ldr	r5, [pc, #484]	; (8002f18 <HAL_RCC_OscConfig+0x2a8>)
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	4606      	mov	r6, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	682b      	ldr	r3, [r5, #0]
 8002d38:	039f      	lsls	r7, r3, #14
 8002d3a:	d49f      	bmi.n	8002c7c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d3c:	f000 fad2 	bl	80032e4 <HAL_GetTick>
 8002d40:	1b80      	subs	r0, r0, r6
 8002d42:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002d46:	d9f6      	bls.n	8002d36 <HAL_RCC_OscConfig+0xc6>
 8002d48:	e7ce      	b.n	8002ce8 <HAL_RCC_OscConfig+0x78>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f000 facb 	bl	80032e4 <HAL_GetTick>
 8002d4e:	4606      	mov	r6, r0
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d50:	682b      	ldr	r3, [r5, #0]
 8002d52:	0398      	lsls	r0, r3, #14
 8002d54:	d592      	bpl.n	8002c7c <HAL_RCC_OscConfig+0xc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d56:	f000 fac5 	bl	80032e4 <HAL_GetTick>
 8002d5a:	1b80      	subs	r0, r0, r6
 8002d5c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002d60:	d9f6      	bls.n	8002d50 <HAL_RCC_OscConfig+0xe0>
 8002d62:	e7c1      	b.n	8002ce8 <HAL_RCC_OscConfig+0x78>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d64:	4b6c      	ldr	r3, [pc, #432]	; (8002f18 <HAL_RCC_OscConfig+0x2a8>)
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	f012 0f0c 	tst.w	r2, #12
 8002d6c:	d007      	beq.n	8002d7e <HAL_RCC_OscConfig+0x10e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	f002 020c 	and.w	r2, r2, #12
 8002d74:	2a08      	cmp	r2, #8
 8002d76:	d117      	bne.n	8002da8 <HAL_RCC_OscConfig+0x138>
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	0259      	lsls	r1, r3, #9
 8002d7c:	d414      	bmi.n	8002da8 <HAL_RCC_OscConfig+0x138>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	4b66      	ldr	r3, [pc, #408]	; (8002f18 <HAL_RCC_OscConfig+0x2a8>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	0792      	lsls	r2, r2, #30
 8002d84:	d502      	bpl.n	8002d8c <HAL_RCC_OscConfig+0x11c>
 8002d86:	68e2      	ldr	r2, [r4, #12]
 8002d88:	2a01      	cmp	r2, #1
 8002d8a:	d190      	bne.n	8002cae <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8c:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	21f8      	movs	r1, #248	; 0xf8
 8002d90:	fa91 f1a1 	rbit	r1, r1
 8002d94:	6920      	ldr	r0, [r4, #16]
 8002d96:	fab1 f181 	clz	r1, r1
 8002d9a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002d9e:	fa00 f101 	lsl.w	r1, r0, r1
 8002da2:	430a      	orrs	r2, r1
 8002da4:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da6:	e031      	b.n	8002e0c <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002da8:	68e3      	ldr	r3, [r4, #12]
 8002daa:	4d5b      	ldr	r5, [pc, #364]	; (8002f18 <HAL_RCC_OscConfig+0x2a8>)
 8002dac:	b1f3      	cbz	r3, 8002dec <HAL_RCC_OscConfig+0x17c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dae:	682b      	ldr	r3, [r5, #0]
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f000 fa95 	bl	80032e4 <HAL_GetTick>
 8002dba:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbc:	682b      	ldr	r3, [r5, #0]
 8002dbe:	4856      	ldr	r0, [pc, #344]	; (8002f18 <HAL_RCC_OscConfig+0x2a8>)
 8002dc0:	079f      	lsls	r7, r3, #30
 8002dc2:	d405      	bmi.n	8002dd0 <HAL_RCC_OscConfig+0x160>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc4:	f000 fa8e 	bl	80032e4 <HAL_GetTick>
 8002dc8:	1b80      	subs	r0, r0, r6
 8002dca:	2864      	cmp	r0, #100	; 0x64
 8002dcc:	d9f6      	bls.n	8002dbc <HAL_RCC_OscConfig+0x14c>
 8002dce:	e78b      	b.n	8002ce8 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd0:	6803      	ldr	r3, [r0, #0]
 8002dd2:	22f8      	movs	r2, #248	; 0xf8
 8002dd4:	fa92 f2a2 	rbit	r2, r2
 8002dd8:	6921      	ldr	r1, [r4, #16]
 8002dda:	fab2 f282 	clz	r2, r2
 8002dde:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002de2:	fa01 f202 	lsl.w	r2, r1, r2
 8002de6:	4313      	orrs	r3, r2
 8002de8:	6003      	str	r3, [r0, #0]
 8002dea:	e00f      	b.n	8002e0c <HAL_RCC_OscConfig+0x19c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dec:	682b      	ldr	r3, [r5, #0]
 8002dee:	f023 0301 	bic.w	r3, r3, #1
 8002df2:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f000 fa76 	bl	80032e4 <HAL_GetTick>
 8002df8:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfa:	682b      	ldr	r3, [r5, #0]
 8002dfc:	0799      	lsls	r1, r3, #30
 8002dfe:	d505      	bpl.n	8002e0c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e00:	f000 fa70 	bl	80032e4 <HAL_GetTick>
 8002e04:	1b80      	subs	r0, r0, r6
 8002e06:	2864      	cmp	r0, #100	; 0x64
 8002e08:	d9f7      	bls.n	8002dfa <HAL_RCC_OscConfig+0x18a>
 8002e0a:	e76d      	b.n	8002ce8 <HAL_RCC_OscConfig+0x78>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0c:	6823      	ldr	r3, [r4, #0]
 8002e0e:	071a      	lsls	r2, r3, #28
 8002e10:	d403      	bmi.n	8002e1a <HAL_RCC_OscConfig+0x1aa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e12:	6823      	ldr	r3, [r4, #0]
 8002e14:	075b      	lsls	r3, r3, #29
 8002e16:	d569      	bpl.n	8002eec <HAL_RCC_OscConfig+0x27c>
 8002e18:	e022      	b.n	8002e60 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e1a:	6963      	ldr	r3, [r4, #20]
 8002e1c:	4d3e      	ldr	r5, [pc, #248]	; (8002f18 <HAL_RCC_OscConfig+0x2a8>)
 8002e1e:	b17b      	cbz	r3, 8002e40 <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e20:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e28:	f000 fa5c 	bl	80032e4 <HAL_GetTick>
 8002e2c:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002e30:	079f      	lsls	r7, r3, #30
 8002e32:	d4ee      	bmi.n	8002e12 <HAL_RCC_OscConfig+0x1a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e34:	f000 fa56 	bl	80032e4 <HAL_GetTick>
 8002e38:	1b80      	subs	r0, r0, r6
 8002e3a:	2864      	cmp	r0, #100	; 0x64
 8002e3c:	d9f7      	bls.n	8002e2e <HAL_RCC_OscConfig+0x1be>
 8002e3e:	e753      	b.n	8002ce8 <HAL_RCC_OscConfig+0x78>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e40:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002e42:	f023 0301 	bic.w	r3, r3, #1
 8002e46:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e48:	f000 fa4c 	bl	80032e4 <HAL_GetTick>
 8002e4c:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002e50:	0798      	lsls	r0, r3, #30
 8002e52:	d5de      	bpl.n	8002e12 <HAL_RCC_OscConfig+0x1a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e54:	f000 fa46 	bl	80032e4 <HAL_GetTick>
 8002e58:	1b80      	subs	r0, r0, r6
 8002e5a:	2864      	cmp	r0, #100	; 0x64
 8002e5c:	d9f7      	bls.n	8002e4e <HAL_RCC_OscConfig+0x1de>
 8002e5e:	e743      	b.n	8002ce8 <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e60:	2300      	movs	r3, #0
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e62:	4d2e      	ldr	r5, [pc, #184]	; (8002f1c <HAL_RCC_OscConfig+0x2ac>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	4b2c      	ldr	r3, [pc, #176]	; (8002f18 <HAL_RCC_OscConfig+0x2a8>)
 8002e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	9301      	str	r3, [sp, #4]
 8002e78:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e7a:	682b      	ldr	r3, [r5, #0]
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e80:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e82:	f000 fa2f 	bl	80032e4 <HAL_GetTick>
 8002e86:	4606      	mov	r6, r0
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e88:	682b      	ldr	r3, [r5, #0]
 8002e8a:	05d9      	lsls	r1, r3, #23
 8002e8c:	d531      	bpl.n	8002ef2 <HAL_RCC_OscConfig+0x282>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8002e8e:	4d22      	ldr	r5, [pc, #136]	; (8002f18 <HAL_RCC_OscConfig+0x2a8>)
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f241 3888 	movw	r8, #5000	; 0x1388
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8002e94:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e96:	462e      	mov	r6, r5
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	672b      	str	r3, [r5, #112]	; 0x70
 8002e9e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002ea0:	f023 0304 	bic.w	r3, r3, #4
 8002ea4:	672b      	str	r3, [r5, #112]	; 0x70
 8002ea6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	672b      	str	r3, [r5, #112]	; 0x70
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eae:	f000 fa19 	bl	80032e4 <HAL_GetTick>
 8002eb2:	4607      	mov	r7, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002eb6:	4d18      	ldr	r5, [pc, #96]	; (8002f18 <HAL_RCC_OscConfig+0x2a8>)
 8002eb8:	079a      	lsls	r2, r3, #30
 8002eba:	d420      	bmi.n	8002efe <HAL_RCC_OscConfig+0x28e>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ebc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	672b      	str	r3, [r5, #112]	; 0x70
 8002ec4:	68a3      	ldr	r3, [r4, #8]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d11f      	bne.n	8002f0a <HAL_RCC_OscConfig+0x29a>
 8002eca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002ecc:	f023 0304 	bic.w	r3, r3, #4
 8002ed0:	672b      	str	r3, [r5, #112]	; 0x70
 8002ed2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eda:	f000 fa03 	bl	80032e4 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ede:	4d0e      	ldr	r5, [pc, #56]	; (8002f18 <HAL_RCC_OscConfig+0x2a8>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee0:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee2:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002ee8:	079b      	lsls	r3, r3, #30
 8002eea:	d523      	bpl.n	8002f34 <HAL_RCC_OscConfig+0x2c4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eec:	69a2      	ldr	r2, [r4, #24]
 8002eee:	bbaa      	cbnz	r2, 8002f5c <HAL_RCC_OscConfig+0x2ec>
 8002ef0:	e077      	b.n	8002fe2 <HAL_RCC_OscConfig+0x372>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ef2:	f000 f9f7 	bl	80032e4 <HAL_GetTick>
 8002ef6:	1b80      	subs	r0, r0, r6
 8002ef8:	2864      	cmp	r0, #100	; 0x64
 8002efa:	d9c5      	bls.n	8002e88 <HAL_RCC_OscConfig+0x218>
 8002efc:	e6f4      	b.n	8002ce8 <HAL_RCC_OscConfig+0x78>
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f000 f9f1 	bl	80032e4 <HAL_GetTick>
 8002f02:	1bc0      	subs	r0, r0, r7
 8002f04:	4540      	cmp	r0, r8
 8002f06:	d9d5      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x244>
 8002f08:	e6ee      	b.n	8002ce8 <HAL_RCC_OscConfig+0x78>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f0a:	2b05      	cmp	r3, #5
 8002f0c:	d108      	bne.n	8002f20 <HAL_RCC_OscConfig+0x2b0>
 8002f0e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002f10:	f043 0304 	orr.w	r3, r3, #4
 8002f14:	e7dc      	b.n	8002ed0 <HAL_RCC_OscConfig+0x260>
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40007000 	.word	0x40007000
 8002f20:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002f22:	f022 0204 	bic.w	r2, r2, #4
 8002f26:	672a      	str	r2, [r5, #112]	; 0x70
 8002f28:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f30:	b133      	cbz	r3, 8002f40 <HAL_RCC_OscConfig+0x2d0>
 8002f32:	e7d2      	b.n	8002eda <HAL_RCC_OscConfig+0x26a>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f34:	f000 f9d6 	bl	80032e4 <HAL_GetTick>
 8002f38:	1b80      	subs	r0, r0, r6
 8002f3a:	42b8      	cmp	r0, r7
 8002f3c:	d9d3      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x276>
 8002f3e:	e6d3      	b.n	8002ce8 <HAL_RCC_OscConfig+0x78>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f40:	f000 f9d0 	bl	80032e4 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f44:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f48:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002f4c:	0798      	lsls	r0, r3, #30
 8002f4e:	d5cd      	bpl.n	8002eec <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f50:	f000 f9c8 	bl	80032e4 <HAL_GetTick>
 8002f54:	1b80      	subs	r0, r0, r6
 8002f56:	42b8      	cmp	r0, r7
 8002f58:	d9f7      	bls.n	8002f4a <HAL_RCC_OscConfig+0x2da>
 8002f5a:	e6c5      	b.n	8002ce8 <HAL_RCC_OscConfig+0x78>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f5c:	4d2f      	ldr	r5, [pc, #188]	; (800301c <HAL_RCC_OscConfig+0x3ac>)
 8002f5e:	68ab      	ldr	r3, [r5, #8]
 8002f60:	f003 030c 	and.w	r3, r3, #12
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	f43f aea2 	beq.w	8002cae <HAL_RCC_OscConfig+0x3e>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6a:	682b      	ldr	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f6c:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f72:	602b      	str	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f74:	d143      	bne.n	8002ffe <HAL_RCC_OscConfig+0x38e>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f76:	f000 f9b5 	bl	80032e4 <HAL_GetTick>
 8002f7a:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7c:	682b      	ldr	r3, [r5, #0]
 8002f7e:	4e27      	ldr	r6, [pc, #156]	; (800301c <HAL_RCC_OscConfig+0x3ac>)
 8002f80:	0199      	lsls	r1, r3, #6
 8002f82:	d430      	bmi.n	8002fe6 <HAL_RCC_OscConfig+0x376>
 8002f84:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002f88:	fa92 f2a2 	rbit	r2, r2
 8002f8c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }
        
        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f90:	fab2 f082 	clz	r0, r2
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8002f9c:	fab3 f583 	clz	r5, r3
 8002fa0:	fa92 f2a2 	rbit	r2, r2
 8002fa4:	6a23      	ldr	r3, [r4, #32]
 8002fa6:	fab2 f182 	clz	r1, r2
 8002faa:	69e7      	ldr	r7, [r4, #28]
 8002fac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002fae:	431f      	orrs	r7, r3
 8002fb0:	4082      	lsls	r2, r0
 8002fb2:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
 8002fb6:	ea43 0002 	orr.w	r0, r3, r2
 8002fba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002fbc:	085a      	lsrs	r2, r3, #1
 8002fbe:	3a01      	subs	r2, #1
 8002fc0:	fa02 f305 	lsl.w	r3, r2, r5
 8002fc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002fc6:	4303      	orrs	r3, r0
 8002fc8:	408a      	lsls	r2, r1
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	6073      	str	r3, [r6, #4]
                             RCC_OscInitStruct->PLL.PLLM,
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fce:	6833      	ldr	r3, [r6, #0]
 8002fd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fd4:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd6:	f000 f985 	bl	80032e4 <HAL_GetTick>
 8002fda:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fdc:	6833      	ldr	r3, [r6, #0]
 8002fde:	019a      	lsls	r2, r3, #6
 8002fe0:	d507      	bpl.n	8002ff2 <HAL_RCC_OscConfig+0x382>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	e017      	b.n	8003016 <HAL_RCC_OscConfig+0x3a6>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe6:	f000 f97d 	bl	80032e4 <HAL_GetTick>
 8002fea:	1bc0      	subs	r0, r0, r7
 8002fec:	2864      	cmp	r0, #100	; 0x64
 8002fee:	d9c5      	bls.n	8002f7c <HAL_RCC_OscConfig+0x30c>
 8002ff0:	e67a      	b.n	8002ce8 <HAL_RCC_OscConfig+0x78>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff2:	f000 f977 	bl	80032e4 <HAL_GetTick>
 8002ff6:	1b00      	subs	r0, r0, r4
 8002ff8:	2864      	cmp	r0, #100	; 0x64
 8002ffa:	d9ef      	bls.n	8002fdc <HAL_RCC_OscConfig+0x36c>
 8002ffc:	e674      	b.n	8002ce8 <HAL_RCC_OscConfig+0x78>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffe:	f000 f971 	bl	80032e4 <HAL_GetTick>
 8003002:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	019b      	lsls	r3, r3, #6
 8003008:	d5eb      	bpl.n	8002fe2 <HAL_RCC_OscConfig+0x372>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800300a:	f000 f96b 	bl	80032e4 <HAL_GetTick>
 800300e:	1b00      	subs	r0, r0, r4
 8003010:	2864      	cmp	r0, #100	; 0x64
 8003012:	d9f7      	bls.n	8003004 <HAL_RCC_OscConfig+0x394>
 8003014:	e668      	b.n	8002ce8 <HAL_RCC_OscConfig+0x78>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8003016:	b002      	add	sp, #8
 8003018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800301c:	40023800 	.word	0x40023800

08003020 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
     must be correctly programmed according to the frequency of the CPU clock 
     (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003020:	4a6c      	ldr	r2, [pc, #432]	; (80031d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003022:	6813      	ldr	r3, [r2, #0]
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800302a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800302e:	4604      	mov	r4, r0
 8003030:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
     must be correctly programmed according to the frequency of the CPU clock 
     (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003032:	d266      	bcs.n	8003102 <HAL_RCC_ClockConfig+0xe2>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003034:	6813      	ldr	r3, [r2, #0]
 8003036:	f023 030f 	bic.w	r3, r3, #15
 800303a:	430b      	orrs	r3, r1
 800303c:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800303e:	6813      	ldr	r3, [r2, #0]
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	4299      	cmp	r1, r3
 8003046:	d002      	beq.n	800304e <HAL_RCC_ClockConfig+0x2e>
    {
      return HAL_ERROR;
 8003048:	2001      	movs	r0, #1
 800304a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800304e:	6801      	ldr	r1, [r0, #0]
 8003050:	078f      	lsls	r7, r1, #30
 8003052:	d506      	bpl.n	8003062 <HAL_RCC_ClockConfig+0x42>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003054:	4860      	ldr	r0, [pc, #384]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003056:	6883      	ldr	r3, [r0, #8]
 8003058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800305c:	68a3      	ldr	r3, [r4, #8]
 800305e:	4313      	orrs	r3, r2
 8003060:	6083      	str	r3, [r0, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003062:	07ce      	lsls	r6, r1, #31
 8003064:	d40b      	bmi.n	800307e <HAL_RCC_ClockConfig+0x5e>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003066:	6821      	ldr	r1, [r4, #0]
 8003068:	074d      	lsls	r5, r1, #29
 800306a:	f140 80a3 	bpl.w	80031b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800306e:	485a      	ldr	r0, [pc, #360]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	6883      	ldr	r3, [r0, #8]
 8003072:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003076:	68e3      	ldr	r3, [r4, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	6083      	str	r3, [r0, #8]
 800307c:	e09a      	b.n	80031b4 <HAL_RCC_ClockConfig+0x194>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307e:	6862      	ldr	r2, [r4, #4]
 8003080:	4b55      	ldr	r3, [pc, #340]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003082:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003084:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003086:	d102      	bne.n	800308e <HAL_RCC_ClockConfig+0x6e>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003088:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 800308c:	e006      	b.n	800309c <HAL_RCC_ClockConfig+0x7c>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800308e:	2a02      	cmp	r2, #2
 8003090:	d102      	bne.n	8003098 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003092:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8003096:	e001      	b.n	800309c <HAL_RCC_ClockConfig+0x7c>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003098:	f011 0f02 	tst.w	r1, #2
 800309c:	d0d4      	beq.n	8003048 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800309e:	6899      	ldr	r1, [r3, #8]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a0:	f241 3788 	movw	r7, #5000	; 0x1388
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030a4:	4e4c      	ldr	r6, [pc, #304]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
        {
          return HAL_ERROR;
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a6:	f021 0103 	bic.w	r1, r1, #3
 80030aa:	430a      	orrs	r2, r1
 80030ac:	609a      	str	r2, [r3, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ae:	f000 f919 	bl	80032e4 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b2:	6863      	ldr	r3, [r4, #4]
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d10c      	bne.n	80030d4 <HAL_RCC_ClockConfig+0xb4>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030ba:	68b3      	ldr	r3, [r6, #8]
 80030bc:	f003 030c 	and.w	r3, r3, #12
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d0d0      	beq.n	8003066 <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c4:	f000 f90e 	bl	80032e4 <HAL_GetTick>
 80030c8:	1b40      	subs	r0, r0, r5
 80030ca:	42b8      	cmp	r0, r7
 80030cc:	d9f5      	bls.n	80030ba <HAL_RCC_ClockConfig+0x9a>
          {
            return HAL_TIMEOUT;
 80030ce:	2003      	movs	r0, #3
 80030d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d10f      	bne.n	80030f8 <HAL_RCC_ClockConfig+0xd8>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d8:	68b3      	ldr	r3, [r6, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d0c1      	beq.n	8003066 <HAL_RCC_ClockConfig+0x46>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e2:	f000 f8ff 	bl	80032e4 <HAL_GetTick>
 80030e6:	1b40      	subs	r0, r0, r5
 80030e8:	42b8      	cmp	r0, r7
 80030ea:	d9f5      	bls.n	80030d8 <HAL_RCC_ClockConfig+0xb8>
 80030ec:	e7ef      	b.n	80030ce <HAL_RCC_ClockConfig+0xae>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ee:	f000 f8f9 	bl	80032e4 <HAL_GetTick>
 80030f2:	1b40      	subs	r0, r0, r5
 80030f4:	42b8      	cmp	r0, r7
 80030f6:	d8ea      	bhi.n	80030ce <HAL_RCC_ClockConfig+0xae>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80030f8:	68b3      	ldr	r3, [r6, #8]
 80030fa:	f013 0f0c 	tst.w	r3, #12
 80030fe:	d1f6      	bne.n	80030ee <HAL_RCC_ClockConfig+0xce>
 8003100:	e7b1      	b.n	8003066 <HAL_RCC_ClockConfig+0x46>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003102:	6801      	ldr	r1, [r0, #0]
 8003104:	0788      	lsls	r0, r1, #30
 8003106:	d506      	bpl.n	8003116 <HAL_RCC_ClockConfig+0xf6>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003108:	4833      	ldr	r0, [pc, #204]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 800310a:	6883      	ldr	r3, [r0, #8]
 800310c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003110:	68a3      	ldr	r3, [r4, #8]
 8003112:	4313      	orrs	r3, r2
 8003114:	6083      	str	r3, [r0, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003116:	07ca      	lsls	r2, r1, #31
 8003118:	d40b      	bmi.n	8003132 <HAL_RCC_ClockConfig+0x112>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4a2e      	ldr	r2, [pc, #184]	; (80031d4 <HAL_RCC_ClockConfig+0x1b4>)
 800311c:	6813      	ldr	r3, [r2, #0]
 800311e:	f023 030f 	bic.w	r3, r3, #15
 8003122:	432b      	orrs	r3, r5
 8003124:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003126:	6813      	ldr	r3, [r2, #0]
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	429d      	cmp	r5, r3
 800312e:	d18b      	bne.n	8003048 <HAL_RCC_ClockConfig+0x28>
 8003130:	e799      	b.n	8003066 <HAL_RCC_ClockConfig+0x46>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003132:	6862      	ldr	r2, [r4, #4]
 8003134:	4b28      	ldr	r3, [pc, #160]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003136:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003138:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313a:	d102      	bne.n	8003142 <HAL_RCC_ClockConfig+0x122>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313c:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8003140:	e006      	b.n	8003150 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003142:	2a02      	cmp	r2, #2
 8003144:	d102      	bne.n	800314c <HAL_RCC_ClockConfig+0x12c>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003146:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 800314a:	e001      	b.n	8003150 <HAL_RCC_ClockConfig+0x130>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314c:	f011 0f02 	tst.w	r1, #2
 8003150:	f43f af7a 	beq.w	8003048 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003154:	6899      	ldr	r1, [r3, #8]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003156:	f241 3888 	movw	r8, #5000	; 0x1388
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800315a:	4f1f      	ldr	r7, [pc, #124]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800315c:	f021 0103 	bic.w	r1, r1, #3
 8003160:	430a      	orrs	r2, r1
 8003162:	609a      	str	r2, [r3, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003164:	f000 f8be 	bl	80032e4 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003168:	6863      	ldr	r3, [r4, #4]
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316a:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316c:	2b01      	cmp	r3, #1
 800316e:	d10a      	bne.n	8003186 <HAL_RCC_ClockConfig+0x166>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b04      	cmp	r3, #4
 8003178:	d0cf      	beq.n	800311a <HAL_RCC_ClockConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317a:	f000 f8b3 	bl	80032e4 <HAL_GetTick>
 800317e:	1b80      	subs	r0, r0, r6
 8003180:	4540      	cmp	r0, r8
 8003182:	d9f5      	bls.n	8003170 <HAL_RCC_ClockConfig+0x150>
 8003184:	e7a3      	b.n	80030ce <HAL_RCC_ClockConfig+0xae>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003186:	2b02      	cmp	r3, #2
 8003188:	d10f      	bne.n	80031aa <HAL_RCC_ClockConfig+0x18a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f003 030c 	and.w	r3, r3, #12
 8003190:	2b08      	cmp	r3, #8
 8003192:	d0c2      	beq.n	800311a <HAL_RCC_ClockConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003194:	f000 f8a6 	bl	80032e4 <HAL_GetTick>
 8003198:	1b80      	subs	r0, r0, r6
 800319a:	4540      	cmp	r0, r8
 800319c:	d9f5      	bls.n	800318a <HAL_RCC_ClockConfig+0x16a>
 800319e:	e796      	b.n	80030ce <HAL_RCC_ClockConfig+0xae>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a0:	f000 f8a0 	bl	80032e4 <HAL_GetTick>
 80031a4:	1b80      	subs	r0, r0, r6
 80031a6:	4540      	cmp	r0, r8
 80031a8:	d891      	bhi.n	80030ce <HAL_RCC_ClockConfig+0xae>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f013 0f0c 	tst.w	r3, #12
 80031b0:	d1f6      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x180>
 80031b2:	e7b2      	b.n	800311a <HAL_RCC_ClockConfig+0xfa>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b4:	070b      	lsls	r3, r1, #28
 80031b6:	d507      	bpl.n	80031c8 <HAL_RCC_ClockConfig+0x1a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031b8:	4a07      	ldr	r2, [pc, #28]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 80031ba:	6921      	ldr	r1, [r4, #16]
 80031bc:	6893      	ldr	r3, [r2, #8]
 80031be:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80031c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80031c6:	6093      	str	r3, [r2, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80031c8:	200f      	movs	r0, #15
 80031ca:	f000 f85f 	bl	800328c <HAL_InitTick>
  
  return HAL_OK;
 80031ce:	2000      	movs	r0, #0
}
 80031d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031d4:	40023c00 	.word	0x40023c00
 80031d8:	40023800 	.word	0x40023800

080031dc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031dc:	491b      	ldr	r1, [pc, #108]	; (800324c <HAL_RCC_GetSysClockFreq+0x70>)
 80031de:	688b      	ldr	r3, [r1, #8]
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d02c      	beq.n	8003242 <HAL_RCC_GetSysClockFreq+0x66>
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d12c      	bne.n	8003246 <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031ec:	6848      	ldr	r0, [r1, #4]
 80031ee:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031f2:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031f8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80031fc:	684b      	ldr	r3, [r1, #4]
 80031fe:	fa92 f2a2 	rbit	r2, r2
 8003202:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8003206:	fab2 f282 	clz	r2, r2
 800320a:	ea01 0103 	and.w	r1, r1, r3
 800320e:	fa21 f102 	lsr.w	r1, r1, r2
 8003212:	bf14      	ite	ne
 8003214:	4a0e      	ldrne	r2, [pc, #56]	; (8003250 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8003216:	4a0f      	ldreq	r2, [pc, #60]	; (8003254 <HAL_RCC_GetSysClockFreq+0x78>)
 8003218:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 800321c:	4a0b      	ldr	r2, [pc, #44]	; (800324c <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800321e:	fb00 f301 	mul.w	r3, r0, r1
 8003222:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8003226:	6852      	ldr	r2, [r2, #4]
 8003228:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 800322c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8003230:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8003234:	fa22 f000 	lsr.w	r0, r2, r0
 8003238:	3001      	adds	r0, #1
 800323a:	0040      	lsls	r0, r0, #1
 800323c:	fbb3 f0f0 	udiv	r0, r3, r0
 8003240:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003242:	4803      	ldr	r0, [pc, #12]	; (8003250 <HAL_RCC_GetSysClockFreq+0x74>)
 8003244:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003246:	4803      	ldr	r0, [pc, #12]	; (8003254 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	017d7840 	.word	0x017d7840
 8003254:	00f42400 	.word	0x00f42400

08003258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003258:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800325a:	f7ff ffbf 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 800325e:	4b08      	ldr	r3, [pc, #32]	; (8003280 <HAL_RCC_GetHCLKFreq+0x28>)
 8003260:	22f0      	movs	r2, #240	; 0xf0
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	fa92 f2a2 	rbit	r2, r2
 8003268:	fab2 f282 	clz	r2, r2
 800326c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003270:	40d3      	lsrs	r3, r2
 8003272:	4a04      	ldr	r2, [pc, #16]	; (8003284 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003274:	5cd3      	ldrb	r3, [r2, r3]
 8003276:	40d8      	lsrs	r0, r3
 8003278:	4b03      	ldr	r3, [pc, #12]	; (8003288 <HAL_RCC_GetHCLKFreq+0x30>)
 800327a:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 800327c:	bd08      	pop	{r3, pc}
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	08064a4e 	.word	0x08064a4e
 8003288:	20000000 	.word	0x20000000

0800328c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800328c:	b510      	push	{r4, lr}
 800328e:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003290:	f7ff ffe2 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 8003294:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003298:	fbb0 f0f3 	udiv	r0, r0, r3
 800329c:	f000 f984 	bl	80035a8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80032a0:	2200      	movs	r2, #0
 80032a2:	4621      	mov	r1, r4
 80032a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032a8:	f000 f93a 	bl	8003520 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80032ac:	2000      	movs	r0, #0
 80032ae:	bd10      	pop	{r4, pc}

080032b0 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80032b0:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <HAL_Init+0x20>)
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032b2:	2003      	movs	r0, #3
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032b4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80032b6:	6813      	ldr	r3, [r2, #0]
 80032b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032bc:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032be:	f000 f91d 	bl	80034fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032c2:	200f      	movs	r0, #15
 80032c4:	f7ff ffe2 	bl	800328c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80032c8:	f7fd f938 	bl	800053c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80032cc:	2000      	movs	r0, #0
 80032ce:	bd08      	pop	{r3, pc}
 80032d0:	40023c00 	.word	0x40023c00

080032d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80032d4:	4a02      	ldr	r2, [pc, #8]	; (80032e0 <HAL_IncTick+0xc>)
 80032d6:	6813      	ldr	r3, [r2, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	200082cc 	.word	0x200082cc

080032e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80032e4:	4b01      	ldr	r3, [pc, #4]	; (80032ec <HAL_GetTick+0x8>)
 80032e6:	6818      	ldr	r0, [r3, #0]
}
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	200082cc 	.word	0x200082cc

080032f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032f4:	4f72      	ldr	r7, [pc, #456]	; (80034c0 <HAL_GPIO_Init+0x1d0>)
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f6:	b085      	sub	sp, #20
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032f8:	680b      	ldr	r3, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80032fa:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fc:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 80034c8 <HAL_GPIO_Init+0x1d8>
 8003300:	46be      	mov	lr, r7

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003302:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80034cc <HAL_GPIO_Init+0x1dc>
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003306:	9301      	str	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003308:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800330a:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800330c:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800330e:	ea34 0303 	bics.w	r3, r4, r3
 8003312:	f040 80cd 	bne.w	80034b0 <HAL_GPIO_Init+0x1c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003316:	684d      	ldr	r5, [r1, #4]
 8003318:	f025 0a10 	bic.w	sl, r5, #16
 800331c:	f1ba 0f02 	cmp.w	sl, #2
 8003320:	d114      	bne.n	800334c <HAL_GPIO_Init+0x5c>
 8003322:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003326:	f002 0b07 	and.w	fp, r2, #7
 800332a:	230f      	movs	r3, #15
 800332c:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8003330:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003334:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003338:	fa03 f30b 	lsl.w	r3, r3, fp
 800333c:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003340:	690b      	ldr	r3, [r1, #16]
 8003342:	fa03 f30b 	lsl.w	r3, r3, fp
 8003346:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3] = temp;
 8003348:	f8c9 3020 	str.w	r3, [r9, #32]
 800334c:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003350:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003354:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003356:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800335a:	fa09 f90b 	lsl.w	r9, r9, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800335e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003362:	fa06 f60b 	lsl.w	r6, r6, fp
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003366:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800336a:	f1ba 0f01 	cmp.w	sl, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800336e:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003372:	ea43 0306 	orr.w	r3, r3, r6
      GPIOx->MODER = temp;
 8003376:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003378:	d80f      	bhi.n	800339a <HAL_GPIO_Init+0xaa>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800337a:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
 800337c:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800337e:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2));
 8003382:	fa06 f60b 	lsl.w	r6, r6, fp
 8003386:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8003388:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800338a:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800338e:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003390:	4096      	lsls	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003392:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003396:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8003398:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800339a:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800339c:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80033a0:	688b      	ldr	r3, [r1, #8]
 80033a2:	fa03 f30b 	lsl.w	r3, r3, fp
 80033a6:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 80033aa:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033ac:	00eb      	lsls	r3, r5, #3
 80033ae:	d57f      	bpl.n	80034b0 <HAL_GPIO_Init+0x1c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033b0:	2300      	movs	r3, #0
 80033b2:	f022 0903 	bic.w	r9, r2, #3

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033b6:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ba:	9303      	str	r3, [sp, #12]
 80033bc:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 80033c0:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033c4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80033c8:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033cc:	4b3d      	ldr	r3, [pc, #244]	; (80034c4 <HAL_GPIO_Init+0x1d4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ce:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033d2:	4298      	cmp	r0, r3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d4:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 80033d8:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 80033dc:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80033e0:	9603      	str	r6, [sp, #12]
 80033e2:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033e4:	f04f 060f 	mov.w	r6, #15
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 80033e8:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033ec:	fa06 f60a 	lsl.w	r6, r6, sl
 80033f0:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033f4:	d024      	beq.n	8003440 <HAL_GPIO_Init+0x150>
 80033f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033fa:	4298      	cmp	r0, r3
 80033fc:	d022      	beq.n	8003444 <HAL_GPIO_Init+0x154>
 80033fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003402:	4298      	cmp	r0, r3
 8003404:	d020      	beq.n	8003448 <HAL_GPIO_Init+0x158>
 8003406:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800340a:	4298      	cmp	r0, r3
 800340c:	d01e      	beq.n	800344c <HAL_GPIO_Init+0x15c>
 800340e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003412:	4298      	cmp	r0, r3
 8003414:	d01c      	beq.n	8003450 <HAL_GPIO_Init+0x160>
 8003416:	4540      	cmp	r0, r8
 8003418:	d01c      	beq.n	8003454 <HAL_GPIO_Init+0x164>
 800341a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800341e:	4298      	cmp	r0, r3
 8003420:	d01a      	beq.n	8003458 <HAL_GPIO_Init+0x168>
 8003422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003426:	4298      	cmp	r0, r3
 8003428:	d018      	beq.n	800345c <HAL_GPIO_Init+0x16c>
 800342a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800342e:	4298      	cmp	r0, r3
 8003430:	d016      	beq.n	8003460 <HAL_GPIO_Init+0x170>
 8003432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003436:	4298      	cmp	r0, r3
 8003438:	bf14      	ite	ne
 800343a:	230a      	movne	r3, #10
 800343c:	2309      	moveq	r3, #9
 800343e:	e010      	b.n	8003462 <HAL_GPIO_Init+0x172>
 8003440:	2300      	movs	r3, #0
 8003442:	e00e      	b.n	8003462 <HAL_GPIO_Init+0x172>
 8003444:	2301      	movs	r3, #1
 8003446:	e00c      	b.n	8003462 <HAL_GPIO_Init+0x172>
 8003448:	2302      	movs	r3, #2
 800344a:	e00a      	b.n	8003462 <HAL_GPIO_Init+0x172>
 800344c:	2303      	movs	r3, #3
 800344e:	e008      	b.n	8003462 <HAL_GPIO_Init+0x172>
 8003450:	2304      	movs	r3, #4
 8003452:	e006      	b.n	8003462 <HAL_GPIO_Init+0x172>
 8003454:	2305      	movs	r3, #5
 8003456:	e004      	b.n	8003462 <HAL_GPIO_Init+0x172>
 8003458:	2306      	movs	r3, #6
 800345a:	e002      	b.n	8003462 <HAL_GPIO_Init+0x172>
 800345c:	2307      	movs	r3, #7
 800345e:	e000      	b.n	8003462 <HAL_GPIO_Init+0x172>
 8003460:	2308      	movs	r3, #8
 8003462:	fa03 f30a 	lsl.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003466:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800346a:	ea43 0306 	orr.w	r3, r3, r6
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 800346e:	ea6f 0604 	mvn.w	r6, r4
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
 8003472:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003476:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8003478:	bf0c      	ite	eq
 800347a:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 800347c:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800347e:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8003482:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8003486:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 800348a:	bf0c      	ite	eq
 800348c:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800348e:	4323      	orrne	r3, r4
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003490:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8003494:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003496:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8003498:	bf0c      	ite	eq
 800349a:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 800349c:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800349e:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80034a0:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 80034a4:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 80034a8:	bf54      	ite	pl
 80034aa:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80034ac:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 80034ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80034b0:	3201      	adds	r2, #1
 80034b2:	2a10      	cmp	r2, #16
 80034b4:	f47f af28 	bne.w	8003308 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80034b8:	b005      	add	sp, #20
 80034ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034be:	bf00      	nop
 80034c0:	40013c00 	.word	0x40013c00
 80034c4:	40020000 	.word	0x40020000
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40021400 	.word	0x40021400

080034d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034d0:	b902      	cbnz	r2, 80034d4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034d2:	0409      	lsls	r1, r1, #16
 80034d4:	6181      	str	r1, [r0, #24]
 80034d6:	4770      	bx	lr

080034d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034d8:	b082      	sub	sp, #8
  /* Prevent unused argument(s) compilation warning */
__IO uint32_t tmpreg = 0x00;
 80034da:	2300      	movs	r3, #0
 80034dc:	9301      	str	r3, [sp, #4]
  UNUSED(tmpreg);
 80034de:	9b01      	ldr	r3, [sp, #4]
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034e0:	b002      	add	sp, #8
 80034e2:	4770      	bx	lr

080034e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034e4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034e6:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80034e8:	6959      	ldr	r1, [r3, #20]
 80034ea:	4201      	tst	r1, r0
 80034ec:	d002      	beq.n	80034f4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034ee:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034f0:	f7ff fff2 	bl	80034d8 <HAL_GPIO_EXTI_Callback>
 80034f4:	bd08      	pop	{r3, pc}
 80034f6:	bf00      	nop
 80034f8:	40013c00 	.word	0x40013c00

080034fc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034fc:	4a07      	ldr	r2, [pc, #28]	; (800351c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80034fe:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003500:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8003502:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8003506:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800350a:	041b      	lsls	r3, r3, #16
 800350c:	0c1b      	lsrs	r3, r3, #16
 800350e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003516:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8003518:	60d3      	str	r3, [r2, #12]
 800351a:	4770      	bx	lr
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003520:	4b19      	ldr	r3, [pc, #100]	; (8003588 <HAL_NVIC_SetPriority+0x68>)
 8003522:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003524:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003528:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800352a:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800352e:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003530:	2c04      	cmp	r4, #4
 8003532:	bf28      	it	cs
 8003534:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003536:	2d06      	cmp	r5, #6

  return (
 8003538:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800353c:	bf8c      	ite	hi
 800353e:	3b03      	subhi	r3, #3
 8003540:	2300      	movls	r3, #0

  return (
 8003542:	fa05 f404 	lsl.w	r4, r5, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8003546:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8003548:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800354c:	ea04 0401 	and.w	r4, r4, r1
 8003550:	fa04 f403 	lsl.w	r4, r4, r3
 8003554:	fa05 f303 	lsl.w	r3, r5, r3
 8003558:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800355c:	ea02 0203 	and.w	r2, r2, r3
 8003560:	ea42 0204 	orr.w	r2, r2, r4
 8003564:	ea4f 1202 	mov.w	r2, r2, lsl #4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8003568:	da05      	bge.n	8003576 <HAL_NVIC_SetPriority+0x56>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356a:	f000 000f 	and.w	r0, r0, #15
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <HAL_NVIC_SetPriority+0x6c>)
 8003572:	541a      	strb	r2, [r3, r0]
 8003574:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003576:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003580:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8003584:	bd30      	pop	{r4, r5, pc}
 8003586:	bf00      	nop
 8003588:	e000ed00 	.word	0xe000ed00
 800358c:	e000ed14 	.word	0xe000ed14

08003590 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003590:	0942      	lsrs	r2, r0, #5
 8003592:	2301      	movs	r3, #1
 8003594:	f000 001f 	and.w	r0, r0, #31
 8003598:	fa03 f000 	lsl.w	r0, r3, r0
 800359c:	4b01      	ldr	r3, [pc, #4]	; (80035a4 <HAL_NVIC_EnableIRQ+0x14>)
 800359e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80035a2:	4770      	bx	lr
 80035a4:	e000e100 	.word	0xe000e100

080035a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035a8:	3801      	subs	r0, #1
 80035aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80035ae:	d20a      	bcs.n	80035c6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b2:	21f0      	movs	r1, #240	; 0xf0
 80035b4:	4a06      	ldr	r2, [pc, #24]	; (80035d0 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035b6:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035b8:	2000      	movs	r0, #0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ba:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035be:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035c0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80035c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	e000e010 	.word	0xe000e010
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80035d4:	7843      	ldrb	r3, [r0, #1]
 80035d6:	4911      	ldr	r1, [pc, #68]	; (800361c <HAL_MPU_ConfigRegion+0x48>)
 80035d8:	608b      	str	r3, [r1, #8]

  if ((MPU_Init->Enable) != RESET)
 80035da:	7803      	ldrb	r3, [r0, #0]
 80035dc:	b1db      	cbz	r3, 8003616 <HAL_MPU_ConfigRegion+0x42>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80035de:	6843      	ldr	r3, [r0, #4]
 80035e0:	60cb      	str	r3, [r1, #12]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80035e2:	7ac3      	ldrb	r3, [r0, #11]
 80035e4:	7b02      	ldrb	r2, [r0, #12]
 80035e6:	061b      	lsls	r3, r3, #24
 80035e8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80035ec:	7802      	ldrb	r2, [r0, #0]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	7a82      	ldrb	r2, [r0, #10]
 80035f2:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 80035f6:	7b42      	ldrb	r2, [r0, #13]
 80035f8:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 80035fc:	7b82      	ldrb	r2, [r0, #14]
 80035fe:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8003602:	7bc2      	ldrb	r2, [r0, #15]
 8003604:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003608:	7a42      	ldrb	r2, [r0, #9]
 800360a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800360e:	7a02      	ldrb	r2, [r0, #8]
 8003610:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8003614:	e000      	b.n	8003618 <HAL_MPU_ConfigRegion+0x44>
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 8003616:	60cb      	str	r3, [r1, #12]
    MPU->RASR = 0x00;
 8003618:	610b      	str	r3, [r1, #16]
 800361a:	4770      	bx	lr
 800361c:	e000ed90 	.word	0xe000ed90

08003620 <LTDC_SetConfig>:
  * @param  LayerIdx:  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003624:	6804      	ldr	r4, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003626:	01d2      	lsls	r2, r2, #7
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003628:	684f      	ldr	r7, [r1, #4]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800362a:	f04f 0800 	mov.w	r8, #0
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800362e:	f104 0e84 	add.w	lr, r4, #132	; 0x84
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8003632:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003634:	f8d1 c000 	ldr.w	ip, [r1]
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003638:	eb02 030e 	add.w	r3, r2, lr
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800363c:	f3c5 450b 	ubfx	r5, r5, #16, #12
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003640:	6858      	ldr	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003642:	19ee      	adds	r6, r5, r7
 8003644:	f10c 0501 	add.w	r5, ip, #1
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003648:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 800364c:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 800364e:	68e0      	ldr	r0, [r4, #12]
 8003650:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8003654:	4428      	add	r0, r5

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8003656:	68cd      	ldr	r5, [r1, #12]
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8003658:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800365c:	6058      	str	r0, [r3, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800365e:	68e0      	ldr	r0, [r4, #12]
 8003660:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003664:	1946      	adds	r6, r0, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003666:	6898      	ldr	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003668:	688d      	ldr	r5, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800366a:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 800366e:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003670:	1c68      	adds	r0, r5, #1
 8003672:	68e4      	ldr	r4, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8003674:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003676:	f3c4 040a 	ubfx	r4, r4, #0, #11
 800367a:	4420      	add	r0, r4
 800367c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003680:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003682:	6098      	str	r0, [r3, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003684:	6918      	ldr	r0, [r3, #16]
 8003686:	f020 0007 	bic.w	r0, r0, #7
 800368a:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800368c:	611e      	str	r6, [r3, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800368e:	6998      	ldr	r0, [r3, #24]
  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8003690:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8003694:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003698:	f8c3 8018 	str.w	r8, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800369c:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 80036a0:	ea40 6505 	orr.w	r5, r0, r5, lsl #24
 80036a4:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
 80036a8:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 80036ac:	619c      	str	r4, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80036ae:	6958      	ldr	r0, [r3, #20]
 80036b0:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80036b4:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80036b6:	6948      	ldr	r0, [r1, #20]
 80036b8:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80036ba:	69d8      	ldr	r0, [r3, #28]
 80036bc:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80036c0:	f020 0007 	bic.w	r0, r0, #7
 80036c4:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80036c6:	69cd      	ldr	r5, [r1, #28]
 80036c8:	6a0c      	ldr	r4, [r1, #32]
 80036ca:	432c      	orrs	r4, r5
 80036cc:	61dc      	str	r4, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80036ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80036d0:	6a48      	ldr	r0, [r1, #36]	; 0x24
  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80036d2:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80036d6:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80036d8:	b14e      	cbz	r6, 80036ee <LTDC_SetConfig+0xce>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80036da:	2e01      	cmp	r6, #1
 80036dc:	d009      	beq.n	80036f2 <LTDC_SetConfig+0xd2>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80036de:	1eb0      	subs	r0, r6, #2
 80036e0:	2802      	cmp	r0, #2
 80036e2:	d908      	bls.n	80036f6 <LTDC_SetConfig+0xd6>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80036e4:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 80036e6:	bf0c      	ite	eq
 80036e8:	2002      	moveq	r0, #2
 80036ea:	2001      	movne	r0, #1
 80036ec:	e004      	b.n	80036f8 <LTDC_SetConfig+0xd8>
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
  {
    tmp = 4;
 80036ee:	2004      	movs	r0, #4
 80036f0:	e002      	b.n	80036f8 <LTDC_SetConfig+0xd8>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
  {
    tmp = 3;
 80036f2:	2003      	movs	r0, #3
 80036f4:	e000      	b.n	80036f8 <LTDC_SetConfig+0xd8>
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2;
 80036f6:	2002      	movs	r0, #2
  {
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80036f8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80036fa:	ebcc 0707 	rsb	r7, ip, r7
  {
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80036fe:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 8003702:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8003704:	6a8c      	ldr	r4, [r1, #40]	; 0x28

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003706:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8003708:	4344      	muls	r4, r0
 800370a:	4378      	muls	r0, r7
 800370c:	3003      	adds	r0, #3
 800370e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8003712:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003714:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003716:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 800371a:	f020 0007 	bic.w	r0, r0, #7
 800371e:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003720:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003722:	f852 300e 	ldr.w	r3, [r2, lr]
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	f842 300e 	str.w	r3, [r2, lr]
 800372e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08003734 <HAL_LTDC_Init>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003734:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0, tmp1 = 0;

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8003736:	4604      	mov	r4, r0
 8003738:	2800      	cmp	r0, #0
 800373a:	d06a      	beq.n	8003812 <HAL_LTDC_Init+0xde>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 800373c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8003740:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003744:	b91b      	cbnz	r3, 800374e <HAL_LTDC_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003746:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800374a:	f7fd f985 	bl	8000a58 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800374e:	2302      	movs	r3, #2
 8003750:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003754:	6823      	ldr	r3, [r4, #0]
 8003756:	699a      	ldr	r2, [r3, #24]
 8003758:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800375c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800375e:	6862      	ldr	r2, [r4, #4]
 8003760:	6999      	ldr	r1, [r3, #24]
 8003762:	4311      	orrs	r1, r2
 8003764:	68a2      	ldr	r2, [r4, #8]
 8003766:	4311      	orrs	r1, r2
 8003768:	68e2      	ldr	r2, [r4, #12]
 800376a:	4311      	orrs	r1, r2
 800376c:	6922      	ldr	r2, [r4, #16]
 800376e:	430a      	orrs	r2, r1
 8003770:	619a      	str	r2, [r3, #24]
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003772:	4a29      	ldr	r2, [pc, #164]	; (8003818 <HAL_LTDC_Init+0xe4>)
 8003774:	6899      	ldr	r1, [r3, #8]
 8003776:	400a      	ands	r2, r1
  tmp = (hltdc->Init.HorizontalSync << 16);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003778:	6961      	ldr	r1, [r4, #20]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800377a:	609a      	str	r2, [r3, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800377c:	69a2      	ldr	r2, [r4, #24]
 800377e:	6898      	ldr	r0, [r3, #8]
 8003780:	4302      	orrs	r2, r0
 8003782:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003786:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003788:	4a23      	ldr	r2, [pc, #140]	; (8003818 <HAL_LTDC_Init+0xe4>)
 800378a:	68d9      	ldr	r1, [r3, #12]
 800378c:	400a      	ands	r2, r1
  tmp = (hltdc->Init.AccumulatedHBP << 16);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800378e:	69e1      	ldr	r1, [r4, #28]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
  tmp = (hltdc->Init.HorizontalSync << 16);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003790:	60da      	str	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003792:	6a22      	ldr	r2, [r4, #32]
 8003794:	68d8      	ldr	r0, [r3, #12]
 8003796:	4302      	orrs	r2, r0
 8003798:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800379c:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800379e:	4a1e      	ldr	r2, [pc, #120]	; (8003818 <HAL_LTDC_Init+0xe4>)
 80037a0:	6919      	ldr	r1, [r3, #16]
 80037a2:	400a      	ands	r2, r1
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80037a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80037a6:	611a      	str	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80037a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80037aa:	6918      	ldr	r0, [r3, #16]
 80037ac:	4302      	orrs	r2, r0
 80037ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80037b2:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80037b4:	4a18      	ldr	r2, [pc, #96]	; (8003818 <HAL_LTDC_Init+0xe4>)
 80037b6:	6959      	ldr	r1, [r3, #20]
 80037b8:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80037ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80037bc:	615a      	str	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80037be:	6958      	ldr	r0, [r3, #20]
 80037c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80037c2:	4302      	orrs	r2, r0
 80037c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80037c8:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80037ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 80037cc:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80037d0:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 80037d4:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80037d8:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80037da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037dc:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
 80037e0:	4329      	orrs	r1, r5
 80037e2:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 80037e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80037ea:	2000      	movs	r0, #0

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80037ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 80037ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f0:	f042 0204 	orr.w	r2, r2, #4
 80037f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 80037f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f8:	f042 0202 	orr.w	r2, r2, #2
 80037fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80037fe:	699a      	ldr	r2, [r3, #24]
 8003800:	f042 0201 	orr.w	r2, r2, #1
 8003804:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003806:	2301      	movs	r3, #1

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8003808:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800380c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
 8003810:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tmp = 0, tmp1 = 0;

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
  {
    return HAL_ERROR;
 8003812:	2001      	movs	r0, #1

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;

  return HAL_OK;
}
 8003814:	bd38      	pop	{r3, r4, r5, pc}
 8003816:	bf00      	nop
 8003818:	f000f800 	.word	0xf000f800

0800381c <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 800381c:	b510      	push	{r4, lr}
 800381e:	4604      	mov	r4, r0
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc); 
 8003820:	f7fd f9c6 	bl	8000bb0 <HAL_LTDC_MspDeInit>

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003824:	2000      	movs	r0, #0
 8003826:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 800382a:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 800382e:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;
}
 8003832:	bd10      	pop	{r4, pc}

08003834 <HAL_LTDC_ErrorCallback>:
 8003834:	4770      	bx	lr

08003836 <HAL_LTDC_IRQHandler>:
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 8003836:	6803      	ldr	r3, [r0, #0]
 8003838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800383a:	0752      	lsls	r2, r2, #29
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800383c:	b510      	push	{r4, lr}
 800383e:	4604      	mov	r4, r0
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 8003840:	d515      	bpl.n	800386e <HAL_LTDC_IRQHandler+0x38>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 8003842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003844:	0751      	lsls	r1, r2, #29
 8003846:	d512      	bpl.n	800386e <HAL_LTDC_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800384a:	f022 0204 	bic.w	r2, r2, #4
 800384e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the transfer error flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003850:	2204      	movs	r2, #4
 8003852:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003854:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8003860:	2300      	movs	r3, #0

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8003862:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8003866:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0

      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 800386a:	f7ff ffe3 	bl	8003834 <HAL_LTDC_ErrorCallback>
    }
  }
  /* FIFO underrun Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003872:	0792      	lsls	r2, r2, #30
 8003874:	d516      	bpl.n	80038a4 <HAL_LTDC_IRQHandler+0x6e>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 8003876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003878:	0790      	lsls	r0, r2, #30
 800387a:	d513      	bpl.n	80038a4 <HAL_LTDC_IRQHandler+0x6e>
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800387c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 800387e:	4620      	mov	r0, r4
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003880:	f022 0202 	bic.w	r2, r2, #2
 8003884:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the FIFO underrun flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003886:	2202      	movs	r2, #2
 8003888:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800388a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8003894:	2304      	movs	r3, #4
 8003896:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 800389a:	2300      	movs	r3, #0
 800389c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 80038a0:	f7ff ffc8 	bl	8003834 <HAL_LTDC_ErrorCallback>
    }
  }
  /* Line Interrupt management ************************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 80038a4:	6823      	ldr	r3, [r4, #0]
 80038a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038a8:	07d1      	lsls	r1, r2, #31
 80038aa:	d510      	bpl.n	80038ce <HAL_LTDC_IRQHandler+0x98>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 80038ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ae:	07d2      	lsls	r2, r2, #31
 80038b0:	d50d      	bpl.n	80038ce <HAL_LTDC_IRQHandler+0x98>
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80038b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);

      /* Line interrupt Callback */
      HAL_LTDC_LineEvenCallback(hltdc);
 80038b4:	4620      	mov	r0, r4
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80038b6:	f022 0201 	bic.w	r2, r2, #1
 80038ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80038bc:	2201      	movs	r2, #1
 80038be:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 80038c0:	2300      	movs	r3, #0

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 80038c2:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 80038c6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0

      /* Line interrupt Callback */
      HAL_LTDC_LineEvenCallback(hltdc);
 80038ca:	f7fd f97d 	bl	8000bc8 <HAL_LTDC_LineEventCallback>
 80038ce:	bd10      	pop	{r4, pc}

080038d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80038d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Process locked */
  __HAL_LOCK(hltdc);
 80038d2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80038d6:	4606      	mov	r6, r0
 80038d8:	468e      	mov	lr, r1
 80038da:	4694      	mov	ip, r2
  /* Process locked */
  __HAL_LOCK(hltdc);
 80038dc:	2b01      	cmp	r3, #1
 80038de:	f04f 0002 	mov.w	r0, #2
 80038e2:	d01d      	beq.n	8003920 <HAL_LTDC_ConfigLayer+0x50>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80038e4:	2434      	movs	r4, #52	; 0x34
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
 80038e6:	2701      	movs	r7, #1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80038e8:	460d      	mov	r5, r1
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80038ea:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80038ee:	fb04 6402 	mla	r4, r4, r2, r6
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
 80038f2:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80038f6:	3438      	adds	r4, #56	; 0x38
 80038f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003904:	682b      	ldr	r3, [r5, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003906:	4630      	mov	r0, r6
 8003908:	4662      	mov	r2, ip
 800390a:	4671      	mov	r1, lr
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800390c:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800390e:	f7ff fe87 	bl	8003620 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003912:	6833      	ldr	r3, [r6, #0]

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003914:	2000      	movs	r0, #0

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003916:	625f      	str	r7, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003918:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800391c:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0

  return HAL_OK;
}
 8003920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003922 <HAL_LTDC_ConfigColorKeying>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003922:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003926:	2b01      	cmp	r3, #1
 8003928:	f04f 0302 	mov.w	r3, #2
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 800392c:	b510      	push	{r4, lr}
  /* Process locked */
  __HAL_LOCK(hltdc);
 800392e:	d012      	beq.n	8003956 <HAL_LTDC_ConfigColorKeying+0x34>

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Configures the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8003930:	6804      	ldr	r4, [r0, #0]
{
  /* Process locked */
  __HAL_LOCK(hltdc);

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003932:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Configures the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8003936:	f104 0384 	add.w	r3, r4, #132	; 0x84
 800393a:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 800393e:	68d3      	ldr	r3, [r2, #12]
 8003940:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003944:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003946:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Configures the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8003948:	60d1      	str	r1, [r2, #12]

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800394a:	6263      	str	r3, [r4, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800394c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003950:	2300      	movs	r3, #0
 8003952:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003956:	4618      	mov	r0, r3

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;
}
 8003958:	bd10      	pop	{r4, pc}

0800395a <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
 800395a:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp = 0;
  uint32_t counter = 0;
  uint32_t pcounter = 0;

  /* Process locked */
  __HAL_LOCK(hltdc);
 800395c:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
 8003960:	2c01      	cmp	r4, #1
 8003962:	f04f 0402 	mov.w	r4, #2
 8003966:	d02d      	beq.n	80039c4 <HAL_LTDC_ConfigCLUT+0x6a>
 8003968:	2501      	movs	r5, #1

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 800396a:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
    pCLUT = (uint32_t *)pcounter;

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 800396e:	01df      	lsls	r7, r3, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;  

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx)); 

  for(counter = 0; (counter < CLUTSize); counter++)
 8003970:	2400      	movs	r4, #0
  uint32_t tmp = 0;
  uint32_t counter = 0;
  uint32_t pcounter = 0;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003972:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx)); 

  for(counter = 0; (counter < CLUTSize); counter++)
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8003976:	2534      	movs	r5, #52	; 0x34
 8003978:	fb05 0303 	mla	r3, r5, r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;  

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx)); 

  for(counter = 0; (counter < CLUTSize); counter++)
 800397c:	4294      	cmp	r4, r2
 800397e:	d019      	beq.n	80039b4 <HAL_LTDC_ConfigCLUT+0x5a>
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8003980:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8003982:	2d06      	cmp	r5, #6
 8003984:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
    {
      tmp  = (((counter + 16*counter) << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));
    }
    else
    { 
      tmp  = ((counter << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));
 8003988:	bf15      	itete	ne
 800398a:	f831 6024 	ldrhne.w	r6, [r1, r4, lsl #2]

  for(counter = 0; (counter < CLUTSize); counter++)
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
    {
      tmp  = (((counter + 16*counter) << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));
 800398e:	eb04 1604 	addeq.w	r6, r4, r4, lsl #4
    }
    else
    { 
      tmp  = ((counter << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));
 8003992:	f405 057f 	andne.w	r5, r5, #16711680	; 0xff0000

  for(counter = 0; (counter < CLUTSize); counter++)
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
    {
      tmp  = (((counter + 16*counter) << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));
 8003996:	f025 457f 	biceq.w	r5, r5, #4278190080	; 0xff000000
    }
    else
    { 
      tmp  = ((counter << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));
 800399a:	bf14      	ite	ne
 800399c:	4335      	orrne	r5, r6

  for(counter = 0; (counter < CLUTSize); counter++)
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
    {
      tmp  = (((counter + 16*counter) << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));
 800399e:	ea45 6506 	orreq.w	r5, r5, r6, lsl #24
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
    pCLUT = (uint32_t *)pcounter;

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 80039a2:	6806      	ldr	r6, [r0, #0]
    {
      tmp  = (((counter + 16*counter) << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));
    }
    else
    { 
      tmp  = ((counter << 24) | ((uint32_t)(*pCLUT) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));
 80039a4:	bf18      	it	ne
 80039a6:	ea45 6504 	orrne.w	r5, r5, r4, lsl #24
  hltdc->State = HAL_LTDC_STATE_BUSY;  

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx)); 

  for(counter = 0; (counter < CLUTSize); counter++)
 80039aa:	3401      	adds	r4, #1
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
    pCLUT = (uint32_t *)pcounter;

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 80039ac:	3684      	adds	r6, #132	; 0x84
 80039ae:	443e      	add	r6, r7
 80039b0:	6435      	str	r5, [r6, #64]	; 0x40
 80039b2:	e7e3      	b.n	800397c <HAL_LTDC_ConfigCLUT+0x22>
  }
  
  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 80039b4:	2301      	movs	r3, #1
 80039b6:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);  
 80039ba:	2300      	movs	r3, #0
 80039bc:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0

  return HAL_OK;
 80039c0:	4618      	mov	r0, r3
 80039c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t tmp = 0;
  uint32_t counter = 0;
  uint32_t pcounter = 0;

  /* Process locked */
  __HAL_LOCK(hltdc);
 80039c4:	4620      	mov	r0, r4

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);  

  return HAL_OK;
}
 80039c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039c8 <HAL_LTDC_EnableColorKeying>:
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{  
  /* Process locked */
  __HAL_LOCK(hltdc);
 80039c8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	f04f 0302 	mov.w	r3, #2
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{  
 80039d2:	b510      	push	{r4, lr}
  /* Process locked */
  __HAL_LOCK(hltdc);
 80039d4:	d010      	beq.n	80039f8 <HAL_LTDC_EnableColorKeying+0x30>

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80039d6:	6802      	ldr	r2, [r0, #0]
 80039d8:	01c9      	lsls	r1, r1, #7
{  
  /* Process locked */
  __HAL_LOCK(hltdc);

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80039da:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80039de:	f102 0484 	add.w	r4, r2, #132	; 0x84
 80039e2:	5863      	ldr	r3, [r4, r1]
 80039e4:	f043 0302 	orr.w	r3, r3, #2
 80039e8:	5063      	str	r3, [r4, r1]

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 80039ee:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80039f2:	2300      	movs	r3, #0
 80039f4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{  
  /* Process locked */
  __HAL_LOCK(hltdc);
 80039f8:	4618      	mov	r0, r3

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;  
}
 80039fa:	bd10      	pop	{r4, pc}

080039fc <HAL_LTDC_DisableColorKeying>:
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
  /* Process locked */
  __HAL_LOCK(hltdc);
 80039fc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	f04f 0302 	mov.w	r3, #2
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8003a06:	b510      	push	{r4, lr}
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003a08:	d010      	beq.n	8003a2c <HAL_LTDC_DisableColorKeying+0x30>

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Disable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8003a0a:	6802      	ldr	r2, [r0, #0]
 8003a0c:	01c9      	lsls	r1, r1, #7
{
  /* Process locked */
  __HAL_LOCK(hltdc);

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a0e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Disable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8003a12:	f102 0484 	add.w	r4, r2, #132	; 0x84
 8003a16:	5863      	ldr	r3, [r4, r1]
 8003a18:	f023 0302 	bic.w	r3, r3, #2
 8003a1c:	5063      	str	r3, [r4, r1]

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8003a22:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003a26:	2300      	movs	r3, #0
 8003a28:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003a2c:	4618      	mov	r0, r3

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;
}
 8003a2e:	bd10      	pop	{r4, pc}

08003a30 <HAL_LTDC_EnableCLUT>:
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003a30:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	f04f 0302 	mov.w	r3, #2
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8003a3a:	b510      	push	{r4, lr}

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003a3c:	d010      	beq.n	8003a60 <HAL_LTDC_EnableCLUT+0x30>

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Disable LTDC color lookup table by setting CLUTEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8003a3e:	6802      	ldr	r2, [r0, #0]
 8003a40:	01c9      	lsls	r1, r1, #7

  /* Process locked */
  __HAL_LOCK(hltdc);

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a42:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Disable LTDC color lookup table by setting CLUTEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8003a46:	f102 0484 	add.w	r4, r2, #132	; 0x84
 8003a4a:	5863      	ldr	r3, [r4, r1]
 8003a4c:	f043 0310 	orr.w	r3, r3, #16
 8003a50:	5063      	str	r3, [r4, r1]

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8003a56:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003a60:	4618      	mov	r0, r3

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;
}
 8003a62:	bd10      	pop	{r4, pc}

08003a64 <HAL_LTDC_EnableDither>:
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003a64:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	f04f 0302 	mov.w	r3, #2
 8003a6e:	d00c      	beq.n	8003a8a <HAL_LTDC_EnableDither+0x26>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 8003a70:	4a07      	ldr	r2, [pc, #28]	; (8003a90 <HAL_LTDC_EnableDither+0x2c>)
{
  /* Process locked */
  __HAL_LOCK(hltdc);

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a72:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 8003a76:	6993      	ldr	r3, [r2, #24]
 8003a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003a84:	2300      	movs	r3, #0
 8003a86:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003a8a:	4618      	mov	r0, r3

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;
}
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40016800 	.word	0x40016800

08003a94 <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 8003a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a98:	4617      	mov	r7, r2
  LTDC_LayerCfgTypeDef *pLayerCfg;
  
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003a9a:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
  *                         This parameter can be one of the following values:
  *                         0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 8003a9e:	4605      	mov	r5, r0
 8003aa0:	2402      	movs	r4, #2
  LTDC_LayerCfgTypeDef *pLayerCfg;
  
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003aa2:	2a01      	cmp	r2, #1
 8003aa4:	d020      	beq.n	8003ae8 <HAL_LTDC_SetWindowPosition+0x54>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003aa6:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 8003aaa:	2434      	movs	r4, #52	; 0x34
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;
  
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003aac:	f04f 0801 	mov.w	r8, #1
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 8003ab0:	435c      	muls	r4, r3
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;
  
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ab2:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 8003ab6:	1906      	adds	r6, r0, r4
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8003ab8:	6e32      	ldr	r2, [r6, #96]	; 0x60
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 8003aba:	63b1      	str	r1, [r6, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8003abc:	4411      	add	r1, r2

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8003abe:	6e72      	ldr	r2, [r6, #100]	; 0x64
  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 8003ac0:	6437      	str	r7, [r6, #64]	; 0x40
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8003ac2:	63f1      	str	r1, [r6, #60]	; 0x3c

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8003ac4:	4417      	add	r7, r2

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003ac6:	f104 0138 	add.w	r1, r4, #56	; 0x38
  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003aca:	461a      	mov	r2, r3
  pLayerCfg->WindowX0 = X0;
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8003acc:	6477      	str	r7, [r6, #68]	; 0x44

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003ace:	4401      	add	r1, r0
 8003ad0:	f7ff fda6 	bl	8003620 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003ad4:	682b      	ldr	r3, [r5, #0]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003ad6:	2000      	movs	r0, #0

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003ad8:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003adc:	f885 80a1 	strb.w	r8, [r5, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003ae0:	f885 00a0 	strb.w	r0, [r5, #160]	; 0xa0

  return HAL_OK;
 8003ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;
  
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ae8:	4620      	mov	r0, r4

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;
}
 8003aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003aee <HAL_LTDC_SetAlpha>:
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003aee:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	f04f 0302 	mov.w	r3, #2
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	4604      	mov	r4, r0
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003afc:	d015      	beq.n	8003b2a <HAL_LTDC_SetAlpha+0x3c>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003afe:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8003b02:	2334      	movs	r3, #52	; 0x34
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003b04:	2501      	movs	r5, #1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8003b06:	4353      	muls	r3, r2
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003b08:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8003b0c:	18c6      	adds	r6, r0, r3
 8003b0e:	64f1      	str	r1, [r6, #76]	; 0x4c
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003b10:	f103 0138 	add.w	r1, r3, #56	; 0x38

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003b14:	4401      	add	r1, r0
 8003b16:	f7ff fd83 	bl	8003620 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003b1a:	6823      	ldr	r3, [r4, #0]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003b1c:	2000      	movs	r0, #0

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003b1e:	625d      	str	r5, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003b20:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003b24:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0

  return HAL_OK;
 8003b28:	bd70      	pop	{r4, r5, r6, pc}
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003b2a:	4618      	mov	r0, r3

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;
}
 8003b2c:	bd70      	pop	{r4, r5, r6, pc}

08003b2e <HAL_LTDC_SetAddress>:
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003b2e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	f04f 0302 	mov.w	r3, #2
  *                   This parameter can be one of the following values:
  *                   0 or 1.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8003b38:	b570      	push	{r4, r5, r6, lr}
 8003b3a:	4604      	mov	r4, r0
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003b3c:	d015      	beq.n	8003b6a <HAL_LTDC_SetAddress+0x3c>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b3e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8003b42:	2334      	movs	r3, #52	; 0x34
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003b44:	2501      	movs	r5, #1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8003b46:	4353      	muls	r3, r2
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003b48:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8003b4c:	18c6      	adds	r6, r0, r3
 8003b4e:	65f1      	str	r1, [r6, #92]	; 0x5c

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003b50:	f103 0138 	add.w	r1, r3, #56	; 0x38

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003b54:	4401      	add	r1, r0
 8003b56:	f7ff fd63 	bl	8003620 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003b5a:	6823      	ldr	r3, [r4, #0]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003b5c:	2000      	movs	r0, #0

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003b5e:	625d      	str	r5, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003b60:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003b64:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0

  return HAL_OK;
 8003b68:	bd70      	pop	{r4, r5, r6, pc}
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003b6a:	4618      	mov	r0, r3

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;
}
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b70 <HAL_LTDC_ProgramLineEvent>:
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003b70:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	f04f 0302 	mov.w	r3, #2
 8003b7a:	d00e      	beq.n	8003b9a <HAL_LTDC_ProgramLineEvent+0x2a>

  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8003b7c:	6802      	ldr	r2, [r0, #0]
{
  /* Process locked */
  __HAL_LOCK(hltdc);

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b7e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8003b82:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	6353      	str	r3, [r2, #52]	; 0x34

  /* Sets the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_LTDC_ProgramLineEvent+0x30>)
 8003b8c:	6419      	str	r1, [r3, #64]	; 0x40

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003b94:	2300      	movs	r3, #0
 8003b96:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003b9a:	4618      	mov	r0, r3

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;
}
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40016800 	.word	0x40016800

08003ba4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ba4:	2300      	movs	r3, #0
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ba6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	4b19      	ldr	r3, [pc, #100]	; (8003c10 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bac:	4c19      	ldr	r4, [pc, #100]	; (8003c14 <HAL_PWREx_EnableOverDrive+0x70>)
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bb0:	4625      	mov	r5, r4
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbe:	9301      	str	r3, [sp, #4]
 8003bc0:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc8:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bca:	f7ff fb8b 	bl	80032e4 <HAL_GetTick>
 8003bce:	4606      	mov	r6, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bd0:	686b      	ldr	r3, [r5, #4]
 8003bd2:	4c10      	ldr	r4, [pc, #64]	; (8003c14 <HAL_PWREx_EnableOverDrive+0x70>)
 8003bd4:	03da      	lsls	r2, r3, #15
 8003bd6:	d407      	bmi.n	8003be8 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bd8:	f7ff fb84 	bl	80032e4 <HAL_GetTick>
 8003bdc:	1b80      	subs	r0, r0, r6
 8003bde:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003be2:	d9f5      	bls.n	8003bd0 <HAL_PWREx_EnableOverDrive+0x2c>
    {
      return HAL_TIMEOUT;
 8003be4:	2003      	movs	r0, #3
 8003be6:	e011      	b.n	8003c0c <HAL_PWREx_EnableOverDrive+0x68>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bee:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bf0:	f7ff fb78 	bl	80032e4 <HAL_GetTick>
 8003bf4:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bf6:	6863      	ldr	r3, [r4, #4]
 8003bf8:	039b      	lsls	r3, r3, #14
 8003bfa:	d406      	bmi.n	8003c0a <HAL_PWREx_EnableOverDrive+0x66>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bfc:	f7ff fb72 	bl	80032e4 <HAL_GetTick>
 8003c00:	1b40      	subs	r0, r0, r5
 8003c02:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003c06:	d9f6      	bls.n	8003bf6 <HAL_PWREx_EnableOverDrive+0x52>
 8003c08:	e7ec      	b.n	8003be4 <HAL_PWREx_EnableOverDrive+0x40>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003c0a:	2000      	movs	r0, #0
}
 8003c0c:	b002      	add	sp, #8
 8003c0e:	bd70      	pop	{r4, r5, r6, pc}
 8003c10:	40023800 	.word	0x40023800
 8003c14:	40007000 	.word	0x40007000

08003c18 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c18:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c1e:	f013 0601 	ands.w	r6, r3, #1
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c22:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c24:	d00b      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c26:	4ab5      	ldr	r2, [pc, #724]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c28:	6891      	ldr	r1, [r2, #8]
 8003c2a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8003c2e:	6091      	str	r1, [r2, #8]
 8003c30:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8003c32:	6891      	ldr	r1, [r2, #8]
 8003c34:	4331      	orrs	r1, r6
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
 8003c36:	fab6 f686 	clz	r6, r6
 8003c3a:	0976      	lsrs	r6, r6, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c3c:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c3e:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8003c42:	d012      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c44:	49ad      	ldr	r1, [pc, #692]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c46:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003c48:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c4c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c50:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 8003c54:	bf08      	it	eq
 8003c56:	2601      	moveq	r6, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c58:	ea42 0205 	orr.w	r2, r2, r5
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;
 8003c5c:	bf16      	itet	ne
 8003c5e:	fab5 f585 	clzne	r5, r5
 8003c62:	2500      	moveq	r5, #0
 8003c64:	096d      	lsrne	r5, r5, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c66:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c6a:	02d8      	lsls	r0, r3, #11
 8003c6c:	d511      	bpl.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c6e:	48a3      	ldr	r0, [pc, #652]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c70:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003c72:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c76:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c7a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003c7e:	ea42 0201 	orr.w	r2, r2, r1
 8003c82:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c86:	d003      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x78>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8003c88:	2900      	cmp	r1, #0
 8003c8a:	bf08      	it	eq
 8003c8c:	2501      	moveq	r5, #1
 8003c8e:	e000      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 8003c90:	2601      	movs	r6, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 8003c92:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003c96:	bf18      	it	ne
 8003c98:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c9a:	0699      	lsls	r1, r3, #26
 8003c9c:	d55b      	bpl.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
      
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ca0:	4f97      	ldr	r7, [pc, #604]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
  {
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ca2:	9301      	str	r3, [sp, #4]
 8003ca4:	4b95      	ldr	r3, [pc, #596]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ca8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	9301      	str	r3, [sp, #4]
 8003cb6:	9b01      	ldr	r3, [sp, #4]
      
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbe:	603b      	str	r3, [r7, #0]
      
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc0:	f7ff fb10 	bl	80032e4 <HAL_GetTick>
 8003cc4:	4680      	mov	r8, r0
      
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	05da      	lsls	r2, r3, #23
 8003cca:	d407      	bmi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ccc:	f7ff fb0a 	bl	80032e4 <HAL_GetTick>
 8003cd0:	ebc8 0000 	rsb	r0, r8, r0
 8003cd4:	2864      	cmp	r0, #100	; 0x64
 8003cd6:	d9f6      	bls.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xae>
      {
        return HAL_TIMEOUT;
 8003cd8:	2003      	movs	r0, #3
 8003cda:	e33c      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      }      
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003cdc:	4f87      	ldr	r7, [pc, #540]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cde:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ce0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003ce2:	4053      	eors	r3, r2
 8003ce4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003ce8:	d035      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cee:	f422 7140 	bic.w	r1, r2, #768	; 0x300
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf6:	673b      	str	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfe:	673b      	str	r3, [r7, #112]	; 0x70
      
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
 8003d00:	0793      	lsls	r3, r2, #30
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
      
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d02:	6739      	str	r1, [r7, #112]	; 0x70
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
 8003d04:	d40f      	bmi.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 			
 8003d06:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003d08:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8003d0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d10:	4b7a      	ldr	r3, [pc, #488]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d12:	d117      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8003d14:	6899      	ldr	r1, [r3, #8]
 8003d16:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 8003d1a:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 8003d1e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8003d22:	4301      	orrs	r1, r0
 8003d24:	e011      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x132>
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d26:	f7ff fadd 	bl	80032e4 <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d2a:	f241 3988 	movw	r9, #5000	; 0x1388
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	4680      	mov	r8, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d32:	0798      	lsls	r0, r3, #30
 8003d34:	d4e7      	bmi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d36:	f7ff fad5 	bl	80032e4 <HAL_GetTick>
 8003d3a:	ebc8 0000 	rsb	r0, r8, r0
 8003d3e:	4548      	cmp	r0, r9
 8003d40:	d9f6      	bls.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8003d42:	e7c9      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 			
 8003d44:	6899      	ldr	r1, [r3, #8]
 8003d46:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003d4a:	6099      	str	r1, [r3, #8]
 8003d4c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003d50:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003d52:	430a      	orrs	r2, r1
 8003d54:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	06d9      	lsls	r1, r3, #27
 8003d5a:	d50c      	bpl.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d5c:	4a67      	ldr	r2, [pc, #412]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d5e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003d62:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003d66:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8003d6a:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8003d6e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003d70:	4301      	orrs	r1, r0
 8003d72:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d76:	045a      	lsls	r2, r3, #17
 8003d78:	d508      	bpl.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d7a:	4860      	ldr	r0, [pc, #384]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d7c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8003d80:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8003d84:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d86:	430a      	orrs	r2, r1
 8003d88:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d8c:	041f      	lsls	r7, r3, #16
 8003d8e:	d508      	bpl.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d90:	485a      	ldr	r0, [pc, #360]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d92:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8003d96:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 8003d9a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003da2:	03d8      	lsls	r0, r3, #15
 8003da4:	d508      	bpl.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003da6:	4855      	ldr	r0, [pc, #340]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003da8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8003dac:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 8003db0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003db2:	430a      	orrs	r2, r1
 8003db4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003db8:	0399      	lsls	r1, r3, #14
 8003dba:	d508      	bpl.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dbc:	484f      	ldr	r0, [pc, #316]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003dbe:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8003dc2:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
 8003dc6:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dce:	065a      	lsls	r2, r3, #25
 8003dd0:	d508      	bpl.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dd2:	484a      	ldr	r0, [pc, #296]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003dd4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8003dd8:	f022 0103 	bic.w	r1, r2, #3
 8003ddc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003dde:	430a      	orrs	r2, r1
 8003de0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003de4:	061f      	lsls	r7, r3, #24
 8003de6:	d508      	bpl.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003de8:	4844      	ldr	r0, [pc, #272]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003dea:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8003dee:	f022 010c 	bic.w	r1, r2, #12
 8003df2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003df4:	430a      	orrs	r2, r1
 8003df6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dfa:	05d8      	lsls	r0, r3, #23
 8003dfc:	d508      	bpl.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dfe:	483f      	ldr	r0, [pc, #252]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e00:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8003e04:	f022 0130 	bic.w	r1, r2, #48	; 0x30
 8003e08:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e10:	0599      	lsls	r1, r3, #22
 8003e12:	d508      	bpl.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e14:	4839      	ldr	r0, [pc, #228]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e16:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8003e1a:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8003e1e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003e20:	430a      	orrs	r2, r1
 8003e22:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e26:	055a      	lsls	r2, r3, #21
 8003e28:	d508      	bpl.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e2a:	4834      	ldr	r0, [pc, #208]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e2c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8003e30:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8003e34:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003e36:	430a      	orrs	r2, r1
 8003e38:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e3c:	051f      	lsls	r7, r3, #20
 8003e3e:	d508      	bpl.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e40:	482e      	ldr	r0, [pc, #184]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e42:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8003e46:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 8003e4a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e52:	04d8      	lsls	r0, r3, #19
 8003e54:	d508      	bpl.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e56:	4829      	ldr	r0, [pc, #164]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e58:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8003e5c:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003e60:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003e62:	430a      	orrs	r2, r1
 8003e64:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e68:	0499      	lsls	r1, r3, #18
 8003e6a:	d508      	bpl.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e6c:	4823      	ldr	r0, [pc, #140]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e6e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8003e72:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 8003e76:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e7e:	025a      	lsls	r2, r3, #9
 8003e80:	d508      	bpl.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e82:	481e      	ldr	r0, [pc, #120]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e84:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8003e88:	f022 6180 	bic.w	r1, r2, #67108864	; 0x4000000
 8003e8c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e94:	029f      	lsls	r7, r3, #10
 8003e96:	d50c      	bpl.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e98:	4818      	ldr	r0, [pc, #96]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003e9a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003e9c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8003ea0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ea4:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8003ea8:	bf08      	it	eq
 8003eaa:	2501      	moveq	r5, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003eac:	430a      	orrs	r2, r1
 8003eae:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F756xx) || defined(STM32F746xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 8003eb2:	f013 0f08 	tst.w	r3, #8
 8003eb6:	bf18      	it	ne
 8003eb8:	2501      	movne	r5, #1
  }
#endif /* STM32F756xx || STM32F746xx */
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003eba:	0358      	lsls	r0, r3, #13
 8003ebc:	d508      	bpl.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ebe:	480f      	ldr	r0, [pc, #60]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ec0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8003ec4:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8003ec8:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ed0:	0219      	lsls	r1, r3, #8
 8003ed2:	d509      	bpl.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ed4:	4809      	ldr	r0, [pc, #36]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ed6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8003eda:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8003ede:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003ee8:	2e01      	cmp	r6, #1
 8003eea:	d00b      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8003eec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ef0:	d008      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ef2:	2d01      	cmp	r5, #1
 8003ef4:	f040 818c 	bne.w	8004210 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8003ef8:	e123      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003efa:	bf00      	nop
 8003efc:	40023800 	.word	0x40023800
 8003f00:	40007000 	.word	0x40007000
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8003f04:	4ec8      	ldr	r6, [pc, #800]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 8003f06:	6833      	ldr	r3, [r6, #0]
 8003f08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f0c:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f0e:	f7ff f9e9 	bl	80032e4 <HAL_GetTick>
 8003f12:	4607      	mov	r7, r0
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f14:	6833      	ldr	r3, [r6, #0]
 8003f16:	f8df e310 	ldr.w	lr, [pc, #784]	; 8004228 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8003f1a:	011a      	lsls	r2, r3, #4
 8003f1c:	d505      	bpl.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f1e:	f7ff f9e1 	bl	80032e4 <HAL_GetTick>
 8003f22:	1bc0      	subs	r0, r0, r7
 8003f24:	2864      	cmp	r0, #100	; 0x64
 8003f26:	d9f5      	bls.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003f28:	e6d6      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f2a:	6827      	ldr	r7, [r4, #0]
 8003f2c:	07fb      	lsls	r3, r7, #31
 8003f2e:	d53c      	bpl.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003f30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f32:	bbd3      	cbnz	r3, 8003faa <HAL_RCCEx_PeriphCLKConfig+0x392>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8003f34:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8003f38:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8003f3c:	fa98 f9a8 	rbit	r9, r8
 8003f40:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
 8003f44:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8003f48:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8003f4c:	fa96 fca6 	rbit	ip, r6
 8003f50:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8003f54:	fabc fc8c 	clz	ip, ip
 8003f58:	fa9a faaa 	rbit	sl, sl
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f5c:	faba fa8a 	clz	sl, sl
 8003f60:	fa98 f8a8 	rbit	r8, r8
 8003f64:	fab8 f888 	clz	r8, r8
 8003f68:	fa96 f6a6 	rbit	r6, r6
 8003f6c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003f70:	fab6 f686 	clz	r6, r6
 8003f74:	fa93 f3a3 	rbit	r3, r3
 8003f78:	fab3 fb83 	clz	fp, r3
 8003f7c:	6861      	ldr	r1, [r4, #4]
 8003f7e:	68a3      	ldr	r3, [r4, #8]
 8003f80:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8003f84:	fa01 f10a 	lsl.w	r1, r1, sl
 8003f88:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8003f8c:	fa03 f30b 	lsl.w	r3, r3, fp
 8003f90:	fa20 f009 	lsr.w	r0, r0, r9
 8003f94:	fa22 f20c 	lsr.w	r2, r2, ip
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	fa00 f108 	lsl.w	r1, r0, r8
 8003f9e:	4319      	orrs	r1, r3
 8003fa0:	fa02 f306 	lsl.w	r3, r2, r6
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003faa:	033e      	lsls	r6, r7, #12
 8003fac:	d503      	bpl.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8003fae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fb4:	d005      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
 8003fb6:	02f8      	lsls	r0, r7, #11
 8003fb8:	d549      	bpl.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x436>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8003fba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fc0:	d145      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x436>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8003fc2:	f8df e264 	ldr.w	lr, [pc, #612]	; 8004228 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8003fc6:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8003fca:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8003fce:	fa98 f9a8 	rbit	r9, r8
 8003fd2:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8003fd6:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8003fda:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8003fde:	fa96 fca6 	rbit	ip, r6
 8003fe2:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 8003fe6:	fabc fc8c 	clz	ip, ip
 8003fea:	fa9b fbab 	rbit	fp, fp
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003fee:	fabb fb8b 	clz	fp, fp
 8003ff2:	fa98 f8a8 	rbit	r8, r8
 8003ff6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8003ffa:	fab8 f888 	clz	r8, r8
 8003ffe:	fa93 f3a3 	rbit	r3, r3
 8004002:	fab3 fa83 	clz	sl, r3
 8004006:	fa96 f6a6 	rbit	r6, r6
 800400a:	6863      	ldr	r3, [r4, #4]
 800400c:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8004010:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8004014:	fab6 f686 	clz	r6, r6
 8004018:	fa03 f10b 	lsl.w	r1, r3, fp
 800401c:	68e3      	ldr	r3, [r4, #12]
 800401e:	fa20 f009 	lsr.w	r0, r0, r9
 8004022:	fa22 f20c 	lsr.w	r2, r2, ip
 8004026:	fa03 f30a 	lsl.w	r3, r3, sl
 800402a:	430b      	orrs	r3, r1
 800402c:	fa00 f108 	lsl.w	r1, r0, r8
 8004030:	4319      	orrs	r1, r3
 8004032:	fa02 f306 	lsl.w	r3, r2, r6
 8004036:	430b      	orrs	r3, r1
 8004038:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 800403c:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8004040:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004042:	f023 031f 	bic.w	r3, r3, #31
 8004046:	3a01      	subs	r2, #1
 8004048:	4313      	orrs	r3, r2
 800404a:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800404e:	01f9      	lsls	r1, r7, #7
 8004050:	d53c      	bpl.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x4b4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8004052:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8004228 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8004056:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 800405a:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 800405e:	fa98 f9a8 	rbit	r9, r8
 8004062:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8004066:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 800406a:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 800406e:	fa96 fca6 	rbit	ip, r6
 8004072:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 8004076:	fabc fc8c 	clz	ip, ip
 800407a:	fa9b fbab 	rbit	fp, fp
 800407e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004082:	fabb fb8b 	clz	fp, fp
 8004086:	fa93 f3a3 	rbit	r3, r3
 800408a:	fab3 fa83 	clz	sl, r3
 800408e:	fa98 f8a8 	rbit	r8, r8
 8004092:	fab8 f888 	clz	r8, r8
 8004096:	fa96 f6a6 	rbit	r6, r6
 800409a:	6863      	ldr	r3, [r4, #4]
 800409c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80040a0:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80040a4:	fab6 f686 	clz	r6, r6
 80040a8:	fa03 f10b 	lsl.w	r1, r3, fp
 80040ac:	6923      	ldr	r3, [r4, #16]
 80040ae:	fa20 f009 	lsr.w	r0, r0, r9
 80040b2:	fa22 f20c 	lsr.w	r2, r2, ip
 80040b6:	fa03 f30a 	lsl.w	r3, r3, sl
 80040ba:	430b      	orrs	r3, r1
 80040bc:	fa00 f108 	lsl.w	r1, r0, r8
 80040c0:	4319      	orrs	r1, r3
 80040c2:	fa02 f306 	lsl.w	r3, r2, r6
 80040c6:	430b      	orrs	r3, r1
 80040c8:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040cc:	01ba      	lsls	r2, r7, #6
 80040ce:	d526      	bpl.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80040d0:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 80040d4:	fa9e feae 	rbit	lr, lr
 80040d8:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040dc:	fabe fe8e 	clz	lr, lr
 80040e0:	fa90 f0a0 	rbit	r0, r0
 80040e4:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80040e8:	fab0 f780 	clz	r7, r0
 80040ec:	fa92 f2a2 	rbit	r2, r2
 80040f0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80040f4:	fab2 f682 	clz	r6, r2
 80040f8:	fa93 f3a3 	rbit	r3, r3
 80040fc:	fab3 f183 	clz	r1, r3
 8004100:	6920      	ldr	r0, [r4, #16]
 8004102:	6863      	ldr	r3, [r4, #4]
 8004104:	68e2      	ldr	r2, [r4, #12]
 8004106:	40b8      	lsls	r0, r7
 8004108:	fa03 f30e 	lsl.w	r3, r3, lr
 800410c:	40b2      	lsls	r2, r6
 800410e:	4303      	orrs	r3, r0
 8004110:	431a      	orrs	r2, r3
 8004112:	68a3      	ldr	r3, [r4, #8]
 8004114:	408b      	lsls	r3, r1
 8004116:	4313      	orrs	r3, r2
 8004118:	4a43      	ldr	r2, [pc, #268]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 800411a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800411e:	4e42      	ldr	r6, [pc, #264]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 8004120:	6833      	ldr	r3, [r6, #0]
 8004122:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004126:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004128:	f7ff f8dc 	bl	80032e4 <HAL_GetTick>
 800412c:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800412e:	6833      	ldr	r3, [r6, #0]
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	f53f aede 	bmi.w	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004136:	f7ff f8d5 	bl	80032e4 <HAL_GetTick>
 800413a:	1bc0      	subs	r0, r0, r7
 800413c:	2864      	cmp	r0, #100	; 0x64
 800413e:	d9f6      	bls.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8004140:	e5ca      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8004142:	4d39      	ldr	r5, [pc, #228]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 8004144:	682b      	ldr	r3, [r5, #0]
 8004146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800414a:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800414c:	f7ff f8ca 	bl	80032e4 <HAL_GetTick>
 8004150:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004152:	682b      	ldr	r3, [r5, #0]
 8004154:	009f      	lsls	r7, r3, #2
 8004156:	d45d      	bmi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004158:	6825      	ldr	r5, [r4, #0]
 800415a:	032e      	lsls	r6, r5, #12
 800415c:	d460      	bmi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800415e:	02e8      	lsls	r0, r5, #11
 8004160:	d464      	bmi.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x614>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004162:	02a9      	lsls	r1, r5, #10
 8004164:	f100 80ad 	bmi.w	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
    }        

#if defined(STM32F756xx) || defined(STM32F746xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004168:	072a      	lsls	r2, r5, #28
 800416a:	d545      	bpl.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 800416c:	4f2e      	ldr	r7, [pc, #184]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 800416e:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 8004172:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004176:	fa95 fca5 	rbit	ip, r5
 800417a:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 800417e:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8004182:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8004186:	fa96 f8a6 	rbit	r8, r6
 800418a:	f647 79c0 	movw	r9, #32704	; 0x7fc0
 800418e:	fab8 f888 	clz	r8, r8
 8004192:	fa99 f9a9 	rbit	r9, r9
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004196:	fab9 f989 	clz	r9, r9
 800419a:	fa96 f6a6 	rbit	r6, r6
 800419e:	fab6 f686 	clz	r6, r6
 80041a2:	fa95 f5a5 	rbit	r5, r5
 80041a6:	f04f 4ee0 	mov.w	lr, #1879048192	; 0x70000000
 80041aa:	fab5 f585 	clz	r5, r5
 80041ae:	fa9e feae 	rbit	lr, lr
 80041b2:	6963      	ldr	r3, [r4, #20]
 80041b4:	fabe fe8e 	clz	lr, lr
 80041b8:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80041bc:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80041c0:	fa03 f109 	lsl.w	r1, r3, r9
 80041c4:	69e3      	ldr	r3, [r4, #28]
 80041c6:	fa20 f008 	lsr.w	r0, r0, r8
 80041ca:	fa22 f20c 	lsr.w	r2, r2, ip
 80041ce:	fa03 fe0e 	lsl.w	lr, r3, lr
 80041d2:	fa02 f305 	lsl.w	r3, r2, r5
 80041d6:	ea41 0e0e 	orr.w	lr, r1, lr
 80041da:	fa00 f106 	lsl.w	r1, r0, r6
 80041de:	ea4e 0101 	orr.w	r1, lr, r1
 80041e2:	430b      	orrs	r3, r1
 80041e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }    
#endif /* STM32F756xx || STM32F746xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041f8:	4c0b      	ldr	r4, [pc, #44]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x610>)
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004200:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004202:	f7ff f86f 	bl	80032e4 <HAL_GetTick>
 8004206:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	f140 809c 	bpl.w	8004348 <HAL_RCCEx_PeriphCLKConfig+0x730>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004210:	2000      	movs	r0, #0
 8004212:	e0a0      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004214:	f7ff f866 	bl	80032e4 <HAL_GetTick>
 8004218:	1b80      	subs	r0, r0, r6
 800421a:	2864      	cmp	r0, #100	; 0x64
 800421c:	d999      	bls.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x53a>
 800421e:	e55b      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004220:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004222:	b133      	cbz	r3, 8004232 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8004224:	e79b      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x546>
 8004226:	bf00      	nop
 8004228:	40023800 	.word	0x40023800
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800422c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d197      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x54a>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8004232:	4f4a      	ldr	r7, [pc, #296]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x744>)
 8004234:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8004238:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800423c:	fa9c f9ac 	rbit	r9, ip
 8004240:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8004244:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8004248:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800424c:	fa96 fea6 	rbit	lr, r6
 8004250:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8004254:	fabe fe8e 	clz	lr, lr
 8004258:	fa9a faaa 	rbit	sl, sl
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800425c:	faba fa8a 	clz	sl, sl
 8004260:	fa9c fcac 	rbit	ip, ip
 8004264:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8004268:	fabc fc8c 	clz	ip, ip
 800426c:	fa98 f8a8 	rbit	r8, r8
 8004270:	fab8 f888 	clz	r8, r8
 8004274:	fa96 f6a6 	rbit	r6, r6
 8004278:	69a1      	ldr	r1, [r4, #24]
 800427a:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 800427e:	6963      	ldr	r3, [r4, #20]
 8004280:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8004284:	fa01 f808 	lsl.w	r8, r1, r8
 8004288:	fa20 f009 	lsr.w	r0, r0, r9
 800428c:	fa03 f30a 	lsl.w	r3, r3, sl
 8004290:	fa22 f20e 	lsr.w	r2, r2, lr
 8004294:	fab6 f686 	clz	r6, r6
 8004298:	fa00 f10c 	lsl.w	r1, r0, ip
 800429c:	ea43 0308 	orr.w	r3, r3, r8
 80042a0:	4319      	orrs	r1, r3
 80042a2:	fa02 f306 	lsl.w	r3, r2, r6
 80042a6:	430b      	orrs	r3, r1
 80042a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80042b2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80042b6:	3a01      	subs	r2, #1
 80042b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80042bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80042c0:	e74f      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80042c2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80042c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042c8:	f47f af4e 	bne.w	8004168 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80042cc:	4f23      	ldr	r7, [pc, #140]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x744>)
 80042ce:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 80042d2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80042d6:	fa9c f9ac 	rbit	r9, ip
 80042da:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 80042de:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80042e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80042e6:	fa96 fea6 	rbit	lr, r6
 80042ea:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 80042ee:	fabe fe8e 	clz	lr, lr
 80042f2:	fa9a faaa 	rbit	sl, sl
 80042f6:	f44f 3840 	mov.w	r8, #196608	; 0x30000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80042fa:	faba fa8a 	clz	sl, sl
 80042fe:	fa98 f8a8 	rbit	r8, r8
 8004302:	fab8 f888 	clz	r8, r8
 8004306:	fa9c fcac 	rbit	ip, ip
 800430a:	fabc fc8c 	clz	ip, ip
 800430e:	fa96 f6a6 	rbit	r6, r6
 8004312:	6a21      	ldr	r1, [r4, #32]
 8004314:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8004318:	6963      	ldr	r3, [r4, #20]
 800431a:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800431e:	fa01 f808 	lsl.w	r8, r1, r8
 8004322:	fa20 f009 	lsr.w	r0, r0, r9
 8004326:	fa03 f30a 	lsl.w	r3, r3, sl
 800432a:	fab6 f686 	clz	r6, r6
 800432e:	fa00 f10c 	lsl.w	r1, r0, ip
 8004332:	fa22 f20e 	lsr.w	r2, r2, lr
 8004336:	ea43 0308 	orr.w	r3, r3, r8
 800433a:	4319      	orrs	r1, r3
 800433c:	fa02 f306 	lsl.w	r3, r2, r6
 8004340:	430b      	orrs	r3, r1
 8004342:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004346:	e70f      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x550>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004348:	f7fe ffcc 	bl	80032e4 <HAL_GetTick>
 800434c:	1b40      	subs	r0, r0, r5
 800434e:	2864      	cmp	r0, #100	; 0x64
 8004350:	f67f af5a 	bls.w	8004208 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8004354:	e4c0      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8004356:	b003      	add	sp, #12
 8004358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800435c:	40023800 	.word	0x40023800

08004360 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004360:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004364:	4c22      	ldr	r4, [pc, #136]	; (80043f0 <BSP_SDRAM_Initialization_sequence+0x90>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004366:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004368:	4d22      	ldr	r5, [pc, #136]	; (80043f4 <BSP_SDRAM_Initialization_sequence+0x94>)
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
  __IO uint32_t tmpmrd = 0;
 800436a:	f04f 0800 	mov.w	r8, #0
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800436e:	2710      	movs	r7, #16
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004370:	4621      	mov	r1, r4
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004372:	4681      	mov	r9, r0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004378:	4628      	mov	r0, r5
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
  __IO uint32_t tmpmrd = 0;
 800437a:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
 800437e:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8004380:	f8c4 800c 	str.w	r8, [r4, #12]
{
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004384:	e884 00c0 	stmia.w	r4, {r6, r7}
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004388:	f001 f85c 	bl	8005444 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800438c:	4630      	mov	r0, r6
 800438e:	f7fc f8f5 	bl	800057c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004392:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004394:	4621      	mov	r1, r4
 8004396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800439a:	4628      	mov	r0, r5
  HAL_Delay(1);
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
 800439c:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 800439e:	f8c4 800c 	str.w	r8, [r4, #12]
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80043a2:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80043a6:	f001 f84d 	bl	8005444 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80043aa:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80043ac:	4621      	mov	r1, r4
 80043ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043b2:	4628      	mov	r0, r5
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 80043b4:	f8c4 800c 	str.w	r8, [r4, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80043b8:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 8;
 80043bc:	2308      	movs	r3, #8
 80043be:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80043c0:	f001 f840 	bl	8005444 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80043c4:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80043c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043cc:	4621      	mov	r1, r4
 80043ce:	4628      	mov	r0, r5

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80043d0:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80043d2:	2304      	movs	r3, #4
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
 80043d4:	60a6      	str	r6, [r4, #8]
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80043d6:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;
 80043da:	9b01      	ldr	r3, [sp, #4]
 80043dc:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80043de:	f001 f831 	bl	8005444 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80043e2:	4649      	mov	r1, r9
 80043e4:	4628      	mov	r0, r5
 80043e6:	f001 f844 	bl	8005472 <HAL_SDRAM_ProgramRefreshRate>
}
 80043ea:	b003      	add	sp, #12
 80043ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043f0:	200082d0 	.word	0x200082d0
 80043f4:	20008338 	.word	0x20008338

080043f8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80043f8:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80043fa:	4b59      	ldr	r3, [pc, #356]	; (8004560 <BSP_SDRAM_MspInit+0x168>)
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80043fc:	b08e      	sub	sp, #56	; 0x38
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80043fe:	2500      	movs	r5, #0
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004400:	4606      	mov	r6, r0
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004402:	ac0e      	add	r4, sp, #56	; 0x38
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004404:	4857      	ldr	r0, [pc, #348]	; (8004564 <BSP_SDRAM_MspInit+0x16c>)
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004406:	9501      	str	r5, [sp, #4]
 8004408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	639a      	str	r2, [r3, #56]	; 0x38
 8004410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004412:	f002 0201 	and.w	r2, r2, #1
 8004416:	9201      	str	r2, [sp, #4]
 8004418:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800441a:	9502      	str	r5, [sp, #8]
 800441c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800441e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004422:	631a      	str	r2, [r3, #48]	; 0x30
 8004424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004426:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800442a:	9202      	str	r2, [sp, #8]
 800442c:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800442e:	9503      	str	r5, [sp, #12]
 8004430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004432:	f042 0204 	orr.w	r2, r2, #4
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
 8004438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800443a:	f002 0204 	and.w	r2, r2, #4
 800443e:	9203      	str	r2, [sp, #12]
 8004440:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004442:	9504      	str	r5, [sp, #16]
 8004444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004446:	f042 0208 	orr.w	r2, r2, #8
 800444a:	631a      	str	r2, [r3, #48]	; 0x30
 800444c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800444e:	f002 0208 	and.w	r2, r2, #8
 8004452:	9204      	str	r2, [sp, #16]
 8004454:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004456:	9505      	str	r5, [sp, #20]
 8004458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800445a:	f042 0210 	orr.w	r2, r2, #16
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
 8004460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004462:	f002 0210 	and.w	r2, r2, #16
 8004466:	9205      	str	r2, [sp, #20]
 8004468:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800446a:	9506      	str	r5, [sp, #24]
 800446c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800446e:	f042 0220 	orr.w	r2, r2, #32
 8004472:	631a      	str	r2, [r3, #48]	; 0x30
 8004474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004476:	f002 0220 	and.w	r2, r2, #32
 800447a:	9206      	str	r2, [sp, #24]
 800447c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800447e:	9507      	str	r5, [sp, #28]
 8004480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004486:	631a      	str	r2, [r3, #48]	; 0x30
 8004488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800448a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800448e:	9207      	str	r2, [sp, #28]
 8004490:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004492:	9508      	str	r5, [sp, #32]
 8004494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004496:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800449a:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800449c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80044a0:	920b      	str	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80044a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a6:	9308      	str	r3, [sp, #32]
 80044a8:	9b08      	ldr	r3, [sp, #32]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80044aa:	2302      	movs	r3, #2
 80044ac:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80044ae:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80044b0:	230c      	movs	r3, #12
 80044b2:	930d      	str	r3, [sp, #52]	; 0x34
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80044b4:	2308      	movs	r3, #8
 80044b6:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80044ba:	4621      	mov	r1, r4
 80044bc:	f7fe ff18 	bl	80032f0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 80044c0:	f24c 730b 	movw	r3, #50955	; 0xc70b
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80044c4:	4621      	mov	r1, r4
 80044c6:	4828      	ldr	r0, [pc, #160]	; (8004568 <BSP_SDRAM_MspInit+0x170>)
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
 80044c8:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80044ca:	f7fe ff11 	bl	80032f0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80044ce:	f64f 7383 	movw	r3, #65411	; 0xff83
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80044d2:	4621      	mov	r1, r4
 80044d4:	4825      	ldr	r0, [pc, #148]	; (800456c <BSP_SDRAM_MspInit+0x174>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80044d6:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80044d8:	f7fe ff0a 	bl	80032f0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80044dc:	f64f 033f 	movw	r3, #63551	; 0xf83f
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80044e0:	4621      	mov	r1, r4
 80044e2:	4823      	ldr	r0, [pc, #140]	; (8004570 <BSP_SDRAM_MspInit+0x178>)
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80044e4:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80044e6:	f7fe ff03 	bl	80032f0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80044ea:	f248 1333 	movw	r3, #33075	; 0x8133
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80044ee:	4621      	mov	r1, r4
 80044f0:	4820      	ldr	r0, [pc, #128]	; (8004574 <BSP_SDRAM_MspInit+0x17c>)
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80044f2:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80044f4:	f7fe fefc 	bl	80032f0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80044f8:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80044fa:	4621      	mov	r1, r4
 80044fc:	481e      	ldr	r0, [pc, #120]	; (8004578 <BSP_SDRAM_MspInit+0x180>)
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80044fe:	4c1f      	ldr	r4, [pc, #124]	; (800457c <BSP_SDRAM_MspInit+0x184>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004500:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004502:	f7fe fef5 	bl	80032f0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004506:	2380      	movs	r3, #128	; 0x80
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004508:	6325      	str	r5, [r4, #48]	; 0x30
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800450a:	4620      	mov	r0, r4
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800450c:	6334      	str	r4, [r6, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800450e:	60a3      	str	r3, [r4, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004510:	f44f 7300 	mov.w	r3, #512	; 0x200
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004514:	6065      	str	r5, [r4, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004516:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004518:	f44f 6380 	mov.w	r3, #1024	; 0x400
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
 800451c:	61e5      	str	r5, [r4, #28]
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800451e:	6123      	str	r3, [r4, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004524:	6265      	str	r5, [r4, #36]	; 0x24
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004526:	6163      	str	r3, [r4, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004528:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800452c:	62e5      	str	r5, [r4, #44]	; 0x2c
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800452e:	61a3      	str	r3, [r4, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004534:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004536:	6223      	str	r3, [r4, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004538:	2303      	movs	r3, #3
 800453a:	62a3      	str	r3, [r4, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800453c:	4b10      	ldr	r3, [pc, #64]	; (8004580 <BSP_SDRAM_MspInit+0x188>)
 800453e:	6023      	str	r3, [r4, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004540:	f000 ff3c 	bl	80053bc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004544:	4620      	mov	r0, r4
 8004546:	f000 feff 	bl	8005348 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 800454a:	462a      	mov	r2, r5
 800454c:	2105      	movs	r1, #5
 800454e:	2038      	movs	r0, #56	; 0x38
 8004550:	f7fe ffe6 	bl	8003520 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004554:	2038      	movs	r0, #56	; 0x38
 8004556:	f7ff f81b 	bl	8003590 <HAL_NVIC_EnableIRQ>
}
 800455a:	b00e      	add	sp, #56	; 0x38
 800455c:	bd70      	pop	{r4, r5, r6, pc}
 800455e:	bf00      	nop
 8004560:	40023800 	.word	0x40023800
 8004564:	40020800 	.word	0x40020800
 8004568:	40020c00 	.word	0x40020c00
 800456c:	40021000 	.word	0x40021000
 8004570:	40021400 	.word	0x40021400
 8004574:	40021800 	.word	0x40021800
 8004578:	40021c00 	.word	0x40021c00
 800457c:	200082e0 	.word	0x200082e0
 8004580:	40026410 	.word	0x40026410

08004584 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8004584:	b538      	push	{r3, r4, r5, lr}
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004586:	4c1a      	ldr	r4, [pc, #104]	; (80045f0 <BSP_SDRAM_Init+0x6c>)
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
 8004588:	2107      	movs	r1, #7
  */
uint8_t BSP_SDRAM_Init(void)
{ 
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800458a:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <BSP_SDRAM_Init+0x70>)
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
 800458c:	2204      	movs	r2, #4
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800458e:	4d1a      	ldr	r5, [pc, #104]	; (80045f8 <BSP_SDRAM_Init+0x74>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004590:	4620      	mov	r0, r4
  */
uint8_t BSP_SDRAM_Init(void)
{ 
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004592:	6023      	str	r3, [r4, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004594:	2302      	movs	r3, #2
  Timing.ExitSelfRefreshDelay = 7;
 8004596:	6069      	str	r1, [r5, #4]
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004598:	602b      	str	r3, [r5, #0]
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
  Timing.RowCycleDelay        = 7;
  Timing.WriteRecoveryTime    = 2;
 800459a:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 800459c:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 800459e:	61ab      	str	r3, [r5, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80045a0:	2310      	movs	r3, #16
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
  Timing.RowCycleDelay        = 7;
 80045a2:	60e9      	str	r1, [r5, #12]
  Timing.WriteRecoveryTime    = 2;
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80045a4:	2100      	movs	r1, #0
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80045a6:	6123      	str	r3, [r4, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80045a8:	2340      	movs	r3, #64	; 0x40
  Timing.RowCycleDelay        = 7;
  Timing.WriteRecoveryTime    = 2;
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80045aa:	6061      	str	r1, [r4, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80045ac:	6163      	str	r3, [r4, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80045ae:	f44f 7380 	mov.w	r3, #256	; 0x100
  Timing.WriteRecoveryTime    = 2;
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80045b2:	60a1      	str	r1, [r4, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80045b4:	61a3      	str	r3, [r4, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80045b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80045ba:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80045bc:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80045be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80045c2:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80045c4:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80045c6:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
 80045c8:	60aa      	str	r2, [r5, #8]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80045ca:	f7ff ff15 	bl	80043f8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80045ce:	4620      	mov	r0, r4
 80045d0:	4629      	mov	r1, r5
 80045d2:	f000 ff17 	bl	8005404 <HAL_SDRAM_Init>
 80045d6:	4c09      	ldr	r4, [pc, #36]	; (80045fc <BSP_SDRAM_Init+0x78>)
 80045d8:	b110      	cbz	r0, 80045e0 <BSP_SDRAM_Init+0x5c>
  {
    sdramstatus = SDRAM_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	7023      	strb	r3, [r4, #0]
 80045de:	e000      	b.n	80045e2 <BSP_SDRAM_Init+0x5e>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80045e0:	7020      	strb	r0, [r4, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80045e2:	f240 6003 	movw	r0, #1539	; 0x603
 80045e6:	f7ff febb 	bl	8004360 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
}
 80045ea:	7820      	ldrb	r0, [r4, #0]
 80045ec:	bd38      	pop	{r3, r4, r5, pc}
 80045ee:	bf00      	nop
 80045f0:	20008338 	.word	0x20008338
 80045f4:	a0000140 	.word	0xa0000140
 80045f8:	2000836c 	.word	0x2000836c
 80045fc:	2000000c 	.word	0x2000000c

08004600 <BSP_TS_Init>:
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 8004600:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <BSP_TS_Init+0x38>)
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004602:	b510      	push	{r4, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 8004604:	8018      	strh	r0, [r3, #0]
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004606:	2070      	movs	r0, #112	; 0x70
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
  tsYBoundary = ts_SizeY;
 8004608:	4b0c      	ldr	r3, [pc, #48]	; (800463c <BSP_TS_Init+0x3c>)
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800460a:	4c0d      	ldr	r4, [pc, #52]	; (8004640 <BSP_TS_Init+0x40>)
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
  tsYBoundary = ts_SizeY;
 800460c:	8019      	strh	r1, [r3, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004612:	6863      	ldr	r3, [r4, #4]
 8004614:	2070      	movs	r0, #112	; 0x70
 8004616:	4798      	blx	r3
 8004618:	2851      	cmp	r0, #81	; 0x51
 800461a:	d10b      	bne.n	8004634 <BSP_TS_Init+0x34>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800461c:	4b09      	ldr	r3, [pc, #36]	; (8004644 <BSP_TS_Init+0x44>)
    I2cAddress = TS_I2C_ADDRESS;
 800461e:	2070      	movs	r0, #112	; 0x70
    tsOrientation = TS_SWAP_XY;
 8004620:	2208      	movs	r2, #8
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004622:	601c      	str	r4, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004624:	4b08      	ldr	r3, [pc, #32]	; (8004648 <BSP_TS_Init+0x48>)
 8004626:	7018      	strb	r0, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004628:	4b08      	ldr	r3, [pc, #32]	; (800464c <BSP_TS_Init+0x4c>)
 800462a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800462c:	68e3      	ldr	r3, [r4, #12]
 800462e:	4798      	blx	r3
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
  uint8_t status = TS_OK;
 8004630:	2000      	movs	r0, #0
 8004632:	bd10      	pop	{r4, pc}
    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004634:	2003      	movs	r0, #3
  }

  return status;
}
 8004636:	bd10      	pop	{r4, pc}
 8004638:	200083b0 	.word	0x200083b0
 800463c:	200083b4 	.word	0x200083b4
 8004640:	20000010 	.word	0x20000010
 8004644:	200083b8 	.word	0x200083b8
 8004648:	200083b2 	.word	0x200083b2
 800464c:	200083b3 	.word	0x200083b3

08004650 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8004650:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004652:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <BSP_TS_Get_GestureId+0x58>)
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
  uint32_t gestureId = 0;
 8004654:	a902      	add	r1, sp, #8
 8004656:	2400      	movs	r4, #0
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8004658:	4605      	mov	r5, r0
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800465a:	7818      	ldrb	r0, [r3, #0]
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
  uint32_t gestureId = 0;
 800465c:	f841 4d04 	str.w	r4, [r1, #-4]!
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004660:	f000 fb48 	bl	8004cf4 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8004664:	9801      	ldr	r0, [sp, #4]
 8004666:	2818      	cmp	r0, #24
 8004668:	d013      	beq.n	8004692 <BSP_TS_Get_GestureId+0x42>
 800466a:	d806      	bhi.n	800467a <BSP_TS_Get_GestureId+0x2a>
 800466c:	2810      	cmp	r0, #16
 800466e:	d00c      	beq.n	800468a <BSP_TS_Get_GestureId+0x3a>
 8004670:	2814      	cmp	r0, #20
 8004672:	d00c      	beq.n	800468e <BSP_TS_Get_GestureId+0x3e>
 8004674:	b9a8      	cbnz	r0, 80046a2 <BSP_TS_Get_GestureId+0x52>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8004676:	62a8      	str	r0, [r5, #40]	; 0x28
      break;
 8004678:	e014      	b.n	80046a4 <BSP_TS_Get_GestureId+0x54>

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800467a:	2840      	cmp	r0, #64	; 0x40
 800467c:	d00b      	beq.n	8004696 <BSP_TS_Get_GestureId+0x46>
 800467e:	2849      	cmp	r0, #73	; 0x49
 8004680:	d00b      	beq.n	800469a <BSP_TS_Get_GestureId+0x4a>
 8004682:	281c      	cmp	r0, #28
 8004684:	d10d      	bne.n	80046a2 <BSP_TS_Get_GestureId+0x52>
      break;
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
      break;
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004686:	2304      	movs	r3, #4
 8004688:	e008      	b.n	800469c <BSP_TS_Get_GestureId+0x4c>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
      break;
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800468a:	2301      	movs	r3, #1
 800468c:	e006      	b.n	800469c <BSP_TS_Get_GestureId+0x4c>
      break;
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800468e:	2302      	movs	r3, #2
 8004690:	e004      	b.n	800469c <BSP_TS_Get_GestureId+0x4c>
      break;
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8004692:	2303      	movs	r3, #3
 8004694:	e002      	b.n	800469c <BSP_TS_Get_GestureId+0x4c>
      break;
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
      break;
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8004696:	2305      	movs	r3, #5
 8004698:	e000      	b.n	800469c <BSP_TS_Get_GestureId+0x4c>
      break;
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800469a:	2306      	movs	r3, #6
 800469c:	62ab      	str	r3, [r5, #40]	; 0x28
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
  uint32_t gestureId = 0;
  uint8_t  ts_status = TS_OK;
 800469e:	4620      	mov	r0, r4
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
      break;
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
      break;
 80046a0:	e000      	b.n	80046a4 <BSP_TS_Get_GestureId+0x54>
    default :
      ts_status = TS_ERROR;
 80046a2:	2001      	movs	r0, #1
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 80046a4:	b003      	add	sp, #12
 80046a6:	bd30      	pop	{r4, r5, pc}
 80046a8:	200083b2 	.word	0x200083b2

080046ac <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80046ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80046b0:	4d54      	ldr	r5, [pc, #336]	; (8004804 <BSP_TS_GetState+0x158>)
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80046b2:	b095      	sub	sp, #84	; 0x54
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80046b4:	2400      	movs	r4, #0
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80046b6:	4e54      	ldr	r6, [pc, #336]	; (8004808 <BSP_TS_GetState+0x15c>)
 80046b8:	682b      	ldr	r3, [r5, #0]
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80046ba:	4681      	mov	r9, r0
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80046bc:	9405      	str	r4, [sp, #20]
 80046be:	46b2      	mov	sl, r6
  uint32_t area = 0;
 80046c0:	9406      	str	r4, [sp, #24]
  uint32_t event = 0;
 80046c2:	9407      	str	r4, [sp, #28]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	7830      	ldrb	r0, [r6, #0]
 80046c8:	4798      	blx	r3
 80046ca:	9503      	str	r5, [sp, #12]
 80046cc:	f889 0000 	strb.w	r0, [r9]
  
  if(TS_State->touchDetected)
 80046d0:	2800      	cmp	r0, #0
 80046d2:	f000 8094 	beq.w	80047fe <BSP_TS_GetState+0x152>
 80046d6:	464d      	mov	r5, r9
 80046d8:	ae0e      	add	r6, sp, #56	; 0x38
 80046da:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 80046de:	464f      	mov	r7, r9
 80046e0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8004810 <BSP_TS_GetState+0x164>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80046e4:	f899 3000 	ldrb.w	r3, [r9]
 80046e8:	429c      	cmp	r4, r3
 80046ea:	f080 8085 	bcs.w	80047f8 <BSP_TS_GetState+0x14c>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80046ee:	9b03      	ldr	r3, [sp, #12]
 80046f0:	4642      	mov	r2, r8
 80046f2:	f89a 0000 	ldrb.w	r0, [sl]
 80046f6:	4631      	mov	r1, r6
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80046fe:	4b43      	ldr	r3, [pc, #268]	; (800480c <BSP_TS_GetState+0x160>)
 8004700:	a90b      	add	r1, sp, #44	; 0x2c
        y[index] = brute_x[index];
        x[index] = brute_y[index];
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004702:	f8df c118 	ldr.w	ip, [pc, #280]	; 800481c <BSP_TS_GetState+0x170>
    for(index=0; index < TS_State->touchDetected; index++)
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));

      if(tsOrientation == TS_SWAP_NONE)
 8004706:	781a      	ldrb	r2, [r3, #0]
 8004708:	ab08      	add	r3, sp, #32
 800470a:	2a01      	cmp	r2, #1
      {
        x[index] = brute_x[index];
 800470c:	bf01      	itttt	eq
 800470e:	8830      	ldrheq	r0, [r6, #0]
 8004710:	f823 0014 	strheq.w	r0, [r3, r4, lsl #1]
        y[index] = brute_y[index];
 8004714:	f8b8 0000 	ldrheq.w	r0, [r8]
 8004718:	f821 0014 	strheq.w	r0, [r1, r4, lsl #1]
      }

      if(tsOrientation & TS_SWAP_X)
 800471c:	0790      	lsls	r0, r2, #30
      {
        x[index] = 4096 - brute_x[index];
 800471e:	bf42      	ittt	mi
 8004720:	8830      	ldrhmi	r0, [r6, #0]
 8004722:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 8004726:	f823 0014 	strhmi.w	r0, [r3, r4, lsl #1]
      }

      if(tsOrientation & TS_SWAP_Y)
 800472a:	0750      	lsls	r0, r2, #29
      {
        y[index] = 4096 - brute_y[index];
 800472c:	bf42      	ittt	mi
 800472e:	f8b8 0000 	ldrhmi.w	r0, [r8]
 8004732:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 8004736:	f821 0014 	strhmi.w	r0, [r1, r4, lsl #1]
      }

      if(tsOrientation & TS_SWAP_XY)
 800473a:	0712      	lsls	r2, r2, #28
      {
        y[index] = brute_x[index];
 800473c:	bf42      	ittt	mi
 800473e:	8832      	ldrhmi	r2, [r6, #0]
 8004740:	f821 2014 	strhmi.w	r2, [r1, r4, lsl #1]
        x[index] = brute_y[index];
 8004744:	f8b8 2000 	ldrhmi.w	r2, [r8]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004748:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
      }

      if(tsOrientation & TS_SWAP_XY)
      {
        y[index] = brute_x[index];
        x[index] = brute_y[index];
 800474c:	bf48      	it	mi
 800474e:	f823 2014 	strhmi.w	r2, [r3, r4, lsl #1]
 8004752:	00a2      	lsls	r2, r4, #2
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004754:	f833 e014 	ldrh.w	lr, [r3, r4, lsl #1]
 8004758:	4b2d      	ldr	r3, [pc, #180]	; (8004810 <BSP_TS_GetState+0x164>)
 800475a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800475e:	f852 300c 	ldr.w	r3, [r2, ip]
      {
        y[index] = brute_x[index];
        x[index] = brute_y[index];
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004762:	4586      	cmp	lr, r0
 8004764:	bf8c      	ite	hi
 8004766:	ebc0 000e 	rsbhi	r0, r0, lr
 800476a:	ebce 0000 	rsbls	r0, lr, r0
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800476e:	4299      	cmp	r1, r3
      {
        y[index] = brute_x[index];
        x[index] = brute_y[index];
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004770:	b280      	uxth	r0, r0
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004772:	bf8c      	ite	hi
 8004774:	1acb      	subhi	r3, r1, r3
 8004776:	1a5b      	subls	r3, r3, r1
 8004778:	b29b      	uxth	r3, r3

      if ((x_diff + y_diff) > 5)
 800477a:	4403      	add	r3, r0
      {
        _x[index] = x[index];
        _y[index] = y[index];
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800477c:	f89a 0000 	ldrb.w	r0, [sl]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);

      if ((x_diff + y_diff) > 5)
 8004780:	2b05      	cmp	r3, #5
      {
        _x[index] = x[index];
 8004782:	bfc4      	itt	gt
 8004784:	f84b e002 	strgt.w	lr, [fp, r2]
        _y[index] = y[index];
 8004788:	f84c 1002 	strgt.w	r1, [ip, r2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800478c:	2870      	cmp	r0, #112	; 0x70
 800478e:	d103      	bne.n	8004798 <BSP_TS_GetState+0xec>
      {
        TS_State->touchX[index] = x[index];
 8004790:	f8a7 e002 	strh.w	lr, [r7, #2]
        TS_State->touchY[index] = y[index];
 8004794:	81b9      	strh	r1, [r7, #12]
 8004796:	e00d      	b.n	80047b4 <BSP_TS_GetState+0x108>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8004798:	4b1e      	ldr	r3, [pc, #120]	; (8004814 <BSP_TS_GetState+0x168>)
 800479a:	8819      	ldrh	r1, [r3, #0]
 800479c:	f85b 3002 	ldr.w	r3, [fp, r2]
 80047a0:	434b      	muls	r3, r1
 80047a2:	0b1b      	lsrs	r3, r3, #12
 80047a4:	807b      	strh	r3, [r7, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80047a6:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <BSP_TS_GetState+0x16c>)
 80047a8:	8819      	ldrh	r1, [r3, #0]
 80047aa:	f85c 3002 	ldr.w	r3, [ip, r2]
 80047ae:	434b      	muls	r3, r1
 80047b0:	0b1b      	lsrs	r3, r3, #12
 80047b2:	81bb      	strh	r3, [r7, #12]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80047b4:	ab07      	add	r3, sp, #28
 80047b6:	aa05      	add	r2, sp, #20
 80047b8:	4621      	mov	r1, r4
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	ab06      	add	r3, sp, #24
 80047be:	f000 faa9 	bl	8004d14 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80047c2:	9b05      	ldr	r3, [sp, #20]
 80047c4:	75ab      	strb	r3, [r5, #22]
      TS_State->touchArea[index]   = area;
 80047c6:	9b06      	ldr	r3, [sp, #24]
 80047c8:	f885 3020 	strb.w	r3, [r5, #32]

      /* Remap touch event */
      switch(event)
 80047cc:	9b07      	ldr	r3, [sp, #28]
 80047ce:	2b03      	cmp	r3, #3
 80047d0:	d80b      	bhi.n	80047ea <BSP_TS_GetState+0x13e>
 80047d2:	e8df f003 	tbb	[pc, r3]
 80047d6:	0402      	.short	0x0402
 80047d8:	0806      	.short	0x0806
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80047da:	2301      	movs	r3, #1
 80047dc:	e004      	b.n	80047e8 <BSP_TS_GetState+0x13c>
          break;
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80047de:	2302      	movs	r3, #2
 80047e0:	e002      	b.n	80047e8 <BSP_TS_GetState+0x13c>
          break;
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e000      	b.n	80047e8 <BSP_TS_GetState+0x13c>
          break;
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80047e6:	2300      	movs	r3, #0
 80047e8:	76eb      	strb	r3, [r5, #27]
  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
  
  if(TS_State->touchDetected)
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80047ea:	3401      	adds	r4, #1
 80047ec:	3501      	adds	r5, #1
 80047ee:	3702      	adds	r7, #2
 80047f0:	3602      	adds	r6, #2
 80047f2:	f108 0802 	add.w	r8, r8, #2
 80047f6:	e775      	b.n	80046e4 <BSP_TS_GetState+0x38>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80047f8:	4648      	mov	r0, r9
 80047fa:	f7ff ff29 	bl	8004650 <BSP_TS_Get_GestureId>
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
}
 80047fe:	b015      	add	sp, #84	; 0x54
 8004800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004804:	200083b8 	.word	0x200083b8
 8004808:	200083b2 	.word	0x200083b2
 800480c:	200083b3 	.word	0x200083b3
 8004810:	2000839c 	.word	0x2000839c
 8004814:	200083b0 	.word	0x200083b0
 8004818:	200083b4 	.word	0x200083b4
 800481c:	20008388 	.word	0x20008388

08004820 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004820:	b570      	push	{r4, r5, r6, lr}
 8004822:	b08a      	sub	sp, #40	; 0x28
 8004824:	4606      	mov	r6, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8004826:	f000 fd75 	bl	8005314 <HAL_I2C_GetState>
 800482a:	2800      	cmp	r0, #0
 800482c:	f040 8097 	bne.w	800495e <I2Cx_Init+0x13e>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004830:	4b4c      	ldr	r3, [pc, #304]	; (8004964 <I2Cx_Init+0x144>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 8004832:	2500      	movs	r5, #0
 8004834:	4c4c      	ldr	r4, [pc, #304]	; (8004968 <I2Cx_Init+0x148>)
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004836:	429e      	cmp	r6, r3
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 8004838:	60b5      	str	r5, [r6, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800483a:	6135      	str	r5, [r6, #16]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800483c:	bf0c      	ite	eq
 800483e:	4a4b      	ldreq	r2, [pc, #300]	; (800496c <I2Cx_Init+0x14c>)
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8004840:	4a4b      	ldrne	r2, [pc, #300]	; (8004970 <I2Cx_Init+0x150>)
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004842:	429e      	cmp	r6, r3
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
 8004844:	6175      	str	r5, [r6, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8004846:	6032      	str	r2, [r6, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004848:	4a4a      	ldr	r2, [pc, #296]	; (8004974 <I2Cx_Init+0x154>)
    i2c_handler->Init.OwnAddress1      = 0;
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800484a:	61f5      	str	r5, [r6, #28]
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800484c:	6072      	str	r2, [r6, #4]
    i2c_handler->Init.OwnAddress1      = 0;
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800484e:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004852:	6235      	str	r5, [r6, #32]
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004854:	60f2      	str	r2, [r6, #12]
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004856:	d13e      	bne.n	80048d6 <I2Cx_Init+0xb6>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004858:	9501      	str	r5, [sp, #4]
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800485a:	a905      	add	r1, sp, #20
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800485c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800485e:	4846      	ldr	r0, [pc, #280]	; (8004978 <I2Cx_Init+0x158>)
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004864:	6323      	str	r3, [r4, #48]	; 0x30
 8004866:	6b23      	ldr	r3, [r4, #48]	; 0x30

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004868:	9507      	str	r5, [sp, #28]
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800486a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	9b01      	ldr	r3, [sp, #4]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8004872:	2380      	movs	r3, #128	; 0x80
 8004874:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004876:	2312      	movs	r3, #18
 8004878:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800487a:	2302      	movs	r3, #2
 800487c:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800487e:	2304      	movs	r3, #4
 8004880:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004882:	f7fe fd35 	bl	80032f0 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8004886:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800488a:	a905      	add	r1, sp, #20
 800488c:	483a      	ldr	r0, [pc, #232]	; (8004978 <I2Cx_Init+0x158>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800488e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004890:	f7fe fd2e 	bl	80032f0 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8004894:	9502      	str	r5, [sp, #8]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x05, 0);
 8004896:	462a      	mov	r2, r5
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8004898:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x05, 0);
 800489a:	2105      	movs	r1, #5
 800489c:	2048      	movs	r0, #72	; 0x48
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800489e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048a2:	6423      	str	r3, [r4, #64]	; 0x40
 80048a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048aa:	9302      	str	r3, [sp, #8]
 80048ac:	9b02      	ldr	r3, [sp, #8]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80048ae:	6a23      	ldr	r3, [r4, #32]
 80048b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80048b4:	6223      	str	r3, [r4, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80048b6:	6a23      	ldr	r3, [r4, #32]
 80048b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80048bc:	6223      	str	r3, [r4, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x05, 0);
 80048be:	f7fe fe2f 	bl	8003520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80048c2:	2048      	movs	r0, #72	; 0x48
 80048c4:	f7fe fe64 	bl	8003590 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x05, 0);
 80048c8:	2049      	movs	r0, #73	; 0x49
 80048ca:	462a      	mov	r2, r5
 80048cc:	2105      	movs	r1, #5
 80048ce:	f7fe fe27 	bl	8003520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80048d2:	2049      	movs	r0, #73	; 0x49
 80048d4:	e03e      	b.n	8004954 <I2Cx_Init+0x134>
  {
    /* External, camera and Arduino connector I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80048d6:	9503      	str	r5, [sp, #12]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80048d8:	a905      	add	r1, sp, #20
  {
    /* External, camera and Arduino connector I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80048da:	6b23      	ldr	r3, [r4, #48]	; 0x30
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80048dc:	4827      	ldr	r0, [pc, #156]	; (800497c <I2Cx_Init+0x15c>)
  {
    /* External, camera and Arduino connector I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80048de:	f043 0302 	orr.w	r3, r3, #2
 80048e2:	6323      	str	r3, [r4, #48]	; 0x30
 80048e4:	6b23      	ldr	r3, [r4, #48]	; 0x30

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
    gpio_init_structure.Pull = GPIO_NOPULL;
 80048e6:	9507      	str	r5, [sp, #28]
  {
    /* External, camera and Arduino connector I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	9303      	str	r3, [sp, #12]
 80048ee:	9b03      	ldr	r3, [sp, #12]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80048f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048f4:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80048f6:	2312      	movs	r3, #18
 80048f8:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80048fa:	2302      	movs	r3, #2
 80048fc:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80048fe:	2304      	movs	r3, #4
 8004900:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004902:	f7fe fcf5 	bl	80032f0 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8004906:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800490a:	a905      	add	r1, sp, #20
 800490c:	481b      	ldr	r0, [pc, #108]	; (800497c <I2Cx_Init+0x15c>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800490e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004910:	f7fe fcee 	bl	80032f0 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8004914:	9504      	str	r5, [sp, #16]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x05, 0);
 8004916:	462a      	mov	r2, r5
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8004918:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Release the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x05, 0);
 800491a:	2105      	movs	r1, #5
 800491c:	201f      	movs	r0, #31
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800491e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004922:	6423      	str	r3, [r4, #64]	; 0x40
 8004924:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800492a:	9304      	str	r3, [sp, #16]
 800492c:	9b04      	ldr	r3, [sp, #16]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800492e:	6a23      	ldr	r3, [r4, #32]
 8004930:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004934:	6223      	str	r3, [r4, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004936:	6a23      	ldr	r3, [r4, #32]
 8004938:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800493c:	6223      	str	r3, [r4, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x05, 0);
 800493e:	f7fe fdef 	bl	8003520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8004942:	201f      	movs	r0, #31
 8004944:	f7fe fe24 	bl	8003590 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x05, 0);
 8004948:	2020      	movs	r0, #32
 800494a:	462a      	mov	r2, r5
 800494c:	2105      	movs	r1, #5
 800494e:	f7fe fde7 	bl	8003520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8004952:	2020      	movs	r0, #32
 8004954:	f7fe fe1c 	bl	8003590 <HAL_NVIC_EnableIRQ>
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 8004958:	4630      	mov	r0, r6
 800495a:	f000 fb51 	bl	8005000 <HAL_I2C_Init>
  }
}
 800495e:	b00a      	add	sp, #40	; 0x28
 8004960:	bd70      	pop	{r4, r5, r6, pc}
 8004962:	bf00      	nop
 8004964:	200083bc 	.word	0x200083bc
 8004968:	40023800 	.word	0x40023800
 800496c:	40005c00 	.word	0x40005c00
 8004970:	40005400 	.word	0x40005400
 8004974:	40912732 	.word	0x40912732
 8004978:	40021c00 	.word	0x40021c00
 800497c:	40020400 	.word	0x40020400

08004980 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004980:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004982:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004986:	b085      	sub	sp, #20
 8004988:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800498a:	9402      	str	r4, [sp, #8]
 800498c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8004990:	9401      	str	r4, [sp, #4]
 8004992:	9c08      	ldr	r4, [sp, #32]
 8004994:	9400      	str	r4, [sp, #0]
 8004996:	f000 fc27 	bl	80051e8 <HAL_I2C_Mem_Read>

  /* Check the communication status */
  if(status != HAL_OK)
 800499a:	4604      	mov	r4, r0
 800499c:	b128      	cbz	r0, 80049aa <I2Cx_ReadMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800499e:	4628      	mov	r0, r5
 80049a0:	f000 fb7a 	bl	8005098 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80049a4:	4628      	mov	r0, r5
 80049a6:	f7ff ff3b 	bl	8004820 <I2Cx_Init>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
  }
  return status;    
}
 80049aa:	4620      	mov	r0, r4
 80049ac:	b005      	add	sp, #20
 80049ae:	bd30      	pop	{r4, r5, pc}

080049b0 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80049b0:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80049b2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80049b6:	b085      	sub	sp, #20
 80049b8:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80049ba:	9402      	str	r4, [sp, #8]
 80049bc:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80049c0:	9401      	str	r4, [sp, #4]
 80049c2:	9c08      	ldr	r4, [sp, #32]
 80049c4:	9400      	str	r4, [sp, #0]
 80049c6:	f000 fb7d 	bl	80050c4 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 80049ca:	4604      	mov	r4, r0
 80049cc:	b128      	cbz	r0, 80049da <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80049ce:	4628      	mov	r0, r5
 80049d0:	f000 fb62 	bl	8005098 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80049d4:	4628      	mov	r0, r5
 80049d6:	f7ff ff23 	bl	8004820 <I2Cx_Init>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
  }
  return status;
}
 80049da:	4620      	mov	r0, r4
 80049dc:	b005      	add	sp, #20
 80049de:	bd30      	pop	{r4, r5, pc}

080049e0 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80049e0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)
 80049e2:	4604      	mov	r4, r0
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80049e4:	b087      	sub	sp, #28
  GPIO_InitTypeDef  gpio_init_structure;
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)
 80049e6:	b9d0      	cbnz	r0, 8004a1e <BSP_LED_Init+0x3e>
  {
    gpio_led = LED1_GPIO_PORT;
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 80049e8:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <BSP_LED_Init+0x44>)

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin = GPIO_PIN[Led];
 80049ea:	2502      	movs	r5, #2

  if (Led == LED1)
  {
    gpio_led = LED1_GPIO_PORT;
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 80049ec:	9000      	str	r0, [sp, #0]
    gpio_init_structure.Pin = GPIO_PIN[Led];
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
    gpio_init_structure.Pull = GPIO_PULLUP;
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 80049ee:	a901      	add	r1, sp, #4

  if (Led == LED1)
  {
    gpio_led = LED1_GPIO_PORT;
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 80049f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    gpio_init_structure.Pin = GPIO_PIN[Led];
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
    gpio_init_structure.Pull = GPIO_PULLUP;
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 80049f2:	480d      	ldr	r0, [pc, #52]	; (8004a28 <BSP_LED_Init+0x48>)

  if (Led == LED1)
  {
    gpio_led = LED1_GPIO_PORT;
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 80049f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049f8:	631a      	str	r2, [r3, #48]	; 0x30
 80049fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin = GPIO_PIN[Led];
 80049fc:	9501      	str	r5, [sp, #4]

  if (Led == LED1)
  {
    gpio_led = LED1_GPIO_PORT;
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 80049fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	9b00      	ldr	r3, [sp, #0]

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin = GPIO_PIN[Led];
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8004a06:	2301      	movs	r3, #1
 8004a08:	9302      	str	r3, [sp, #8]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8004a0a:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	9304      	str	r3, [sp, #16]
  
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8004a10:	f7fe fc6e 	bl	80032f0 <HAL_GPIO_Init>
    
    /* By default, turn off LED */
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8004a14:	4622      	mov	r2, r4
 8004a16:	4629      	mov	r1, r5
 8004a18:	4803      	ldr	r0, [pc, #12]	; (8004a28 <BSP_LED_Init+0x48>)
 8004a1a:	f7fe fd59 	bl	80034d0 <HAL_GPIO_WritePin>
  }
}
 8004a1e:	b007      	add	sp, #28
 8004a20:	bd30      	pop	{r4, r5, pc}
 8004a22:	bf00      	nop
 8004a24:	40023800 	.word	0x40023800
 8004a28:	40022000 	.word	0x40022000

08004a2c <BSP_LED_On>:
  */
void BSP_LED_On(Led_TypeDef Led)
{
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Switch On LED connected to GPIO */
 8004a2c:	b920      	cbnz	r0, 8004a38 <BSP_LED_On+0xc>
  {
    gpio_led = LED1_GPIO_PORT;
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_SET);
 8004a2e:	2201      	movs	r2, #1
 8004a30:	2102      	movs	r1, #2
 8004a32:	4802      	ldr	r0, [pc, #8]	; (8004a3c <BSP_LED_On+0x10>)
 8004a34:	f7fe bd4c 	b.w	80034d0 <HAL_GPIO_WritePin>
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40022000 	.word	0x40022000

08004a40 <BSP_LED_Off>:
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1) /* Switch Off LED connected to GPIO */
 8004a40:	4602      	mov	r2, r0
 8004a42:	b918      	cbnz	r0, 8004a4c <BSP_LED_Off+0xc>
  {
    gpio_led = LED1_GPIO_PORT;
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8004a44:	2102      	movs	r1, #2
 8004a46:	4802      	ldr	r0, [pc, #8]	; (8004a50 <BSP_LED_Off+0x10>)
 8004a48:	f7fe bd42 	b.w	80034d0 <HAL_GPIO_WritePin>
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40022000 	.word	0x40022000

08004a54 <TS_IO_Init>:
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
  I2Cx_Init(&hI2cAudioHandler);
 8004a54:	4801      	ldr	r0, [pc, #4]	; (8004a5c <TS_IO_Init+0x8>)
 8004a56:	f7ff bee3 	b.w	8004820 <I2Cx_Init>
 8004a5a:	bf00      	nop
 8004a5c:	200083bc 	.word	0x200083bc

08004a60 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004a62:	ac04      	add	r4, sp, #16
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8004a64:	2301      	movs	r3, #1
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004a66:	f804 2d01 	strb.w	r2, [r4, #-1]!
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8004a6a:	460a      	mov	r2, r1
 8004a6c:	4601      	mov	r1, r0
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	9400      	str	r4, [sp, #0]
 8004a72:	4802      	ldr	r0, [pc, #8]	; (8004a7c <TS_IO_Write+0x1c>)
 8004a74:	f7ff ff9c 	bl	80049b0 <I2Cx_WriteMultiple>
}
 8004a78:	b004      	add	sp, #16
 8004a7a:	bd10      	pop	{r4, pc}
 8004a7c:	200083bc 	.word	0x200083bc

08004a80 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
 8004a82:	2300      	movs	r3, #0
 8004a84:	aa04      	add	r2, sp, #16
 8004a86:	f802 3d01 	strb.w	r3, [r2, #-1]!

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004a90:	460a      	mov	r2, r1
 8004a92:	4601      	mov	r1, r0
 8004a94:	4803      	ldr	r0, [pc, #12]	; (8004aa4 <TS_IO_Read+0x24>)
 8004a96:	f7ff ff73 	bl	8004980 <I2Cx_ReadMultiple>

  return read_value;
}
 8004a9a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8004a9e:	b005      	add	sp, #20
 8004aa0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004aa4:	200083bc 	.word	0x200083bc

08004aa8 <TS_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8004aa8:	f7fb bd68 	b.w	800057c <HAL_Delay>

08004aac <vApplicationIdleHook>:
  * @brief  Application Idle Hook
  * @param  None 
  * @retval None
  */
void vApplicationIdleHook(void) 
{
 8004aac:	b510      	push	{r4, lr}
  if( xIdleHandle == NULL )
 8004aae:	4c03      	ldr	r4, [pc, #12]	; (8004abc <vApplicationIdleHook+0x10>)
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	b913      	cbnz	r3, 8004aba <vApplicationIdleHook+0xe>
  {
    /* Store the handle to the idle task. */
    xIdleHandle = xTaskGetCurrentTaskHandle();
 8004ab4:	f7fc ff36 	bl	8001924 <xTaskGetCurrentTaskHandle>
 8004ab8:	6020      	str	r0, [r4, #0]
 8004aba:	bd10      	pop	{r4, pc}
 8004abc:	200083fc 	.word	0x200083fc

08004ac0 <vApplicationTickHook>:
  */
void vApplicationTickHook (void)
{
  static int tick = 0;
  
  if(tick ++ > CALCULATION_PERIOD)
 8004ac0:	4a0f      	ldr	r2, [pc, #60]	; (8004b00 <vApplicationTickHook+0x40>)
 8004ac2:	6813      	ldr	r3, [r2, #0]
 8004ac4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ac8:	dc01      	bgt.n	8004ace <vApplicationTickHook+0xe>
 8004aca:	3301      	adds	r3, #1
 8004acc:	e015      	b.n	8004afa <vApplicationTickHook+0x3a>
  {
    tick = 0;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	6013      	str	r3, [r2, #0]
    
    if(osCPU_TotalIdleTime > 1000)
 8004ad2:	4a0c      	ldr	r2, [pc, #48]	; (8004b04 <vApplicationTickHook+0x44>)
 8004ad4:	6813      	ldr	r3, [r2, #0]
 8004ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    {
      osCPU_TotalIdleTime = 1000;
 8004ada:	bf84      	itt	hi
 8004adc:	f44f 737a 	movhi.w	r3, #1000	; 0x3e8
 8004ae0:	6013      	strhi	r3, [r2, #0]
    }
    osCPU_Usage = (100 - (osCPU_TotalIdleTime * 100) / CALCULATION_PERIOD);
 8004ae2:	2364      	movs	r3, #100	; 0x64
 8004ae4:	6811      	ldr	r1, [r2, #0]
 8004ae6:	434b      	muls	r3, r1
 8004ae8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004aec:	fbb3 f3f1 	udiv	r3, r3, r1
 8004af0:	4905      	ldr	r1, [pc, #20]	; (8004b08 <vApplicationTickHook+0x48>)
 8004af2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8004af6:	600b      	str	r3, [r1, #0]
    osCPU_TotalIdleTime = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	200083f8 	.word	0x200083f8
 8004b04:	20008404 	.word	0x20008404
 8004b08:	2000840c 	.word	0x2000840c

08004b0c <StartIdleMonitor>:
  * @brief  Start Idle monitor
  * @param  None 
  * @retval None
  */
void StartIdleMonitor (void)
{
 8004b0c:	b508      	push	{r3, lr}
  if( xTaskGetCurrentTaskHandle() == xIdleHandle ) 
 8004b0e:	f7fc ff09 	bl	8001924 <xTaskGetCurrentTaskHandle>
 8004b12:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <StartIdleMonitor+0x18>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4283      	cmp	r3, r0
 8004b18:	d103      	bne.n	8004b22 <StartIdleMonitor+0x16>
  {
    osCPU_IdleStartTime = xTaskGetTickCountFromISR();
 8004b1a:	f7fc fc21 	bl	8001360 <xTaskGetTickCountFromISR>
 8004b1e:	4b02      	ldr	r3, [pc, #8]	; (8004b28 <StartIdleMonitor+0x1c>)
 8004b20:	6018      	str	r0, [r3, #0]
 8004b22:	bd08      	pop	{r3, pc}
 8004b24:	200083fc 	.word	0x200083fc
 8004b28:	20008408 	.word	0x20008408

08004b2c <EndIdleMonitor>:
  * @brief  Stop Idle monitor
  * @param  None 
  * @retval None
  */
void EndIdleMonitor (void)
{
 8004b2c:	b508      	push	{r3, lr}
  if( xTaskGetCurrentTaskHandle() == xIdleHandle )
 8004b2e:	f7fc fef9 	bl	8001924 <xTaskGetCurrentTaskHandle>
 8004b32:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <EndIdleMonitor+0x28>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4283      	cmp	r3, r0
 8004b38:	d10a      	bne.n	8004b50 <EndIdleMonitor+0x24>
  {
    /* Store the handle to the idle task. */
    osCPU_IdleSpentTime = xTaskGetTickCountFromISR() - osCPU_IdleStartTime;
 8004b3a:	f7fc fc11 	bl	8001360 <xTaskGetTickCountFromISR>
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <EndIdleMonitor+0x2c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	1ac0      	subs	r0, r0, r3
 8004b44:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <EndIdleMonitor+0x30>)
 8004b46:	6018      	str	r0, [r3, #0]
    osCPU_TotalIdleTime += osCPU_IdleSpentTime; 
 8004b48:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <EndIdleMonitor+0x34>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	4410      	add	r0, r2
 8004b4e:	6018      	str	r0, [r3, #0]
 8004b50:	bd08      	pop	{r3, pc}
 8004b52:	bf00      	nop
 8004b54:	200083fc 	.word	0x200083fc
 8004b58:	20008408 	.word	0x20008408
 8004b5c:	20008400 	.word	0x20008400
 8004b60:	20008404 	.word	0x20008404

08004b64 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8004b64:	2000      	movs	r0, #0
 8004b66:	4770      	bx	lr

08004b68 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8004b68:	4770      	bx	lr
	...

08004b6c <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8004b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 8004b6e:	2300      	movs	r3, #0
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8004b70:	4c0f      	ldr	r4, [pc, #60]	; (8004bb0 <ft5336_ReadID+0x44>)
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8004b72:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 8004b74:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8004b78:	7823      	ldrb	r3, [r4, #0]
 8004b7a:	b91b      	cbnz	r3, 8004b84 <ft5336_ReadID+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8004b7c:	f7ff ff6a 	bl	8004a54 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8004b80:	2301      	movs	r3, #1
 8004b82:	7023      	strb	r3, [r4, #0]
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8004b84:	2403      	movs	r4, #3

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004b86:	b2ed      	uxtb	r5, r5
 8004b88:	3c01      	subs	r4, #1
 8004b8a:	21a8      	movs	r1, #168	; 0xa8
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	f7ff ff77 	bl	8004a80 <TS_IO_Read>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004b92:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004b96:	f88d 0007 	strb.w	r0, [sp, #7]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8004b9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004b9e:	b2db      	uxtb	r3, r3

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004ba0:	d001      	beq.n	8004ba6 <ft5336_ReadID+0x3a>
 8004ba2:	2b51      	cmp	r3, #81	; 0x51
 8004ba4:	d1f0      	bne.n	8004b88 <ft5336_ReadID+0x1c>
      bFoundDevice = 1;
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8004ba6:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8004baa:	b003      	add	sp, #12
 8004bac:	bd30      	pop	{r4, r5, pc}
 8004bae:	bf00      	nop
 8004bb0:	20008412 	.word	0x20008412

08004bb4 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8004bb4:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8004bb6:	2400      	movs	r4, #0

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8004bb8:	2102      	movs	r1, #2
 8004bba:	b2c0      	uxtb	r0, r0
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
  volatile uint8_t nbTouch = 0;
 8004bbc:	f88d 4007 	strb.w	r4, [sp, #7]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8004bc0:	f7ff ff5e 	bl	8004a80 <TS_IO_Read>
 8004bc4:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8004bc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	f88d 3007 	strb.w	r3, [sp, #7]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8004bd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004bd8:	2b05      	cmp	r3, #5
 8004bda:	d901      	bls.n	8004be0 <ft5336_TS_DetectTouch+0x2c>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8004bdc:	f88d 4007 	strb.w	r4, [sp, #7]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8004be0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004be4:	4b03      	ldr	r3, [pc, #12]	; (8004bf4 <ft5336_TS_DetectTouch+0x40>)

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;

  return(nbTouch);
 8004be6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8004bea:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8004bec:	2200      	movs	r2, #0
 8004bee:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
}
 8004bf0:	b002      	add	sp, #8
 8004bf2:	bd10      	pop	{r4, pc}
 8004bf4:	20008412 	.word	0x20008412

08004bf8 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8004bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t regAddressXLow = 0;
  uint8_t regAddressXHigh = 0;
  uint8_t regAddressYLow = 0;
  uint8_t regAddressYHigh = 0;

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004bfc:	4d29      	ldr	r5, [pc, #164]	; (8004ca4 <ft5336_TS_GetXY+0xac>)
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8004bfe:	4690      	mov	r8, r2
  volatile uint8_t ucReadData = 0;
 8004c00:	2400      	movs	r4, #0
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8004c02:	4689      	mov	r9, r1
  uint8_t regAddressXLow = 0;
  uint8_t regAddressXHigh = 0;
  uint8_t regAddressYLow = 0;
  uint8_t regAddressYHigh = 0;

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004c04:	78ab      	ldrb	r3, [r5, #2]
 8004c06:	786a      	ldrb	r2, [r5, #1]
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
  volatile uint8_t ucReadData = 0;
 8004c08:	f88d 4007 	strb.w	r4, [sp, #7]
  uint8_t regAddressXLow = 0;
  uint8_t regAddressXHigh = 0;
  uint8_t regAddressYLow = 0;
  uint8_t regAddressYHigh = 0;

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d945      	bls.n	8004c9c <ft5336_TS_GetXY+0xa4>
 8004c10:	2b09      	cmp	r3, #9
 8004c12:	d80a      	bhi.n	8004c2a <ft5336_TS_GetXY+0x32>
 8004c14:	4a24      	ldr	r2, [pc, #144]	; (8004ca8 <ft5336_TS_GetXY+0xb0>)
 8004c16:	5cd1      	ldrb	r1, [r2, r3]
 8004c18:	4a24      	ldr	r2, [pc, #144]	; (8004cac <ft5336_TS_GetXY+0xb4>)
 8004c1a:	f812 b003 	ldrb.w	fp, [r2, r3]
 8004c1e:	4a24      	ldr	r2, [pc, #144]	; (8004cb0 <ft5336_TS_GetXY+0xb8>)
 8004c20:	f812 a003 	ldrb.w	sl, [r2, r3]
 8004c24:	4a23      	ldr	r2, [pc, #140]	; (8004cb4 <ft5336_TS_GetXY+0xbc>)
 8004c26:	5cd4      	ldrb	r4, [r2, r3]
 8004c28:	e002      	b.n	8004c30 <ft5336_TS_GetXY+0x38>
 8004c2a:	46a2      	mov	sl, r4
 8004c2c:	46a3      	mov	fp, r4
 8004c2e:	4621      	mov	r1, r4
      break;

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004c30:	b2c7      	uxtb	r7, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004c32:	4e21      	ldr	r6, [pc, #132]	; (8004cb8 <ft5336_TS_GetXY+0xc0>)
      break;

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004c34:	4638      	mov	r0, r7
 8004c36:	f7ff ff23 	bl	8004a80 <TS_IO_Read>
 8004c3a:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004c3e:	f89d 3007 	ldrb.w	r3, [sp, #7]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004c42:	4659      	mov	r1, fp
 8004c44:	4638      	mov	r0, r7

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004c46:	8033      	strh	r3, [r6, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004c48:	f7ff ff1a 	bl	8004a80 <TS_IO_Read>
 8004c4c:	f88d 0007 	strb.w	r0, [sp, #7]

    /* Send back ready X position to caller */
    *X = coord;

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004c50:	4651      	mov	r1, sl
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004c52:	f89d 3007 	ldrb.w	r3, [sp, #7]

    /* Send back ready X position to caller */
    *X = coord;

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004c56:	4638      	mov	r0, r7
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004c58:	f003 020f 	and.w	r2, r3, #15
 8004c5c:	8833      	ldrh	r3, [r6, #0]
 8004c5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

    /* Send back ready X position to caller */
    *X = coord;
 8004c62:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004c66:	8033      	strh	r3, [r6, #0]

    /* Send back ready X position to caller */
    *X = coord;

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004c68:	f7ff ff0a 	bl	8004a80 <TS_IO_Read>
 8004c6c:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004c70:	4621      	mov	r1, r4
    /* Send back ready X position to caller */
    *X = coord;

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004c72:	f89d 3007 	ldrb.w	r3, [sp, #7]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004c76:	4638      	mov	r0, r7
    /* Send back ready X position to caller */
    *X = coord;

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004c78:	8033      	strh	r3, [r6, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004c7a:	f7ff ff01 	bl	8004a80 <TS_IO_Read>
 8004c7e:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004c82:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004c86:	f003 020f 	and.w	r2, r3, #15
 8004c8a:	8833      	ldrh	r3, [r6, #0]
 8004c8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c90:	8033      	strh	r3, [r6, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8004c92:	f8a8 3000 	strh.w	r3, [r8]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8004c96:	78ab      	ldrb	r3, [r5, #2]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	70ab      	strb	r3, [r5, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8004c9c:	b003      	add	sp, #12
 8004c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20008412 	.word	0x20008412
 8004ca8:	08064a5e 	.word	0x08064a5e
 8004cac:	08064a68 	.word	0x08064a68
 8004cb0:	08064a72 	.word	0x08064a72
 8004cb4:	08064a7c 	.word	0x08064a7c
 8004cb8:	20008410 	.word	0x20008410

08004cbc <ft5336_TS_EnableIT>:
{
   uint8_t regValue = 0;
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	21a4      	movs	r1, #164	; 0xa4
 8004cc0:	b2c0      	uxtb	r0, r0
 8004cc2:	f7ff becd 	b.w	8004a60 <TS_IO_Write>

08004cc6 <ft5336_TS_DisableIT>:
{
  uint8_t regValue = 0;
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	21a4      	movs	r1, #164	; 0xa4
 8004cca:	b2c0      	uxtb	r0, r0
 8004ccc:	f7ff bec8 	b.w	8004a60 <TS_IO_Write>

08004cd0 <ft5336_TS_Start>:
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8004cd0:	f7ff bff9 	b.w	8004cc6 <ft5336_TS_DisableIT>

08004cd4 <ft5336_Reset>:
 8004cd4:	4770      	bx	lr
	...

08004cd8 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8004cd8:	b510      	push	{r4, lr}
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8004cda:	4c05      	ldr	r4, [pc, #20]	; (8004cf0 <ft5336_Init+0x18>)
  */
void ft5336_Init(uint16_t DeviceAddr)
{
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8004cdc:	20c8      	movs	r0, #200	; 0xc8
 8004cde:	f7ff fee3 	bl	8004aa8 <TS_IO_Delay>
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8004ce2:	7823      	ldrb	r3, [r4, #0]
 8004ce4:	b91b      	cbnz	r3, 8004cee <ft5336_Init+0x16>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8004ce6:	f7ff feb5 	bl	8004a54 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8004cea:	2301      	movs	r3, #1
 8004cec:	7023      	strb	r3, [r4, #0]
 8004cee:	bd10      	pop	{r4, pc}
 8004cf0:	20008412 	.word	0x20008412

08004cf4 <ft5336_TS_GetGestureID>:
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
  volatile uint8_t ucReadData = 0;
 8004cf4:	2300      	movs	r3, #0
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8004cf6:	b513      	push	{r0, r1, r4, lr}
 8004cf8:	460c      	mov	r4, r1
  volatile uint8_t ucReadData = 0;

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8004cfa:	b2c0      	uxtb	r0, r0
 8004cfc:	2101      	movs	r1, #1
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
  volatile uint8_t ucReadData = 0;
 8004cfe:	f88d 3007 	strb.w	r3, [sp, #7]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8004d02:	f7ff febd 	bl	8004a80 <TS_IO_Read>
 8004d06:	f88d 0007 	strb.w	r0, [sp, #7]

  * pGestureId = ucReadData;
 8004d0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004d0e:	6023      	str	r3, [r4, #0]
}
 8004d10:	b002      	add	sp, #8
 8004d12:	bd10      	pop	{r4, pc}

08004d14 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8004d14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004d18:	461f      	mov	r7, r3
  volatile uint8_t ucReadData = 0;
  uint8_t regAddressXHigh = 0;
  uint8_t regAddressPWeight = 0;
  uint8_t regAddressPMisc = 0;

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8004d1a:	4b1c      	ldr	r3, [pc, #112]	; (8004d8c <ft5336_TS_GetTouchInfo+0x78>)
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
  volatile uint8_t ucReadData = 0;
 8004d1c:	2400      	movs	r4, #0
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8004d1e:	4690      	mov	r8, r2
  volatile uint8_t ucReadData = 0;
  uint8_t regAddressXHigh = 0;
  uint8_t regAddressPWeight = 0;
  uint8_t regAddressPMisc = 0;

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8004d20:	785b      	ldrb	r3, [r3, #1]
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
  volatile uint8_t ucReadData = 0;
 8004d22:	f88d 4007 	strb.w	r4, [sp, #7]
  uint8_t regAddressXHigh = 0;
  uint8_t regAddressPWeight = 0;
  uint8_t regAddressPMisc = 0;

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8004d26:	428b      	cmp	r3, r1
 8004d28:	d92d      	bls.n	8004d86 <ft5336_TS_GetTouchInfo+0x72>
 8004d2a:	2909      	cmp	r1, #9
      break;

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004d2c:	b2c5      	uxtb	r5, r0
 8004d2e:	bf96      	itet	ls
 8004d30:	4a17      	ldrls	r2, [pc, #92]	; (8004d90 <ft5336_TS_GetTouchInfo+0x7c>)
  volatile uint8_t ucReadData = 0;
  uint8_t regAddressXHigh = 0;
  uint8_t regAddressPWeight = 0;
  uint8_t regAddressPMisc = 0;

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8004d32:	4623      	movhi	r3, r4
 8004d34:	4b17      	ldrls	r3, [pc, #92]	; (8004d94 <ft5336_TS_GetTouchInfo+0x80>)
      break;

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004d36:	4628      	mov	r0, r5
 8004d38:	bf97      	itett	ls
 8004d3a:	5c56      	ldrbls	r6, [r2, r1]
  volatile uint8_t ucReadData = 0;
  uint8_t regAddressXHigh = 0;
  uint8_t regAddressPWeight = 0;
  uint8_t regAddressPMisc = 0;

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8004d3c:	4626      	movhi	r6, r4
 8004d3e:	5c5b      	ldrbls	r3, [r3, r1]
 8004d40:	4a15      	ldrls	r2, [pc, #84]	; (8004d98 <ft5336_TS_GetTouchInfo+0x84>)
 8004d42:	bf98      	it	ls
 8004d44:	5c54      	ldrbls	r4, [r2, r1]
      break;

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004d46:	4619      	mov	r1, r3
 8004d48:	f7ff fe9a 	bl	8004a80 <TS_IO_Read>
 8004d4c:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8004d50:	f89d 1007 	ldrb.w	r1, [sp, #7]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8004d54:	4628      	mov	r0, r5

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8004d56:	9b08      	ldr	r3, [sp, #32]
 8004d58:	0989      	lsrs	r1, r1, #6
 8004d5a:	6019      	str	r1, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8004d5c:	4631      	mov	r1, r6
 8004d5e:	f7ff fe8f 	bl	8004a80 <TS_IO_Read>
 8004d62:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8004d66:	f89d 3007 	ldrb.w	r3, [sp, #7]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	4628      	mov	r0, r5
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8004d6e:	f8c8 3000 	str.w	r3, [r8]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8004d72:	f7ff fe85 	bl	8004a80 <TS_IO_Read>
 8004d76:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8004d7a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004d7e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004d82:	0912      	lsrs	r2, r2, #4
 8004d84:	603a      	str	r2, [r7, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8004d86:	b002      	add	sp, #8
 8004d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d8c:	20008412 	.word	0x20008412
 8004d90:	08064a90 	.word	0x08064a90
 8004d94:	08064a86 	.word	0x08064a86
 8004d98:	08064a9a 	.word	0x08064a9a

08004d9c <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004d9c:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
  
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8004d9e:	6805      	ldr	r5, [r0, #0]
 8004da0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004da4:	4c05      	ldr	r4, [pc, #20]	; (8004dbc <I2C_TransferConfig+0x20>)
 8004da6:	6868      	ldr	r0, [r5, #4]
 8004da8:	4004      	ands	r4, r0
 8004daa:	9803      	ldr	r0, [sp, #12]
 8004dac:	4320      	orrs	r0, r4
 8004dae:	4303      	orrs	r3, r0
 8004db0:	430b      	orrs	r3, r1
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8004db2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 8004db6:	606a      	str	r2, [r5, #4]
 8004db8:	bd30      	pop	{r4, r5, pc}
 8004dba:	bf00      	nop
 8004dbc:	fc009800 	.word	0xfc009800

08004dc0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{
 8004dc0:	b570      	push	{r4, r5, r6, lr}
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	460d      	mov	r5, r1
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8004dc6:	f7fe fa8d 	bl	80032e4 <HAL_GetTick>
 8004dca:	4606      	mov	r6, r0
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	6998      	ldr	r0, [r3, #24]
 8004dd0:	f010 0010 	ands.w	r0, r0, #16
 8004dd4:	d10b      	bne.n	8004dee <I2C_IsAcknowledgeFailed+0x2e>
 8004dd6:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	0691      	lsls	r1, r2, #26
 8004ddc:	d411      	bmi.n	8004e02 <I2C_IsAcknowledgeFailed+0x42>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004dde:	1c68      	adds	r0, r5, #1
 8004de0:	d0fa      	beq.n	8004dd8 <I2C_IsAcknowledgeFailed+0x18>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004de2:	b135      	cbz	r5, 8004df2 <I2C_IsAcknowledgeFailed+0x32>
 8004de4:	f7fe fa7e 	bl	80032e4 <HAL_GetTick>
 8004de8:	1b80      	subs	r0, r0, r6
 8004dea:	4285      	cmp	r5, r0
 8004dec:	d301      	bcc.n	8004df2 <I2C_IsAcknowledgeFailed+0x32>
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	e7f2      	b.n	8004dd8 <I2C_IsAcknowledgeFailed+0x18>
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8004df2:	2301      	movs	r3, #1
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
          return HAL_TIMEOUT;
 8004df4:	2003      	movs	r0, #3
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8004df6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8004e00:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
    }
    
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e02:	2210      	movs	r2, #16
 8004e04:	61da      	str	r2, [r3, #28]
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e06:	2220      	movs	r2, #32
 8004e08:	61da      	str	r2, [r3, #28]
    
    /* Flush TX register if not empty */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e0a:	699a      	ldr	r2, [r3, #24]
 8004e0c:	07d2      	lsls	r2, r2, #31
 8004e0e:	d401      	bmi.n	8004e14 <I2C_IsAcknowledgeFailed+0x54>
    {
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e10:	2201      	movs	r2, #1
 8004e12:	61da      	str	r2, [r3, #28]
    }
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e14:	6859      	ldr	r1, [r3, #4]
    
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
 8004e16:	2001      	movs	r0, #1
    {
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
    }
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e18:	4a05      	ldr	r2, [pc, #20]	; (8004e30 <I2C_IsAcknowledgeFailed+0x70>)
 8004e1a:	400a      	ands	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
    
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004e1e:	2304      	movs	r3, #4
 8004e20:	63a3      	str	r3, [r4, #56]	; 0x38
    hi2c->State= HAL_I2C_STATE_READY;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e22:	2300      	movs	r3, #0
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
    
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
 8004e24:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e28:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
  }
  return HAL_OK;
}
 8004e2c:	bd70      	pop	{r4, r5, r6, pc}
 8004e2e:	bf00      	nop
 8004e30:	fe00e800 	.word	0xfe00e800

08004e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{  
 8004e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e38:	4690      	mov	r8, r2
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	460e      	mov	r6, r1
 8004e3e:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8004e40:	f7fe fa50 	bl	80032e4 <HAL_GetTick>
 8004e44:	4607      	mov	r7, r0
  
  /* Wait until flag is set */
  if(Status == RESET)
 8004e46:	f1b8 0f00 	cmp.w	r8, #0
 8004e4a:	d129      	bne.n	8004ea0 <I2C_WaitOnFlagUntilTimeout+0x6c>
  {    
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e4c:	6822      	ldr	r2, [r4, #0]
 8004e4e:	6993      	ldr	r3, [r2, #24]
 8004e50:	43db      	mvns	r3, r3
 8004e52:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004e56:	4233      	tst	r3, r6
 8004e58:	d010      	beq.n	8004e7c <I2C_WaitOnFlagUntilTimeout+0x48>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004e5a:	1c69      	adds	r1, r5, #1
 8004e5c:	d0f7      	beq.n	8004e4e <I2C_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004e5e:	b18d      	cbz	r5, 8004e84 <I2C_WaitOnFlagUntilTimeout+0x50>
 8004e60:	f7fe fa40 	bl	80032e4 <HAL_GetTick>
 8004e64:	1bc0      	subs	r0, r0, r7
 8004e66:	4285      	cmp	r5, r0
 8004e68:	d2f0      	bcs.n	8004e4c <I2C_WaitOnFlagUntilTimeout+0x18>
 8004e6a:	e00b      	b.n	8004e84 <I2C_WaitOnFlagUntilTimeout+0x50>
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004e6c:	1c6b      	adds	r3, r5, #1
 8004e6e:	d108      	bne.n	8004e82 <I2C_WaitOnFlagUntilTimeout+0x4e>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8004e70:	6993      	ldr	r3, [r2, #24]
 8004e72:	43db      	mvns	r3, r3
 8004e74:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8004e78:	4233      	tst	r3, r6
 8004e7a:	d0f7      	beq.n	8004e6c <I2C_WaitOnFlagUntilTimeout+0x38>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004e82:	b945      	cbnz	r5, 8004e96 <I2C_WaitOnFlagUntilTimeout+0x62>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8004e84:	2301      	movs	r3, #1
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
          return HAL_TIMEOUT;
 8004e86:	2003      	movs	r0, #3
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8004e88:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8004e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004e96:	f7fe fa25 	bl	80032e4 <HAL_GetTick>
 8004e9a:	1bc0      	subs	r0, r0, r7
 8004e9c:	4285      	cmp	r5, r0
 8004e9e:	d3f1      	bcc.n	8004e84 <I2C_WaitOnFlagUntilTimeout+0x50>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8004ea0:	6822      	ldr	r2, [r4, #0]
 8004ea2:	e7e5      	b.n	8004e70 <I2C_WaitOnFlagUntilTimeout+0x3c>

08004ea4 <I2C_WaitOnTXISFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)  
{  
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8004eaa:	f7fe fa1b 	bl	80032e4 <HAL_GetTick>
 8004eae:	4606      	mov	r6, r0
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	079b      	lsls	r3, r3, #30
 8004eb6:	d419      	bmi.n	8004eec <I2C_WaitOnTXISFlagUntilTimeout+0x48>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8004eb8:	4629      	mov	r1, r5
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f7ff ff80 	bl	8004dc0 <I2C_IsAcknowledgeFailed>
 8004ec0:	b9b0      	cbnz	r0, 8004ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    {
      return HAL_ERROR;
    }
    
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004ec2:	1c6a      	adds	r2, r5, #1
 8004ec4:	d0f4      	beq.n	8004eb0 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004ec6:	b95d      	cbnz	r5, 8004ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
    }
    
    /* Check for the Timeout */
    if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ec8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
      
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eca:	2003      	movs	r0, #3
    }
    
    /* Check for the Timeout */
    if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ecc:	f043 0320 	orr.w	r3, r3, #32
 8004ed0:	63a3      	str	r3, [r4, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8004ede:	bd70      	pop	{r4, r5, r6, pc}
    }
    
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004ee0:	f7fe fa00 	bl	80032e4 <HAL_GetTick>
 8004ee4:	1b80      	subs	r0, r0, r6
 8004ee6:	4285      	cmp	r5, r0
 8004ee8:	d2e2      	bcs.n	8004eb0 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
 8004eea:	e7ed      	b.n	8004ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x24>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
 8004eec:	2000      	movs	r0, #0
 8004eee:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
    {
      return HAL_ERROR;
 8004ef0:	2001      	movs	r0, #1
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
}
 8004ef2:	bd70      	pop	{r4, r5, r6, pc}

08004ef4 <I2C_RequestMemoryWrite>:
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8004ef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ef6:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004ef8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8004efc:	4604      	mov	r4, r0
 8004efe:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	b2f2      	uxtb	r2, r6
 8004f04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f08:	f7ff ff48 	bl	8004d9c <I2C_TransferConfig>
  
  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8004f0c:	9906      	ldr	r1, [sp, #24]
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f7ff ffc8 	bl	8004ea4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f14:	b120      	cbz	r0, 8004f20 <I2C_RequestMemoryWrite+0x2c>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d10d      	bne.n	8004f38 <I2C_RequestMemoryWrite+0x44>
    {
      return HAL_ERROR;
 8004f1c:	2001      	movs	r0, #1
 8004f1e:	e017      	b.n	8004f50 <I2C_RequestMemoryWrite+0x5c>
      return HAL_TIMEOUT;
    }
  }
  
  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f20:	2e01      	cmp	r6, #1
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	d10a      	bne.n	8004f3c <I2C_RequestMemoryWrite+0x48>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8004f26:	b2ed      	uxtb	r5, r5
  }
  
  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2180      	movs	r1, #128	; 0x80
 8004f2c:	4620      	mov	r0, r4
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8004f2e:	629d      	str	r5, [r3, #40]	; 0x28
  }
  
  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8004f30:	9b06      	ldr	r3, [sp, #24]
 8004f32:	f7ff ff7f 	bl	8004e34 <I2C_WaitOnFlagUntilTimeout>
 8004f36:	b158      	cbz	r0, 8004f50 <I2C_RequestMemoryWrite+0x5c>
    {
      return HAL_ERROR;
    }
    else
    {
      return HAL_TIMEOUT;
 8004f38:	2003      	movs	r0, #3
 8004f3a:	e009      	b.n	8004f50 <I2C_RequestMemoryWrite+0x5c>
  }      
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 8004f3c:	0a2a      	lsrs	r2, r5, #8
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8004f3e:	9906      	ldr	r1, [sp, #24]
 8004f40:	4620      	mov	r0, r4
  }      
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8004f44:	f7ff ffae 	bl	8004ea4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d1e4      	bne.n	8004f16 <I2C_RequestMemoryWrite+0x22>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	e7ea      	b.n	8004f26 <I2C_RequestMemoryWrite+0x32>
  {
    return HAL_TIMEOUT;
  }
  
  return HAL_OK;
}
 8004f50:	b002      	add	sp, #8
 8004f52:	bd70      	pop	{r4, r5, r6, pc}

08004f54 <I2C_RequestMemoryRead>:
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 8004f54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f56:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	b2f2      	uxtb	r2, r6
 8004f64:	2300      	movs	r3, #0
 8004f66:	f7ff ff19 	bl	8004d9c <I2C_TransferConfig>
  
  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8004f6a:	9906      	ldr	r1, [sp, #24]
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	f7ff ff99 	bl	8004ea4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f72:	b120      	cbz	r0, 8004f7e <I2C_RequestMemoryRead+0x2a>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d10d      	bne.n	8004f96 <I2C_RequestMemoryRead+0x42>
    {
      return HAL_ERROR;
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	e017      	b.n	8004fae <I2C_RequestMemoryRead+0x5a>
      return HAL_TIMEOUT;
    }
  }
  
  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f7e:	2e01      	cmp	r6, #1
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	d10a      	bne.n	8004f9a <I2C_RequestMemoryRead+0x46>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8004f84:	b2ed      	uxtb	r5, r5
  }
  
  /* Wait until TC flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 8004f86:	2200      	movs	r2, #0
 8004f88:	2140      	movs	r1, #64	; 0x40
 8004f8a:	4620      	mov	r0, r4
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8004f8c:	629d      	str	r5, [r3, #40]	; 0x28
  }
  
  /* Wait until TC flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 8004f8e:	9b06      	ldr	r3, [sp, #24]
 8004f90:	f7ff ff50 	bl	8004e34 <I2C_WaitOnFlagUntilTimeout>
 8004f94:	b158      	cbz	r0, 8004fae <I2C_RequestMemoryRead+0x5a>
    {
      return HAL_ERROR;
    }
    else
    {
      return HAL_TIMEOUT;
 8004f96:	2003      	movs	r0, #3
 8004f98:	e009      	b.n	8004fae <I2C_RequestMemoryRead+0x5a>
  }      
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 8004f9a:	0a2a      	lsrs	r2, r5, #8
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8004f9c:	9906      	ldr	r1, [sp, #24]
 8004f9e:	4620      	mov	r0, r4
  }      
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 8004fa0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8004fa2:	f7ff ff7f 	bl	8004ea4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	d1e4      	bne.n	8004f74 <I2C_RequestMemoryRead+0x20>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	e7ea      	b.n	8004f84 <I2C_RequestMemoryRead+0x30>
  {
    return HAL_TIMEOUT;
  }
  
  return HAL_OK;
}
 8004fae:	b002      	add	sp, #8
 8004fb0:	bd70      	pop	{r4, r5, r6, pc}

08004fb2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{  
 8004fb2:	b570      	push	{r4, r5, r6, lr}
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	460d      	mov	r5, r1
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8004fb8:	f7fe f994 	bl	80032e4 <HAL_GetTick>
 8004fbc:	4606      	mov	r6, r0
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	069b      	lsls	r3, r3, #26
 8004fc4:	d417      	bmi.n	8004ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f7ff fef9 	bl	8004dc0 <I2C_IsAcknowledgeFailed>
 8004fce:	b9a0      	cbnz	r0, 8004ffa <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    {
      return HAL_ERROR;
    }
    
    /* Check for the Timeout */
    if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004fd0:	b95d      	cbnz	r5, 8004fea <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
    }
    
    /* Check for the Timeout */
    if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
      
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fd4:	2003      	movs	r0, #3
    }
    
    /* Check for the Timeout */
    if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fd6:	f043 0320 	orr.w	r3, r3, #32
 8004fda:	63a3      	str	r3, [r4, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8004fe8:	bd70      	pop	{r4, r5, r6, pc}
    {
      return HAL_ERROR;
    }
    
    /* Check for the Timeout */
    if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004fea:	f7fe f97b 	bl	80032e4 <HAL_GetTick>
 8004fee:	1b80      	subs	r0, r0, r6
 8004ff0:	4285      	cmp	r5, r0
 8004ff2:	d2e4      	bcs.n	8004fbe <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 8004ff4:	e7ed      	b.n	8004fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
      __HAL_UNLOCK(hi2c);
      
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
    {
      return HAL_ERROR;
 8004ffa:	2001      	movs	r0, #1
      
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8004ffc:	bd70      	pop	{r4, r5, r6, pc}

08004ffe <HAL_I2C_MspInit>:
 8004ffe:	4770      	bx	lr

08005000 <HAL_I2C_Init>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
 8005000:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8005002:	4604      	mov	r4, r0
 8005004:	2800      	cmp	r0, #0
 8005006:	d044      	beq.n	8005092 <HAL_I2C_Init+0x92>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8005008:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800500c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005010:	b91b      	cbnz	r3, 800501a <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005012:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005016:	f7ff fff2 	bl	8004ffe <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800501a:	2302      	movs	r3, #2
 800501c:	68e1      	ldr	r1, [r4, #12]
 800501e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800502c:	6862      	ldr	r2, [r4, #4]
 800502e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005032:	611a      	str	r2, [r3, #16]
  
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800503a:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 800503c:	68a2      	ldr	r2, [r4, #8]
 800503e:	b142      	cbz	r2, 8005052 <HAL_I2C_Init+0x52>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005040:	2901      	cmp	r1, #1
 8005042:	d103      	bne.n	800504c <HAL_I2C_Init+0x4c>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005044:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005048:	609a      	str	r2, [r3, #8]
 800504a:	e007      	b.n	800505c <HAL_I2C_Init+0x5c>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800504c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005050:	609a      	str	r2, [r3, #8]
    }
  }
  
  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005052:	2902      	cmp	r1, #2
 8005054:	d102      	bne.n	800505c <HAL_I2C_Init+0x5c>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005056:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800505a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800505c:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800505e:	2000      	movs	r0, #0
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005060:	6921      	ldr	r1, [r4, #16]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005062:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800506a:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800506c:	6962      	ldr	r2, [r4, #20]
 800506e:	430a      	orrs	r2, r1
 8005070:	69a1      	ldr	r1, [r4, #24]
 8005072:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005076:	69e1      	ldr	r1, [r4, #28]
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005078:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800507a:	6a22      	ldr	r2, [r4, #32]
 800507c:	430a      	orrs	r2, r1
 800507e:	601a      	str	r2, [r3, #0]
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
 8005088:	2301      	movs	r3, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800508a:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 800508c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  return HAL_OK;
 8005090:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8005092:	2001      	movs	r0, #1
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  
  return HAL_OK;
}
 8005094:	bd10      	pop	{r4, pc}

08005096 <HAL_I2C_MspDeInit>:
 8005096:	4770      	bx	lr

08005098 <HAL_I2C_DeInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005098:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800509a:	4604      	mov	r4, r0
 800509c:	b180      	cbz	r0, 80050c0 <HAL_I2C_DeInit+0x28>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  
  hi2c->State = HAL_I2C_STATE_BUSY;
  
  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800509e:	6802      	ldr	r2, [r0, #0]
  }
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  
  hi2c->State = HAL_I2C_STATE_BUSY;
 80050a0:	2302      	movs	r3, #2
 80050a2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  
  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80050a6:	6813      	ldr	r3, [r2, #0]
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	6013      	str	r3, [r2, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80050ae:	f7ff fff2 	bl	8005096 <HAL_I2C_MspDeInit>
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b2:	2000      	movs	r0, #0
 80050b4:	63a0      	str	r0, [r4, #56]	; 0x38

  hi2c->State = HAL_I2C_STATE_RESET;
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80050b6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

  hi2c->State = HAL_I2C_STATE_RESET;
 80050ba:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
 80050be:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 80050c0:	2001      	movs	r0, #1
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
}
 80050c2:	bd10      	pop	{r4, pc}

080050c4 <HAL_I2C_Mem_Write>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t Sizetmp = 0;
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80050c8:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050cc:	4604      	mov	r4, r0
 80050ce:	4689      	mov	r9, r1
 80050d0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  uint32_t Sizetmp = 0;
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80050d4:	b2ed      	uxtb	r5, r5
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d6:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 80050da:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  uint32_t Sizetmp = 0;
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80050de:	2d01      	cmp	r5, #1
 80050e0:	d17b      	bne.n	80051da <HAL_I2C_Mem_Write+0x116>
  { 
    if((pData == NULL) || (Size == 0)) 
 80050e2:	f1b8 0f00 	cmp.w	r8, #0
 80050e6:	d101      	bne.n	80050ec <HAL_I2C_Mem_Write+0x28>
    {
      return  HAL_ERROR;                                    
 80050e8:	2001      	movs	r0, #1
 80050ea:	e077      	b.n	80051dc <HAL_I2C_Mem_Write+0x118>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  { 
    if((pData == NULL) || (Size == 0)) 
 80050ec:	2e00      	cmp	r6, #0
 80050ee:	d0fb      	beq.n	80050e8 <HAL_I2C_Mem_Write+0x24>
    {
      return  HAL_ERROR;                                    
    }
    
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80050f0:	6807      	ldr	r7, [r0, #0]
 80050f2:	69bf      	ldr	r7, [r7, #24]
 80050f4:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
 80050f8:	d16f      	bne.n	80051da <HAL_I2C_Mem_Write+0x116>
    {
      return HAL_BUSY;
    }
    
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050fa:	f890 e034 	ldrb.w	lr, [r0, #52]	; 0x34
 80050fe:	f1be 0f01 	cmp.w	lr, #1
 8005102:	d06a      	beq.n	80051da <HAL_I2C_Mem_Write+0x116>
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 8005104:	f04f 0e52 	mov.w	lr, #82	; 0x52
    {
      return HAL_BUSY;
    }
    
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005108:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 800510c:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005110:	6387      	str	r7, [r0, #56]	; 0x38
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8005112:	f8cd a000 	str.w	sl, [sp]
 8005116:	f7ff feed 	bl	8004ef4 <I2C_RequestMemoryWrite>
 800511a:	b118      	cbz	r0, 8005124 <HAL_I2C_Mem_Write+0x60>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800511c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800511e:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 8005122:	e040      	b.n	80051a6 <HAL_I2C_Mem_Write+0xe2>
      }
    }
    
    /* Set NBYTES to write and reload if size > 255 */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
 8005124:	2eff      	cmp	r6, #255	; 0xff
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005126:	9000      	str	r0, [sp, #0]
      }
    }
    
    /* Set NBYTES to write and reload if size > 255 */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
 8005128:	d90a      	bls.n	8005140 <HAL_I2C_Mem_Write+0x7c>
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      Sizetmp = 255;
 800512a:	25ff      	movs	r5, #255	; 0xff
    
    /* Set NBYTES to write and reload if size > 255 */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800512c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005130:	22ff      	movs	r2, #255	; 0xff
 8005132:	4649      	mov	r1, r9
 8005134:	4620      	mov	r0, r4
 8005136:	f7ff fe31 	bl	8004d9c <I2C_TransferConfig>
 800513a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800513e:	e023      	b.n	8005188 <HAL_I2C_Mem_Write+0xc4>
      Sizetmp = 255;
    }
    else
    {
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005140:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005144:	b2f2      	uxtb	r2, r6
 8005146:	4649      	mov	r1, r9
 8005148:	4620      	mov	r0, r4
 800514a:	f7ff fe27 	bl	8004d9c <I2C_TransferConfig>
      Sizetmp = Size;
 800514e:	4635      	mov	r5, r6
 8005150:	e7f3      	b.n	800513a <HAL_I2C_Mem_Write+0x76>
          return HAL_TIMEOUT;
        }
      }
      
      /* Write data to DR */
      hi2c->Instance->TXDR = (*pData++);
 8005152:	6823      	ldr	r3, [r4, #0]
      Sizetmp--;
      Size--;
 8005154:	3e01      	subs	r6, #1
          return HAL_TIMEOUT;
        }
      }
      
      /* Write data to DR */
      hi2c->Instance->TXDR = (*pData++);
 8005156:	f818 2f01 	ldrb.w	r2, [r8, #1]!
      Sizetmp--;
      Size--;
      
      if((Sizetmp == 0)&&(Size!=0))
 800515a:	3d01      	subs	r5, #1
      }
      
      /* Write data to DR */
      hi2c->Instance->TXDR = (*pData++);
      Sizetmp--;
      Size--;
 800515c:	b2b6      	uxth	r6, r6
          return HAL_TIMEOUT;
        }
      }
      
      /* Write data to DR */
      hi2c->Instance->TXDR = (*pData++);
 800515e:	629a      	str	r2, [r3, #40]	; 0x28
      Sizetmp--;
      Size--;
      
      if((Sizetmp == 0)&&(Size!=0))
 8005160:	d119      	bne.n	8005196 <HAL_I2C_Mem_Write+0xd2>
 8005162:	b1d6      	cbz	r6, 800519a <HAL_I2C_Mem_Write+0xd6>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8005164:	4653      	mov	r3, sl
 8005166:	462a      	mov	r2, r5
 8005168:	2180      	movs	r1, #128	; 0x80
 800516a:	4620      	mov	r0, r4
 800516c:	f7ff fe62 	bl	8004e34 <I2C_WaitOnFlagUntilTimeout>
 8005170:	b9d8      	cbnz	r0, 80051aa <HAL_I2C_Mem_Write+0xe6>
        {
          return HAL_TIMEOUT;
        }
        
        
        if(Size > 255)
 8005172:	2eff      	cmp	r6, #255	; 0xff
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005174:	9500      	str	r5, [sp, #0]
        {
          return HAL_TIMEOUT;
        }
        
        
        if(Size > 255)
 8005176:	d91a      	bls.n	80051ae <HAL_I2C_Mem_Write+0xea>
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
          Sizetmp = 255;
 8005178:	25ff      	movs	r5, #255	; 0xff
        }
        
        
        if(Size > 255)
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800517a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800517e:	22ff      	movs	r2, #255	; 0xff
 8005180:	4649      	mov	r1, r9
 8005182:	4620      	mov	r0, r4
 8005184:	f7ff fe0a 	bl	8004d9c <I2C_TransferConfig>
    }
    
    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8005188:	4651      	mov	r1, sl
 800518a:	4620      	mov	r0, r4
 800518c:	f7ff fe8a 	bl	8004ea4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005190:	2800      	cmp	r0, #0
 8005192:	d0de      	beq.n	8005152 <HAL_I2C_Mem_Write+0x8e>
 8005194:	e006      	b.n	80051a4 <HAL_I2C_Mem_Write+0xe0>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
          Sizetmp = Size;
        }
      }
      
    }while(Size > 0);
 8005196:	2e00      	cmp	r6, #0
 8005198:	d1f6      	bne.n	8005188 <HAL_I2C_Mem_Write+0xc4>
    
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800519a:	2119      	movs	r1, #25
 800519c:	4620      	mov	r0, r4
 800519e:	f7ff ff08 	bl	8004fb2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051a2:	b168      	cbz	r0, 80051c0 <HAL_I2C_Mem_Write+0xfc>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d09e      	beq.n	80050e8 <HAL_I2C_Mem_Write+0x24>
        {
          return HAL_ERROR;
        }
        else
        {
          return HAL_TIMEOUT;
 80051aa:	2003      	movs	r0, #3
 80051ac:	e016      	b.n	80051dc <HAL_I2C_Mem_Write+0x118>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
          Sizetmp = 255;
        }
        else
        {
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80051ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051b2:	b2f2      	uxtb	r2, r6
 80051b4:	4649      	mov	r1, r9
 80051b6:	4620      	mov	r0, r4
 80051b8:	f7ff fdf0 	bl	8004d9c <I2C_TransferConfig>
          Sizetmp = Size;
 80051bc:	4635      	mov	r5, r6
 80051be:	e7e3      	b.n	8005188 <HAL_I2C_Mem_Write+0xc4>
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	2220      	movs	r2, #32
 80051c4:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051c6:	4a07      	ldr	r2, [pc, #28]	; (80051e4 <HAL_I2C_Mem_Write+0x120>)
 80051c8:	6859      	ldr	r1, [r3, #4]
 80051ca:	400a      	ands	r2, r1
 80051cc:	605a      	str	r2, [r3, #4]
    
    hi2c->State = HAL_I2C_STATE_READY; 	  
 80051ce:	2301      	movs	r3, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
  	
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
    
    hi2c->State = HAL_I2C_STATE_READY; 	  
 80051d4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
    
    return HAL_OK;
 80051d8:	e000      	b.n	80051dc <HAL_I2C_Mem_Write+0x118>
  }
  else
  {
    return HAL_BUSY;
 80051da:	2002      	movs	r0, #2
  }
}
 80051dc:	b002      	add	sp, #8
 80051de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e2:	bf00      	nop
 80051e4:	fe00e800 	.word	0xfe00e800

080051e8 <HAL_I2C_Mem_Read>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t Sizetmp = 0;
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80051ec:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f0:	4604      	mov	r4, r0
 80051f2:	4689      	mov	r9, r1
 80051f4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  uint32_t Sizetmp = 0;
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80051f8:	b2ed      	uxtb	r5, r5
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051fa:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 80051fe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  uint32_t Sizetmp = 0;
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8005202:	2d01      	cmp	r5, #1
 8005204:	d17f      	bne.n	8005306 <HAL_I2C_Mem_Read+0x11e>
  {    
    if((pData == NULL) || (Size == 0)) 
 8005206:	f1b8 0f00 	cmp.w	r8, #0
 800520a:	d101      	bne.n	8005210 <HAL_I2C_Mem_Read+0x28>
    {
      return  HAL_ERROR;                                    
 800520c:	2001      	movs	r0, #1
 800520e:	e07b      	b.n	8005308 <HAL_I2C_Mem_Read+0x120>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  {    
    if((pData == NULL) || (Size == 0)) 
 8005210:	2e00      	cmp	r6, #0
 8005212:	d0fb      	beq.n	800520c <HAL_I2C_Mem_Read+0x24>
    {
      return  HAL_ERROR;                                    
    }
    
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005214:	6807      	ldr	r7, [r0, #0]
 8005216:	69bf      	ldr	r7, [r7, #24]
 8005218:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
 800521c:	d173      	bne.n	8005306 <HAL_I2C_Mem_Read+0x11e>
    {
      return HAL_BUSY;
    }
    
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800521e:	f890 e034 	ldrb.w	lr, [r0, #52]	; 0x34
 8005222:	f1be 0f01 	cmp.w	lr, #1
 8005226:	d06e      	beq.n	8005306 <HAL_I2C_Mem_Read+0x11e>
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 8005228:	f04f 0e62 	mov.w	lr, #98	; 0x62
    {
      return HAL_BUSY;
    }
    
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800522c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 8005230:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005234:	6387      	str	r7, [r0, #56]	; 0x38
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8005236:	f8cd a000 	str.w	sl, [sp]
 800523a:	f7ff fe8b 	bl	8004f54 <I2C_RequestMemoryRead>
 800523e:	b118      	cbz	r0, 8005248 <HAL_I2C_Mem_Read+0x60>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005240:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005242:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 8005246:	e04d      	b.n	80052e4 <HAL_I2C_Mem_Read+0xfc>
 8005248:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    }
    
    /* Send Slave Address */
    /* Set NBYTES to write and reload if size > 255 and generate RESTART */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
 800524c:	2eff      	cmp	r6, #255	; 0xff
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800524e:	9300      	str	r3, [sp, #0]
    }
    
    /* Send Slave Address */
    /* Set NBYTES to write and reload if size > 255 and generate RESTART */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
 8005250:	d90a      	bls.n	8005268 <HAL_I2C_Mem_Read+0x80>
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
      Sizetmp = 255;
 8005252:	25ff      	movs	r5, #255	; 0xff
    /* Send Slave Address */
    /* Set NBYTES to write and reload if size > 255 and generate RESTART */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005258:	22ff      	movs	r2, #255	; 0xff
 800525a:	4649      	mov	r1, r9
 800525c:	4620      	mov	r0, r4
 800525e:	f7ff fd9d 	bl	8004d9c <I2C_TransferConfig>
 8005262:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005266:	e023      	b.n	80052b0 <HAL_I2C_Mem_Read+0xc8>
      Sizetmp = 255;
    }
    else
    {
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800526c:	b2f2      	uxtb	r2, r6
 800526e:	4649      	mov	r1, r9
 8005270:	4620      	mov	r0, r4
 8005272:	f7ff fd93 	bl	8004d9c <I2C_TransferConfig>
      Sizetmp = Size;
 8005276:	4635      	mov	r5, r6
 8005278:	e7f3      	b.n	8005262 <HAL_I2C_Mem_Read+0x7a>
      {
        return HAL_TIMEOUT;
      }
      
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;
 800527a:	6823      	ldr	r3, [r4, #0]
      
      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   
 800527c:	3e01      	subs	r6, #1
      
      if((Sizetmp == 0)&&(Size!=0))
 800527e:	3d01      	subs	r5, #1
      {
        return HAL_TIMEOUT;
      }
      
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      
      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   
 8005282:	b2b6      	uxth	r6, r6
      {
        return HAL_TIMEOUT;
      }
      
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;
 8005284:	f808 3f01 	strb.w	r3, [r8, #1]!
      
      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   
      
      if((Sizetmp == 0)&&(Size!=0))
 8005288:	d124      	bne.n	80052d4 <HAL_I2C_Mem_Read+0xec>
 800528a:	b32e      	cbz	r6, 80052d8 <HAL_I2C_Mem_Read+0xf0>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800528c:	4653      	mov	r3, sl
 800528e:	462a      	mov	r2, r5
 8005290:	2180      	movs	r1, #128	; 0x80
 8005292:	4620      	mov	r0, r4
 8005294:	f7ff fdce 	bl	8004e34 <I2C_WaitOnFlagUntilTimeout>
 8005298:	bb30      	cbnz	r0, 80052e8 <HAL_I2C_Mem_Read+0x100>
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 800529a:	2eff      	cmp	r6, #255	; 0xff
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800529c:	9500      	str	r5, [sp, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 800529e:	d910      	bls.n	80052c2 <HAL_I2C_Mem_Read+0xda>
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
          Sizetmp = 255;
 80052a0:	25ff      	movs	r5, #255	; 0xff
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80052a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052a6:	22ff      	movs	r2, #255	; 0xff
 80052a8:	4649      	mov	r1, r9
 80052aa:	4620      	mov	r0, r4
 80052ac:	f7ff fd76 	bl	8004d9c <I2C_TransferConfig>
    }
    
    do
    {  
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 80052b0:	4653      	mov	r3, sl
 80052b2:	2200      	movs	r2, #0
 80052b4:	2104      	movs	r1, #4
 80052b6:	4620      	mov	r0, r4
 80052b8:	f7ff fdbc 	bl	8004e34 <I2C_WaitOnFlagUntilTimeout>
 80052bc:	2800      	cmp	r0, #0
 80052be:	d0dc      	beq.n	800527a <HAL_I2C_Mem_Read+0x92>
 80052c0:	e012      	b.n	80052e8 <HAL_I2C_Mem_Read+0x100>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
          Sizetmp = 255;
        }
        else
        {
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80052c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052c6:	b2f2      	uxtb	r2, r6
 80052c8:	4649      	mov	r1, r9
 80052ca:	4620      	mov	r0, r4
 80052cc:	f7ff fd66 	bl	8004d9c <I2C_TransferConfig>
          Sizetmp = Size;
 80052d0:	4635      	mov	r5, r6
 80052d2:	e7ed      	b.n	80052b0 <HAL_I2C_Mem_Read+0xc8>
        }
      }
      
    }while(Size > 0);
 80052d4:	2e00      	cmp	r6, #0
 80052d6:	d1eb      	bne.n	80052b0 <HAL_I2C_Mem_Read+0xc8>
    
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 80052d8:	2119      	movs	r1, #25
 80052da:	4620      	mov	r0, r4
 80052dc:	f7ff fe69 	bl	8004fb2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052e0:	b120      	cbz	r0, 80052ec <HAL_I2C_Mem_Read+0x104>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d091      	beq.n	800520c <HAL_I2C_Mem_Read+0x24>
      {
        return HAL_ERROR;
      }
      else
      {
        return HAL_TIMEOUT;
 80052e8:	2003      	movs	r0, #3
 80052ea:	e00d      	b.n	8005308 <HAL_I2C_Mem_Read+0x120>
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	2220      	movs	r2, #32
 80052f0:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052f2:	4a07      	ldr	r2, [pc, #28]	; (8005310 <HAL_I2C_Mem_Read+0x128>)
 80052f4:	6859      	ldr	r1, [r3, #4]
 80052f6:	400a      	ands	r2, r1
 80052f8:	605a      	str	r2, [r3, #4]
    
    hi2c->State = HAL_I2C_STATE_READY;
 80052fa:	2301      	movs	r3, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052fc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
  	
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
    
    hi2c->State = HAL_I2C_STATE_READY;
 8005300:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
    
    return HAL_OK;
 8005304:	e000      	b.n	8005308 <HAL_I2C_Mem_Read+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005306:	2002      	movs	r0, #2
  }
}
 8005308:	b002      	add	sp, #8
 800530a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800530e:	bf00      	nop
 8005310:	fe00e800 	.word	0xfe00e800

08005314 <HAL_I2C_GetState>:
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
  return hi2c->State;
 8005314:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8005318:	4770      	bx	lr
	...

0800531c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFF) - 16) / 24;
 800531c:	6803      	ldr	r3, [r0, #0]
 800531e:	2118      	movs	r1, #24
 8005320:	b2da      	uxtb	r2, r3
 8005322:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005326:	3a10      	subs	r2, #16
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FF)) + 4);
 8005328:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFF) - 16) / 24;
 800532c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8] = {0, 6, 16, 22, 0, 6, 16, 22};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005330:	4904      	ldr	r1, [pc, #16]	; (8005344 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3)
 8005332:	2a03      	cmp	r2, #3
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFF) - 16) / 24;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8] = {0, 6, 16, 22, 0, 6, 16, 22};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005334:	5c89      	ldrb	r1, [r1, r2]
  
  if (stream_number > 3)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FF)) + 4);
 8005336:	bf88      	it	hi
 8005338:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFF) - 16) / 24;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8] = {0, 6, 16, 22, 0, 6, 16, 22};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800533a:	6541      	str	r1, [r0, #84]	; 0x54
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FF)) + 4);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FF));
 800533c:	6503      	str	r3, [r0, #80]	; 0x50
  }
  
  return hdma->StreamBaseAddress;
}
 800533e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	08064aa4 	.word	0x08064aa4

08005348 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005348:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800534a:	4604      	mov	r4, r0
 800534c:	2800      	cmp	r0, #0
 800534e:	d031      	beq.n	80053b4 <HAL_DMA_Init+0x6c>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005350:	6801      	ldr	r1, [r0, #0]
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005352:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005354:	4a18      	ldr	r2, [pc, #96]	; (80053b8 <HAL_DMA_Init+0x70>)
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005356:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800535a:	680b      	ldr	r3, [r1, #0]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800535c:	6840      	ldr	r0, [r0, #4]

  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800535e:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005360:	68a3      	ldr	r3, [r4, #8]
 8005362:	4318      	orrs	r0, r3
 8005364:	68e3      	ldr	r3, [r4, #12]
 8005366:	4318      	orrs	r0, r3
 8005368:	6923      	ldr	r3, [r4, #16]
 800536a:	4318      	orrs	r0, r3
 800536c:	6963      	ldr	r3, [r4, #20]
 800536e:	4318      	orrs	r0, r3
 8005370:	69a3      	ldr	r3, [r4, #24]
 8005372:	4318      	orrs	r0, r3
 8005374:	69e3      	ldr	r3, [r4, #28]
 8005376:	4318      	orrs	r0, r3
 8005378:	6a23      	ldr	r3, [r4, #32]
 800537a:	4303      	orrs	r3, r0
 800537c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800537e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005380:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005382:	bf01      	itttt	eq
 8005384:	6b20      	ldreq	r0, [r4, #48]	; 0x30
 8005386:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8005388:	4328      	orreq	r0, r5
 800538a:	4303      	orreq	r3, r0

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800538c:	2a04      	cmp	r2, #4
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800538e:	4620      	mov	r0, r4
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005390:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005392:	694b      	ldr	r3, [r1, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005394:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005398:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800539c:	bf04      	itt	eq
 800539e:	6aa2      	ldreq	r2, [r4, #40]	; 0x28
 80053a0:	4313      	orreq	r3, r2
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80053a2:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80053a4:	f7ff ffba 	bl	800531c <DMA_CalcBaseAndBitshift>
	
  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053a8:	2000      	movs	r0, #0

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053aa:	2301      	movs	r3, #1
  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
	
  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053ac:	64e0      	str	r0, [r4, #76]	; 0x4c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 80053b2:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tmp = 0;
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80053b4:	2001      	movs	r0, #1

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 80053b6:	bd38      	pop	{r3, r4, r5, pc}
 80053b8:	f010803f 	.word	0xf010803f

080053bc <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80053bc:	b538      	push	{r3, r4, r5, lr}
	DMA_Base_Registers *regs;
	
  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80053be:	4605      	mov	r5, r0
 80053c0:	b1e8      	cbz	r0, 80053fe <HAL_DMA_DeInit+0x42>
  {
    return HAL_ERROR;
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80053c2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d019      	beq.n	80053fe <HAL_DMA_DeInit+0x42>
  {
     return HAL_ERROR;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80053ca:	6803      	ldr	r3, [r0, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0;
 80053cc:	2400      	movs	r4, #0
  {
     return HAL_ERROR;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	f022 0201 	bic.w	r2, r2, #1
 80053d4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0;

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;
 80053d6:	2221      	movs	r2, #33	; 0x21

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0;
 80053d8:	601c      	str	r4, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0;
 80053da:	605c      	str	r4, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0;
 80053dc:	609c      	str	r4, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0;
 80053de:	60dc      	str	r4, [r3, #12]

  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0;
 80053e0:	611c      	str	r4, [r3, #16]

  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021;
 80053e2:	615a      	str	r2, [r3, #20]

  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053e4:	f7ff ff9a 	bl	800531c <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3F << hdma->StreamIndex;
 80053e8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80053ea:	233f      	movs	r3, #63	; 0x3f
 80053ec:	4093      	lsls	r3, r2
 80053ee:	6083      	str	r3, [r0, #8]
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 80053f0:	4620      	mov	r0, r4
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3F << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053f2:	64ec      	str	r4, [r5, #76]	; 0x4c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80053f4:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80053f8:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 80053fc:	bd38      	pop	{r3, r4, r5, pc}
	DMA_Base_Registers *regs;
	
  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80053fe:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
}
 8005400:	bd38      	pop	{r3, r4, r5, pc}

08005402 <HAL_SDRAM_MspInit>:
 8005402:	4770      	bx	lr

08005404 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing: Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005408:	4604      	mov	r4, r0
 800540a:	b1c8      	cbz	r0, 8005440 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800540c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005410:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005414:	b91b      	cbnz	r3, 800541e <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005416:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800541a:	f7ff fff2 	bl	8005402 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800541e:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005420:	1d21      	adds	r1, r4, #4
 8005422:	6820      	ldr	r0, [r4, #0]
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005424:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005428:	f000 f835 	bl	8005496 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800542c:	6862      	ldr	r2, [r4, #4]
 800542e:	4629      	mov	r1, r5
 8005430:	6820      	ldr	r0, [r4, #0]
 8005432:	f000 f873 	bl	800551c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005436:	2301      	movs	r3, #1
  
  return HAL_OK;
 8005438:	2000      	movs	r0, #0
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800543a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 800543e:	bd38      	pop	{r3, r4, r5, pc}
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
  {
    return HAL_ERROR;
 8005440:	2001      	movs	r0, #1
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
  
  return HAL_OK;
}
 8005442:	bd38      	pop	{r3, r4, r5, pc}

08005444 <HAL_SDRAM_SendCommand>:
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005448:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800544c:	460d      	mov	r5, r1
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800544e:	b2c0      	uxtb	r0, r0
 8005450:	2802      	cmp	r0, #2
 8005452:	d00d      	beq.n	8005470 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005454:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005456:	6820      	ldr	r0, [r4, #0]
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005458:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800545c:	f000 f8a9 	bl	80055b2 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005460:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 8005462:	2000      	movs	r0, #0
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005464:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005466:	bf0c      	ite	eq
 8005468:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800546a:	2301      	movne	r3, #1
 800546c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
}
 8005470:	bd38      	pop	{r3, r4, r5, pc}

08005472 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate: The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005472:	b510      	push	{r4, lr}
 8005474:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005476:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800547a:	b2c0      	uxtb	r0, r0
 800547c:	2802      	cmp	r0, #2
 800547e:	d009      	beq.n	8005494 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005480:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005482:	6820      	ldr	r0, [r4, #0]
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005484:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005488:	f000 f8b9 	bl	80055fe <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800548c:	2301      	movs	r3, #1
  
  return HAL_OK;   
 800548e:	2000      	movs	r0, #0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005490:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
}
 8005494:	bd10      	pop	{r4, pc}

08005496 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005496:	680b      	ldr	r3, [r1, #0]
 8005498:	6a0a      	ldr	r2, [r1, #32]
 800549a:	2b01      	cmp	r3, #1
 800549c:	688b      	ldr	r3, [r1, #8]
  * @param  Device: Pointer to SDRAM device instance
  * @param  Init: Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800549e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054a2:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80054a6:	68cf      	ldr	r7, [r1, #12]
 80054a8:	690e      	ldr	r6, [r1, #16]
 80054aa:	694d      	ldr	r5, [r1, #20]
 80054ac:	698c      	ldr	r4, [r1, #24]
 80054ae:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 80054b2:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  { 
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80054b6:	6801      	ldr	r1, [r0, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80054b8:	d013      	beq.n	80054e2 <FMC_SDRAM_Init+0x4c>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80054ba:	ea4e 0e03 	orr.w	lr, lr, r3
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  { 
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80054be:	f421 48ff 	bic.w	r8, r1, #32640	; 0x7f80
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80054c2:	ea4e 0707 	orr.w	r7, lr, r7
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  { 
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80054c6:	f028 087f 	bic.w	r8, r8, #127	; 0x7f
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80054ca:	433e      	orrs	r6, r7
 80054cc:	4335      	orrs	r5, r6
 80054ce:	432c      	orrs	r4, r5
 80054d0:	ea44 010a 	orr.w	r1, r4, sl
 80054d4:	430a      	orrs	r2, r1
 80054d6:	ea42 0309 	orr.w	r3, r2, r9
 80054da:	ea43 0308 	orr.w	r3, r3, r8
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80054de:	6003      	str	r3, [r0, #0]
 80054e0:	e019      	b.n	8005516 <FMC_SDRAM_Init+0x80>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80054e2:	ea4e 0e03 	orr.w	lr, lr, r3
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80054e6:	f421 4cff 	bic.w	ip, r1, #32640	; 0x7f80
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80054ea:	ea4a 0202 	orr.w	r2, sl, r2
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80054ee:	ea4e 0707 	orr.w	r7, lr, r7
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80054f2:	f02c 0c7f 	bic.w	ip, ip, #127	; 0x7f
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80054f6:	ea42 0909 	orr.w	r9, r2, r9
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay);  
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80054fa:	6842      	ldr	r2, [r0, #4]
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80054fc:	433e      	orrs	r6, r7
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80054fe:	ea49 010c 	orr.w	r1, r9, ip
                        Init->ReadPipeDelay);  
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005502:	f422 4cff 	bic.w	ip, r2, #32640	; 0x7f80
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005506:	4335      	orrs	r5, r6
                        Init->ReadPipeDelay);  
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005508:	f02c 0c7f 	bic.w	ip, ip, #127	; 0x7f
                       Init->MemoryDataWidth    |\
                       Init->InternalBankNumber |\
                       Init->CASLatency         |\
                       Init->WriteProtection);

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800550c:	6001      	str	r1, [r0, #0]
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800550e:	432c      	orrs	r4, r5
 8005510:	ea44 040c 	orr.w	r4, r4, ip
                       Init->InternalBankNumber |\
                       Init->CASLatency         |\
                       Init->WriteProtection);

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005514:	6044      	str	r4, [r0, #4]
  }  
  
  return HAL_OK;
}
 8005516:	2000      	movs	r0, #0
 8005518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800551c <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800551c:	2a01      	cmp	r2, #1
 800551e:	694b      	ldr	r3, [r1, #20]
 8005520:	68ca      	ldr	r2, [r1, #12]
 8005522:	f8d1 c018 	ldr.w	ip, [r1, #24]
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Bank: SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005526:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800552a:	680e      	ldr	r6, [r1, #0]
 800552c:	684d      	ldr	r5, [r1, #4]
 800552e:	688c      	ldr	r4, [r1, #8]
 8005530:	f8d1 9010 	ldr.w	r9, [r1, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005534:	d01a      	beq.n	800556c <FMC_SDRAM_Timing_Init+0x50>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005536:	6887      	ldr	r7, [r0, #8]
 8005538:	3e01      	subs	r6, #1
 800553a:	3d01      	subs	r5, #1
 800553c:	3c01      	subs	r4, #1
 800553e:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
 8005542:	3a01      	subs	r2, #1
 8005544:	3b01      	subs	r3, #1
 8005546:	4337      	orrs	r7, r6
 8005548:	ea47 1605 	orr.w	r6, r7, r5, lsl #4
 800554c:	ea46 2504 	orr.w	r5, r6, r4, lsl #8
 8005550:	ea45 3402 	orr.w	r4, r5, r2, lsl #12
 8005554:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8005558:	ea44 4102 	orr.w	r1, r4, r2, lsl #16
 800555c:	ea41 5203 	orr.w	r2, r1, r3, lsl #20
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005560:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8005564:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005568:	6083      	str	r3, [r0, #8]
 800556a:	e01f      	b.n	80055ac <FMC_SDRAM_Timing_Init+0x90>
  }
  else /* FMC_Bank2_SDRAM */
  {  
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK2];
 800556c:	68c1      	ldr	r1, [r0, #12]
 800556e:	f106 3eff 	add.w	lr, r6, #4294967295	; 0xffffffff
 8005572:	1e6f      	subs	r7, r5, #1
 8005574:	1e66      	subs	r6, r4, #1
 8005576:	f001 4870 	and.w	r8, r1, #4026531840	; 0xf0000000
 800557a:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    tmpr2 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800557e:	3b01      	subs	r3, #1
 8005580:	3a01      	subs	r2, #1
 8005582:	ea4e 0808 	orr.w	r8, lr, r8
 8005586:	051b      	lsls	r3, r3, #20
 8005588:	ea48 1e07 	orr.w	lr, r8, r7, lsl #4
 800558c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8005590:	ea4e 2706 	orr.w	r7, lr, r6, lsl #8
 8005594:	ea47 4605 	orr.w	r6, r7, r5, lsl #16
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005598:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800559c:	ea46 6505 	orr.w	r5, r6, r5, lsl #24
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RCDDelay)-1) << 24));   
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK1];
 80055a0:	6886      	ldr	r6, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80055a2:	f006 4670 	and.w	r6, r6, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    tmpr2 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
                        (((Timing->RPDelay)-1) << 20)); 

    Device->SDTR[FMC_SDRAM_BANK2] = tmpr1;
 80055a6:	60c5      	str	r5, [r0, #12]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    tmpr2 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80055a8:	4332      	orrs	r2, r6
                        (((Timing->RPDelay)-1) << 20)); 

    Device->SDTR[FMC_SDRAM_BANK2] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr2;
 80055aa:	6082      	str	r2, [r0, #8]
  }   
  
  return HAL_OK;
}
 80055ac:	2000      	movs	r0, #0
 80055ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080055b2 <FMC_SDRAM_SendCommand>:
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  __IO uint32_t tmpr = 0;
 80055b2:	2300      	movs	r3, #0
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80055b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055b6:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 80055b8:	9301      	str	r3, [sp, #4]
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80055ba:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80055bc:	e891 0009 	ldmia.w	r1, {r0, r3}
 80055c0:	4303      	orrs	r3, r0
 80055c2:	68c8      	ldr	r0, [r1, #12]
 80055c4:	ea43 2040 	orr.w	r0, r3, r0, lsl #9
 80055c8:	688b      	ldr	r3, [r1, #8]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	ea40 1343 	orr.w	r3, r0, r3, lsl #5
 80055d0:	9301      	str	r3, [sp, #4]
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
                    );
    
  Device->SDCMR = tmpr;
 80055d2:	9b01      	ldr	r3, [sp, #4]
 80055d4:	6123      	str	r3, [r4, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80055d6:	f7fd fe85 	bl	80032e4 <HAL_GetTick>
 80055da:	4606      	mov	r6, r0

  /* wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80055dc:	69a0      	ldr	r0, [r4, #24]
 80055de:	f010 0020 	ands.w	r0, r0, #32
 80055e2:	d00a      	beq.n	80055fa <FMC_SDRAM_SendCommand+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80055e4:	1c6b      	adds	r3, r5, #1
 80055e6:	d0f9      	beq.n	80055dc <FMC_SDRAM_SendCommand+0x2a>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80055e8:	b90d      	cbnz	r5, 80055ee <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 80055ea:	2003      	movs	r0, #3
 80055ec:	e005      	b.n	80055fa <FMC_SDRAM_SendCommand+0x48>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80055ee:	f7fd fe79 	bl	80032e4 <HAL_GetTick>
 80055f2:	1b80      	subs	r0, r0, r6
 80055f4:	4285      	cmp	r5, r0
 80055f6:	d2f1      	bcs.n	80055dc <FMC_SDRAM_SendCommand+0x2a>
 80055f8:	e7f7      	b.n	80055ea <FMC_SDRAM_SendCommand+0x38>
      }
    }     
  }
  
  return HAL_OK;  
}
 80055fa:	b002      	add	sp, #8
 80055fc:	bd70      	pop	{r4, r5, r6, pc}

080055fe <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80055fe:	6943      	ldr	r3, [r0, #20]
 8005600:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8005604:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8005606:	2000      	movs	r0, #0
 8005608:	4770      	bx	lr
	...

0800560c <_Create>:
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop

08005610 <_Paint>:
 8005610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005614:	b08f      	sub	sp, #60	; 0x3c
 8005616:	9003      	str	r0, [sp, #12]
 8005618:	f008 feae 	bl	800e378 <GUI_ALLOC_LockH>
 800561c:	4603      	mov	r3, r0
 800561e:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8005620:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8005622:	9308      	str	r3, [sp, #32]
 8005624:	f000 fe3e 	bl	80062a4 <GUI_ARRAY_GetNumItems>
 8005628:	9b08      	ldr	r3, [sp, #32]
 800562a:	4606      	mov	r6, r0
 800562c:	9002      	str	r0, [sp, #8]
 800562e:	4264      	negs	r4, r4
 8005630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005632:	48c6      	ldr	r0, [pc, #792]	; (800594c <_Paint+0x33c>)
 8005634:	681d      	ldr	r5, [r3, #0]
 8005636:	f006 fbef 	bl	800be18 <LCD_SetBkColor>
 800563a:	9b08      	ldr	r3, [sp, #32]
 800563c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800563e:	f007 fa6d 	bl	800cb1c <GUI_SetFont>
 8005642:	f008 fae9 	bl	800dc18 <GUI_Clear>
 8005646:	a80c      	add	r0, sp, #48	; 0x30
 8005648:	f007 fd36 	bl	800d0b8 <GUI_GetClientRect>
 800564c:	2e00      	cmp	r6, #0
 800564e:	f000 8166 	beq.w	800591e <_Paint+0x30e>
 8005652:	006b      	lsls	r3, r5, #1
 8005654:	2600      	movs	r6, #0
 8005656:	b2aa      	uxth	r2, r5
 8005658:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800565c:	425b      	negs	r3, r3
 800565e:	4693      	mov	fp, r2
 8005660:	9304      	str	r3, [sp, #16]
 8005662:	ab08      	add	r3, sp, #32
 8005664:	9307      	str	r3, [sp, #28]
 8005666:	e0e5      	b.n	8005834 <_Paint+0x224>
 8005668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800566c:	441c      	add	r4, r3
 800566e:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8005672:	a80c      	add	r0, sp, #48	; 0x30
 8005674:	6815      	ldr	r5, [r2, #0]
 8005676:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800567a:	4425      	add	r5, r4
 800567c:	4ab4      	ldr	r2, [pc, #720]	; (8005950 <_Paint+0x340>)
 800567e:	1bdf      	subs	r7, r3, r7
 8005680:	9b04      	ldr	r3, [sp, #16]
 8005682:	b2ad      	uxth	r5, r5
 8005684:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	fa1f f885 	uxth.w	r8, r5
 800568e:	fb82 2703 	smull	r2, r7, r2, r3
 8005692:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8005696:	eba7 77e3 	sub.w	r7, r7, r3, asr #31
 800569a:	f001 fc79 	bl	8006f90 <WM_SetUserClipRect>
 800569e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a0:	1e7a      	subs	r2, r7, #1
 80056a2:	6898      	ldr	r0, [r3, #8]
 80056a4:	9201      	str	r2, [sp, #4]
 80056a6:	2800      	cmp	r0, #0
 80056a8:	d04d      	beq.n	8005746 <_Paint+0x136>
 80056aa:	889a      	ldrh	r2, [r3, #4]
 80056ac:	f002 0103 	and.w	r1, r2, #3
 80056b0:	2901      	cmp	r1, #1
 80056b2:	f000 80f1 	beq.w	8005898 <_Paint+0x288>
 80056b6:	2902      	cmp	r1, #2
 80056b8:	f040 80da 	bne.w	8005870 <_Paint+0x260>
 80056bc:	f8d3 a000 	ldr.w	sl, [r3]
 80056c0:	f000 fdab 	bl	800621a <GUI_DRAW__GetXSize>
 80056c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c6:	ebc0 000a 	rsb	r0, r0, sl
 80056ca:	889a      	ldrh	r2, [r3, #4]
 80056cc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80056d0:	ea4f 0a60 	mov.w	sl, r0, asr #1
 80056d4:	f002 020c 	and.w	r2, r2, #12
 80056d8:	2a04      	cmp	r2, #4
 80056da:	f000 80d0 	beq.w	800587e <_Paint+0x26e>
 80056de:	2a0c      	cmp	r2, #12
 80056e0:	f040 80c4 	bne.w	800586c <_Paint+0x25c>
 80056e4:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 80056e8:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80056ec:	6898      	ldr	r0, [r3, #8]
 80056ee:	1a53      	subs	r3, r2, r1
 80056f0:	3301      	adds	r3, #1
 80056f2:	9305      	str	r3, [sp, #20]
 80056f4:	f000 fda3 	bl	800623e <GUI_DRAW__GetYSize>
 80056f8:	9b05      	ldr	r3, [sp, #20]
 80056fa:	1a18      	subs	r0, r3, r0
 80056fc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8005700:	1043      	asrs	r3, r0, #1
 8005702:	4648      	mov	r0, r9
 8005704:	9306      	str	r3, [sp, #24]
 8005706:	f001 fc43 	bl	8006f90 <WM_SetUserClipRect>
 800570a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800570c:	a809      	add	r0, sp, #36	; 0x24
 800570e:	6892      	ldr	r2, [r2, #8]
 8005710:	9205      	str	r2, [sp, #20]
 8005712:	f008 fe3f 	bl	800e394 <GUI_ALLOC_UnlockH>
 8005716:	9807      	ldr	r0, [sp, #28]
 8005718:	f008 fe3c 	bl	800e394 <GUI_ALLOC_UnlockH>
 800571c:	9a05      	ldr	r2, [sp, #20]
 800571e:	9903      	ldr	r1, [sp, #12]
 8005720:	4610      	mov	r0, r2
 8005722:	9b06      	ldr	r3, [sp, #24]
 8005724:	eb04 020a 	add.w	r2, r4, sl
 8005728:	f000 fd5e 	bl	80061e8 <GUI_DRAW__Draw>
 800572c:	9803      	ldr	r0, [sp, #12]
 800572e:	f008 fe23 	bl	800e378 <GUI_ALLOC_LockH>
 8005732:	4603      	mov	r3, r0
 8005734:	4631      	mov	r1, r6
 8005736:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8005738:	9308      	str	r3, [sp, #32]
 800573a:	f000 fdd5 	bl	80062e8 <GUI_ARRAY_GetpItemLocked>
 800573e:	9009      	str	r0, [sp, #36]	; 0x24
 8005740:	2000      	movs	r0, #0
 8005742:	f001 fc25 	bl	8006f90 <WM_SetUserClipRect>
 8005746:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800574a:	f007 fa2e 	bl	800cbaa <GUI_SetColor>
 800574e:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8005752:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8005756:	3105      	adds	r1, #5
 8005758:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
 800575c:	3a05      	subs	r2, #5
 800575e:	f007 fda1 	bl	800d2a4 <GUI_DrawVLine>
 8005762:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
 8005766:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 800576a:	3001      	adds	r0, #1
 800576c:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8005770:	f007 fd98 	bl	800d2a4 <GUI_DrawVLine>
 8005774:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
 8005778:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 800577c:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8005780:	3002      	adds	r0, #2
 8005782:	3105      	adds	r1, #5
 8005784:	3a05      	subs	r2, #5
 8005786:	f007 fd8d 	bl	800d2a4 <GUI_DrawVLine>
 800578a:	4b72      	ldr	r3, [pc, #456]	; (8005954 <_Paint+0x344>)
 800578c:	4a72      	ldr	r2, [pc, #456]	; (8005958 <_Paint+0x348>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
 8005794:	445b      	add	r3, fp
 8005796:	6811      	ldr	r1, [r2, #0]
 8005798:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800579c:	b29b      	uxth	r3, r3
 800579e:	4459      	add	r1, fp
 80057a0:	f8bd e02a 	ldrh.w	lr, [sp, #42]	; 0x2a
 80057a4:	eb03 0c00 	add.w	ip, r3, r0
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	b289      	uxth	r1, r1
 80057ac:	b200      	sxth	r0, r0
 80057ae:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 80057b2:	b212      	sxth	r2, r2
 80057b4:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 80057b8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80057bc:	448e      	add	lr, r1
 80057be:	9b08      	ldr	r3, [sp, #32]
 80057c0:	1a12      	subs	r2, r2, r0
 80057c2:	ebc1 010c 	rsb	r1, r1, ip
 80057c6:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 80057ca:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80057cc:	4414      	add	r4, r2
 80057ce:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80057d2:	f006 fb29 	bl	800be28 <LCD_SetColor>
 80057d6:	9b08      	ldr	r3, [sp, #32]
 80057d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057da:	42b3      	cmp	r3, r6
 80057dc:	d03a      	beq.n	8005854 <_Paint+0x244>
 80057de:	f04f 0a00 	mov.w	sl, #0
 80057e2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80057e6:	2002      	movs	r0, #2
 80057e8:	ebca 0303 	rsb	r3, sl, r3
 80057ec:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80057f0:	f007 f984 	bl	800cafc <GUI_SetTextMode>
 80057f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f6:	4649      	mov	r1, r9
 80057f8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80057fc:	f103 000c 	add.w	r0, r3, #12
 8005800:	f007 ffdd 	bl	800d7be <GUI_DispStringInRect>
 8005804:	9a08      	ldr	r2, [sp, #32]
 8005806:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800580a:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800580c:	4453      	add	r3, sl
 800580e:	428e      	cmp	r6, r1
 8005810:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8005814:	d049      	beq.n	80058aa <_Paint+0x29a>
 8005816:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8005818:	42b3      	cmp	r3, r6
 800581a:	d904      	bls.n	8005826 <_Paint+0x216>
 800581c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800581e:	3501      	adds	r5, #1
 8005820:	1ae4      	subs	r4, r4, r3
 8005822:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 8005826:	a809      	add	r0, sp, #36	; 0x24
 8005828:	3601      	adds	r6, #1
 800582a:	f008 fdb3 	bl	800e394 <GUI_ALLOC_UnlockH>
 800582e:	9b02      	ldr	r3, [sp, #8]
 8005830:	429e      	cmp	r6, r3
 8005832:	d078      	beq.n	8005926 <_Paint+0x316>
 8005834:	9b08      	ldr	r3, [sp, #32]
 8005836:	4631      	mov	r1, r6
 8005838:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800583a:	f000 fd55 	bl	80062e8 <GUI_ARRAY_GetpItemLocked>
 800583e:	9009      	str	r0, [sp, #36]	; 0x24
 8005840:	4648      	mov	r0, r9
 8005842:	f007 fc39 	bl	800d0b8 <GUI_GetClientRect>
 8005846:	9b08      	ldr	r3, [sp, #32]
 8005848:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800584a:	42b2      	cmp	r2, r6
 800584c:	f63f af0c 	bhi.w	8005668 <_Paint+0x58>
 8005850:	2300      	movs	r3, #0
 8005852:	e70a      	b.n	800566a <_Paint+0x5a>
 8005854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005856:	889b      	ldrh	r3, [r3, #4]
 8005858:	f003 0303 	and.w	r3, r3, #3
 800585c:	2b01      	cmp	r3, #1
 800585e:	d1be      	bne.n	80057de <_Paint+0x1ce>
 8005860:	9b01      	ldr	r3, [sp, #4]
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	3301      	adds	r3, #1
 8005866:	fa1f fa83 	uxth.w	sl, r3
 800586a:	e7ba      	b.n	80057e2 <_Paint+0x1d2>
 800586c:	2300      	movs	r3, #0
 800586e:	e748      	b.n	8005702 <_Paint+0xf2>
 8005870:	f002 020c 	and.w	r2, r2, #12
 8005874:	f04f 0a00 	mov.w	sl, #0
 8005878:	2a04      	cmp	r2, #4
 800587a:	f47f af30 	bne.w	80056de <_Paint+0xce>
 800587e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8005882:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8005886:	6898      	ldr	r0, [r3, #8]
 8005888:	1a53      	subs	r3, r2, r1
 800588a:	3301      	adds	r3, #1
 800588c:	9305      	str	r3, [sp, #20]
 800588e:	f000 fcd6 	bl	800623e <GUI_DRAW__GetYSize>
 8005892:	9b05      	ldr	r3, [sp, #20]
 8005894:	1a1b      	subs	r3, r3, r0
 8005896:	e734      	b.n	8005702 <_Paint+0xf2>
 8005898:	f8d3 a000 	ldr.w	sl, [r3]
 800589c:	f000 fcbd 	bl	800621a <GUI_DRAW__GetXSize>
 80058a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058a2:	ebc0 0a0a 	rsb	sl, r0, sl
 80058a6:	889a      	ldrh	r2, [r3, #4]
 80058a8:	e714      	b.n	80056d4 <_Paint+0xc4>
 80058aa:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80058ac:	fa0f f888 	sxth.w	r8, r8
 80058b0:	f006 faba 	bl	800be28 <LCD_SetColor>
 80058b4:	a80c      	add	r0, sp, #48	; 0x30
 80058b6:	f001 fb6b 	bl	8006f90 <WM_SetUserClipRect>
 80058ba:	f1a8 0804 	sub.w	r8, r8, #4
 80058be:	9b08      	ldr	r3, [sp, #32]
 80058c0:	9a01      	ldr	r2, [sp, #4]
 80058c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058c4:	ebc2 0208 	rsb	r2, r2, r8
 80058c8:	9205      	str	r2, [sp, #20]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d146      	bne.n	800595c <_Paint+0x34c>
 80058ce:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80058d2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80058d6:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80058da:	1a5b      	subs	r3, r3, r1
 80058dc:	ea4f 0a63 	mov.w	sl, r3, asr #1
 80058e0:	f007 f963 	bl	800cbaa <GUI_SetColor>
 80058e4:	9b01      	ldr	r3, [sp, #4]
 80058e6:	9a05      	ldr	r2, [sp, #20]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	db13      	blt.n	8005914 <_Paint+0x304>
 80058ec:	1bd2      	subs	r2, r2, r7
 80058ee:	f1ca 0301 	rsb	r3, sl, #1
 80058f2:	9401      	str	r4, [sp, #4]
 80058f4:	4457      	add	r7, sl
 80058f6:	4413      	add	r3, r2
 80058f8:	4644      	mov	r4, r8
 80058fa:	4698      	mov	r8, r3
 80058fc:	4650      	mov	r0, sl
 80058fe:	eb08 010a 	add.w	r1, r8, sl
 8005902:	f10a 0a01 	add.w	sl, sl, #1
 8005906:	4622      	mov	r2, r4
 8005908:	f007 fd00 	bl	800d30c <GUI_DrawHLine>
 800590c:	3c01      	subs	r4, #1
 800590e:	45ba      	cmp	sl, r7
 8005910:	d1f4      	bne.n	80058fc <_Paint+0x2ec>
 8005912:	9c01      	ldr	r4, [sp, #4]
 8005914:	2000      	movs	r0, #0
 8005916:	f001 fb3b 	bl	8006f90 <WM_SetUserClipRect>
 800591a:	9a08      	ldr	r2, [sp, #32]
 800591c:	e77b      	b.n	8005816 <_Paint+0x206>
 800591e:	ab08      	add	r3, sp, #32
 8005920:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8005924:	9307      	str	r3, [sp, #28]
 8005926:	2000      	movs	r0, #0
 8005928:	f001 fb32 	bl	8006f90 <WM_SetUserClipRect>
 800592c:	4648      	mov	r0, r9
 800592e:	f007 fbc3 	bl	800d0b8 <GUI_GetClientRect>
 8005932:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005936:	9807      	ldr	r0, [sp, #28]
 8005938:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
 800593c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8005940:	f008 fd28 	bl	800e394 <GUI_ALLOC_UnlockH>
 8005944:	b00f      	add	sp, #60	; 0x3c
 8005946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800594a:	bf00      	nop
 800594c:	00dca939 	.word	0x00dca939
 8005950:	55555556 	.word	0x55555556
 8005954:	200000b0 	.word	0x200000b0
 8005958:	20008418 	.word	0x20008418
 800595c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8005960:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005964:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8005968:	ebca 0a03 	rsb	sl, sl, r3
 800596c:	9b01      	ldr	r3, [sp, #4]
 800596e:	eb03 0a6a 	add.w	sl, r3, sl, asr #1
 8005972:	f007 f91a 	bl	800cbaa <GUI_SetColor>
 8005976:	9b01      	ldr	r3, [sp, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	dbcb      	blt.n	8005914 <_Paint+0x304>
 800597c:	ebc7 020a 	rsb	r2, r7, sl
 8005980:	ebca 0803 	rsb	r8, sl, r3
 8005984:	f1c7 0301 	rsb	r3, r7, #1
 8005988:	9401      	str	r4, [sp, #4]
 800598a:	4611      	mov	r1, r2
 800598c:	9a05      	ldr	r2, [sp, #20]
 800598e:	18d7      	adds	r7, r2, r3
 8005990:	4490      	add	r8, r2
 8005992:	463c      	mov	r4, r7
 8005994:	460f      	mov	r7, r1
 8005996:	4650      	mov	r0, sl
 8005998:	eb08 020a 	add.w	r2, r8, sl
 800599c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80059a0:	4621      	mov	r1, r4
 80059a2:	f007 fcb3 	bl	800d30c <GUI_DrawHLine>
 80059a6:	3401      	adds	r4, #1
 80059a8:	45ba      	cmp	sl, r7
 80059aa:	d1f4      	bne.n	8005996 <_Paint+0x386>
 80059ac:	e7b1      	b.n	8005912 <_Paint+0x302>
 80059ae:	bf00      	nop

080059b0 <HEADER_SetDefaultSTSkin>:
 80059b0:	4b01      	ldr	r3, [pc, #4]	; (80059b8 <HEADER_SetDefaultSTSkin+0x8>)
 80059b2:	4a02      	ldr	r2, [pc, #8]	; (80059bc <HEADER_SetDefaultSTSkin+0xc>)
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	4770      	bx	lr
 80059b8:	200000ac 	.word	0x200000ac
 80059bc:	0801358c 	.word	0x0801358c

080059c0 <_Create>:
 80059c0:	b500      	push	{lr}
 80059c2:	b083      	sub	sp, #12
 80059c4:	f008 fcd8 	bl	800e378 <GUI_ALLOC_LockH>
 80059c8:	4a05      	ldr	r2, [pc, #20]	; (80059e0 <_Create+0x20>)
 80059ca:	4603      	mov	r3, r0
 80059cc:	a802      	add	r0, sp, #8
 80059ce:	649a      	str	r2, [r3, #72]	; 0x48
 80059d0:	f840 3d04 	str.w	r3, [r0, #-4]!
 80059d4:	f008 fcde 	bl	800e394 <GUI_ALLOC_UnlockH>
 80059d8:	b003      	add	sp, #12
 80059da:	f85d fb04 	ldr.w	pc, [sp], #4
 80059de:	bf00      	nop
 80059e0:	080059e5 	.word	0x080059e5

080059e4 <_CalcPositions>:
 80059e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e8:	b086      	sub	sp, #24
 80059ea:	460c      	mov	r4, r1
 80059ec:	f008 fcc4 	bl	800e378 <GUI_ALLOC_LockH>
 80059f0:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80059f2:	4603      	mov	r3, r0
 80059f4:	ad02      	add	r5, sp, #8
 80059f6:	9001      	str	r0, [sp, #4]
 80059f8:	0712      	lsls	r2, r2, #28
 80059fa:	c803      	ldmia	r0, {r0, r1}
 80059fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a00:	f9bd 7008 	ldrsh.w	r7, [sp, #8]
 8005a04:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
 8005a08:	d55e      	bpl.n	8005ac8 <_CalcPositions+0xe4>
 8005a0a:	f9b3 1030 	ldrsh.w	r1, [r3, #48]	; 0x30
 8005a0e:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8005a12:	29ff      	cmp	r1, #255	; 0xff
 8005a14:	61a2      	str	r2, [r4, #24]
 8005a16:	d05e      	beq.n	8005ad6 <_CalcPositions+0xf2>
 8005a18:	29fe      	cmp	r1, #254	; 0xfe
 8005a1a:	d065      	beq.n	8005ae8 <_CalcPositions+0x104>
 8005a1c:	4272      	negs	r2, r6
 8005a1e:	4279      	negs	r1, r7
 8005a20:	4628      	mov	r0, r5
 8005a22:	f10d 0818 	add.w	r8, sp, #24
 8005a26:	f007 fa2f 	bl	800ce88 <GUI_MoveRect>
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	9801      	ldr	r0, [sp, #4]
 8005a2e:	f000 fb97 	bl	8006160 <SCROLLBAR__Rect2VRect>
 8005a32:	9d01      	ldr	r5, [sp, #4]
 8005a34:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8005a38:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	f8d5 904c 	ldr.w	r9, [r5, #76]	; 0x4c
 8005a42:	1af6      	subs	r6, r6, r3
 8005a44:	f000 fa0c 	bl	8005e60 <WIDGET__GetXSize>
 8005a48:	4607      	mov	r7, r0
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	f000 fa16 	bl	8005e7c <WIDGET__GetYSize>
 8005a50:	9b01      	ldr	r3, [sp, #4]
 8005a52:	0840      	lsrs	r0, r0, #1
 8005a54:	f106 0a01 	add.w	sl, r6, #1
 8005a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a5a:	1f7b      	subs	r3, r7, #5
 8005a5c:	1d47      	adds	r7, r0, #5
 8005a5e:	4649      	mov	r1, r9
 8005a60:	fb02 f00a 	mul.w	r0, r2, sl
 8005a64:	429f      	cmp	r7, r3
 8005a66:	bf28      	it	cs
 8005a68:	461f      	movcs	r7, r3
 8005a6a:	f006 fd03 	bl	800c474 <GUI__DivideRound32>
 8005a6e:	4931      	ldr	r1, [pc, #196]	; (8005b34 <_CalcPositions+0x150>)
 8005a70:	f858 3d14 	ldr.w	r3, [r8, #-20]!
 8005a74:	ebc7 020a 	rsb	r2, r7, sl
 8005a78:	f9b1 5000 	ldrsh.w	r5, [r1]
 8005a7c:	3f01      	subs	r7, #1
 8005a7e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a80:	42a8      	cmp	r0, r5
 8005a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a84:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 8005a88:	ebc1 0109 	rsb	r1, r1, r9
 8005a8c:	bfb8      	it	lt
 8005a8e:	4628      	movlt	r0, r5
 8005a90:	6166      	str	r6, [r4, #20]
 8005a92:	6122      	str	r2, [r4, #16]
 8005a94:	4550      	cmp	r0, sl
 8005a96:	f8c4 e000 	str.w	lr, [r4]
 8005a9a:	6067      	str	r7, [r4, #4]
 8005a9c:	bfa8      	it	ge
 8005a9e:	4650      	movge	r0, sl
 8005aa0:	ebc0 060a 	rsb	r6, r0, sl
 8005aa4:	4605      	mov	r5, r0
 8005aa6:	fb03 f006 	mul.w	r0, r3, r6
 8005aaa:	f006 fce3 	bl	800c474 <GUI__DivideRound32>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	61e6      	str	r6, [r4, #28]
 8005ab2:	4640      	mov	r0, r8
 8005ab4:	1953      	adds	r3, r2, r5
 8005ab6:	6225      	str	r5, [r4, #32]
 8005ab8:	60a2      	str	r2, [r4, #8]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	60e3      	str	r3, [r4, #12]
 8005abe:	f008 fc69 	bl	800e394 <GUI_ALLOC_UnlockH>
 8005ac2:	b006      	add	sp, #24
 8005ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac8:	f9b3 1030 	ldrsh.w	r1, [r3, #48]	; 0x30
 8005acc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8005ad0:	29ff      	cmp	r1, #255	; 0xff
 8005ad2:	61a2      	str	r2, [r4, #24]
 8005ad4:	d1a0      	bne.n	8005a18 <_CalcPositions+0x34>
 8005ad6:	6998      	ldr	r0, [r3, #24]
 8005ad8:	f001 fdab 	bl	8007632 <WM_GetScrollbarV>
 8005adc:	b9c0      	cbnz	r0, 8005b10 <_CalcPositions+0x12c>
 8005ade:	9b01      	ldr	r3, [sp, #4]
 8005ae0:	f9b3 1030 	ldrsh.w	r1, [r3, #48]	; 0x30
 8005ae4:	29fe      	cmp	r1, #254	; 0xfe
 8005ae6:	d199      	bne.n	8005a1c <_CalcPositions+0x38>
 8005ae8:	6998      	ldr	r0, [r3, #24]
 8005aea:	f001 fd94 	bl	8007616 <WM_GetScrollbarH>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d094      	beq.n	8005a1c <_CalcPositions+0x38>
 8005af2:	a904      	add	r1, sp, #16
 8005af4:	f001 fd5a 	bl	80075ac <WM_GetWindowRectEx>
 8005af8:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8005afc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d18b      	bne.n	8005a1c <_CalcPositions+0x38>
 8005b04:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005b0e:	e785      	b.n	8005a1c <_CalcPositions+0x38>
 8005b10:	a904      	add	r1, sp, #16
 8005b12:	f001 fd4b 	bl	80075ac <WM_GetWindowRectEx>
 8005b16:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8005b1a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d1dd      	bne.n	8005ade <_CalcPositions+0xfa>
 8005b22:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8005b26:	9b01      	ldr	r3, [sp, #4]
 8005b28:	3a01      	subs	r2, #1
 8005b2a:	f9b3 1030 	ldrsh.w	r1, [r3, #48]	; 0x30
 8005b2e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8005b32:	e771      	b.n	8005a18 <_CalcPositions+0x34>
 8005b34:	20000066 	.word	0x20000066

08005b38 <_Paint>:
 8005b38:	b530      	push	{r4, r5, lr}
 8005b3a:	b091      	sub	sp, #68	; 0x44
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	f008 fc1b 	bl	800e378 <GUI_ALLOC_LockH>
 8005b42:	4603      	mov	r3, r0
 8005b44:	ad03      	add	r5, sp, #12
 8005b46:	4620      	mov	r0, r4
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	a907      	add	r1, sp, #28
 8005b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b4e:	ac01      	add	r4, sp, #4
 8005b50:	4798      	blx	r3
 8005b52:	4629      	mov	r1, r5
 8005b54:	9800      	ldr	r0, [sp, #0]
 8005b56:	f000 f95c 	bl	8005e12 <WIDGET__GetClientRect>
 8005b5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005b5e:	e884 0003 	stmia.w	r4, {r0, r1}
 8005b62:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005b66:	f006 f95f 	bl	800be28 <LCD_SetColor>
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	9800      	ldr	r0, [sp, #0]
 8005b6e:	f000 faaa 	bl	80060c6 <WIDGET__FillRectEx>
 8005b72:	4822      	ldr	r0, [pc, #136]	; (8005bfc <_Paint+0xc4>)
 8005b74:	f006 f958 	bl	800be28 <LCD_SetColor>
 8005b78:	9800      	ldr	r0, [sp, #0]
 8005b7a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005b7c:	071b      	lsls	r3, r3, #28
 8005b7e:	d436      	bmi.n	8005bee <_Paint+0xb6>
 8005b80:	4620      	mov	r0, r4
 8005b82:	f007 fbb7 	bl	800d2f4 <GUI_DrawRectEx>
 8005b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	9800      	ldr	r0, [sp, #0]
 8005b8e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005b92:	f8ad 3008 	strh.w	r3, [sp, #8]
 8005b96:	f000 fa96 	bl	80060c6 <WIDGET__FillRectEx>
 8005b9a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8005b9e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8005ba2:	1a9b      	subs	r3, r3, r2
 8005ba4:	2b05      	cmp	r3, #5
 8005ba6:	dd1d      	ble.n	8005be4 <_Paint+0xac>
 8005ba8:	2400      	movs	r4, #0
 8005baa:	2001      	movs	r0, #1
 8005bac:	f007 f8ae 	bl	800cd0c <GUI_SetPenSize>
 8005bb0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005bb4:	f006 fff9 	bl	800cbaa <GUI_SetColor>
 8005bb8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8005bbc:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8005bc0:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8005bc4:	4419      	add	r1, r3
 8005bc6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8005bca:	3202      	adds	r2, #2
 8005bcc:	9800      	ldr	r0, [sp, #0]
 8005bce:	3904      	subs	r1, #4
 8005bd0:	3b02      	subs	r3, #2
 8005bd2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8005bd6:	eb04 0161 	add.w	r1, r4, r1, asr #1
 8005bda:	3402      	adds	r4, #2
 8005bdc:	f000 fa52 	bl	8006084 <WIDGET__DrawVLine>
 8005be0:	2c06      	cmp	r4, #6
 8005be2:	d1e2      	bne.n	8005baa <_Paint+0x72>
 8005be4:	4668      	mov	r0, sp
 8005be6:	f008 fbd5 	bl	800e394 <GUI_ALLOC_UnlockH>
 8005bea:	b011      	add	sp, #68	; 0x44
 8005bec:	bd30      	pop	{r4, r5, pc}
 8005bee:	4622      	mov	r2, r4
 8005bf0:	a905      	add	r1, sp, #20
 8005bf2:	f000 f8fc 	bl	8005dee <WIDGET__RotateRect90>
 8005bf6:	a805      	add	r0, sp, #20
 8005bf8:	e7c3      	b.n	8005b82 <_Paint+0x4a>
 8005bfa:	bf00      	nop
 8005bfc:	00dca939 	.word	0x00dca939

08005c00 <SCROLLBAR_SetDefaultSTSkin>:
 8005c00:	4b01      	ldr	r3, [pc, #4]	; (8005c08 <SCROLLBAR_SetDefaultSTSkin+0x8>)
 8005c02:	4a02      	ldr	r2, [pc, #8]	; (8005c0c <SCROLLBAR_SetDefaultSTSkin+0xc>)
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	4770      	bx	lr
 8005c08:	20000060 	.word	0x20000060
 8005c0c:	08013598 	.word	0x08013598

08005c10 <WINDOW_SetDefaultBkColor>:
 8005c10:	4b01      	ldr	r3, [pc, #4]	; (8005c18 <WINDOW_SetDefaultBkColor+0x8>)
 8005c12:	6018      	str	r0, [r3, #0]
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	20000038 	.word	0x20000038

08005c1c <WINDOW_Callback>:
 8005c1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c20:	6845      	ldr	r5, [r0, #4]
 8005c22:	4604      	mov	r4, r0
 8005c24:	4628      	mov	r0, r5
 8005c26:	f008 fba7 	bl	800e378 <GUI_ALLOC_LockH>
 8005c2a:	af02      	add	r7, sp, #8
 8005c2c:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8005c2e:	f847 0d08 	str.w	r0, [r7, #-8]!
 8005c32:	f8d0 9034 	ldr.w	r9, [r0, #52]	; 0x34
 8005c36:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 8005c3a:	4668      	mov	r0, sp
 8005c3c:	f008 fbaa 	bl	800e394 <GUI_ALLOC_UnlockH>
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	2b1f      	cmp	r3, #31
 8005c44:	d02f      	beq.n	8005ca6 <WINDOW_Callback+0x8a>
 8005c46:	dc06      	bgt.n	8005c56 <WINDOW_Callback+0x3a>
 8005c48:	2b0f      	cmp	r3, #15
 8005c4a:	d060      	beq.n	8005d0e <WINDOW_Callback+0xf2>
 8005c4c:	2b1e      	cmp	r3, #30
 8005c4e:	d015      	beq.n	8005c7c <WINDOW_Callback+0x60>
 8005c50:	2b0e      	cmp	r3, #14
 8005c52:	d169      	bne.n	8005d28 <WINDOW_Callback+0x10c>
 8005c54:	e04a      	b.n	8005cec <WINDOW_Callback+0xd0>
 8005c56:	2b22      	cmp	r3, #34	; 0x22
 8005c58:	d063      	beq.n	8005d22 <WINDOW_Callback+0x106>
 8005c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c5c:	d002      	beq.n	8005c64 <WINDOW_Callback+0x48>
 8005c5e:	2b20      	cmp	r3, #32
 8005c60:	d162      	bne.n	8005d28 <WINDOW_Callback+0x10c>
 8005c62:	e025      	b.n	8005cb0 <WINDOW_Callback+0x94>
 8005c64:	4628      	mov	r0, r5
 8005c66:	f008 fb87 	bl	800e378 <GUI_ALLOC_LockH>
 8005c6a:	68e3      	ldr	r3, [r4, #12]
 8005c6c:	9000      	str	r0, [sp, #0]
 8005c6e:	b10b      	cbz	r3, 8005c74 <WINDOW_Callback+0x58>
 8005c70:	63c3      	str	r3, [r0, #60]	; 0x3c
 8005c72:	e001      	b.n	8005c78 <WINDOW_Callback+0x5c>
 8005c74:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005c76:	60e3      	str	r3, [r4, #12]
 8005c78:	4668      	mov	r0, sp
 8005c7a:	e034      	b.n	8005ce6 <WINDOW_Callback+0xca>
 8005c7c:	68e4      	ldr	r4, [r4, #12]
 8005c7e:	2c01      	cmp	r4, #1
 8005c80:	d15b      	bne.n	8005d3a <WINDOW_Callback+0x11e>
 8005c82:	4630      	mov	r0, r6
 8005c84:	f001 fc30 	bl	80074e8 <WM_IsWindow>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	d03c      	beq.n	8005d06 <WINDOW_Callback+0xea>
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f001 fa55 	bl	800713c <WM_SetFocus>
 8005c92:	4630      	mov	r0, r6
 8005c94:	f001 fc44 	bl	8007520 <WM_HasFocus>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d04e      	beq.n	8005d3a <WINDOW_Callback+0x11e>
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	f000 f911 	bl	8005ec6 <WIDGET_OrState>
 8005ca4:	e049      	b.n	8005d3a <WINDOW_Callback+0x11e>
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	4621      	mov	r1, r4
 8005caa:	f000 f949 	bl	8005f40 <WIDGET_HandleActive>
 8005cae:	e044      	b.n	8005d3a <WINDOW_Callback+0x11e>
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	f008 fb61 	bl	800e378 <GUI_ALLOC_LockH>
 8005cb6:	68e4      	ldr	r4, [r4, #12]
 8005cb8:	9001      	str	r0, [sp, #4]
 8005cba:	b19c      	cbz	r4, 8005ce4 <WINDOW_Callback+0xc8>
 8005cbc:	6860      	ldr	r0, [r4, #4]
 8005cbe:	4629      	mov	r1, r5
 8005cc0:	f001 f8ec 	bl	8006e9c <WM__IsAncestorOrSelf>
 8005cc4:	b930      	cbnz	r0, 8005cd4 <WINDOW_Callback+0xb8>
 8005cc6:	6820      	ldr	r0, [r4, #0]
 8005cc8:	4629      	mov	r1, r5
 8005cca:	f001 f8d6 	bl	8006e7a <WM__IsAncestor>
 8005cce:	b148      	cbz	r0, 8005ce4 <WINDOW_Callback+0xc8>
 8005cd0:	6822      	ldr	r2, [r4, #0]
 8005cd2:	e005      	b.n	8005ce0 <WINDOW_Callback+0xc4>
 8005cd4:	6860      	ldr	r0, [r4, #4]
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	f001 f8cf 	bl	8006e7a <WM__IsAncestor>
 8005cdc:	b110      	cbz	r0, 8005ce4 <WINDOW_Callback+0xc8>
 8005cde:	6862      	ldr	r2, [r4, #4]
 8005ce0:	9b01      	ldr	r3, [sp, #4]
 8005ce2:	639a      	str	r2, [r3, #56]	; 0x38
 8005ce4:	a801      	add	r0, sp, #4
 8005ce6:	f008 fb55 	bl	800e394 <GUI_ALLOC_UnlockH>
 8005cea:	e026      	b.n	8005d3a <WINDOW_Callback+0x11e>
 8005cec:	68e3      	ldr	r3, [r4, #12]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	2a00      	cmp	r2, #0
 8005cf2:	dd19      	ble.n	8005d28 <WINDOW_Callback+0x10c>
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b09      	cmp	r3, #9
 8005cf8:	d005      	beq.n	8005d06 <WINDOW_Callback+0xea>
 8005cfa:	2b0a      	cmp	r3, #10
 8005cfc:	d114      	bne.n	8005d28 <WINDOW_Callback+0x10c>
 8005cfe:	4628      	mov	r0, r5
 8005d00:	f001 f9b0 	bl	8007064 <WM_SetFocusOnPrevChild>
 8005d04:	e019      	b.n	8005d3a <WINDOW_Callback+0x11e>
 8005d06:	4628      	mov	r0, r5
 8005d08:	f001 f9e0 	bl	80070cc <WM_SetFocusOnNextChild>
 8005d0c:	e015      	b.n	8005d3a <WINDOW_Callback+0x11e>
 8005d0e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8005d12:	4598      	cmp	r8, r3
 8005d14:	d008      	beq.n	8005d28 <WINDOW_Callback+0x10c>
 8005d16:	4640      	mov	r0, r8
 8005d18:	f006 f87e 	bl	800be18 <LCD_SetBkColor>
 8005d1c:	f007 ff7c 	bl	800dc18 <GUI_Clear>
 8005d20:	e002      	b.n	8005d28 <WINDOW_Callback+0x10c>
 8005d22:	f8c4 800c 	str.w	r8, [r4, #12]
 8005d26:	e008      	b.n	8005d3a <WINDOW_Callback+0x11e>
 8005d28:	f1b9 0f00 	cmp.w	r9, #0
 8005d2c:	d002      	beq.n	8005d34 <WINDOW_Callback+0x118>
 8005d2e:	4620      	mov	r0, r4
 8005d30:	47c8      	blx	r9
 8005d32:	e002      	b.n	8005d3a <WINDOW_Callback+0x11e>
 8005d34:	4620      	mov	r0, r4
 8005d36:	f002 fe51 	bl	80089dc <WM_DefaultProc>
 8005d3a:	b003      	add	sp, #12
 8005d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005d40 <WINDOW_CreateUser>:
 8005d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d44:	b086      	sub	sp, #24
 8005d46:	461d      	mov	r5, r3
 8005d48:	4680      	mov	r8, r0
 8005d4a:	460f      	mov	r7, r1
 8005d4c:	4616      	mov	r6, r2
 8005d4e:	f006 fe2f 	bl	800c9b0 <GUI_Lock>
 8005d52:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005d54:	9400      	str	r4, [sp, #0]
 8005d56:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005d58:	9401      	str	r4, [sp, #4]
 8005d5a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005d5c:	4b12      	ldr	r3, [pc, #72]	; (8005da8 <WINDOW_CreateUser+0x68>)
 8005d5e:	9302      	str	r3, [sp, #8]
 8005d60:	3418      	adds	r4, #24
 8005d62:	9403      	str	r4, [sp, #12]
 8005d64:	4640      	mov	r0, r8
 8005d66:	4639      	mov	r1, r7
 8005d68:	4632      	mov	r2, r6
 8005d6a:	462b      	mov	r3, r5
 8005d6c:	f002 fa38 	bl	80081e0 <WM_CreateWindowAsChild>
 8005d70:	4604      	mov	r4, r0
 8005d72:	b190      	cbz	r0, 8005d9a <WINDOW_CreateUser+0x5a>
 8005d74:	f008 fb00 	bl	800e378 <GUI_ALLOC_LockH>
 8005d78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005d7a:	9005      	str	r0, [sp, #20]
 8005d7c:	2210      	movs	r2, #16
 8005d7e:	f000 f8d7 	bl	8005f30 <WIDGET__Init>
 8005d82:	a806      	add	r0, sp, #24
 8005d84:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005d86:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8005d8a:	6351      	str	r1, [r2, #52]	; 0x34
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	6391      	str	r1, [r2, #56]	; 0x38
 8005d90:	4906      	ldr	r1, [pc, #24]	; (8005dac <WINDOW_CreateUser+0x6c>)
 8005d92:	6809      	ldr	r1, [r1, #0]
 8005d94:	6411      	str	r1, [r2, #64]	; 0x40
 8005d96:	f008 fafd 	bl	800e394 <GUI_ALLOC_UnlockH>
 8005d9a:	f006 fdff 	bl	800c99c <GUI_Unlock>
 8005d9e:	4620      	mov	r0, r4
 8005da0:	b006      	add	sp, #24
 8005da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005da6:	bf00      	nop
 8005da8:	08005c1d 	.word	0x08005c1d
 8005dac:	20000038 	.word	0x20000038

08005db0 <WINDOW_CreateIndirect>:
 8005db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005db2:	b087      	sub	sp, #28
 8005db4:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8005db8:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8005dbc:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 8005dc0:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8005dc4:	9100      	str	r1, [sp, #0]
 8005dc6:	8a41      	ldrh	r1, [r0, #18]
 8005dc8:	9101      	str	r1, [sp, #4]
 8005dca:	2100      	movs	r1, #0
 8005dcc:	9102      	str	r1, [sp, #8]
 8005dce:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8005dd2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005dd4:	9103      	str	r1, [sp, #12]
 8005dd6:	9404      	str	r4, [sp, #16]
 8005dd8:	6984      	ldr	r4, [r0, #24]
 8005dda:	9405      	str	r4, [sp, #20]
 8005ddc:	eb0e 0002 	add.w	r0, lr, r2
 8005de0:	18f9      	adds	r1, r7, r3
 8005de2:	4632      	mov	r2, r6
 8005de4:	462b      	mov	r3, r5
 8005de6:	f7ff ffab 	bl	8005d40 <WINDOW_CreateUser>
 8005dea:	b007      	add	sp, #28
 8005dec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005dee <WIDGET__RotateRect90>:
 8005dee:	f9b0 3000 	ldrsh.w	r3, [r0]
 8005df2:	b570      	push	{r4, r5, r6, lr}
 8005df4:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8005df8:	8815      	ldrh	r5, [r2, #0]
 8005dfa:	88d0      	ldrh	r0, [r2, #6]
 8005dfc:	8894      	ldrh	r4, [r2, #4]
 8005dfe:	8852      	ldrh	r2, [r2, #2]
 8005e00:	804d      	strh	r5, [r1, #2]
 8005e02:	1af3      	subs	r3, r6, r3
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	1a18      	subs	r0, r3, r0
 8005e08:	1a9b      	subs	r3, r3, r2
 8005e0a:	8008      	strh	r0, [r1, #0]
 8005e0c:	808b      	strh	r3, [r1, #4]
 8005e0e:	80cc      	strh	r4, [r1, #6]
 8005e10:	bd70      	pop	{r4, r5, r6, pc}

08005e12 <WIDGET__GetClientRect>:
 8005e12:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005e14:	071b      	lsls	r3, r3, #28
 8005e16:	b513      	push	{r0, r1, r4, lr}
 8005e18:	460c      	mov	r4, r1
 8005e1a:	d50f      	bpl.n	8005e3c <WIDGET__GetClientRect+0x2a>
 8005e1c:	4668      	mov	r0, sp
 8005e1e:	f001 fc97 	bl	8007750 <WM_GetClientRect>
 8005e22:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005e26:	8023      	strh	r3, [r4, #0]
 8005e28:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005e2c:	80a3      	strh	r3, [r4, #4]
 8005e2e:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e32:	8063      	strh	r3, [r4, #2]
 8005e34:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005e38:	80e3      	strh	r3, [r4, #6]
 8005e3a:	e002      	b.n	8005e42 <WIDGET__GetClientRect+0x30>
 8005e3c:	4608      	mov	r0, r1
 8005e3e:	f001 fc87 	bl	8007750 <WM_GetClientRect>
 8005e42:	b002      	add	sp, #8
 8005e44:	bd10      	pop	{r4, pc}

08005e46 <WIDGET__GetInsideRect>:
 8005e46:	b538      	push	{r3, r4, r5, lr}
 8005e48:	4604      	mov	r4, r0
 8005e4a:	460d      	mov	r5, r1
 8005e4c:	f002 f936 	bl	80080bc <WM__GetClientRectWin>
 8005e50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005e52:	4628      	mov	r0, r5
 8005e54:	4629      	mov	r1, r5
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e5c:	f006 b85a 	b.w	800bf14 <GUI__ReduceRect>

08005e60 <WIDGET__GetXSize>:
 8005e60:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005e62:	071b      	lsls	r3, r3, #28
 8005e64:	bf47      	ittee	mi
 8005e66:	f9b0 2006 	ldrshmi.w	r2, [r0, #6]
 8005e6a:	f9b0 3002 	ldrshmi.w	r3, [r0, #2]
 8005e6e:	f9b0 2004 	ldrshpl.w	r2, [r0, #4]
 8005e72:	f9b0 3000 	ldrshpl.w	r3, [r0]
 8005e76:	1ad0      	subs	r0, r2, r3
 8005e78:	3001      	adds	r0, #1
 8005e7a:	4770      	bx	lr

08005e7c <WIDGET__GetYSize>:
 8005e7c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005e7e:	071b      	lsls	r3, r3, #28
 8005e80:	bf47      	ittee	mi
 8005e82:	f9b0 2004 	ldrshmi.w	r2, [r0, #4]
 8005e86:	f9b0 3000 	ldrshmi.w	r3, [r0]
 8005e8a:	f9b0 2006 	ldrshpl.w	r2, [r0, #6]
 8005e8e:	f9b0 3002 	ldrshpl.w	r3, [r0, #2]
 8005e92:	1ad0      	subs	r0, r2, r3
 8005e94:	3001      	adds	r0, #1
 8005e96:	4770      	bx	lr

08005e98 <WIDGET_SetState>:
 8005e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	460d      	mov	r5, r1
 8005e9e:	f006 fd87 	bl	800c9b0 <GUI_Lock>
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f008 fa68 	bl	800e378 <GUI_ALLOC_LockH>
 8005ea8:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8005eaa:	9001      	str	r0, [sp, #4]
 8005eac:	4295      	cmp	r5, r2
 8005eae:	d003      	beq.n	8005eb8 <WIDGET_SetState+0x20>
 8005eb0:	8645      	strh	r5, [r0, #50]	; 0x32
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f002 f94f 	bl	8008156 <WM_InvalidateWindow>
 8005eb8:	a801      	add	r0, sp, #4
 8005eba:	f008 fa6b 	bl	800e394 <GUI_ALLOC_UnlockH>
 8005ebe:	f006 fd6d 	bl	800c99c <GUI_Unlock>
 8005ec2:	b003      	add	sp, #12
 8005ec4:	bd30      	pop	{r4, r5, pc}

08005ec6 <WIDGET_OrState>:
 8005ec6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ec8:	460d      	mov	r5, r1
 8005eca:	4604      	mov	r4, r0
 8005ecc:	b1a0      	cbz	r0, 8005ef8 <WIDGET_OrState+0x32>
 8005ece:	f006 fd6f 	bl	800c9b0 <GUI_Lock>
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f008 fa50 	bl	800e378 <GUI_ALLOC_LockH>
 8005ed8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005eda:	9001      	str	r0, [sp, #4]
 8005edc:	ea05 0203 	and.w	r2, r5, r3
 8005ee0:	4295      	cmp	r5, r2
 8005ee2:	d004      	beq.n	8005eee <WIDGET_OrState+0x28>
 8005ee4:	431d      	orrs	r5, r3
 8005ee6:	8645      	strh	r5, [r0, #50]	; 0x32
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f002 f934 	bl	8008156 <WM_InvalidateWindow>
 8005eee:	a801      	add	r0, sp, #4
 8005ef0:	f008 fa50 	bl	800e394 <GUI_ALLOC_UnlockH>
 8005ef4:	f006 fd52 	bl	800c99c <GUI_Unlock>
 8005ef8:	b003      	add	sp, #12
 8005efa:	bd30      	pop	{r4, r5, pc}

08005efc <WIDGET_AndState>:
 8005efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005efe:	460d      	mov	r5, r1
 8005f00:	4604      	mov	r4, r0
 8005f02:	b198      	cbz	r0, 8005f2c <WIDGET_AndState+0x30>
 8005f04:	f006 fd54 	bl	800c9b0 <GUI_Lock>
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f008 fa35 	bl	800e378 <GUI_ALLOC_LockH>
 8005f0e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005f10:	9001      	str	r0, [sp, #4]
 8005f12:	ea23 0105 	bic.w	r1, r3, r5
 8005f16:	428b      	cmp	r3, r1
 8005f18:	d003      	beq.n	8005f22 <WIDGET_AndState+0x26>
 8005f1a:	8641      	strh	r1, [r0, #50]	; 0x32
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f002 f91a 	bl	8008156 <WM_InvalidateWindow>
 8005f22:	a801      	add	r0, sp, #4
 8005f24:	f008 fa36 	bl	800e394 <GUI_ALLOC_UnlockH>
 8005f28:	f006 fd38 	bl	800c99c <GUI_Unlock>
 8005f2c:	b003      	add	sp, #12
 8005f2e:	bd30      	pop	{r4, r5, pc}

08005f30 <WIDGET__Init>:
 8005f30:	4b02      	ldr	r3, [pc, #8]	; (8005f3c <WIDGET__Init+0xc>)
 8005f32:	8642      	strh	r2, [r0, #50]	; 0x32
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005f38:	8601      	strh	r1, [r0, #48]	; 0x30
 8005f3a:	4770      	bx	lr
 8005f3c:	2000003c 	.word	0x2000003c

08005f40 <WIDGET_HandleActive>:
 8005f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f42:	460d      	mov	r5, r1
 8005f44:	b085      	sub	sp, #20
 8005f46:	4606      	mov	r6, r0
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	f000 8097 	beq.w	800607c <WIDGET_HandleActive+0x13c>
 8005f4e:	f008 fa13 	bl	800e378 <GUI_ALLOC_LockH>
 8005f52:	682b      	ldr	r3, [r5, #0]
 8005f54:	9002      	str	r0, [sp, #8]
 8005f56:	2b16      	cmp	r3, #22
 8005f58:	d056      	beq.n	8006008 <WIDGET_HandleActive+0xc8>
 8005f5a:	dc0c      	bgt.n	8005f76 <WIDGET_HandleActive+0x36>
 8005f5c:	2b11      	cmp	r3, #17
 8005f5e:	d037      	beq.n	8005fd0 <WIDGET_HandleActive+0x90>
 8005f60:	dc02      	bgt.n	8005f68 <WIDGET_HandleActive+0x28>
 8005f62:	2b0d      	cmp	r3, #13
 8005f64:	d042      	beq.n	8005fec <WIDGET_HandleActive+0xac>
 8005f66:	e082      	b.n	800606e <WIDGET_HandleActive+0x12e>
 8005f68:	2b14      	cmp	r3, #20
 8005f6a:	d07b      	beq.n	8006064 <WIDGET_HandleActive+0x124>
 8005f6c:	2b15      	cmp	r3, #21
 8005f6e:	d17e      	bne.n	800606e <WIDGET_HandleActive+0x12e>
 8005f70:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 8005f74:	e074      	b.n	8006060 <WIDGET_HandleActive+0x120>
 8005f76:	2b1f      	cmp	r3, #31
 8005f78:	d06f      	beq.n	800605a <WIDGET_HandleActive+0x11a>
 8005f7a:	dc02      	bgt.n	8005f82 <WIDGET_HandleActive+0x42>
 8005f7c:	2b1e      	cmp	r3, #30
 8005f7e:	d046      	beq.n	800600e <WIDGET_HandleActive+0xce>
 8005f80:	e075      	b.n	800606e <WIDGET_HandleActive+0x12e>
 8005f82:	2b31      	cmp	r3, #49	; 0x31
 8005f84:	d022      	beq.n	8005fcc <WIDGET_HandleActive+0x8c>
 8005f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f8a:	d170      	bne.n	800606e <WIDGET_HandleActive+0x12e>
 8005f8c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005f8e:	6819      	ldr	r1, [r3, #0]
 8005f90:	68eb      	ldr	r3, [r5, #12]
 8005f92:	62c3      	str	r3, [r0, #44]	; 0x2c
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	a802      	add	r0, sp, #8
 8005f98:	1acd      	subs	r5, r1, r3
 8005f9a:	f008 f9fb 	bl	800e394 <GUI_ALLOC_UnlockH>
 8005f9e:	f006 fd07 	bl	800c9b0 <GUI_Lock>
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f008 f9e8 	bl	800e378 <GUI_ALLOC_LockH>
 8005fa8:	ac04      	add	r4, sp, #16
 8005faa:	4269      	negs	r1, r5
 8005fac:	f844 0d04 	str.w	r0, [r4, #-4]!
 8005fb0:	460a      	mov	r2, r1
 8005fb2:	462b      	mov	r3, r5
 8005fb4:	9500      	str	r5, [sp, #0]
 8005fb6:	f000 febf 	bl	8006d38 <WM__UpdateChildPositions>
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f008 f9ea 	bl	800e394 <GUI_ALLOC_UnlockH>
 8005fc0:	f006 fcec 	bl	800c99c <GUI_Unlock>
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	f002 f8c6 	bl	8008156 <WM_InvalidateWindow>
 8005fca:	e04e      	b.n	800606a <WIDGET_HandleActive+0x12a>
 8005fcc:	2400      	movs	r4, #0
 8005fce:	e03f      	b.n	8006050 <WIDGET_HandleActive+0x110>
 8005fd0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8005fd2:	06d9      	lsls	r1, r3, #27
 8005fd4:	d54b      	bpl.n	800606e <WIDGET_HandleActive+0x12e>
 8005fd6:	68eb      	ldr	r3, [r5, #12]
 8005fd8:	7a1b      	ldrb	r3, [r3, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d047      	beq.n	800606e <WIDGET_HandleActive+0x12e>
 8005fde:	a802      	add	r0, sp, #8
 8005fe0:	f008 f9d8 	bl	800e394 <GUI_ALLOC_UnlockH>
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f001 f8a9 	bl	800713c <WM_SetFocus>
 8005fea:	e040      	b.n	800606e <WIDGET_HandleActive+0x12e>
 8005fec:	68eb      	ldr	r3, [r5, #12]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d03c      	beq.n	800606e <WIDGET_HandleActive+0x12e>
 8005ff4:	7a1b      	ldrb	r3, [r3, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d039      	beq.n	800606e <WIDGET_HandleActive+0x12e>
 8005ffa:	a802      	add	r0, sp, #8
 8005ffc:	f008 f9ca 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006000:	4630      	mov	r0, r6
 8006002:	f001 fbbd 	bl	8007780 <WM_BringToTop>
 8006006:	e030      	b.n	800606a <WIDGET_HandleActive+0x12a>
 8006008:	68eb      	ldr	r3, [r5, #12]
 800600a:	8603      	strh	r3, [r0, #48]	; 0x30
 800600c:	e02d      	b.n	800606a <WIDGET_HandleActive+0x12a>
 800600e:	68eb      	ldr	r3, [r5, #12]
 8006010:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 8006012:	2b01      	cmp	r3, #1
 8006014:	d108      	bne.n	8006028 <WIDGET_HandleActive+0xe8>
 8006016:	06ca      	lsls	r2, r1, #27
 8006018:	d50d      	bpl.n	8006036 <WIDGET_HandleActive+0xf6>
 800601a:	4630      	mov	r0, r6
 800601c:	f041 0101 	orr.w	r1, r1, #1
 8006020:	f7ff ff3a 	bl	8005e98 <WIDGET_SetState>
 8006024:	2708      	movs	r7, #8
 8006026:	e008      	b.n	800603a <WIDGET_HandleActive+0xfa>
 8006028:	f021 0101 	bic.w	r1, r1, #1
 800602c:	4630      	mov	r0, r6
 800602e:	f7ff ff33 	bl	8005e98 <WIDGET_SetState>
 8006032:	2709      	movs	r7, #9
 8006034:	e001      	b.n	800603a <WIDGET_HandleActive+0xfa>
 8006036:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800603a:	a802      	add	r0, sp, #8
 800603c:	f008 f9aa 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006040:	1c7b      	adds	r3, r7, #1
 8006042:	f04f 0400 	mov.w	r4, #0
 8006046:	d005      	beq.n	8006054 <WIDGET_HandleActive+0x114>
 8006048:	4630      	mov	r0, r6
 800604a:	4639      	mov	r1, r7
 800604c:	f001 f999 	bl	8007382 <WM_NotifyParent>
 8006050:	60ec      	str	r4, [r5, #12]
 8006052:	e00d      	b.n	8006070 <WIDGET_HandleActive+0x130>
 8006054:	2301      	movs	r3, #1
 8006056:	60eb      	str	r3, [r5, #12]
 8006058:	e00a      	b.n	8006070 <WIDGET_HandleActive+0x130>
 800605a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800605c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006060:	60eb      	str	r3, [r5, #12]
 8006062:	e002      	b.n	800606a <WIDGET_HandleActive+0x12a>
 8006064:	68e9      	ldr	r1, [r5, #12]
 8006066:	f7ff feee 	bl	8005e46 <WIDGET__GetInsideRect>
 800606a:	2400      	movs	r4, #0
 800606c:	e000      	b.n	8006070 <WIDGET_HandleActive+0x130>
 800606e:	2401      	movs	r4, #1
 8006070:	9b02      	ldr	r3, [sp, #8]
 8006072:	b123      	cbz	r3, 800607e <WIDGET_HandleActive+0x13e>
 8006074:	a802      	add	r0, sp, #8
 8006076:	f008 f98d 	bl	800e394 <GUI_ALLOC_UnlockH>
 800607a:	e000      	b.n	800607e <WIDGET_HandleActive+0x13e>
 800607c:	2401      	movs	r4, #1
 800607e:	4620      	mov	r0, r4
 8006080:	b005      	add	sp, #20
 8006082:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006084 <WIDGET__DrawVLine>:
 8006084:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006086:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 8006088:	0724      	lsls	r4, r4, #28
 800608a:	d515      	bpl.n	80060b8 <WIDGET__DrawVLine+0x34>
 800608c:	b289      	uxth	r1, r1
 800608e:	f8ad 1000 	strh.w	r1, [sp]
 8006092:	f8ad 1004 	strh.w	r1, [sp, #4]
 8006096:	f8ad 2002 	strh.w	r2, [sp, #2]
 800609a:	a902      	add	r1, sp, #8
 800609c:	466a      	mov	r2, sp
 800609e:	f8ad 3006 	strh.w	r3, [sp, #6]
 80060a2:	f7ff fea4 	bl	8005dee <WIDGET__RotateRect90>
 80060a6:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 80060aa:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80060ae:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80060b2:	f007 f92b 	bl	800d30c <GUI_DrawHLine>
 80060b6:	e004      	b.n	80060c2 <WIDGET__DrawVLine+0x3e>
 80060b8:	4608      	mov	r0, r1
 80060ba:	4611      	mov	r1, r2
 80060bc:	461a      	mov	r2, r3
 80060be:	f007 f8f1 	bl	800d2a4 <GUI_DrawVLine>
 80060c2:	b004      	add	sp, #16
 80060c4:	bd10      	pop	{r4, pc}

080060c6 <WIDGET__FillRectEx>:
 80060c6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80060c8:	071b      	lsls	r3, r3, #28
 80060ca:	b507      	push	{r0, r1, r2, lr}
 80060cc:	460a      	mov	r2, r1
 80060ce:	d503      	bpl.n	80060d8 <WIDGET__FillRectEx+0x12>
 80060d0:	4669      	mov	r1, sp
 80060d2:	f7ff fe8c 	bl	8005dee <WIDGET__RotateRect90>
 80060d6:	466a      	mov	r2, sp
 80060d8:	4610      	mov	r0, r2
 80060da:	f006 fff1 	bl	800d0c0 <GUI_FillRectEx>
 80060de:	b003      	add	sp, #12
 80060e0:	f85d fb04 	ldr.w	pc, [sp], #4

080060e4 <WIDGET__DrawTriangle>:
 80060e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e6:	461c      	mov	r4, r3
 80060e8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80060ea:	9f06      	ldr	r7, [sp, #24]
 80060ec:	071b      	lsls	r3, r3, #28
 80060ee:	460d      	mov	r5, r1
 80060f0:	4616      	mov	r6, r2
 80060f2:	d50a      	bpl.n	800610a <WIDGET__DrawTriangle+0x26>
 80060f4:	2c00      	cmp	r4, #0
 80060f6:	db07      	blt.n	8006108 <WIDGET__DrawTriangle+0x24>
 80060f8:	4628      	mov	r0, r5
 80060fa:	1b31      	subs	r1, r6, r4
 80060fc:	19a2      	adds	r2, r4, r6
 80060fe:	f007 f905 	bl	800d30c <GUI_DrawHLine>
 8006102:	3c01      	subs	r4, #1
 8006104:	443d      	add	r5, r7
 8006106:	e7f5      	b.n	80060f4 <WIDGET__DrawTriangle+0x10>
 8006108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800610a:	2c00      	cmp	r4, #0
 800610c:	db07      	blt.n	800611e <WIDGET__DrawTriangle+0x3a>
 800610e:	4628      	mov	r0, r5
 8006110:	1b31      	subs	r1, r6, r4
 8006112:	19a2      	adds	r2, r4, r6
 8006114:	f007 f8c6 	bl	800d2a4 <GUI_DrawVLine>
 8006118:	3c01      	subs	r4, #1
 800611a:	443d      	add	r5, r7
 800611c:	e7f5      	b.n	800610a <WIDGET__DrawTriangle+0x26>
 800611e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006120 <TEXT_SetDefaultFont>:
 8006120:	4b01      	ldr	r3, [pc, #4]	; (8006128 <TEXT_SetDefaultFont+0x8>)
 8006122:	6018      	str	r0, [r3, #0]
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	20000040 	.word	0x20000040

0800612c <TEXT_SetDefaultTextColor>:
 800612c:	4b01      	ldr	r3, [pc, #4]	; (8006134 <TEXT_SetDefaultTextColor+0x8>)
 800612e:	6058      	str	r0, [r3, #4]
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	20000040 	.word	0x20000040

08006138 <SCROLLBAR_SetDefaultWidth>:
 8006138:	4b02      	ldr	r3, [pc, #8]	; (8006144 <SCROLLBAR_SetDefaultWidth+0xc>)
 800613a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800613e:	8018      	strh	r0, [r3, #0]
 8006140:	4610      	mov	r0, r2
 8006142:	4770      	bx	lr
 8006144:	20000064 	.word	0x20000064

08006148 <SCROLLBAR_SetDefaultColor>:
 8006148:	2902      	cmp	r1, #2
 800614a:	bf9d      	ittte	ls
 800614c:	4a03      	ldrls	r2, [pc, #12]	; (800615c <SCROLLBAR_SetDefaultColor+0x14>)
 800614e:	f852 3021 	ldrls.w	r3, [r2, r1, lsl #2]
 8006152:	f842 0021 	strls.w	r0, [r2, r1, lsl #2]
 8006156:	2300      	movhi	r3, #0
 8006158:	4618      	mov	r0, r3
 800615a:	4770      	bx	lr
 800615c:	20000050 	.word	0x20000050

08006160 <SCROLLBAR__Rect2VRect>:
 8006160:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8006162:	071b      	lsls	r3, r3, #28
 8006164:	b510      	push	{r4, lr}
 8006166:	d512      	bpl.n	800618e <SCROLLBAR__Rect2VRect+0x2e>
 8006168:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800616c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8006170:	8808      	ldrh	r0, [r1, #0]
 8006172:	884c      	ldrh	r4, [r1, #2]
 8006174:	800c      	strh	r4, [r1, #0]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	888a      	ldrh	r2, [r1, #4]
 800617a:	88cc      	ldrh	r4, [r1, #6]
 800617c:	808c      	strh	r4, [r1, #4]
 800617e:	3301      	adds	r3, #1
 8006180:	b29b      	uxth	r3, r3
 8006182:	43c0      	mvns	r0, r0
 8006184:	43d2      	mvns	r2, r2
 8006186:	4418      	add	r0, r3
 8006188:	4413      	add	r3, r2
 800618a:	80c8      	strh	r0, [r1, #6]
 800618c:	804b      	strh	r3, [r1, #2]
 800618e:	bd10      	pop	{r4, pc}

08006190 <LISTVIEW_SetDefaultBkColor>:
 8006190:	2803      	cmp	r0, #3
 8006192:	4603      	mov	r3, r0
 8006194:	bf9d      	ittte	ls
 8006196:	4a03      	ldrls	r2, [pc, #12]	; (80061a4 <LISTVIEW_SetDefaultBkColor+0x14>)
 8006198:	f852 0020 	ldrls.w	r0, [r2, r0, lsl #2]
 800619c:	f842 1023 	strls.w	r1, [r2, r3, lsl #2]
 80061a0:	2000      	movhi	r0, #0
 80061a2:	4770      	bx	lr
 80061a4:	20000068 	.word	0x20000068

080061a8 <LISTVIEW_SetDefaultGridColor>:
 80061a8:	4b02      	ldr	r3, [pc, #8]	; (80061b4 <LISTVIEW_SetDefaultGridColor+0xc>)
 80061aa:	6a1a      	ldr	r2, [r3, #32]
 80061ac:	6218      	str	r0, [r3, #32]
 80061ae:	4610      	mov	r0, r2
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	20000068 	.word	0x20000068

080061b8 <HEADER_SetDefaultBkColor>:
 80061b8:	4b02      	ldr	r3, [pc, #8]	; (80061c4 <HEADER_SetDefaultBkColor+0xc>)
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	6058      	str	r0, [r3, #4]
 80061be:	4610      	mov	r0, r2
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	20000098 	.word	0x20000098

080061c8 <HEADER_SetDefaultTextColor>:
 80061c8:	4b02      	ldr	r3, [pc, #8]	; (80061d4 <HEADER_SetDefaultTextColor+0xc>)
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	6098      	str	r0, [r3, #8]
 80061ce:	4610      	mov	r0, r2
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	20000098 	.word	0x20000098

080061d8 <HEADER_SetDefaultFont>:
 80061d8:	4b02      	ldr	r3, [pc, #8]	; (80061e4 <HEADER_SetDefaultFont+0xc>)
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	6018      	str	r0, [r3, #0]
 80061de:	4610      	mov	r0, r2
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	20000098 	.word	0x20000098

080061e8 <GUI_DRAW__Draw>:
 80061e8:	e92d 43e3 	stmdb	sp!, {r0, r1, r5, r6, r7, r8, r9, lr}
 80061ec:	4688      	mov	r8, r1
 80061ee:	4617      	mov	r7, r2
 80061f0:	461e      	mov	r6, r3
 80061f2:	4681      	mov	r9, r0
 80061f4:	b170      	cbz	r0, 8006214 <GUI_DRAW__Draw+0x2c>
 80061f6:	f008 f8bf 	bl	800e378 <GUI_ALLOC_LockH>
 80061fa:	4605      	mov	r5, r0
 80061fc:	a802      	add	r0, sp, #8
 80061fe:	682b      	ldr	r3, [r5, #0]
 8006200:	f840 5d04 	str.w	r5, [r0, #-4]!
 8006204:	681d      	ldr	r5, [r3, #0]
 8006206:	f008 f8c5 	bl	800e394 <GUI_ALLOC_UnlockH>
 800620a:	4648      	mov	r0, r9
 800620c:	4641      	mov	r1, r8
 800620e:	463a      	mov	r2, r7
 8006210:	4633      	mov	r3, r6
 8006212:	47a8      	blx	r5
 8006214:	b002      	add	sp, #8
 8006216:	e8bd 83e0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, pc}

0800621a <GUI_DRAW__GetXSize>:
 800621a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800621c:	4604      	mov	r4, r0
 800621e:	b160      	cbz	r0, 800623a <GUI_DRAW__GetXSize+0x20>
 8006220:	f008 f8aa 	bl	800e378 <GUI_ALLOC_LockH>
 8006224:	ab02      	add	r3, sp, #8
 8006226:	6802      	ldr	r2, [r0, #0]
 8006228:	f843 0d04 	str.w	r0, [r3, #-4]!
 800622c:	4618      	mov	r0, r3
 800622e:	6855      	ldr	r5, [r2, #4]
 8006230:	f008 f8b0 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006234:	4620      	mov	r0, r4
 8006236:	47a8      	blx	r5
 8006238:	e7ff      	b.n	800623a <GUI_DRAW__GetXSize+0x20>
 800623a:	b003      	add	sp, #12
 800623c:	bd30      	pop	{r4, r5, pc}

0800623e <GUI_DRAW__GetYSize>:
 800623e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006240:	4604      	mov	r4, r0
 8006242:	b160      	cbz	r0, 800625e <GUI_DRAW__GetYSize+0x20>
 8006244:	f008 f898 	bl	800e378 <GUI_ALLOC_LockH>
 8006248:	ab02      	add	r3, sp, #8
 800624a:	6802      	ldr	r2, [r0, #0]
 800624c:	f843 0d04 	str.w	r0, [r3, #-4]!
 8006250:	4618      	mov	r0, r3
 8006252:	6895      	ldr	r5, [r2, #8]
 8006254:	f008 f89e 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006258:	4620      	mov	r0, r4
 800625a:	47a8      	blx	r5
 800625c:	e7ff      	b.n	800625e <GUI_DRAW__GetYSize+0x20>
 800625e:	b003      	add	sp, #12
 8006260:	bd30      	pop	{r4, r5, pc}

08006262 <GUI_ARRAY__GethItem>:
 8006262:	8803      	ldrh	r3, [r0, #0]
 8006264:	4299      	cmp	r1, r3
 8006266:	b513      	push	{r0, r1, r4, lr}
 8006268:	460c      	mov	r4, r1
 800626a:	d20e      	bcs.n	800628a <GUI_ARRAY__GethItem+0x28>
 800626c:	6840      	ldr	r0, [r0, #4]
 800626e:	b150      	cbz	r0, 8006286 <GUI_ARRAY__GethItem+0x24>
 8006270:	f008 f882 	bl	800e378 <GUI_ALLOC_LockH>
 8006274:	ab02      	add	r3, sp, #8
 8006276:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800627a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800627e:	4618      	mov	r0, r3
 8006280:	f008 f888 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006284:	e002      	b.n	800628c <GUI_ARRAY__GethItem+0x2a>
 8006286:	4604      	mov	r4, r0
 8006288:	e000      	b.n	800628c <GUI_ARRAY__GethItem+0x2a>
 800628a:	2400      	movs	r4, #0
 800628c:	4620      	mov	r0, r4
 800628e:	b002      	add	sp, #8
 8006290:	bd10      	pop	{r4, pc}

08006292 <GUI_ARRAY__GetpItemLocked>:
 8006292:	b508      	push	{r3, lr}
 8006294:	f7ff ffe5 	bl	8006262 <GUI_ARRAY__GethItem>
 8006298:	b118      	cbz	r0, 80062a2 <GUI_ARRAY__GetpItemLocked+0x10>
 800629a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800629e:	f008 b86b 	b.w	800e378 <GUI_ALLOC_LockH>
 80062a2:	bd08      	pop	{r3, pc}

080062a4 <GUI_ARRAY_GetNumItems>:
 80062a4:	b513      	push	{r0, r1, r4, lr}
 80062a6:	4604      	mov	r4, r0
 80062a8:	b140      	cbz	r0, 80062bc <GUI_ARRAY_GetNumItems+0x18>
 80062aa:	f008 f865 	bl	800e378 <GUI_ALLOC_LockH>
 80062ae:	ab02      	add	r3, sp, #8
 80062b0:	8804      	ldrh	r4, [r0, #0]
 80062b2:	f843 0d04 	str.w	r0, [r3, #-4]!
 80062b6:	4618      	mov	r0, r3
 80062b8:	f008 f86c 	bl	800e394 <GUI_ALLOC_UnlockH>
 80062bc:	4620      	mov	r0, r4
 80062be:	b002      	add	sp, #8
 80062c0:	bd10      	pop	{r4, pc}

080062c2 <GUI_ARRAY_GethItem>:
 80062c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062c4:	460e      	mov	r6, r1
 80062c6:	4605      	mov	r5, r0
 80062c8:	b158      	cbz	r0, 80062e2 <GUI_ARRAY_GethItem+0x20>
 80062ca:	f008 f855 	bl	800e378 <GUI_ALLOC_LockH>
 80062ce:	ac02      	add	r4, sp, #8
 80062d0:	4631      	mov	r1, r6
 80062d2:	f844 0d04 	str.w	r0, [r4, #-4]!
 80062d6:	f7ff ffc4 	bl	8006262 <GUI_ARRAY__GethItem>
 80062da:	4605      	mov	r5, r0
 80062dc:	4620      	mov	r0, r4
 80062de:	f008 f859 	bl	800e394 <GUI_ALLOC_UnlockH>
 80062e2:	4628      	mov	r0, r5
 80062e4:	b002      	add	sp, #8
 80062e6:	bd70      	pop	{r4, r5, r6, pc}

080062e8 <GUI_ARRAY_GetpItemLocked>:
 80062e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062ea:	460e      	mov	r6, r1
 80062ec:	4605      	mov	r5, r0
 80062ee:	b158      	cbz	r0, 8006308 <GUI_ARRAY_GetpItemLocked+0x20>
 80062f0:	f008 f842 	bl	800e378 <GUI_ALLOC_LockH>
 80062f4:	ac02      	add	r4, sp, #8
 80062f6:	4631      	mov	r1, r6
 80062f8:	f844 0d04 	str.w	r0, [r4, #-4]!
 80062fc:	f7ff ffc9 	bl	8006292 <GUI_ARRAY__GetpItemLocked>
 8006300:	4605      	mov	r5, r0
 8006302:	4620      	mov	r0, r4
 8006304:	f008 f846 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006308:	4628      	mov	r0, r5
 800630a:	b002      	add	sp, #8
 800630c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006310 <FRAMEWIN_SetDefaultFont>:
 8006310:	4b01      	ldr	r3, [pc, #4]	; (8006318 <FRAMEWIN_SetDefaultFont+0x8>)
 8006312:	6018      	str	r0, [r3, #0]
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	200000b4 	.word	0x200000b4

0800631c <FRAMEWIN_SetDefaultBarColor>:
 800631c:	2801      	cmp	r0, #1
 800631e:	d803      	bhi.n	8006328 <FRAMEWIN_SetDefaultBarColor+0xc>
 8006320:	4b02      	ldr	r3, [pc, #8]	; (800632c <FRAMEWIN_SetDefaultBarColor+0x10>)
 8006322:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006326:	6041      	str	r1, [r0, #4]
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	200000b4 	.word	0x200000b4

08006330 <FRAMEWIN_SetDefaultClientColor>:
 8006330:	4b01      	ldr	r3, [pc, #4]	; (8006338 <FRAMEWIN_SetDefaultClientColor+0x8>)
 8006332:	6158      	str	r0, [r3, #20]
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	200000b4 	.word	0x200000b4

0800633c <FRAMEWIN_SetDefaultTitleHeight>:
 800633c:	4b01      	ldr	r3, [pc, #4]	; (8006344 <FRAMEWIN_SetDefaultTitleHeight+0x8>)
 800633e:	8418      	strh	r0, [r3, #32]
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	200000b4 	.word	0x200000b4

08006348 <FRAMEWIN_SetDefaultTextColor>:
 8006348:	2801      	cmp	r0, #1
 800634a:	d803      	bhi.n	8006354 <FRAMEWIN_SetDefaultTextColor+0xc>
 800634c:	4b02      	ldr	r3, [pc, #8]	; (8006358 <FRAMEWIN_SetDefaultTextColor+0x10>)
 800634e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006352:	60c1      	str	r1, [r0, #12]
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	200000b4 	.word	0x200000b4

0800635c <FRAMEWIN__GetBorderSize>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	b08a      	sub	sp, #40	; 0x28
 8006360:	4605      	mov	r5, r0
 8006362:	460c      	mov	r4, r1
 8006364:	f008 f808 	bl	800e378 <GUI_ALLOC_LockH>
 8006368:	ab0a      	add	r3, sp, #40	; 0x28
 800636a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800636c:	f843 0d28 	str.w	r0, [r3, #-40]!
 8006370:	4668      	mov	r0, sp
 8006372:	6896      	ldr	r6, [r2, #8]
 8006374:	f008 f80e 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006378:	9501      	str	r5, [sp, #4]
 800637a:	2c03      	cmp	r4, #3
 800637c:	d80b      	bhi.n	8006396 <FRAMEWIN__GetBorderSize+0x3a>
 800637e:	e8df f004 	tbb	[pc, r4]
 8006382:	0402      	.short	0x0402
 8006384:	0806      	.short	0x0806
 8006386:	2318      	movs	r3, #24
 8006388:	e004      	b.n	8006394 <FRAMEWIN__GetBorderSize+0x38>
 800638a:	2316      	movs	r3, #22
 800638c:	e002      	b.n	8006394 <FRAMEWIN__GetBorderSize+0x38>
 800638e:	2315      	movs	r3, #21
 8006390:	e000      	b.n	8006394 <FRAMEWIN__GetBorderSize+0x38>
 8006392:	2317      	movs	r3, #23
 8006394:	9302      	str	r3, [sp, #8]
 8006396:	6873      	ldr	r3, [r6, #4]
 8006398:	a801      	add	r0, sp, #4
 800639a:	4798      	blx	r3
 800639c:	b00a      	add	sp, #40	; 0x28
 800639e:	bd70      	pop	{r4, r5, r6, pc}

080063a0 <DROPDOWN_DrawSkinFlex>:
 80063a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a4:	4604      	mov	r4, r0
 80063a6:	b088      	sub	sp, #32
 80063a8:	6800      	ldr	r0, [r0, #0]
 80063aa:	f007 ffe5 	bl	800e378 <GUI_ALLOC_LockH>
 80063ae:	ab08      	add	r3, sp, #32
 80063b0:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 80063b4:	f843 0d10 	str.w	r0, [r3, #-16]!
 80063b8:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 80063ba:	4618      	mov	r0, r3
 80063bc:	f007 ffea 	bl	800e394 <GUI_ALLOC_UnlockH>
 80063c0:	6820      	ldr	r0, [r4, #0]
 80063c2:	f000 fd51 	bl	8006e68 <WM__IsEnabled>
 80063c6:	b935      	cbnz	r5, 80063d6 <DROPDOWN_DrawSkinFlex+0x36>
 80063c8:	07f3      	lsls	r3, r6, #31
 80063ca:	d406      	bmi.n	80063da <DROPDOWN_DrawSkinFlex+0x3a>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	bf0c      	ite	eq
 80063d0:	2303      	moveq	r3, #3
 80063d2:	2302      	movne	r3, #2
 80063d4:	e002      	b.n	80063dc <DROPDOWN_DrawSkinFlex+0x3c>
 80063d6:	2300      	movs	r3, #0
 80063d8:	e000      	b.n	80063dc <DROPDOWN_DrawSkinFlex+0x3c>
 80063da:	2301      	movs	r3, #1
 80063dc:	4a77      	ldr	r2, [pc, #476]	; (80065bc <DROPDOWN_DrawSkinFlex+0x21c>)
 80063de:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80063e2:	6863      	ldr	r3, [r4, #4]
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	f000 80c3 	beq.w	8006570 <DROPDOWN_DrawSkinFlex+0x1d0>
 80063ea:	dc06      	bgt.n	80063fa <DROPDOWN_DrawSkinFlex+0x5a>
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f040 80e0 	bne.w	80065b2 <DROPDOWN_DrawSkinFlex+0x212>
 80063f2:	6820      	ldr	r0, [r4, #0]
 80063f4:	f000 fddc 	bl	8006fb0 <WM_SetHasTrans>
 80063f8:	e0db      	b.n	80065b2 <DROPDOWN_DrawSkinFlex+0x212>
 80063fa:	2b05      	cmp	r3, #5
 80063fc:	d034      	beq.n	8006468 <DROPDOWN_DrawSkinFlex+0xc8>
 80063fe:	2b12      	cmp	r3, #18
 8006400:	f040 80d7 	bne.w	80065b2 <DROPDOWN_DrawSkinFlex+0x212>
 8006404:	6820      	ldr	r0, [r4, #0]
 8006406:	f007 ffb7 	bl	800e378 <GUI_ALLOC_LockH>
 800640a:	4603      	mov	r3, r0
 800640c:	a808      	add	r0, sp, #32
 800640e:	f8b3 6080 	ldrh.w	r6, [r3, #128]	; 0x80
 8006412:	f840 3d0c 	str.w	r3, [r0, #-12]!
 8006416:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8006418:	f9b3 8082 	ldrsh.w	r8, [r3, #130]	; 0x82
 800641c:	f007 ffba 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006420:	6923      	ldr	r3, [r4, #16]
 8006422:	69a2      	ldr	r2, [r4, #24]
 8006424:	b2b1      	uxth	r1, r6
 8006426:	440b      	add	r3, r1
 8006428:	8aa6      	ldrh	r6, [r4, #20]
 800642a:	3302      	adds	r3, #2
 800642c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8006430:	1cb3      	adds	r3, r6, #2
 8006432:	4416      	add	r6, r2
 8006434:	f8ad 301a 	strh.w	r3, [sp, #26]
 8006438:	3e03      	subs	r6, #3
 800643a:	8ba3      	ldrh	r3, [r4, #28]
 800643c:	1a71      	subs	r1, r6, r1
 800643e:	1ac9      	subs	r1, r1, r3
 8006440:	2002      	movs	r0, #2
 8006442:	3b02      	subs	r3, #2
 8006444:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006448:	f8ad 301e 	strh.w	r3, [sp, #30]
 800644c:	f006 fb56 	bl	800cafc <GUI_SetTextMode>
 8006450:	4638      	mov	r0, r7
 8006452:	f006 fb63 	bl	800cb1c <GUI_SetFont>
 8006456:	6a28      	ldr	r0, [r5, #32]
 8006458:	f006 fba7 	bl	800cbaa <GUI_SetColor>
 800645c:	6a20      	ldr	r0, [r4, #32]
 800645e:	a906      	add	r1, sp, #24
 8006460:	4642      	mov	r2, r8
 8006462:	f007 f9ac 	bl	800d7be <GUI_DispStringInRect>
 8006466:	e0a4      	b.n	80065b2 <DROPDOWN_DrawSkinFlex+0x212>
 8006468:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	686b      	ldr	r3, [r5, #4]
 8006472:	9302      	str	r3, [sp, #8]
 8006474:	68ab      	ldr	r3, [r5, #8]
 8006476:	9303      	str	r3, [sp, #12]
 8006478:	f104 0010 	add.w	r0, r4, #16
 800647c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800647e:	f005 feff 	bl	800c280 <GUI__DrawTwinArc4>
 8006482:	2600      	movs	r6, #0
 8006484:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8006488:	f006 fb8f 	bl	800cbaa <GUI_SetColor>
 800648c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800648e:	6960      	ldr	r0, [r4, #20]
 8006490:	6921      	ldr	r1, [r4, #16]
 8006492:	69a2      	ldr	r2, [r4, #24]
 8006494:	4430      	add	r0, r6
 8006496:	4419      	add	r1, r3
 8006498:	1ad2      	subs	r2, r2, r3
 800649a:	f006 ff37 	bl	800d30c <GUI_DrawHLine>
 800649e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80064a0:	69e0      	ldr	r0, [r4, #28]
 80064a2:	6921      	ldr	r1, [r4, #16]
 80064a4:	69a2      	ldr	r2, [r4, #24]
 80064a6:	1b80      	subs	r0, r0, r6
 80064a8:	4419      	add	r1, r3
 80064aa:	1ad2      	subs	r2, r2, r3
 80064ac:	f006 ff2e 	bl	800d30c <GUI_DrawHLine>
 80064b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80064b2:	6920      	ldr	r0, [r4, #16]
 80064b4:	6961      	ldr	r1, [r4, #20]
 80064b6:	69e2      	ldr	r2, [r4, #28]
 80064b8:	4430      	add	r0, r6
 80064ba:	4419      	add	r1, r3
 80064bc:	1ad2      	subs	r2, r2, r3
 80064be:	f006 fef1 	bl	800d2a4 <GUI_DrawVLine>
 80064c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80064c4:	69a0      	ldr	r0, [r4, #24]
 80064c6:	6961      	ldr	r1, [r4, #20]
 80064c8:	69e2      	ldr	r2, [r4, #28]
 80064ca:	1b80      	subs	r0, r0, r6
 80064cc:	4419      	add	r1, r3
 80064ce:	1ad2      	subs	r2, r2, r3
 80064d0:	3601      	adds	r6, #1
 80064d2:	f006 fee7 	bl	800d2a4 <GUI_DrawVLine>
 80064d6:	2e02      	cmp	r6, #2
 80064d8:	d1d4      	bne.n	8006484 <DROPDOWN_DrawSkinFlex+0xe4>
 80064da:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80064dc:	2b02      	cmp	r3, #2
 80064de:	dd18      	ble.n	8006512 <DROPDOWN_DrawSkinFlex+0x172>
 80064e0:	68a8      	ldr	r0, [r5, #8]
 80064e2:	f006 fb62 	bl	800cbaa <GUI_SetColor>
 80064e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80064e8:	6920      	ldr	r0, [r4, #16]
 80064ea:	69e6      	ldr	r6, [r4, #28]
 80064ec:	6961      	ldr	r1, [r4, #20]
 80064ee:	18c2      	adds	r2, r0, r3
 80064f0:	4419      	add	r1, r3
 80064f2:	3002      	adds	r0, #2
 80064f4:	1af3      	subs	r3, r6, r3
 80064f6:	3a01      	subs	r2, #1
 80064f8:	f006 fdee 	bl	800d0d8 <GUI_FillRect>
 80064fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80064fe:	69a2      	ldr	r2, [r4, #24]
 8006500:	6961      	ldr	r1, [r4, #20]
 8006502:	69e6      	ldr	r6, [r4, #28]
 8006504:	1ad0      	subs	r0, r2, r3
 8006506:	4419      	add	r1, r3
 8006508:	3001      	adds	r0, #1
 800650a:	3a02      	subs	r2, #2
 800650c:	1af3      	subs	r3, r6, r3
 800650e:	f006 fde3 	bl	800d0d8 <GUI_FillRect>
 8006512:	f104 0010 	add.w	r0, r4, #16
 8006516:	c843      	ldmia	r0, {r0, r1, r6}
 8006518:	69e3      	ldr	r3, [r4, #28]
 800651a:	68ef      	ldr	r7, [r5, #12]
 800651c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800651e:	9700      	str	r7, [sp, #0]
 8006520:	692f      	ldr	r7, [r5, #16]
 8006522:	9701      	str	r7, [sp, #4]
 8006524:	440b      	add	r3, r1
 8006526:	4410      	add	r0, r2
 8006528:	3102      	adds	r1, #2
 800652a:	1ab2      	subs	r2, r6, r2
 800652c:	105b      	asrs	r3, r3, #1
 800652e:	f007 f809 	bl	800d544 <GUI_DrawGradientV>
 8006532:	69e3      	ldr	r3, [r4, #28]
 8006534:	6961      	ldr	r1, [r4, #20]
 8006536:	696f      	ldr	r7, [r5, #20]
 8006538:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800653a:	6920      	ldr	r0, [r4, #16]
 800653c:	69a6      	ldr	r6, [r4, #24]
 800653e:	9700      	str	r7, [sp, #0]
 8006540:	4419      	add	r1, r3
 8006542:	69af      	ldr	r7, [r5, #24]
 8006544:	9701      	str	r7, [sp, #4]
 8006546:	1049      	asrs	r1, r1, #1
 8006548:	4410      	add	r0, r2
 800654a:	3101      	adds	r1, #1
 800654c:	1ab2      	subs	r2, r6, r2
 800654e:	3b02      	subs	r3, #2
 8006550:	f006 fff8 	bl	800d544 <GUI_DrawGradientV>
 8006554:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006556:	f006 fb28 	bl	800cbaa <GUI_SetColor>
 800655a:	6961      	ldr	r1, [r4, #20]
 800655c:	69e2      	ldr	r2, [r4, #28]
 800655e:	69a3      	ldr	r3, [r4, #24]
 8006560:	1a88      	subs	r0, r1, r2
 8006562:	4418      	add	r0, r3
 8006564:	3001      	adds	r0, #1
 8006566:	3104      	adds	r1, #4
 8006568:	3a04      	subs	r2, #4
 800656a:	f006 fe9b 	bl	800d2a4 <GUI_DrawVLine>
 800656e:	e020      	b.n	80065b2 <DROPDOWN_DrawSkinFlex+0x212>
 8006570:	69e2      	ldr	r2, [r4, #28]
 8006572:	6963      	ldr	r3, [r4, #20]
 8006574:	69a7      	ldr	r7, [r4, #24]
 8006576:	69e8      	ldr	r0, [r5, #28]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	f1a3 0608 	sub.w	r6, r3, #8
 800657e:	1076      	asrs	r6, r6, #1
 8006580:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	ebc8 0303 	rsb	r3, r8, r3
 800658a:	eba7 0762 	sub.w	r7, r7, r2, asr #1
 800658e:	ea4f 0863 	mov.w	r8, r3, asr #1
 8006592:	f006 fb0a 	bl	800cbaa <GUI_SetColor>
 8006596:	2400      	movs	r4, #0
 8006598:	eb04 0008 	add.w	r0, r4, r8
 800659c:	3401      	adds	r4, #1
 800659e:	1b33      	subs	r3, r6, r4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	db06      	blt.n	80065b2 <DROPDOWN_DrawSkinFlex+0x212>
 80065a4:	1bb9      	subs	r1, r7, r6
 80065a6:	19ba      	adds	r2, r7, r6
 80065a8:	4421      	add	r1, r4
 80065aa:	1b12      	subs	r2, r2, r4
 80065ac:	f006 feae 	bl	800d30c <GUI_DrawHLine>
 80065b0:	e7f2      	b.n	8006598 <DROPDOWN_DrawSkinFlex+0x1f8>
 80065b2:	2000      	movs	r0, #0
 80065b4:	b008      	add	sp, #32
 80065b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ba:	bf00      	nop
 80065bc:	08064aac 	.word	0x08064aac

080065c0 <_Create>:
 80065c0:	b530      	push	{r4, r5, lr}
 80065c2:	b08b      	sub	sp, #44	; 0x2c
 80065c4:	4605      	mov	r5, r0
 80065c6:	f007 fed7 	bl	800e378 <GUI_ALLOC_LockH>
 80065ca:	ab0a      	add	r3, sp, #40	; 0x28
 80065cc:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80065d0:	f843 0d28 	str.w	r0, [r3, #-40]!
 80065d4:	4668      	mov	r0, sp
 80065d6:	6894      	ldr	r4, [r2, #8]
 80065d8:	f007 fedc 	bl	800e394 <GUI_ALLOC_UnlockH>
 80065dc:	a80a      	add	r0, sp, #40	; 0x28
 80065de:	2300      	movs	r3, #0
 80065e0:	9302      	str	r3, [sp, #8]
 80065e2:	f840 5d24 	str.w	r5, [r0, #-36]!
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	4798      	blx	r3
 80065ea:	b00b      	add	sp, #44	; 0x2c
 80065ec:	bd30      	pop	{r4, r5, pc}

080065ee <_Paint>:
 80065ee:	b570      	push	{r4, r5, r6, lr}
 80065f0:	b08e      	sub	sp, #56	; 0x38
 80065f2:	4605      	mov	r5, r0
 80065f4:	f007 fec0 	bl	800e378 <GUI_ALLOC_LockH>
 80065f8:	ab0e      	add	r3, sp, #56	; 0x38
 80065fa:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
 80065fc:	f843 0d34 	str.w	r0, [r3, #-52]!
 8006600:	f9b0 6034 	ldrsh.w	r6, [r0, #52]	; 0x34
 8006604:	4618      	mov	r0, r3
 8006606:	f007 fec5 	bl	800e394 <GUI_ALLOC_UnlockH>
 800660a:	a903      	add	r1, sp, #12
 800660c:	4628      	mov	r0, r5
 800660e:	f001 f892 	bl	8007736 <WM_GetClientRectEx>
 8006612:	2305      	movs	r3, #5
 8006614:	9306      	str	r3, [sp, #24]
 8006616:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800661a:	9309      	str	r3, [sp, #36]	; 0x24
 800661c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8006620:	930a      	str	r3, [sp, #40]	; 0x28
 8006622:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8006626:	930b      	str	r3, [sp, #44]	; 0x2c
 8006628:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800662c:	930c      	str	r3, [sp, #48]	; 0x30
 800662e:	9505      	str	r5, [sp, #20]
 8006630:	a805      	add	r0, sp, #20
 8006632:	47a0      	blx	r4
 8006634:	4628      	mov	r0, r5
 8006636:	4631      	mov	r1, r6
 8006638:	f000 f82c 	bl	8006694 <DROPDOWN__GetpItemLocked>
 800663c:	9002      	str	r0, [sp, #8]
 800663e:	b138      	cbz	r0, 8006650 <_Paint+0x62>
 8006640:	2312      	movs	r3, #18
 8006642:	900d      	str	r0, [sp, #52]	; 0x34
 8006644:	9306      	str	r3, [sp, #24]
 8006646:	a805      	add	r0, sp, #20
 8006648:	47a0      	blx	r4
 800664a:	a802      	add	r0, sp, #8
 800664c:	f007 fea2 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006650:	2302      	movs	r3, #2
 8006652:	9306      	str	r3, [sp, #24]
 8006654:	a805      	add	r0, sp, #20
 8006656:	47a0      	blx	r4
 8006658:	b00e      	add	sp, #56	; 0x38
 800665a:	bd70      	pop	{r4, r5, r6, pc}

0800665c <DROPDOWN_SetDefaultSkin>:
 800665c:	4b03      	ldr	r3, [pc, #12]	; (800666c <DROPDOWN_SetDefaultSkin+0x10>)
 800665e:	4a04      	ldr	r2, [pc, #16]	; (8006670 <DROPDOWN_SetDefaultSkin+0x14>)
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	4b04      	ldr	r3, [pc, #16]	; (8006674 <DROPDOWN_SetDefaultSkin+0x18>)
 8006664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006666:	6318      	str	r0, [r3, #48]	; 0x30
 8006668:	4610      	mov	r0, r2
 800666a:	4770      	bx	lr
 800666c:	200001d0 	.word	0x200001d0
 8006670:	2000018c 	.word	0x2000018c
 8006674:	20000198 	.word	0x20000198

08006678 <DROPDOWN_SetDefaultColor>:
 8006678:	2801      	cmp	r0, #1
 800667a:	d806      	bhi.n	800668a <DROPDOWN_SetDefaultColor+0x12>
 800667c:	4b04      	ldr	r3, [pc, #16]	; (8006690 <DROPDOWN_SetDefaultColor+0x18>)
 800667e:	3006      	adds	r0, #6
 8006680:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8006684:	6858      	ldr	r0, [r3, #4]
 8006686:	6059      	str	r1, [r3, #4]
 8006688:	4770      	bx	lr
 800668a:	2000      	movs	r0, #0
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	20000198 	.word	0x20000198

08006694 <DROPDOWN__GetpItemLocked>:
 8006694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006696:	460d      	mov	r5, r1
 8006698:	f007 fe6e 	bl	800e378 <GUI_ALLOC_LockH>
 800669c:	ac02      	add	r4, sp, #8
 800669e:	4629      	mov	r1, r5
 80066a0:	f844 0d04 	str.w	r0, [r4, #-4]!
 80066a4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80066a6:	f7ff fe0c 	bl	80062c2 <GUI_ARRAY_GethItem>
 80066aa:	4605      	mov	r5, r0
 80066ac:	4620      	mov	r0, r4
 80066ae:	f007 fe71 	bl	800e394 <GUI_ALLOC_UnlockH>
 80066b2:	4628      	mov	r0, r5
 80066b4:	b10d      	cbz	r5, 80066ba <DROPDOWN__GetpItemLocked+0x26>
 80066b6:	f007 fe5f 	bl	800e378 <GUI_ALLOC_LockH>
 80066ba:	b003      	add	sp, #12
 80066bc:	bd30      	pop	{r4, r5, pc}

080066be <GUI_CreateDialogBox>:
 80066be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80066c2:	4605      	mov	r5, r0
 80066c4:	4688      	mov	r8, r1
 80066c6:	4614      	mov	r4, r2
 80066c8:	461e      	mov	r6, r3
 80066ca:	b913      	cbnz	r3, 80066d2 <GUI_CreateDialogBox+0x14>
 80066cc:	f001 f808 	bl	80076e0 <WM_GetDesktopWindow>
 80066d0:	4606      	mov	r6, r0
 80066d2:	9400      	str	r4, [sp, #0]
 80066d4:	4628      	mov	r0, r5
 80066d6:	682c      	ldr	r4, [r5, #0]
 80066d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066dc:	4631      	mov	r1, r6
 80066de:	47a0      	blx	r4
 80066e0:	4604      	mov	r4, r0
 80066e2:	2800      	cmp	r0, #0
 80066e4:	d03b      	beq.n	800675e <GUI_CreateDialogBox+0xa0>
 80066e6:	f001 f807 	bl	80076f8 <WM_GetClientWindow>
 80066ea:	8a69      	ldrh	r1, [r5, #18]
 80066ec:	4607      	mov	r7, r0
 80066ee:	4620      	mov	r0, r4
 80066f0:	f7ff fbe9 	bl	8005ec6 <WIDGET_OrState>
 80066f4:	4620      	mov	r0, r4
 80066f6:	f000 fc32 	bl	8006f5e <WM_ShowWindow>
 80066fa:	4638      	mov	r0, r7
 80066fc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006700:	f000 fc2d 	bl	8006f5e <WM_ShowWindow>
 8006704:	f1b8 0f00 	cmp.w	r8, #0
 8006708:	dd0f      	ble.n	800672a <GUI_CreateDialogBox+0x6c>
 800670a:	f855 cf1c 	ldr.w	ip, [r5, #28]!
 800670e:	2200      	movs	r2, #0
 8006710:	9200      	str	r2, [sp, #0]
 8006712:	4628      	mov	r0, r5
 8006714:	4639      	mov	r1, r7
 8006716:	4613      	mov	r3, r2
 8006718:	47e0      	blx	ip
 800671a:	4681      	mov	r9, r0
 800671c:	2800      	cmp	r0, #0
 800671e:	d1ed      	bne.n	80066fc <GUI_CreateDialogBox+0x3e>
 8006720:	4620      	mov	r0, r4
 8006722:	f001 fe0b 	bl	800833c <WM_DeleteWindow>
 8006726:	4648      	mov	r0, r9
 8006728:	e01a      	b.n	8006760 <GUI_CreateDialogBox+0xa2>
 800672a:	4638      	mov	r0, r7
 800672c:	211d      	movs	r1, #29
 800672e:	f000 fd97 	bl	8007260 <WM_SendMessageNoPara>
 8006732:	1c73      	adds	r3, r6, #1
 8006734:	d013      	beq.n	800675e <GUI_CreateDialogBox+0xa0>
 8006736:	f006 f93b 	bl	800c9b0 <GUI_Lock>
 800673a:	f000 ffb3 	bl	80076a4 <WM_GetFocussedWindow>
 800673e:	b150      	cbz	r0, 8006756 <GUI_CreateDialogBox+0x98>
 8006740:	f007 fe10 	bl	800e364 <GUI_ALLOC_h2p>
 8006744:	6980      	ldr	r0, [r0, #24]
 8006746:	42a0      	cmp	r0, r4
 8006748:	d007      	beq.n	800675a <GUI_CreateDialogBox+0x9c>
 800674a:	2800      	cmp	r0, #0
 800674c:	d1f8      	bne.n	8006740 <GUI_CreateDialogBox+0x82>
 800674e:	4620      	mov	r0, r4
 8006750:	f000 fcbc 	bl	80070cc <WM_SetFocusOnNextChild>
 8006754:	e001      	b.n	800675a <GUI_CreateDialogBox+0x9c>
 8006756:	42a6      	cmp	r6, r4
 8006758:	d1f9      	bne.n	800674e <GUI_CreateDialogBox+0x90>
 800675a:	f006 f91f 	bl	800c99c <GUI_Unlock>
 800675e:	4620      	mov	r0, r4
 8006760:	b003      	add	sp, #12
 8006762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08006768 <CHOOSEFILE_SetDelim>:
 8006768:	4b01      	ldr	r3, [pc, #4]	; (8006770 <CHOOSEFILE_SetDelim+0x8>)
 800676a:	7018      	strb	r0, [r3, #0]
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	200001d4 	.word	0x200001d4

08006774 <BUTTON_DrawSkinFlex>:
 8006774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006778:	6883      	ldr	r3, [r0, #8]
 800677a:	4a8a      	ldr	r2, [pc, #552]	; (80069a4 <BUTTON_DrawSkinFlex+0x230>)
 800677c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8006780:	6843      	ldr	r3, [r0, #4]
 8006782:	2b05      	cmp	r3, #5
 8006784:	b088      	sub	sp, #32
 8006786:	4604      	mov	r4, r0
 8006788:	d00e      	beq.n	80067a8 <BUTTON_DrawSkinFlex+0x34>
 800678a:	dc06      	bgt.n	800679a <BUTTON_DrawSkinFlex+0x26>
 800678c:	2b00      	cmp	r3, #0
 800678e:	f040 8104 	bne.w	800699a <BUTTON_DrawSkinFlex+0x226>
 8006792:	6800      	ldr	r0, [r0, #0]
 8006794:	f000 fc0c 	bl	8006fb0 <WM_SetHasTrans>
 8006798:	e0ff      	b.n	800699a <BUTTON_DrawSkinFlex+0x226>
 800679a:	2b06      	cmp	r3, #6
 800679c:	f000 8088 	beq.w	80068b0 <BUTTON_DrawSkinFlex+0x13c>
 80067a0:	2b12      	cmp	r3, #18
 80067a2:	f000 80a9 	beq.w	80068f8 <BUTTON_DrawSkinFlex+0x184>
 80067a6:	e0f8      	b.n	800699a <BUTTON_DrawSkinFlex+0x226>
 80067a8:	69ee      	ldr	r6, [r5, #28]
 80067aa:	2e00      	cmp	r6, #0
 80067ac:	d051      	beq.n	8006852 <BUTTON_DrawSkinFlex+0xde>
 80067ae:	9600      	str	r6, [sp, #0]
 80067b0:	682b      	ldr	r3, [r5, #0]
 80067b2:	9301      	str	r3, [sp, #4]
 80067b4:	686b      	ldr	r3, [r5, #4]
 80067b6:	9302      	str	r3, [sp, #8]
 80067b8:	68ab      	ldr	r3, [r5, #8]
 80067ba:	9303      	str	r3, [sp, #12]
 80067bc:	3010      	adds	r0, #16
 80067be:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80067c0:	f005 fd5e 	bl	800c280 <GUI__DrawTwinArc4>
 80067c4:	2600      	movs	r6, #0
 80067c6:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 80067ca:	f006 f9ee 	bl	800cbaa <GUI_SetColor>
 80067ce:	69eb      	ldr	r3, [r5, #28]
 80067d0:	6960      	ldr	r0, [r4, #20]
 80067d2:	6921      	ldr	r1, [r4, #16]
 80067d4:	69a2      	ldr	r2, [r4, #24]
 80067d6:	4430      	add	r0, r6
 80067d8:	4419      	add	r1, r3
 80067da:	1ad2      	subs	r2, r2, r3
 80067dc:	f006 fd96 	bl	800d30c <GUI_DrawHLine>
 80067e0:	69eb      	ldr	r3, [r5, #28]
 80067e2:	69e0      	ldr	r0, [r4, #28]
 80067e4:	6921      	ldr	r1, [r4, #16]
 80067e6:	69a2      	ldr	r2, [r4, #24]
 80067e8:	1b80      	subs	r0, r0, r6
 80067ea:	4419      	add	r1, r3
 80067ec:	1ad2      	subs	r2, r2, r3
 80067ee:	f006 fd8d 	bl	800d30c <GUI_DrawHLine>
 80067f2:	69eb      	ldr	r3, [r5, #28]
 80067f4:	6920      	ldr	r0, [r4, #16]
 80067f6:	6961      	ldr	r1, [r4, #20]
 80067f8:	69e2      	ldr	r2, [r4, #28]
 80067fa:	4430      	add	r0, r6
 80067fc:	4419      	add	r1, r3
 80067fe:	1ad2      	subs	r2, r2, r3
 8006800:	f006 fd50 	bl	800d2a4 <GUI_DrawVLine>
 8006804:	69eb      	ldr	r3, [r5, #28]
 8006806:	69a0      	ldr	r0, [r4, #24]
 8006808:	6961      	ldr	r1, [r4, #20]
 800680a:	69e2      	ldr	r2, [r4, #28]
 800680c:	1b80      	subs	r0, r0, r6
 800680e:	4419      	add	r1, r3
 8006810:	1ad2      	subs	r2, r2, r3
 8006812:	3601      	adds	r6, #1
 8006814:	f006 fd46 	bl	800d2a4 <GUI_DrawVLine>
 8006818:	2e02      	cmp	r6, #2
 800681a:	d1d4      	bne.n	80067c6 <BUTTON_DrawSkinFlex+0x52>
 800681c:	68a8      	ldr	r0, [r5, #8]
 800681e:	f006 f9c4 	bl	800cbaa <GUI_SetColor>
 8006822:	69eb      	ldr	r3, [r5, #28]
 8006824:	6920      	ldr	r0, [r4, #16]
 8006826:	69e6      	ldr	r6, [r4, #28]
 8006828:	6961      	ldr	r1, [r4, #20]
 800682a:	18c2      	adds	r2, r0, r3
 800682c:	4419      	add	r1, r3
 800682e:	3002      	adds	r0, #2
 8006830:	1af3      	subs	r3, r6, r3
 8006832:	3a01      	subs	r2, #1
 8006834:	f006 fc50 	bl	800d0d8 <GUI_FillRect>
 8006838:	69eb      	ldr	r3, [r5, #28]
 800683a:	69a2      	ldr	r2, [r4, #24]
 800683c:	69e6      	ldr	r6, [r4, #28]
 800683e:	6961      	ldr	r1, [r4, #20]
 8006840:	1ad0      	subs	r0, r2, r3
 8006842:	4419      	add	r1, r3
 8006844:	3001      	adds	r0, #1
 8006846:	1af3      	subs	r3, r6, r3
 8006848:	3a02      	subs	r2, #2
 800684a:	f006 fc45 	bl	800d0d8 <GUI_FillRect>
 800684e:	69ee      	ldr	r6, [r5, #28]
 8006850:	e00f      	b.n	8006872 <BUTTON_DrawSkinFlex+0xfe>
 8006852:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8006856:	f006 f9a8 	bl	800cbaa <GUI_SetColor>
 800685a:	f104 0010 	add.w	r0, r4, #16
 800685e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8006860:	4430      	add	r0, r6
 8006862:	4431      	add	r1, r6
 8006864:	1b92      	subs	r2, r2, r6
 8006866:	1b9b      	subs	r3, r3, r6
 8006868:	3601      	adds	r6, #1
 800686a:	f008 f827 	bl	800e8bc <GUI_DrawRect>
 800686e:	2e02      	cmp	r6, #2
 8006870:	d1ef      	bne.n	8006852 <BUTTON_DrawSkinFlex+0xde>
 8006872:	f104 0010 	add.w	r0, r4, #16
 8006876:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8006878:	68ef      	ldr	r7, [r5, #12]
 800687a:	9700      	str	r7, [sp, #0]
 800687c:	692f      	ldr	r7, [r5, #16]
 800687e:	9701      	str	r7, [sp, #4]
 8006880:	440b      	add	r3, r1
 8006882:	4430      	add	r0, r6
 8006884:	1b92      	subs	r2, r2, r6
 8006886:	3102      	adds	r1, #2
 8006888:	105b      	asrs	r3, r3, #1
 800688a:	f006 fe5b 	bl	800d544 <GUI_DrawGradientV>
 800688e:	69e3      	ldr	r3, [r4, #28]
 8006890:	6962      	ldr	r2, [r4, #20]
 8006892:	6920      	ldr	r0, [r4, #16]
 8006894:	441a      	add	r2, r3
 8006896:	1051      	asrs	r1, r2, #1
 8006898:	69a2      	ldr	r2, [r4, #24]
 800689a:	696c      	ldr	r4, [r5, #20]
 800689c:	9400      	str	r4, [sp, #0]
 800689e:	69ac      	ldr	r4, [r5, #24]
 80068a0:	9401      	str	r4, [sp, #4]
 80068a2:	4430      	add	r0, r6
 80068a4:	3101      	adds	r1, #1
 80068a6:	1b92      	subs	r2, r2, r6
 80068a8:	3b02      	subs	r3, #2
 80068aa:	f006 fe4b 	bl	800d544 <GUI_DrawGradientV>
 80068ae:	e074      	b.n	800699a <BUTTON_DrawSkinFlex+0x226>
 80068b0:	6800      	ldr	r0, [r0, #0]
 80068b2:	f007 fd61 	bl	800e378 <GUI_ALLOC_LockH>
 80068b6:	9004      	str	r0, [sp, #16]
 80068b8:	6820      	ldr	r0, [r4, #0]
 80068ba:	f000 fad5 	bl	8006e68 <WM__IsEnabled>
 80068be:	9b04      	ldr	r3, [sp, #16]
 80068c0:	b130      	cbz	r0, 80068d0 <BUTTON_DrawSkinFlex+0x15c>
 80068c2:	68a2      	ldr	r2, [r4, #8]
 80068c4:	b952      	cbnz	r2, 80068dc <BUTTON_DrawSkinFlex+0x168>
 80068c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068c8:	3200      	adds	r2, #0
 80068ca:	bf18      	it	ne
 80068cc:	2201      	movne	r2, #1
 80068ce:	e006      	b.n	80068de <BUTTON_DrawSkinFlex+0x16a>
 80068d0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80068d2:	2a00      	cmp	r2, #0
 80068d4:	bf0c      	ite	eq
 80068d6:	2200      	moveq	r2, #0
 80068d8:	2202      	movne	r2, #2
 80068da:	e000      	b.n	80068de <BUTTON_DrawSkinFlex+0x16a>
 80068dc:	2200      	movs	r2, #0
 80068de:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80068e2:	a804      	add	r0, sp, #16
 80068e4:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 80068e6:	f007 fd55 	bl	800e394 <GUI_ALLOC_UnlockH>
 80068ea:	2200      	movs	r2, #0
 80068ec:	4628      	mov	r0, r5
 80068ee:	6821      	ldr	r1, [r4, #0]
 80068f0:	4613      	mov	r3, r2
 80068f2:	f7ff fc79 	bl	80061e8 <GUI_DRAW__Draw>
 80068f6:	e050      	b.n	800699a <BUTTON_DrawSkinFlex+0x226>
 80068f8:	6800      	ldr	r0, [r0, #0]
 80068fa:	f007 fd3d 	bl	800e378 <GUI_ALLOC_LockH>
 80068fe:	ae08      	add	r6, sp, #32
 8006900:	6e87      	ldr	r7, [r0, #104]	; 0x68
 8006902:	f846 0d10 	str.w	r0, [r6, #-16]!
 8006906:	2f00      	cmp	r7, #0
 8006908:	d044      	beq.n	8006994 <BUTTON_DrawSkinFlex+0x220>
 800690a:	68a2      	ldr	r2, [r4, #8]
 800690c:	f9b0 805c 	ldrsh.w	r8, [r0, #92]	; 0x5c
 8006910:	b122      	cbz	r2, 800691c <BUTTON_DrawSkinFlex+0x1a8>
 8006912:	2a03      	cmp	r2, #3
 8006914:	bf14      	ite	ne
 8006916:	2100      	movne	r1, #0
 8006918:	2102      	moveq	r1, #2
 800691a:	e000      	b.n	800691e <BUTTON_DrawSkinFlex+0x1aa>
 800691c:	2101      	movs	r1, #1
 800691e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006922:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8006924:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8006926:	f006 f8f9 	bl	800cb1c <GUI_SetFont>
 800692a:	4620      	mov	r0, r4
 800692c:	f006 f93d 	bl	800cbaa <GUI_SetColor>
 8006930:	a806      	add	r0, sp, #24
 8006932:	f006 fbc1 	bl	800d0b8 <GUI_GetClientRect>
 8006936:	8bab      	ldrh	r3, [r5, #28]
 8006938:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800693c:	441a      	add	r2, r3
 800693e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8006942:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	f8ad 301c 	strh.w	r3, [sp, #28]
 800694c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8006950:	3302      	adds	r3, #2
 8006952:	f8ad 301a 	strh.w	r3, [sp, #26]
 8006956:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800695a:	3b02      	subs	r3, #2
 800695c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006960:	9b04      	ldr	r3, [sp, #16]
 8006962:	a806      	add	r0, sp, #24
 8006964:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
 8006968:	f9b3 2060 	ldrsh.w	r2, [r3, #96]	; 0x60
 800696c:	f006 fa8c 	bl	800ce88 <GUI_MoveRect>
 8006970:	4630      	mov	r0, r6
 8006972:	f007 fd0f 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006976:	2002      	movs	r0, #2
 8006978:	f006 f8c0 	bl	800cafc <GUI_SetTextMode>
 800697c:	4638      	mov	r0, r7
 800697e:	f007 fcfb 	bl	800e378 <GUI_ALLOC_LockH>
 8006982:	ac08      	add	r4, sp, #32
 8006984:	a906      	add	r1, sp, #24
 8006986:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800698a:	4642      	mov	r2, r8
 800698c:	f006 ff17 	bl	800d7be <GUI_DispStringInRect>
 8006990:	4620      	mov	r0, r4
 8006992:	e000      	b.n	8006996 <BUTTON_DrawSkinFlex+0x222>
 8006994:	4630      	mov	r0, r6
 8006996:	f007 fcfd 	bl	800e394 <GUI_ALLOC_UnlockH>
 800699a:	2000      	movs	r0, #0
 800699c:	b008      	add	sp, #32
 800699e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a2:	bf00      	nop
 80069a4:	08064abc 	.word	0x08064abc

080069a8 <_Create>:
 80069a8:	b530      	push	{r4, r5, lr}
 80069aa:	b08b      	sub	sp, #44	; 0x2c
 80069ac:	2100      	movs	r1, #0
 80069ae:	4604      	mov	r4, r0
 80069b0:	2224      	movs	r2, #36	; 0x24
 80069b2:	a801      	add	r0, sp, #4
 80069b4:	f00c fcb2 	bl	801331c <memset>
 80069b8:	4620      	mov	r0, r4
 80069ba:	f007 fcdd 	bl	800e378 <GUI_ALLOC_LockH>
 80069be:	ab0a      	add	r3, sp, #40	; 0x28
 80069c0:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80069c2:	f843 0d28 	str.w	r0, [r3, #-40]!
 80069c6:	6895      	ldr	r5, [r2, #8]
 80069c8:	4668      	mov	r0, sp
 80069ca:	f007 fce3 	bl	800e394 <GUI_ALLOC_UnlockH>
 80069ce:	2300      	movs	r3, #0
 80069d0:	9302      	str	r3, [sp, #8]
 80069d2:	9401      	str	r4, [sp, #4]
 80069d4:	682b      	ldr	r3, [r5, #0]
 80069d6:	a801      	add	r0, sp, #4
 80069d8:	4798      	blx	r3
 80069da:	b00b      	add	sp, #44	; 0x2c
 80069dc:	bd30      	pop	{r4, r5, pc}

080069de <_Paint>:
 80069de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e2:	b08a      	sub	sp, #40	; 0x28
 80069e4:	4605      	mov	r5, r0
 80069e6:	f007 fcc7 	bl	800e378 <GUI_ALLOC_LockH>
 80069ea:	4603      	mov	r3, r0
 80069ec:	a80a      	add	r0, sp, #40	; 0x28
 80069ee:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 80069f0:	f840 3d28 	str.w	r3, [r0, #-40]!
 80069f4:	4668      	mov	r0, sp
 80069f6:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 80069f8:	8e5f      	ldrh	r7, [r3, #50]	; 0x32
 80069fa:	f007 fccb 	bl	800e394 <GUI_ALLOC_UnlockH>
 80069fe:	4628      	mov	r0, r5
 8006a00:	f000 fd9c 	bl	800753c <WM_GetWindowSizeX>
 8006a04:	4680      	mov	r8, r0
 8006a06:	4628      	mov	r0, r5
 8006a08:	f000 fdb4 	bl	8007574 <WM_GetWindowSizeY>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	9306      	str	r3, [sp, #24]
 8006a10:	9305      	str	r3, [sp, #20]
 8006a12:	3801      	subs	r0, #1
 8006a14:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8006a18:	f016 0610 	ands.w	r6, r6, #16
 8006a1c:	9501      	str	r5, [sp, #4]
 8006a1e:	9307      	str	r3, [sp, #28]
 8006a20:	9008      	str	r0, [sp, #32]
 8006a22:	d001      	beq.n	8006a28 <_Paint+0x4a>
 8006a24:	2303      	movs	r3, #3
 8006a26:	e007      	b.n	8006a38 <_Paint+0x5a>
 8006a28:	05fa      	lsls	r2, r7, #23
 8006a2a:	d501      	bpl.n	8006a30 <_Paint+0x52>
 8006a2c:	9603      	str	r6, [sp, #12]
 8006a2e:	e004      	b.n	8006a3a <_Paint+0x5c>
 8006a30:	07fb      	lsls	r3, r7, #31
 8006a32:	bf4c      	ite	mi
 8006a34:	2301      	movmi	r3, #1
 8006a36:	2302      	movpl	r3, #2
 8006a38:	9303      	str	r3, [sp, #12]
 8006a3a:	2305      	movs	r3, #5
 8006a3c:	9302      	str	r3, [sp, #8]
 8006a3e:	a801      	add	r0, sp, #4
 8006a40:	47a0      	blx	r4
 8006a42:	2306      	movs	r3, #6
 8006a44:	9302      	str	r3, [sp, #8]
 8006a46:	a801      	add	r0, sp, #4
 8006a48:	47a0      	blx	r4
 8006a4a:	2312      	movs	r3, #18
 8006a4c:	9302      	str	r3, [sp, #8]
 8006a4e:	a801      	add	r0, sp, #4
 8006a50:	47a0      	blx	r4
 8006a52:	230a      	movs	r3, #10
 8006a54:	9302      	str	r3, [sp, #8]
 8006a56:	a801      	add	r0, sp, #4
 8006a58:	47a0      	blx	r4
 8006a5a:	b00a      	add	sp, #40	; 0x28
 8006a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006a60 <BUTTON_SetDefaultSkin>:
 8006a60:	4b03      	ldr	r3, [pc, #12]	; (8006a70 <BUTTON_SetDefaultSkin+0x10>)
 8006a62:	4a04      	ldr	r2, [pc, #16]	; (8006a74 <BUTTON_SetDefaultSkin+0x14>)
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	4b04      	ldr	r3, [pc, #16]	; (8006a78 <BUTTON_SetDefaultSkin+0x18>)
 8006a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a6a:	6258      	str	r0, [r3, #36]	; 0x24
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	4770      	bx	lr
 8006a70:	20000298 	.word	0x20000298
 8006a74:	20000258 	.word	0x20000258
 8006a78:	20000268 	.word	0x20000268

08006a7c <BUTTON_CreateIndirect>:
 8006a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	4604      	mov	r4, r0
 8006a82:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8006a86:	9100      	str	r1, [sp, #0]
 8006a88:	2100      	movs	r1, #0
 8006a8a:	f9b4 e00c 	ldrsh.w	lr, [r4, #12]
 8006a8e:	f9b4 700e 	ldrsh.w	r7, [r4, #14]
 8006a92:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 8006a96:	9101      	str	r1, [sp, #4]
 8006a98:	8a61      	ldrh	r1, [r4, #18]
 8006a9a:	69a5      	ldr	r5, [r4, #24]
 8006a9c:	9102      	str	r1, [sp, #8]
 8006a9e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8006aa2:	9103      	str	r1, [sp, #12]
 8006aa4:	9504      	str	r5, [sp, #16]
 8006aa6:	eb0e 0103 	add.w	r1, lr, r3
 8006aaa:	4410      	add	r0, r2
 8006aac:	4633      	mov	r3, r6
 8006aae:	463a      	mov	r2, r7
 8006ab0:	f000 f8ce 	bl	8006c50 <BUTTON_CreateUser>
 8006ab4:	6861      	ldr	r1, [r4, #4]
 8006ab6:	4605      	mov	r5, r0
 8006ab8:	f000 f910 	bl	8006cdc <BUTTON_SetText>
 8006abc:	4628      	mov	r0, r5
 8006abe:	b007      	add	sp, #28
 8006ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ac2 <_OnButtonPressed>:
 8006ac2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ac8:	4604      	mov	r4, r0
 8006aca:	f7ff f9fc 	bl	8005ec6 <WIDGET_OrState>
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f007 fc52 	bl	800e378 <GUI_ALLOC_LockH>
 8006ad4:	ab02      	add	r3, sp, #8
 8006ad6:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8006ad8:	f843 0d04 	str.w	r0, [r3, #-4]!
 8006adc:	4618      	mov	r0, r3
 8006ade:	f007 fc59 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006ae2:	07ab      	lsls	r3, r5, #30
 8006ae4:	d503      	bpl.n	8006aee <_OnButtonPressed+0x2c>
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	2101      	movs	r1, #1
 8006aea:	f000 fc4a 	bl	8007382 <WM_NotifyParent>
 8006aee:	b003      	add	sp, #12
 8006af0:	bd30      	pop	{r4, r5, pc}

08006af2 <_OnButtonReleased>:
 8006af2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006af4:	4605      	mov	r5, r0
 8006af6:	460c      	mov	r4, r1
 8006af8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006afc:	f7ff f9fe 	bl	8005efc <WIDGET_AndState>
 8006b00:	4628      	mov	r0, r5
 8006b02:	f007 fc39 	bl	800e378 <GUI_ALLOC_LockH>
 8006b06:	4602      	mov	r2, r0
 8006b08:	a802      	add	r0, sp, #8
 8006b0a:	6a96      	ldr	r6, [r2, #40]	; 0x28
 8006b0c:	f840 2d04 	str.w	r2, [r0, #-4]!
 8006b10:	8e17      	ldrh	r7, [r2, #48]	; 0x30
 8006b12:	f007 fc3f 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006b16:	2c02      	cmp	r4, #2
 8006b18:	d102      	bne.n	8006b20 <_OnButtonReleased+0x2e>
 8006b1a:	4638      	mov	r0, r7
 8006b1c:	f006 f98c 	bl	800ce38 <GUI_StoreKey>
 8006b20:	07b3      	lsls	r3, r6, #30
 8006b22:	d503      	bpl.n	8006b2c <_OnButtonReleased+0x3a>
 8006b24:	4628      	mov	r0, r5
 8006b26:	4621      	mov	r1, r4
 8006b28:	f000 fc2b 	bl	8007382 <WM_NotifyParent>
 8006b2c:	b003      	add	sp, #12
 8006b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b30 <_OnTouchDefault>:
 8006b30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b32:	460d      	mov	r5, r1
 8006b34:	4604      	mov	r4, r0
 8006b36:	f007 fc1f 	bl	800e378 <GUI_ALLOC_LockH>
 8006b3a:	ab02      	add	r3, sp, #8
 8006b3c:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 8006b3e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8006b42:	4618      	mov	r0, r3
 8006b44:	f007 fc26 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006b48:	68ea      	ldr	r2, [r5, #12]
 8006b4a:	b162      	cbz	r2, 8006b66 <_OnTouchDefault+0x36>
 8006b4c:	7a12      	ldrb	r2, [r2, #8]
 8006b4e:	f406 7380 	and.w	r3, r6, #256	; 0x100
 8006b52:	b122      	cbz	r2, 8006b5e <_OnTouchDefault+0x2e>
 8006b54:	b95b      	cbnz	r3, 8006b6e <_OnTouchDefault+0x3e>
 8006b56:	4620      	mov	r0, r4
 8006b58:	f7ff ffb3 	bl	8006ac2 <_OnButtonPressed>
 8006b5c:	e007      	b.n	8006b6e <_OnTouchDefault+0x3e>
 8006b5e:	b133      	cbz	r3, 8006b6e <_OnTouchDefault+0x3e>
 8006b60:	4620      	mov	r0, r4
 8006b62:	2102      	movs	r1, #2
 8006b64:	e001      	b.n	8006b6a <_OnTouchDefault+0x3a>
 8006b66:	4620      	mov	r0, r4
 8006b68:	2103      	movs	r1, #3
 8006b6a:	f7ff ffc2 	bl	8006af2 <_OnButtonReleased>
 8006b6e:	b002      	add	sp, #8
 8006b70:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b74 <BUTTON_Callback>:
 8006b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b76:	6844      	ldr	r4, [r0, #4]
 8006b78:	4605      	mov	r5, r0
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f7ff f9df 	bl	8005f40 <WIDGET_HandleActive>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d05d      	beq.n	8006c42 <BUTTON_Callback+0xce>
 8006b86:	682b      	ldr	r3, [r5, #0]
 8006b88:	2b0f      	cmp	r3, #15
 8006b8a:	d016      	beq.n	8006bba <BUTTON_Callback+0x46>
 8006b8c:	dc04      	bgt.n	8006b98 <BUTTON_Callback+0x24>
 8006b8e:	2b0b      	cmp	r3, #11
 8006b90:	d023      	beq.n	8006bda <BUTTON_Callback+0x66>
 8006b92:	2b0e      	cmp	r3, #14
 8006b94:	d033      	beq.n	8006bfe <BUTTON_Callback+0x8a>
 8006b96:	e051      	b.n	8006c3c <BUTTON_Callback+0xc8>
 8006b98:	2b28      	cmp	r3, #40	; 0x28
 8006b9a:	d048      	beq.n	8006c2e <BUTTON_Callback+0xba>
 8006b9c:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8006ba0:	d005      	beq.n	8006bae <BUTTON_Callback+0x3a>
 8006ba2:	2b11      	cmp	r3, #17
 8006ba4:	d14a      	bne.n	8006c3c <BUTTON_Callback+0xc8>
 8006ba6:	4b28      	ldr	r3, [pc, #160]	; (8006c48 <BUTTON_Callback+0xd4>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	b913      	cbnz	r3, 8006bb2 <BUTTON_Callback+0x3e>
 8006bac:	e049      	b.n	8006c42 <BUTTON_Callback+0xce>
 8006bae:	4b27      	ldr	r3, [pc, #156]	; (8006c4c <BUTTON_Callback+0xd8>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	4798      	blx	r3
 8006bb8:	e043      	b.n	8006c42 <BUTTON_Callback+0xce>
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f007 fbdc 	bl	800e378 <GUI_ALLOC_LockH>
 8006bc0:	ab02      	add	r3, sp, #8
 8006bc2:	f843 0d04 	str.w	r0, [r3, #-4]!
 8006bc6:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006bc8:	6815      	ldr	r5, [r2, #0]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f007 fbe2 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006bd0:	2d00      	cmp	r5, #0
 8006bd2:	d036      	beq.n	8006c42 <BUTTON_Callback+0xce>
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	47a8      	blx	r5
 8006bd8:	e033      	b.n	8006c42 <BUTTON_Callback+0xce>
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f007 fbcc 	bl	800e378 <GUI_ALLOC_LockH>
 8006be0:	ac02      	add	r4, sp, #8
 8006be2:	9001      	str	r0, [sp, #4]
 8006be4:	3068      	adds	r0, #104	; 0x68
 8006be6:	f007 fe34 	bl	800e852 <GUI_ALLOC_FreePtr>
 8006bea:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 8006bee:	2103      	movs	r1, #3
 8006bf0:	306c      	adds	r0, #108	; 0x6c
 8006bf2:	f007 fe3b 	bl	800e86c <GUI_ALLOC_FreePtrArray>
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f007 fbcc 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006bfc:	e01e      	b.n	8006c3c <BUTTON_Callback+0xc8>
 8006bfe:	68ea      	ldr	r2, [r5, #12]
 8006c00:	ca0c      	ldmia	r2, {r2, r3}
 8006c02:	2a0d      	cmp	r2, #13
 8006c04:	d002      	beq.n	8006c0c <BUTTON_Callback+0x98>
 8006c06:	2a20      	cmp	r2, #32
 8006c08:	d007      	beq.n	8006c1a <BUTTON_Callback+0xa6>
 8006c0a:	e010      	b.n	8006c2e <BUTTON_Callback+0xba>
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	dd0e      	ble.n	8006c2e <BUTTON_Callback+0xba>
 8006c10:	4620      	mov	r0, r4
 8006c12:	f7ff ff56 	bl	8006ac2 <_OnButtonPressed>
 8006c16:	4620      	mov	r0, r4
 8006c18:	e005      	b.n	8006c26 <BUTTON_Callback+0xb2>
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	dd02      	ble.n	8006c26 <BUTTON_Callback+0xb2>
 8006c20:	f7ff ff4f 	bl	8006ac2 <_OnButtonPressed>
 8006c24:	e00d      	b.n	8006c42 <BUTTON_Callback+0xce>
 8006c26:	2102      	movs	r1, #2
 8006c28:	f7ff ff63 	bl	8006af2 <_OnButtonReleased>
 8006c2c:	e009      	b.n	8006c42 <BUTTON_Callback+0xce>
 8006c2e:	68eb      	ldr	r3, [r5, #12]
 8006c30:	b923      	cbnz	r3, 8006c3c <BUTTON_Callback+0xc8>
 8006c32:	4620      	mov	r0, r4
 8006c34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c38:	f7ff f960 	bl	8005efc <WIDGET_AndState>
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	f001 fecd 	bl	80089dc <WM_DefaultProc>
 8006c42:	b003      	add	sp, #12
 8006c44:	bd30      	pop	{r4, r5, pc}
 8006c46:	bf00      	nop
 8006c48:	2000841c 	.word	0x2000841c
 8006c4c:	20000264 	.word	0x20000264

08006c50 <BUTTON_CreateUser>:
 8006c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c54:	b086      	sub	sp, #24
 8006c56:	460f      	mov	r7, r1
 8006c58:	461d      	mov	r5, r3
 8006c5a:	4680      	mov	r8, r0
 8006c5c:	4616      	mov	r6, r2
 8006c5e:	f005 fea7 	bl	800c9b0 <GUI_Lock>
 8006c62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006c64:	9400      	str	r4, [sp, #0]
 8006c66:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006c68:	9401      	str	r4, [sp, #4]
 8006c6a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8006c6c:	4b18      	ldr	r3, [pc, #96]	; (8006cd0 <BUTTON_CreateUser+0x80>)
 8006c6e:	9302      	str	r3, [sp, #8]
 8006c70:	344c      	adds	r4, #76	; 0x4c
 8006c72:	4639      	mov	r1, r7
 8006c74:	9403      	str	r4, [sp, #12]
 8006c76:	4640      	mov	r0, r8
 8006c78:	4632      	mov	r2, r6
 8006c7a:	462b      	mov	r3, r5
 8006c7c:	f001 fab0 	bl	80081e0 <WM_CreateWindowAsChild>
 8006c80:	4607      	mov	r7, r0
 8006c82:	b1f8      	cbz	r0, 8006cc4 <BUTTON_CreateUser+0x74>
 8006c84:	f007 fb78 	bl	800e378 <GUI_ALLOC_LockH>
 8006c88:	4d12      	ldr	r5, [pc, #72]	; (8006cd4 <BUTTON_CreateUser+0x84>)
 8006c8a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006c8c:	9005      	str	r0, [sp, #20]
 8006c8e:	2210      	movs	r2, #16
 8006c90:	f7ff f94e 	bl	8005f30 <WIDGET__Init>
 8006c94:	ae06      	add	r6, sp, #24
 8006c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c98:	f856 ed04 	ldr.w	lr, [r6, #-4]!
 8006c9c:	f10e 0434 	add.w	r4, lr, #52	; 0x34
 8006ca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ca6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006caa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006cae:	4c0a      	ldr	r4, [pc, #40]	; (8006cd8 <BUTTON_CreateUser+0x88>)
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	f8ce 3064 	str.w	r3, [lr, #100]	; 0x64
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f007 fb6c 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006cbc:	6823      	ldr	r3, [r4, #0]
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	4798      	blx	r3
 8006cc4:	f005 fe6a 	bl	800c99c <GUI_Unlock>
 8006cc8:	4638      	mov	r0, r7
 8006cca:	b006      	add	sp, #24
 8006ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd0:	08006b75 	.word	0x08006b75
 8006cd4:	20000268 	.word	0x20000268
 8006cd8:	20000298 	.word	0x20000298

08006cdc <BUTTON_SetText>:
 8006cdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cde:	460d      	mov	r5, r1
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	b328      	cbz	r0, 8006d30 <BUTTON_SetText+0x54>
 8006ce4:	f005 fe64 	bl	800c9b0 <GUI_Lock>
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f007 fb45 	bl	800e378 <GUI_ALLOC_LockH>
 8006cee:	6e86      	ldr	r6, [r0, #104]	; 0x68
 8006cf0:	9000      	str	r0, [sp, #0]
 8006cf2:	4668      	mov	r0, sp
 8006cf4:	9601      	str	r6, [sp, #4]
 8006cf6:	f007 fb4d 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	a801      	add	r0, sp, #4
 8006cfe:	f005 f8ce 	bl	800be9e <GUI__SetText>
 8006d02:	f1d0 0501 	rsbs	r5, r0, #1
 8006d06:	bf38      	it	cc
 8006d08:	2500      	movcc	r5, #0
 8006d0a:	b975      	cbnz	r5, 8006d2a <BUTTON_SetText+0x4e>
 8006d0c:	9b01      	ldr	r3, [sp, #4]
 8006d0e:	42b3      	cmp	r3, r6
 8006d10:	d008      	beq.n	8006d24 <BUTTON_SetText+0x48>
 8006d12:	4620      	mov	r0, r4
 8006d14:	f007 fb30 	bl	800e378 <GUI_ALLOC_LockH>
 8006d18:	9b01      	ldr	r3, [sp, #4]
 8006d1a:	9000      	str	r0, [sp, #0]
 8006d1c:	6683      	str	r3, [r0, #104]	; 0x68
 8006d1e:	4668      	mov	r0, sp
 8006d20:	f007 fb38 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006d24:	4620      	mov	r0, r4
 8006d26:	f001 fa16 	bl	8008156 <WM_InvalidateWindow>
 8006d2a:	f005 fe37 	bl	800c99c <GUI_Unlock>
 8006d2e:	e000      	b.n	8006d32 <BUTTON_SetText+0x56>
 8006d30:	2501      	movs	r5, #1
 8006d32:	4628      	mov	r0, r5
 8006d34:	b002      	add	sp, #8
 8006d36:	bd70      	pop	{r4, r5, r6, pc}

08006d38 <WM__UpdateChildPositions>:
 8006d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3c:	b087      	sub	sp, #28
 8006d3e:	69c4      	ldr	r4, [r0, #28]
 8006d40:	9303      	str	r3, [sp, #12]
 8006d42:	468a      	mov	sl, r1
 8006d44:	4693      	mov	fp, r2
 8006d46:	2c00      	cmp	r4, #0
 8006d48:	d06d      	beq.n	8006e26 <WM__UpdateChildPositions+0xee>
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f007 fb14 	bl	800e378 <GUI_ALLOC_LockH>
 8006d50:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006d52:	9005      	str	r0, [sp, #20]
 8006d54:	f401 7320 	and.w	r3, r1, #640	; 0x280
 8006d58:	2b80      	cmp	r3, #128	; 0x80
 8006d5a:	f8b0 8000 	ldrh.w	r8, [r0]
 8006d5e:	8842      	ldrh	r2, [r0, #2]
 8006d60:	8886      	ldrh	r6, [r0, #4]
 8006d62:	88c5      	ldrh	r5, [r0, #6]
 8006d64:	d008      	beq.n	8006d78 <WM__UpdateChildPositions+0x40>
 8006d66:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006d6a:	d108      	bne.n	8006d7e <WM__UpdateChildPositions+0x46>
 8006d6c:	eb08 090a 	add.w	r9, r8, sl
 8006d70:	fa1f f989 	uxth.w	r9, r9
 8006d74:	9b03      	ldr	r3, [sp, #12]
 8006d76:	e008      	b.n	8006d8a <WM__UpdateChildPositions+0x52>
 8006d78:	9803      	ldr	r0, [sp, #12]
 8006d7a:	b283      	uxth	r3, r0
 8006d7c:	e001      	b.n	8006d82 <WM__UpdateChildPositions+0x4a>
 8006d7e:	fa1f f38a 	uxth.w	r3, sl
 8006d82:	eb03 0908 	add.w	r9, r3, r8
 8006d86:	fa1f f989 	uxth.w	r9, r9
 8006d8a:	f401 61a0 	and.w	r1, r1, #1280	; 0x500
 8006d8e:	4433      	add	r3, r6
 8006d90:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	d008      	beq.n	8006daa <WM__UpdateChildPositions+0x72>
 8006d98:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8006d9c:	d108      	bne.n	8006db0 <WM__UpdateChildPositions+0x78>
 8006d9e:	eb02 0c0b 	add.w	ip, r2, fp
 8006da2:	fa1f fc8c 	uxth.w	ip, ip
 8006da6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8006da8:	e008      	b.n	8006dbc <WM__UpdateChildPositions+0x84>
 8006daa:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006dac:	b28f      	uxth	r7, r1
 8006dae:	e001      	b.n	8006db4 <WM__UpdateChildPositions+0x7c>
 8006db0:	fa1f f78b 	uxth.w	r7, fp
 8006db4:	eb07 0c02 	add.w	ip, r7, r2
 8006db8:	fa1f fc8c 	uxth.w	ip, ip
 8006dbc:	fa0f f989 	sxth.w	r9, r9
 8006dc0:	fa0f f888 	sxth.w	r8, r8
 8006dc4:	b212      	sxth	r2, r2
 8006dc6:	442f      	add	r7, r5
 8006dc8:	fa0f fc8c 	sxth.w	ip, ip
 8006dcc:	ebb9 0108 	subs.w	r1, r9, r8
 8006dd0:	9202      	str	r2, [sp, #8]
 8006dd2:	b2bf      	uxth	r7, r7
 8006dd4:	ebc2 020c 	rsb	r2, r2, ip
 8006dd8:	d100      	bne.n	8006ddc <WM__UpdateChildPositions+0xa4>
 8006dda:	b142      	cbz	r2, 8006dee <WM__UpdateChildPositions+0xb6>
 8006ddc:	4620      	mov	r0, r4
 8006dde:	9301      	str	r3, [sp, #4]
 8006de0:	f8cd c000 	str.w	ip, [sp]
 8006de4:	f000 fb61 	bl	80074aa <WM_MoveWindow>
 8006de8:	f8dd c000 	ldr.w	ip, [sp]
 8006dec:	9b01      	ldr	r3, [sp, #4]
 8006dee:	b21b      	sxth	r3, r3
 8006df0:	ebc9 0903 	rsb	r9, r9, r3
 8006df4:	b236      	sxth	r6, r6
 8006df6:	9b02      	ldr	r3, [sp, #8]
 8006df8:	ebc6 0808 	rsb	r8, r6, r8
 8006dfc:	b23f      	sxth	r7, r7
 8006dfe:	b22d      	sxth	r5, r5
 8006e00:	ebcc 0c07 	rsb	ip, ip, r7
 8006e04:	1b5d      	subs	r5, r3, r5
 8006e06:	eb19 0108 	adds.w	r1, r9, r8
 8006e0a:	eb0c 0205 	add.w	r2, ip, r5
 8006e0e:	d100      	bne.n	8006e12 <WM__UpdateChildPositions+0xda>
 8006e10:	b112      	cbz	r2, 8006e18 <WM__UpdateChildPositions+0xe0>
 8006e12:	4620      	mov	r0, r4
 8006e14:	f000 fa31 	bl	800727a <WM_ResizeWindow>
 8006e18:	a806      	add	r0, sp, #24
 8006e1a:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8006e1e:	6a1c      	ldr	r4, [r3, #32]
 8006e20:	f007 fab8 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006e24:	e78f      	b.n	8006d46 <WM__UpdateChildPositions+0xe>
 8006e26:	b007      	add	sp, #28
 8006e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006e2c <WM__SendMessage>:
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	4c0d      	ldr	r4, [pc, #52]	; (8006e64 <WM__SendMessage+0x38>)
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	2b13      	cmp	r3, #19
 8006e34:	4606      	mov	r6, r0
 8006e36:	460d      	mov	r5, r1
 8006e38:	dc12      	bgt.n	8006e60 <WM__SendMessage+0x34>
 8006e3a:	f007 fa93 	bl	800e364 <GUI_ALLOC_h2p>
 8006e3e:	6903      	ldr	r3, [r0, #16]
 8006e40:	606e      	str	r6, [r5, #4]
 8006e42:	b143      	cbz	r3, 8006e56 <WM__SendMessage+0x2a>
 8006e44:	6822      	ldr	r2, [r4, #0]
 8006e46:	4628      	mov	r0, r5
 8006e48:	3201      	adds	r2, #1
 8006e4a:	6022      	str	r2, [r4, #0]
 8006e4c:	4798      	blx	r3
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	6023      	str	r3, [r4, #0]
 8006e54:	bd70      	pop	{r4, r5, r6, pc}
 8006e56:	4628      	mov	r0, r5
 8006e58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e5c:	f001 bdbe 	b.w	80089dc <WM_DefaultProc>
 8006e60:	bd70      	pop	{r4, r5, r6, pc}
 8006e62:	bf00      	nop
 8006e64:	20008420 	.word	0x20008420

08006e68 <WM__IsEnabled>:
 8006e68:	b508      	push	{r3, lr}
 8006e6a:	f007 fa7b 	bl	800e364 <GUI_ALLOC_h2p>
 8006e6e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006e70:	f080 0010 	eor.w	r0, r0, #16
 8006e74:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8006e78:	bd08      	pop	{r3, pc}

08006e7a <WM__IsAncestor>:
 8006e7a:	b510      	push	{r4, lr}
 8006e7c:	460c      	mov	r4, r1
 8006e7e:	b908      	cbnz	r0, 8006e84 <WM__IsAncestor+0xa>
 8006e80:	2000      	movs	r0, #0
 8006e82:	bd10      	pop	{r4, pc}
 8006e84:	2900      	cmp	r1, #0
 8006e86:	d0fb      	beq.n	8006e80 <WM__IsAncestor+0x6>
 8006e88:	f007 fa6c 	bl	800e364 <GUI_ALLOC_h2p>
 8006e8c:	6980      	ldr	r0, [r0, #24]
 8006e8e:	42a0      	cmp	r0, r4
 8006e90:	d002      	beq.n	8006e98 <WM__IsAncestor+0x1e>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d1f8      	bne.n	8006e88 <WM__IsAncestor+0xe>
 8006e96:	e7f3      	b.n	8006e80 <WM__IsAncestor+0x6>
 8006e98:	2001      	movs	r0, #1
 8006e9a:	bd10      	pop	{r4, pc}

08006e9c <WM__IsAncestorOrSelf>:
 8006e9c:	4288      	cmp	r0, r1
 8006e9e:	d001      	beq.n	8006ea4 <WM__IsAncestorOrSelf+0x8>
 8006ea0:	f7ff bfeb 	b.w	8006e7a <WM__IsAncestor>
 8006ea4:	2001      	movs	r0, #1
 8006ea6:	4770      	bx	lr

08006ea8 <WM_DeleteTimer>:
 8006ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006eaa:	4604      	mov	r4, r0
 8006eac:	b190      	cbz	r0, 8006ed4 <WM_DeleteTimer+0x2c>
 8006eae:	f005 fd7f 	bl	800c9b0 <GUI_Lock>
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f007 fa60 	bl	800e378 <GUI_ALLOC_LockH>
 8006eb8:	ad02      	add	r5, sp, #8
 8006eba:	f845 0d04 	str.w	r0, [r5, #-4]!
 8006ebe:	6800      	ldr	r0, [r0, #0]
 8006ec0:	f005 fcee 	bl	800c8a0 <GUI_TIMER_Delete>
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	f007 fa65 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f007 fa8e 	bl	800e3ec <GUI_ALLOC_Free>
 8006ed0:	f005 fd64 	bl	800c99c <GUI_Unlock>
 8006ed4:	b003      	add	sp, #12
 8006ed6:	bd30      	pop	{r4, r5, pc}

08006ed8 <WM__DeleteAssocTimer>:
 8006ed8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006eda:	4605      	mov	r5, r0
 8006edc:	f005 fd68 	bl	800c9b0 <GUI_Lock>
 8006ee0:	a801      	add	r0, sp, #4
 8006ee2:	f005 fca9 	bl	800c838 <GUI_TIMER__GetFirstTimer>
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	b1dc      	cbz	r4, 8006f22 <WM__DeleteAssocTimer+0x4a>
 8006eea:	4620      	mov	r0, r4
 8006eec:	2101      	movs	r1, #1
 8006eee:	f005 fd11 	bl	800c914 <GUI_TIMER_GetFlag>
 8006ef2:	9b01      	ldr	r3, [sp, #4]
 8006ef4:	b183      	cbz	r3, 8006f18 <WM__DeleteAssocTimer+0x40>
 8006ef6:	b178      	cbz	r0, 8006f18 <WM__DeleteAssocTimer+0x40>
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f007 fa33 	bl	800e364 <GUI_ALLOC_h2p>
 8006efe:	6843      	ldr	r3, [r0, #4]
 8006f00:	42ab      	cmp	r3, r5
 8006f02:	d109      	bne.n	8006f18 <WM__DeleteAssocTimer+0x40>
 8006f04:	4620      	mov	r0, r4
 8006f06:	a901      	add	r1, sp, #4
 8006f08:	9e01      	ldr	r6, [sp, #4]
 8006f0a:	f005 fcad 	bl	800c868 <GUI_TIMER__GetNextTimerLin>
 8006f0e:	4604      	mov	r4, r0
 8006f10:	4630      	mov	r0, r6
 8006f12:	f7ff ffc9 	bl	8006ea8 <WM_DeleteTimer>
 8006f16:	e7e7      	b.n	8006ee8 <WM__DeleteAssocTimer+0x10>
 8006f18:	4620      	mov	r0, r4
 8006f1a:	a901      	add	r1, sp, #4
 8006f1c:	f005 fca4 	bl	800c868 <GUI_TIMER__GetNextTimerLin>
 8006f20:	e7e1      	b.n	8006ee6 <WM__DeleteAssocTimer+0xe>
 8006f22:	f005 fd3b 	bl	800c99c <GUI_Unlock>
 8006f26:	b002      	add	sp, #8
 8006f28:	bd70      	pop	{r4, r5, r6, pc}

08006f2a <WM_InvalidateWindowAndDescs>:
 8006f2a:	b510      	push	{r4, lr}
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	f005 fd3f 	bl	800c9b0 <GUI_Lock>
 8006f32:	b91c      	cbnz	r4, 8006f3c <WM_InvalidateWindowAndDescs+0x12>
 8006f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f38:	f005 bd30 	b.w	800c99c <GUI_Unlock>
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f001 f90a 	bl	8008156 <WM_InvalidateWindow>
 8006f42:	4620      	mov	r0, r4
 8006f44:	f000 fbbe 	bl	80076c4 <WM_GetFirstChild>
 8006f48:	4604      	mov	r4, r0
 8006f4a:	2c00      	cmp	r4, #0
 8006f4c:	d0f2      	beq.n	8006f34 <WM_InvalidateWindowAndDescs+0xa>
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f7ff ffeb 	bl	8006f2a <WM_InvalidateWindowAndDescs>
 8006f54:	4620      	mov	r0, r4
 8006f56:	f007 fa05 	bl	800e364 <GUI_ALLOC_h2p>
 8006f5a:	6a04      	ldr	r4, [r0, #32]
 8006f5c:	e7f5      	b.n	8006f4a <WM_InvalidateWindowAndDescs+0x20>

08006f5e <WM_ShowWindow>:
 8006f5e:	b513      	push	{r0, r1, r4, lr}
 8006f60:	4604      	mov	r4, r0
 8006f62:	b198      	cbz	r0, 8006f8c <WM_ShowWindow+0x2e>
 8006f64:	f005 fd24 	bl	800c9b0 <GUI_Lock>
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f007 fa05 	bl	800e378 <GUI_ALLOC_LockH>
 8006f6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006f70:	9001      	str	r0, [sp, #4]
 8006f72:	079a      	lsls	r2, r3, #30
 8006f74:	d405      	bmi.n	8006f82 <WM_ShowWindow+0x24>
 8006f76:	f043 0302 	orr.w	r3, r3, #2
 8006f7a:	6283      	str	r3, [r0, #40]	; 0x28
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f7ff ffd4 	bl	8006f2a <WM_InvalidateWindowAndDescs>
 8006f82:	a801      	add	r0, sp, #4
 8006f84:	f007 fa06 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006f88:	f005 fd08 	bl	800c99c <GUI_Unlock>
 8006f8c:	b002      	add	sp, #8
 8006f8e:	bd10      	pop	{r4, pc}

08006f90 <WM_SetUserClipRect>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	4605      	mov	r5, r0
 8006f94:	f005 fd0c 	bl	800c9b0 <GUI_Lock>
 8006f98:	4b04      	ldr	r3, [pc, #16]	; (8006fac <WM_SetUserClipRect+0x1c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8006f9e:	645d      	str	r5, [r3, #68]	; 0x44
 8006fa0:	f000 ff22 	bl	8007de8 <WM__ActivateClipRect>
 8006fa4:	f005 fcfa 	bl	800c99c <GUI_Unlock>
 8006fa8:	4620      	mov	r0, r4
 8006faa:	bd38      	pop	{r3, r4, r5, pc}
 8006fac:	200002c4 	.word	0x200002c4

08006fb0 <WM_SetHasTrans>:
 8006fb0:	b513      	push	{r0, r1, r4, lr}
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	f005 fcfc 	bl	800c9b0 <GUI_Lock>
 8006fb8:	b1c4      	cbz	r4, 8006fec <WM_SetHasTrans+0x3c>
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f007 f9dc 	bl	800e378 <GUI_ALLOC_LockH>
 8006fc0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006fc2:	9001      	str	r0, [sp, #4]
 8006fc4:	07db      	lsls	r3, r3, #31
 8006fc6:	d40e      	bmi.n	8006fe6 <WM_SetHasTrans+0x36>
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f008 fe57 	bl	800fc7c <WM_ValidateWindow>
 8006fce:	9b01      	ldr	r3, [sp, #4]
 8006fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fd2:	f042 0201 	orr.w	r2, r2, #1
 8006fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8006fd8:	4b06      	ldr	r3, [pc, #24]	; (8006ff4 <WM_SetHasTrans+0x44>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	4620      	mov	r0, r4
 8006fde:	3201      	adds	r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	f001 f8b8 	bl	8008156 <WM_InvalidateWindow>
 8006fe6:	a801      	add	r0, sp, #4
 8006fe8:	f007 f9d4 	bl	800e394 <GUI_ALLOC_UnlockH>
 8006fec:	f005 fcd6 	bl	800c99c <GUI_Unlock>
 8006ff0:	b002      	add	sp, #8
 8006ff2:	bd10      	pop	{r4, pc}
 8006ff4:	20028814 	.word	0x20028814

08006ff8 <WM_SetSize>:
 8006ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ffa:	460e      	mov	r6, r1
 8006ffc:	4617      	mov	r7, r2
 8006ffe:	4604      	mov	r4, r0
 8007000:	b1f8      	cbz	r0, 8007042 <WM_SetSize+0x4a>
 8007002:	f005 fcd5 	bl	800c9b0 <GUI_Lock>
 8007006:	4620      	mov	r0, r4
 8007008:	f007 f9b6 	bl	800e378 <GUI_ALLOC_LockH>
 800700c:	4603      	mov	r3, r0
 800700e:	a802      	add	r0, sp, #8
 8007010:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8007014:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007018:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 800701c:	f840 3d04 	str.w	r3, [r0, #-4]!
 8007020:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007024:	1a8a      	subs	r2, r1, r2
 8007026:	1aed      	subs	r5, r5, r3
 8007028:	43d2      	mvns	r2, r2
 800702a:	43ed      	mvns	r5, r5
 800702c:	4416      	add	r6, r2
 800702e:	443d      	add	r5, r7
 8007030:	f007 f9b0 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007034:	4620      	mov	r0, r4
 8007036:	4631      	mov	r1, r6
 8007038:	462a      	mov	r2, r5
 800703a:	f000 f91e 	bl	800727a <WM_ResizeWindow>
 800703e:	f005 fcad 	bl	800c99c <GUI_Unlock>
 8007042:	b003      	add	sp, #12
 8007044:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007046 <_GetPrevChild>:
 8007046:	b510      	push	{r4, lr}
 8007048:	4604      	mov	r4, r0
 800704a:	b918      	cbnz	r0, 8007054 <_GetPrevChild+0xe>
 800704c:	4620      	mov	r0, r4
 800704e:	f008 fded 	bl	800fc2c <WM__GetLastSibling>
 8007052:	e003      	b.n	800705c <_GetPrevChild+0x16>
 8007054:	f008 fdd7 	bl	800fc06 <WM__GetPrevSibling>
 8007058:	2800      	cmp	r0, #0
 800705a:	d0f7      	beq.n	800704c <_GetPrevChild+0x6>
 800705c:	42a0      	cmp	r0, r4
 800705e:	bf08      	it	eq
 8007060:	2000      	moveq	r0, #0
 8007062:	bd10      	pop	{r4, pc}

08007064 <WM_SetFocusOnPrevChild>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	4604      	mov	r4, r0
 8007068:	b1d8      	cbz	r0, 80070a2 <WM_SetFocusOnPrevChild+0x3e>
 800706a:	f005 fca1 	bl	800c9b0 <GUI_Lock>
 800706e:	4620      	mov	r0, r4
 8007070:	f008 fde8 	bl	800fc44 <WM__GetFocussedChild>
 8007074:	f7ff ffe7 	bl	8007046 <_GetPrevChild>
 8007078:	4605      	mov	r5, r0
 800707a:	4604      	mov	r4, r0
 800707c:	4620      	mov	r0, r4
 800707e:	f000 fa3f 	bl	8007500 <WM_IsFocussable>
 8007082:	b930      	cbnz	r0, 8007092 <WM_SetFocusOnPrevChild+0x2e>
 8007084:	b12c      	cbz	r4, 8007092 <WM_SetFocusOnPrevChild+0x2e>
 8007086:	4620      	mov	r0, r4
 8007088:	f7ff ffdd 	bl	8007046 <_GetPrevChild>
 800708c:	42a8      	cmp	r0, r5
 800708e:	4604      	mov	r4, r0
 8007090:	d1f4      	bne.n	800707c <WM_SetFocusOnPrevChild+0x18>
 8007092:	4620      	mov	r0, r4
 8007094:	f000 f852 	bl	800713c <WM_SetFocus>
 8007098:	2800      	cmp	r0, #0
 800709a:	bf18      	it	ne
 800709c:	2400      	movne	r4, #0
 800709e:	f005 fc7d 	bl	800c99c <GUI_Unlock>
 80070a2:	4620      	mov	r0, r4
 80070a4:	bd38      	pop	{r3, r4, r5, pc}

080070a6 <_GetNextChild>:
 80070a6:	b538      	push	{r3, r4, r5, lr}
 80070a8:	4605      	mov	r5, r0
 80070aa:	460c      	mov	r4, r1
 80070ac:	b921      	cbnz	r1, 80070b8 <_GetNextChild+0x12>
 80070ae:	4628      	mov	r0, r5
 80070b0:	f007 f958 	bl	800e364 <GUI_ALLOC_h2p>
 80070b4:	69c0      	ldr	r0, [r0, #28]
 80070b6:	e005      	b.n	80070c4 <_GetNextChild+0x1e>
 80070b8:	4608      	mov	r0, r1
 80070ba:	f007 f953 	bl	800e364 <GUI_ALLOC_h2p>
 80070be:	6a00      	ldr	r0, [r0, #32]
 80070c0:	2800      	cmp	r0, #0
 80070c2:	d0f4      	beq.n	80070ae <_GetNextChild+0x8>
 80070c4:	42a0      	cmp	r0, r4
 80070c6:	bf08      	it	eq
 80070c8:	2000      	moveq	r0, #0
 80070ca:	bd38      	pop	{r3, r4, r5, pc}

080070cc <WM_SetFocusOnNextChild>:
 80070cc:	b570      	push	{r4, r5, r6, lr}
 80070ce:	4605      	mov	r5, r0
 80070d0:	2800      	cmp	r0, #0
 80070d2:	d02d      	beq.n	8007130 <WM_SetFocusOnNextChild+0x64>
 80070d4:	f005 fc6c 	bl	800c9b0 <GUI_Lock>
 80070d8:	4628      	mov	r0, r5
 80070da:	f008 fdb3 	bl	800fc44 <WM__GetFocussedChild>
 80070de:	4601      	mov	r1, r0
 80070e0:	4628      	mov	r0, r5
 80070e2:	f7ff ffe0 	bl	80070a6 <_GetNextChild>
 80070e6:	4606      	mov	r6, r0
 80070e8:	4604      	mov	r4, r0
 80070ea:	4620      	mov	r0, r4
 80070ec:	f000 fa08 	bl	8007500 <WM_IsFocussable>
 80070f0:	b938      	cbnz	r0, 8007102 <WM_SetFocusOnNextChild+0x36>
 80070f2:	b13c      	cbz	r4, 8007104 <WM_SetFocusOnNextChild+0x38>
 80070f4:	4621      	mov	r1, r4
 80070f6:	4628      	mov	r0, r5
 80070f8:	f7ff ffd5 	bl	80070a6 <_GetNextChild>
 80070fc:	42b0      	cmp	r0, r6
 80070fe:	4604      	mov	r4, r0
 8007100:	d1f3      	bne.n	80070ea <WM_SetFocusOnNextChild+0x1e>
 8007102:	b90c      	cbnz	r4, 8007108 <WM_SetFocusOnNextChild+0x3c>
 8007104:	2400      	movs	r4, #0
 8007106:	e010      	b.n	800712a <WM_SetFocusOnNextChild+0x5e>
 8007108:	4d0b      	ldr	r5, [pc, #44]	; (8007138 <WM_SetFocusOnNextChild+0x6c>)
 800710a:	4620      	mov	r0, r4
 800710c:	682e      	ldr	r6, [r5, #0]
 800710e:	f001 f825 	bl	800815c <WM__GetTopLevelLayer>
 8007112:	3001      	adds	r0, #1
 8007114:	d009      	beq.n	800712a <WM_SetFocusOnNextChild+0x5e>
 8007116:	4620      	mov	r0, r4
 8007118:	f001 f820 	bl	800815c <WM__GetTopLevelLayer>
 800711c:	6028      	str	r0, [r5, #0]
 800711e:	4620      	mov	r0, r4
 8007120:	f000 f80c 	bl	800713c <WM_SetFocus>
 8007124:	602e      	str	r6, [r5, #0]
 8007126:	2800      	cmp	r0, #0
 8007128:	d1ec      	bne.n	8007104 <WM_SetFocusOnNextChild+0x38>
 800712a:	f005 fc37 	bl	800c99c <GUI_Unlock>
 800712e:	e000      	b.n	8007132 <WM_SetFocusOnNextChild+0x66>
 8007130:	4604      	mov	r4, r0
 8007132:	4620      	mov	r0, r4
 8007134:	bd70      	pop	{r4, r5, r6, pc}
 8007136:	bf00      	nop
 8007138:	200287e4 	.word	0x200287e4

0800713c <WM_SetFocus>:
 800713c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800713e:	b087      	sub	sp, #28
 8007140:	4604      	mov	r4, r0
 8007142:	2100      	movs	r1, #0
 8007144:	2210      	movs	r2, #16
 8007146:	a802      	add	r0, sp, #8
 8007148:	f00c f8e8 	bl	801331c <memset>
 800714c:	f005 fc30 	bl	800c9b0 <GUI_Lock>
 8007150:	2c00      	cmp	r4, #0
 8007152:	d03c      	beq.n	80071ce <WM_SetFocus+0x92>
 8007154:	4b21      	ldr	r3, [pc, #132]	; (80071dc <WM_SetFocus+0xa0>)
 8007156:	4a22      	ldr	r2, [pc, #136]	; (80071e0 <WM_SetFocus+0xa4>)
 8007158:	6819      	ldr	r1, [r3, #0]
 800715a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800715e:	4284      	cmp	r4, r0
 8007160:	4616      	mov	r6, r2
 8007162:	461f      	mov	r7, r3
 8007164:	d033      	beq.n	80071ce <WM_SetFocus+0x92>
 8007166:	231e      	movs	r3, #30
 8007168:	9302      	str	r3, [sp, #8]
 800716a:	2300      	movs	r3, #0
 800716c:	e88d 0011 	stmia.w	sp, {r0, r4}
 8007170:	9305      	str	r3, [sp, #20]
 8007172:	b110      	cbz	r0, 800717a <WM_SetFocus+0x3e>
 8007174:	a902      	add	r1, sp, #8
 8007176:	f7ff fe59 	bl	8006e2c <WM__SendMessage>
 800717a:	2301      	movs	r3, #1
 800717c:	4620      	mov	r0, r4
 800717e:	a902      	add	r1, sp, #8
 8007180:	9305      	str	r3, [sp, #20]
 8007182:	f7ff fe53 	bl	8006e2c <WM__SendMessage>
 8007186:	9d05      	ldr	r5, [sp, #20]
 8007188:	bb15      	cbnz	r5, 80071d0 <WM_SetFocus+0x94>
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
 8007190:	4620      	mov	r0, r4
 8007192:	f000 fa5c 	bl	800764e <WM_GetParent>
 8007196:	4604      	mov	r4, r0
 8007198:	b138      	cbz	r0, 80071aa <WM_SetFocus+0x6e>
 800719a:	2320      	movs	r3, #32
 800719c:	9302      	str	r3, [sp, #8]
 800719e:	a902      	add	r1, sp, #8
 80071a0:	ab00      	add	r3, sp, #0
 80071a2:	9305      	str	r3, [sp, #20]
 80071a4:	f7ff fe42 	bl	8006e2c <WM__SendMessage>
 80071a8:	e7f2      	b.n	8007190 <WM_SetFocus+0x54>
 80071aa:	9c00      	ldr	r4, [sp, #0]
 80071ac:	4620      	mov	r0, r4
 80071ae:	f000 f99b 	bl	80074e8 <WM_IsWindow>
 80071b2:	b168      	cbz	r0, 80071d0 <WM_SetFocus+0x94>
 80071b4:	4620      	mov	r0, r4
 80071b6:	f000 fa4a 	bl	800764e <WM_GetParent>
 80071ba:	4604      	mov	r4, r0
 80071bc:	b140      	cbz	r0, 80071d0 <WM_SetFocus+0x94>
 80071be:	2320      	movs	r3, #32
 80071c0:	9302      	str	r3, [sp, #8]
 80071c2:	a902      	add	r1, sp, #8
 80071c4:	ab00      	add	r3, sp, #0
 80071c6:	9305      	str	r3, [sp, #20]
 80071c8:	f7ff fe30 	bl	8006e2c <WM__SendMessage>
 80071cc:	e7f2      	b.n	80071b4 <WM_SetFocus+0x78>
 80071ce:	2501      	movs	r5, #1
 80071d0:	f005 fbe4 	bl	800c99c <GUI_Unlock>
 80071d4:	4628      	mov	r0, r5
 80071d6:	b007      	add	sp, #28
 80071d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071da:	bf00      	nop
 80071dc:	200287e4 	.word	0x200287e4
 80071e0:	20028800 	.word	0x20028800

080071e4 <WM_SetCreateFlags>:
 80071e4:	4b02      	ldr	r3, [pc, #8]	; (80071f0 <WM_SetCreateFlags+0xc>)
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	6018      	str	r0, [r3, #0]
 80071ea:	4610      	mov	r0, r2
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	2002880c 	.word	0x2002880c

080071f4 <WM__ReleaseCapture>:
 80071f4:	b530      	push	{r4, r5, lr}
 80071f6:	4d0a      	ldr	r5, [pc, #40]	; (8007220 <WM__ReleaseCapture+0x2c>)
 80071f8:	4c0a      	ldr	r4, [pc, #40]	; (8007224 <WM__ReleaseCapture+0x30>)
 80071fa:	682b      	ldr	r3, [r5, #0]
 80071fc:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8007200:	b085      	sub	sp, #20
 8007202:	b150      	cbz	r0, 800721a <WM__ReleaseCapture+0x26>
 8007204:	a904      	add	r1, sp, #16
 8007206:	2318      	movs	r3, #24
 8007208:	f841 3d10 	str.w	r3, [r1, #-16]!
 800720c:	4669      	mov	r1, sp
 800720e:	f7ff fe0d 	bl	8006e2c <WM__SendMessage>
 8007212:	682b      	ldr	r3, [r5, #0]
 8007214:	2200      	movs	r2, #0
 8007216:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 800721a:	b005      	add	sp, #20
 800721c:	bd30      	pop	{r4, r5, pc}
 800721e:	bf00      	nop
 8007220:	200287e4 	.word	0x200287e4
 8007224:	200287f0 	.word	0x200287f0

08007228 <WM_ReleaseCapture>:
 8007228:	b508      	push	{r3, lr}
 800722a:	f005 fbc1 	bl	800c9b0 <GUI_Lock>
 800722e:	f7ff ffe1 	bl	80071f4 <WM__ReleaseCapture>
 8007232:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007236:	f005 bbb1 	b.w	800c99c <GUI_Unlock>

0800723a <WM_SendToParent>:
 800723a:	b538      	push	{r3, r4, r5, lr}
 800723c:	4605      	mov	r5, r0
 800723e:	460c      	mov	r4, r1
 8007240:	b169      	cbz	r1, 800725e <WM_SendToParent+0x24>
 8007242:	f005 fbb5 	bl	800c9b0 <GUI_Lock>
 8007246:	4628      	mov	r0, r5
 8007248:	f000 fa01 	bl	800764e <WM_GetParent>
 800724c:	b118      	cbz	r0, 8007256 <WM_SendToParent+0x1c>
 800724e:	60a5      	str	r5, [r4, #8]
 8007250:	4621      	mov	r1, r4
 8007252:	f7ff fdeb 	bl	8006e2c <WM__SendMessage>
 8007256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800725a:	f005 bb9f 	b.w	800c99c <GUI_Unlock>
 800725e:	bd38      	pop	{r3, r4, r5, pc}

08007260 <WM_SendMessageNoPara>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4605      	mov	r5, r0
 8007264:	460c      	mov	r4, r1
 8007266:	f005 fba3 	bl	800c9b0 <GUI_Lock>
 800726a:	4628      	mov	r0, r5
 800726c:	4621      	mov	r1, r4
 800726e:	f008 fcb6 	bl	800fbde <WM__SendMessageNoPara>
 8007272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007276:	f005 bb91 	b.w	800c99c <GUI_Unlock>

0800727a <WM_ResizeWindow>:
 800727a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800727e:	ea51 0302 	orrs.w	r3, r1, r2
 8007282:	b08a      	sub	sp, #40	; 0x28
 8007284:	4606      	mov	r6, r0
 8007286:	460f      	mov	r7, r1
 8007288:	4690      	mov	r8, r2
 800728a:	d077      	beq.n	800737c <WM_ResizeWindow+0x102>
 800728c:	2800      	cmp	r0, #0
 800728e:	d075      	beq.n	800737c <WM_ResizeWindow+0x102>
 8007290:	f005 fb8e 	bl	800c9b0 <GUI_Lock>
 8007294:	4630      	mov	r0, r6
 8007296:	f007 f86f 	bl	800e378 <GUI_ALLOC_LockH>
 800729a:	4603      	mov	r3, r0
 800729c:	9003      	str	r0, [sp, #12]
 800729e:	c803      	ldmia	r0, {r0, r1}
 80072a0:	ad04      	add	r5, sp, #16
 80072a2:	ac06      	add	r4, sp, #24
 80072a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80072a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80072ac:	b17f      	cbz	r7, 80072ce <WM_ResizeWindow+0x54>
 80072ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072b0:	f402 7220 	and.w	r2, r2, #640	; 0x280
 80072b4:	2a80      	cmp	r2, #128	; 0x80
 80072b6:	d105      	bne.n	80072c4 <WM_ResizeWindow+0x4a>
 80072b8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80072bc:	1bd7      	subs	r7, r2, r7
 80072be:	f8ad 7018 	strh.w	r7, [sp, #24]
 80072c2:	e004      	b.n	80072ce <WM_ResizeWindow+0x54>
 80072c4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80072c8:	4417      	add	r7, r2
 80072ca:	f8ad 701c 	strh.w	r7, [sp, #28]
 80072ce:	f1b8 0f00 	cmp.w	r8, #0
 80072d2:	d011      	beq.n	80072f8 <WM_ResizeWindow+0x7e>
 80072d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072d6:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 80072da:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80072de:	d106      	bne.n	80072ee <WM_ResizeWindow+0x74>
 80072e0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80072e4:	ebc8 0802 	rsb	r8, r8, r2
 80072e8:	f8ad 801a 	strh.w	r8, [sp, #26]
 80072ec:	e004      	b.n	80072f8 <WM_ResizeWindow+0x7e>
 80072ee:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80072f2:	4490      	add	r8, r2
 80072f4:	f8ad 801e 	strh.w	r8, [sp, #30]
 80072f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fa:	03da      	lsls	r2, r3, #15
 80072fc:	d502      	bpl.n	8007304 <WM_ResizeWindow+0x8a>
 80072fe:	4630      	mov	r0, r6
 8007300:	f000 fda6 	bl	8007e50 <WM__InvalidateDrawAndDescs>
 8007304:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007308:	9b03      	ldr	r3, [sp, #12]
 800730a:	e883 0003 	stmia.w	r3, {r0, r1}
 800730e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007310:	079b      	lsls	r3, r3, #30
 8007312:	d50a      	bpl.n	800732a <WM_ResizeWindow+0xb0>
 8007314:	a808      	add	r0, sp, #32
 8007316:	4629      	mov	r1, r5
 8007318:	4622      	mov	r2, r4
 800731a:	f005 fdc5 	bl	800cea8 <GUI_MergeRect>
 800731e:	9b03      	ldr	r3, [sp, #12]
 8007320:	a808      	add	r0, sp, #32
 8007322:	6999      	ldr	r1, [r3, #24]
 8007324:	6a1a      	ldr	r2, [r3, #32]
 8007326:	f000 fe97 	bl	8008058 <WM__InvalidateRectEx>
 800732a:	f9bd e01e 	ldrsh.w	lr, [sp, #30]
 800732e:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 8007332:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8007336:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800733a:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 800733e:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8007342:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 8007346:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800734a:	ebc0 000e 	rsb	r0, r0, lr
 800734e:	1ae3      	subs	r3, r4, r3
 8007350:	ac0a      	add	r4, sp, #40	; 0x28
 8007352:	1aaa      	subs	r2, r5, r2
 8007354:	9000      	str	r0, [sp, #0]
 8007356:	1a79      	subs	r1, r7, r1
 8007358:	9803      	ldr	r0, [sp, #12]
 800735a:	f7ff fced 	bl	8006d38 <WM__UpdateChildPositions>
 800735e:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 8007362:	f101 0008 	add.w	r0, r1, #8
 8007366:	f004 fe89 	bl	800c07c <GUI__IntersectRect>
 800736a:	4630      	mov	r0, r6
 800736c:	2105      	movs	r1, #5
 800736e:	f000 fe9a 	bl	80080a6 <WM__SendMsgNoData>
 8007372:	4620      	mov	r0, r4
 8007374:	f007 f80e 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007378:	f005 fb10 	bl	800c99c <GUI_Unlock>
 800737c:	b00a      	add	sp, #40	; 0x28
 800737e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007382 <WM_NotifyParent>:
 8007382:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007384:	2326      	movs	r3, #38	; 0x26
 8007386:	9103      	str	r1, [sp, #12]
 8007388:	4669      	mov	r1, sp
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	f7ff ff55 	bl	800723a <WM_SendToParent>
 8007390:	b005      	add	sp, #20
 8007392:	f85d fb04 	ldr.w	pc, [sp], #4

08007396 <_MoveDescendents>:
 8007396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800739a:	b088      	sub	sp, #32
 800739c:	4606      	mov	r6, r0
 800739e:	460c      	mov	r4, r1
 80073a0:	4615      	mov	r5, r2
 80073a2:	a804      	add	r0, sp, #16
 80073a4:	2100      	movs	r1, #0
 80073a6:	2210      	movs	r2, #16
 80073a8:	f00b ffb8 	bl	801331c <memset>
 80073ac:	b336      	cbz	r6, 80073fc <_MoveDescendents+0x66>
 80073ae:	4630      	mov	r0, r6
 80073b0:	f006 ffe2 	bl	800e378 <GUI_ALLOC_LockH>
 80073b4:	4621      	mov	r1, r4
 80073b6:	462a      	mov	r2, r5
 80073b8:	9001      	str	r0, [sp, #4]
 80073ba:	f005 fd65 	bl	800ce88 <GUI_MoveRect>
 80073be:	9801      	ldr	r0, [sp, #4]
 80073c0:	4621      	mov	r1, r4
 80073c2:	3008      	adds	r0, #8
 80073c4:	462a      	mov	r2, r5
 80073c6:	f005 fd5f 	bl	800ce88 <GUI_MoveRect>
 80073ca:	a808      	add	r0, sp, #32
 80073cc:	f850 2d1c 	ldr.w	r2, [r0, #-28]!
 80073d0:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80073d4:	6a17      	ldr	r7, [r2, #32]
 80073d6:	f006 ffdd 	bl	800e394 <GUI_ALLOC_UnlockH>
 80073da:	4640      	mov	r0, r8
 80073dc:	4621      	mov	r1, r4
 80073de:	462a      	mov	r2, r5
 80073e0:	f7ff ffd9 	bl	8007396 <_MoveDescendents>
 80073e4:	2303      	movs	r3, #3
 80073e6:	9304      	str	r3, [sp, #16]
 80073e8:	4630      	mov	r0, r6
 80073ea:	ab02      	add	r3, sp, #8
 80073ec:	a904      	add	r1, sp, #16
 80073ee:	9307      	str	r3, [sp, #28]
 80073f0:	9402      	str	r4, [sp, #8]
 80073f2:	9503      	str	r5, [sp, #12]
 80073f4:	463e      	mov	r6, r7
 80073f6:	f7ff fd19 	bl	8006e2c <WM__SendMessage>
 80073fa:	e7d7      	b.n	80073ac <_MoveDescendents+0x16>
 80073fc:	b008      	add	sp, #32
 80073fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007402 <WM__MoveWindow>:
 8007402:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007406:	b08b      	sub	sp, #44	; 0x2c
 8007408:	4606      	mov	r6, r0
 800740a:	460d      	mov	r5, r1
 800740c:	4614      	mov	r4, r2
 800740e:	a806      	add	r0, sp, #24
 8007410:	2100      	movs	r1, #0
 8007412:	2210      	movs	r2, #16
 8007414:	f00b ff82 	bl	801331c <memset>
 8007418:	2e00      	cmp	r6, #0
 800741a:	d043      	beq.n	80074a4 <WM__MoveWindow+0xa2>
 800741c:	b90d      	cbnz	r5, 8007422 <WM__MoveWindow+0x20>
 800741e:	2c00      	cmp	r4, #0
 8007420:	d040      	beq.n	80074a4 <WM__MoveWindow+0xa2>
 8007422:	4630      	mov	r0, r6
 8007424:	f006 ffa8 	bl	800e378 <GUI_ALLOC_LockH>
 8007428:	4603      	mov	r3, r0
 800742a:	9001      	str	r0, [sp, #4]
 800742c:	c803      	ldmia	r0, {r0, r1}
 800742e:	f10d 0808 	add.w	r8, sp, #8
 8007432:	e888 0003 	stmia.w	r8, {r0, r1}
 8007436:	4622      	mov	r2, r4
 8007438:	4618      	mov	r0, r3
 800743a:	4629      	mov	r1, r5
 800743c:	f005 fd24 	bl	800ce88 <GUI_MoveRect>
 8007440:	9801      	ldr	r0, [sp, #4]
 8007442:	af0a      	add	r7, sp, #40	; 0x28
 8007444:	4629      	mov	r1, r5
 8007446:	4622      	mov	r2, r4
 8007448:	3008      	adds	r0, #8
 800744a:	f005 fd1d 	bl	800ce88 <GUI_MoveRect>
 800744e:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 8007452:	f8d3 901c 	ldr.w	r9, [r3, #28]
 8007456:	4638      	mov	r0, r7
 8007458:	f006 ff9c 	bl	800e394 <GUI_ALLOC_UnlockH>
 800745c:	4622      	mov	r2, r4
 800745e:	4648      	mov	r0, r9
 8007460:	4629      	mov	r1, r5
 8007462:	f7ff ff98 	bl	8007396 <_MoveDescendents>
 8007466:	4630      	mov	r0, r6
 8007468:	f006 ff86 	bl	800e378 <GUI_ALLOC_LockH>
 800746c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800746e:	9001      	str	r0, [sp, #4]
 8007470:	0792      	lsls	r2, r2, #30
 8007472:	d50a      	bpl.n	800748a <WM__MoveWindow+0x88>
 8007474:	6981      	ldr	r1, [r0, #24]
 8007476:	b141      	cbz	r1, 800748a <WM__MoveWindow+0x88>
 8007478:	6a02      	ldr	r2, [r0, #32]
 800747a:	f000 fdd8 	bl	800802e <WM__InvalidateParent>
 800747e:	9b01      	ldr	r3, [sp, #4]
 8007480:	4640      	mov	r0, r8
 8007482:	6999      	ldr	r1, [r3, #24]
 8007484:	6a1a      	ldr	r2, [r3, #32]
 8007486:	f000 fdd2 	bl	800802e <WM__InvalidateParent>
 800748a:	4638      	mov	r0, r7
 800748c:	f006 ff82 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007490:	2303      	movs	r3, #3
 8007492:	9306      	str	r3, [sp, #24]
 8007494:	4630      	mov	r0, r6
 8007496:	ab04      	add	r3, sp, #16
 8007498:	a906      	add	r1, sp, #24
 800749a:	9309      	str	r3, [sp, #36]	; 0x24
 800749c:	9504      	str	r5, [sp, #16]
 800749e:	9405      	str	r4, [sp, #20]
 80074a0:	f7ff fcc4 	bl	8006e2c <WM__SendMessage>
 80074a4:	b00b      	add	sp, #44	; 0x2c
 80074a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080074aa <WM_MoveWindow>:
 80074aa:	b570      	push	{r4, r5, r6, lr}
 80074ac:	4606      	mov	r6, r0
 80074ae:	460d      	mov	r5, r1
 80074b0:	4614      	mov	r4, r2
 80074b2:	f005 fa7d 	bl	800c9b0 <GUI_Lock>
 80074b6:	4630      	mov	r0, r6
 80074b8:	4629      	mov	r1, r5
 80074ba:	4622      	mov	r2, r4
 80074bc:	f7ff ffa1 	bl	8007402 <WM__MoveWindow>
 80074c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80074c4:	f005 ba6a 	b.w	800c99c <GUI_Unlock>

080074c8 <WM_MULTIBUF_Enable>:
 80074c8:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <WM_MULTIBUF_Enable+0x18>)
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	1c11      	adds	r1, r2, #0
 80074ce:	bf18      	it	ne
 80074d0:	2101      	movne	r1, #1
 80074d2:	b110      	cbz	r0, 80074da <WM_MULTIBUF_Enable+0x12>
 80074d4:	4a03      	ldr	r2, [pc, #12]	; (80074e4 <WM_MULTIBUF_Enable+0x1c>)
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	e000      	b.n	80074dc <WM_MULTIBUF_Enable+0x14>
 80074da:	6018      	str	r0, [r3, #0]
 80074dc:	4608      	mov	r0, r1
 80074de:	4770      	bx	lr
 80074e0:	200287ec 	.word	0x200287ec
 80074e4:	08067034 	.word	0x08067034

080074e8 <WM_IsWindow>:
 80074e8:	b510      	push	{r4, lr}
 80074ea:	4604      	mov	r4, r0
 80074ec:	f005 fa60 	bl	800c9b0 <GUI_Lock>
 80074f0:	4620      	mov	r0, r4
 80074f2:	f000 fc9d 	bl	8007e30 <WM__IsWindow>
 80074f6:	4604      	mov	r4, r0
 80074f8:	f005 fa50 	bl	800c99c <GUI_Unlock>
 80074fc:	4620      	mov	r0, r4
 80074fe:	bd10      	pop	{r4, pc}

08007500 <WM_IsFocussable>:
 8007500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007502:	b150      	cbz	r0, 800751a <WM_IsFocussable+0x1a>
 8007504:	2300      	movs	r3, #0
 8007506:	a904      	add	r1, sp, #16
 8007508:	9303      	str	r3, [sp, #12]
 800750a:	231f      	movs	r3, #31
 800750c:	f841 3d10 	str.w	r3, [r1, #-16]!
 8007510:	4669      	mov	r1, sp
 8007512:	f000 fdb9 	bl	8008088 <WM_SendMessage>
 8007516:	9803      	ldr	r0, [sp, #12]
 8007518:	e7ff      	b.n	800751a <WM_IsFocussable+0x1a>
 800751a:	b005      	add	sp, #20
 800751c:	f85d fb04 	ldr.w	pc, [sp], #4

08007520 <WM_HasFocus>:
 8007520:	4b04      	ldr	r3, [pc, #16]	; (8007534 <WM_HasFocus+0x14>)
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	4b04      	ldr	r3, [pc, #16]	; (8007538 <WM_HasFocus+0x18>)
 8007526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800752a:	1ac3      	subs	r3, r0, r3
 800752c:	4258      	negs	r0, r3
 800752e:	4158      	adcs	r0, r3
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	200287e4 	.word	0x200287e4
 8007538:	20028800 	.word	0x20028800

0800753c <WM_GetWindowSizeX>:
 800753c:	b513      	push	{r0, r1, r4, lr}
 800753e:	4604      	mov	r4, r0
 8007540:	f005 fa36 	bl	800c9b0 <GUI_Lock>
 8007544:	b914      	cbnz	r4, 800754c <WM_GetWindowSizeX+0x10>
 8007546:	f000 ff85 	bl	8008454 <WM_GetActiveWindow>
 800754a:	4604      	mov	r4, r0
 800754c:	4620      	mov	r0, r4
 800754e:	f006 ff13 	bl	800e378 <GUI_ALLOC_LockH>
 8007552:	ab02      	add	r3, sp, #8
 8007554:	f9b0 2000 	ldrsh.w	r2, [r0]
 8007558:	f843 0d04 	str.w	r0, [r3, #-4]!
 800755c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8007560:	4618      	mov	r0, r3
 8007562:	1aa4      	subs	r4, r4, r2
 8007564:	f006 ff16 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007568:	f005 fa18 	bl	800c99c <GUI_Unlock>
 800756c:	3401      	adds	r4, #1
 800756e:	4620      	mov	r0, r4
 8007570:	b002      	add	sp, #8
 8007572:	bd10      	pop	{r4, pc}

08007574 <WM_GetWindowSizeY>:
 8007574:	b513      	push	{r0, r1, r4, lr}
 8007576:	4604      	mov	r4, r0
 8007578:	f005 fa1a 	bl	800c9b0 <GUI_Lock>
 800757c:	b914      	cbnz	r4, 8007584 <WM_GetWindowSizeY+0x10>
 800757e:	f000 ff69 	bl	8008454 <WM_GetActiveWindow>
 8007582:	4604      	mov	r4, r0
 8007584:	4620      	mov	r0, r4
 8007586:	f006 fef7 	bl	800e378 <GUI_ALLOC_LockH>
 800758a:	ab02      	add	r3, sp, #8
 800758c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8007590:	f843 0d04 	str.w	r0, [r3, #-4]!
 8007594:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8007598:	4618      	mov	r0, r3
 800759a:	1aa4      	subs	r4, r4, r2
 800759c:	f006 fefa 	bl	800e394 <GUI_ALLOC_UnlockH>
 80075a0:	f005 f9fc 	bl	800c99c <GUI_Unlock>
 80075a4:	3401      	adds	r4, #1
 80075a6:	4620      	mov	r0, r4
 80075a8:	b002      	add	sp, #8
 80075aa:	bd10      	pop	{r4, pc}

080075ac <WM_GetWindowRectEx>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	460c      	mov	r4, r1
 80075b0:	4605      	mov	r5, r0
 80075b2:	b168      	cbz	r0, 80075d0 <WM_GetWindowRectEx+0x24>
 80075b4:	b161      	cbz	r1, 80075d0 <WM_GetWindowRectEx+0x24>
 80075b6:	f005 f9fb 	bl	800c9b0 <GUI_Lock>
 80075ba:	4628      	mov	r0, r5
 80075bc:	f006 fed2 	bl	800e364 <GUI_ALLOC_h2p>
 80075c0:	4603      	mov	r3, r0
 80075c2:	cb03      	ldmia	r3!, {r0, r1}
 80075c4:	6020      	str	r0, [r4, #0]
 80075c6:	6061      	str	r1, [r4, #4]
 80075c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075cc:	f005 b9e6 	b.w	800c99c <GUI_Unlock>
 80075d0:	bd38      	pop	{r3, r4, r5, pc}

080075d2 <_GetDialogItem>:
 80075d2:	b570      	push	{r4, r5, r6, lr}
 80075d4:	4606      	mov	r6, r0
 80075d6:	460d      	mov	r5, r1
 80075d8:	f006 fec4 	bl	800e364 <GUI_ALLOC_h2p>
 80075dc:	69c4      	ldr	r4, [r0, #28]
 80075de:	b14c      	cbz	r4, 80075f4 <_GetDialogItem+0x22>
 80075e0:	4620      	mov	r0, r4
 80075e2:	f000 f84f 	bl	8007684 <WM_GetId>
 80075e6:	42a8      	cmp	r0, r5
 80075e8:	4620      	mov	r0, r4
 80075ea:	d013      	beq.n	8007614 <_GetDialogItem+0x42>
 80075ec:	f006 feba 	bl	800e364 <GUI_ALLOC_h2p>
 80075f0:	6a04      	ldr	r4, [r0, #32]
 80075f2:	e7f4      	b.n	80075de <_GetDialogItem+0xc>
 80075f4:	4630      	mov	r0, r6
 80075f6:	f006 feb5 	bl	800e364 <GUI_ALLOC_h2p>
 80075fa:	69c4      	ldr	r4, [r0, #28]
 80075fc:	4620      	mov	r0, r4
 80075fe:	b144      	cbz	r4, 8007612 <_GetDialogItem+0x40>
 8007600:	4629      	mov	r1, r5
 8007602:	f7ff ffe6 	bl	80075d2 <_GetDialogItem>
 8007606:	b928      	cbnz	r0, 8007614 <_GetDialogItem+0x42>
 8007608:	4620      	mov	r0, r4
 800760a:	f006 feab 	bl	800e364 <GUI_ALLOC_h2p>
 800760e:	6a04      	ldr	r4, [r0, #32]
 8007610:	e7f4      	b.n	80075fc <_GetDialogItem+0x2a>
 8007612:	bd70      	pop	{r4, r5, r6, pc}
 8007614:	bd70      	pop	{r4, r5, r6, pc}

08007616 <WM_GetScrollbarH>:
 8007616:	b510      	push	{r4, lr}
 8007618:	4604      	mov	r4, r0
 800761a:	b140      	cbz	r0, 800762e <WM_GetScrollbarH+0x18>
 800761c:	f005 f9c8 	bl	800c9b0 <GUI_Lock>
 8007620:	4620      	mov	r0, r4
 8007622:	21ff      	movs	r1, #255	; 0xff
 8007624:	f7ff ffd5 	bl	80075d2 <_GetDialogItem>
 8007628:	4604      	mov	r4, r0
 800762a:	f005 f9b7 	bl	800c99c <GUI_Unlock>
 800762e:	4620      	mov	r0, r4
 8007630:	bd10      	pop	{r4, pc}

08007632 <WM_GetScrollbarV>:
 8007632:	b510      	push	{r4, lr}
 8007634:	4604      	mov	r4, r0
 8007636:	b140      	cbz	r0, 800764a <WM_GetScrollbarV+0x18>
 8007638:	f005 f9ba 	bl	800c9b0 <GUI_Lock>
 800763c:	4620      	mov	r0, r4
 800763e:	21fe      	movs	r1, #254	; 0xfe
 8007640:	f7ff ffc7 	bl	80075d2 <_GetDialogItem>
 8007644:	4604      	mov	r4, r0
 8007646:	f005 f9a9 	bl	800c99c <GUI_Unlock>
 800764a:	4620      	mov	r0, r4
 800764c:	bd10      	pop	{r4, pc}

0800764e <WM_GetParent>:
 800764e:	b510      	push	{r4, lr}
 8007650:	4604      	mov	r4, r0
 8007652:	b138      	cbz	r0, 8007664 <WM_GetParent+0x16>
 8007654:	f005 f9ac 	bl	800c9b0 <GUI_Lock>
 8007658:	4620      	mov	r0, r4
 800765a:	f006 fe83 	bl	800e364 <GUI_ALLOC_h2p>
 800765e:	6984      	ldr	r4, [r0, #24]
 8007660:	f005 f99c 	bl	800c99c <GUI_Unlock>
 8007664:	4620      	mov	r0, r4
 8007666:	bd10      	pop	{r4, pc}

08007668 <WM_GetWindowOrgX>:
 8007668:	b510      	push	{r4, lr}
 800766a:	4604      	mov	r4, r0
 800766c:	b140      	cbz	r0, 8007680 <WM_GetWindowOrgX+0x18>
 800766e:	f005 f99f 	bl	800c9b0 <GUI_Lock>
 8007672:	4620      	mov	r0, r4
 8007674:	f006 fe76 	bl	800e364 <GUI_ALLOC_h2p>
 8007678:	f9b0 4000 	ldrsh.w	r4, [r0]
 800767c:	f005 f98e 	bl	800c99c <GUI_Unlock>
 8007680:	4620      	mov	r0, r4
 8007682:	bd10      	pop	{r4, pc}

08007684 <WM_GetId>:
 8007684:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007686:	4604      	mov	r4, r0
 8007688:	2210      	movs	r2, #16
 800768a:	4668      	mov	r0, sp
 800768c:	2100      	movs	r1, #0
 800768e:	f00b fe45 	bl	801331c <memset>
 8007692:	2315      	movs	r3, #21
 8007694:	4620      	mov	r0, r4
 8007696:	4669      	mov	r1, sp
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	f000 fcf5 	bl	8008088 <WM_SendMessage>
 800769e:	9803      	ldr	r0, [sp, #12]
 80076a0:	b004      	add	sp, #16
 80076a2:	bd10      	pop	{r4, pc}

080076a4 <WM_GetFocussedWindow>:
 80076a4:	b510      	push	{r4, lr}
 80076a6:	f005 f983 	bl	800c9b0 <GUI_Lock>
 80076aa:	4b04      	ldr	r3, [pc, #16]	; (80076bc <WM_GetFocussedWindow+0x18>)
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	4b04      	ldr	r3, [pc, #16]	; (80076c0 <WM_GetFocussedWindow+0x1c>)
 80076b0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80076b4:	f005 f972 	bl	800c99c <GUI_Unlock>
 80076b8:	4620      	mov	r0, r4
 80076ba:	bd10      	pop	{r4, pc}
 80076bc:	200287e4 	.word	0x200287e4
 80076c0:	20028800 	.word	0x20028800

080076c4 <WM_GetFirstChild>:
 80076c4:	b510      	push	{r4, lr}
 80076c6:	4604      	mov	r4, r0
 80076c8:	b138      	cbz	r0, 80076da <WM_GetFirstChild+0x16>
 80076ca:	f005 f971 	bl	800c9b0 <GUI_Lock>
 80076ce:	4620      	mov	r0, r4
 80076d0:	f006 fe48 	bl	800e364 <GUI_ALLOC_h2p>
 80076d4:	69c4      	ldr	r4, [r0, #28]
 80076d6:	f005 f961 	bl	800c99c <GUI_Unlock>
 80076da:	4620      	mov	r0, r4
 80076dc:	bd10      	pop	{r4, pc}
	...

080076e0 <WM_GetDesktopWindow>:
 80076e0:	4b03      	ldr	r3, [pc, #12]	; (80076f0 <WM_GetDesktopWindow+0x10>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	7c5a      	ldrb	r2, [r3, #17]
 80076e6:	4b03      	ldr	r3, [pc, #12]	; (80076f4 <WM_GetDesktopWindow+0x14>)
 80076e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	200002c4 	.word	0x200002c4
 80076f4:	20028818 	.word	0x20028818

080076f8 <WM_GetClientWindow>:
 80076f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076fa:	2300      	movs	r3, #0
 80076fc:	a904      	add	r1, sp, #16
 80076fe:	9303      	str	r3, [sp, #12]
 8007700:	2317      	movs	r3, #23
 8007702:	f841 3d10 	str.w	r3, [r1, #-16]!
 8007706:	4669      	mov	r1, sp
 8007708:	f000 fcbe 	bl	8008088 <WM_SendMessage>
 800770c:	9803      	ldr	r0, [sp, #12]
 800770e:	b005      	add	sp, #20
 8007710:	f85d fb04 	ldr.w	pc, [sp], #4

08007714 <WM__GetClientRectEx>:
 8007714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007716:	460d      	mov	r5, r1
 8007718:	b158      	cbz	r0, 8007732 <WM__GetClientRectEx+0x1e>
 800771a:	b151      	cbz	r1, 8007732 <WM__GetClientRectEx+0x1e>
 800771c:	f006 fe2c 	bl	800e378 <GUI_ALLOC_LockH>
 8007720:	ac02      	add	r4, sp, #8
 8007722:	4629      	mov	r1, r5
 8007724:	f844 0d04 	str.w	r0, [r4, #-4]!
 8007728:	f000 fcc8 	bl	80080bc <WM__GetClientRectWin>
 800772c:	4620      	mov	r0, r4
 800772e:	f006 fe31 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007732:	b003      	add	sp, #12
 8007734:	bd30      	pop	{r4, r5, pc}

08007736 <WM_GetClientRectEx>:
 8007736:	b538      	push	{r3, r4, r5, lr}
 8007738:	4605      	mov	r5, r0
 800773a:	460c      	mov	r4, r1
 800773c:	f005 f938 	bl	800c9b0 <GUI_Lock>
 8007740:	4628      	mov	r0, r5
 8007742:	4621      	mov	r1, r4
 8007744:	f7ff ffe6 	bl	8007714 <WM__GetClientRectEx>
 8007748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800774c:	f005 b926 	b.w	800c99c <GUI_Unlock>

08007750 <WM_GetClientRect>:
 8007750:	b510      	push	{r4, lr}
 8007752:	4604      	mov	r4, r0
 8007754:	f005 f92c 	bl	800c9b0 <GUI_Lock>
 8007758:	4b06      	ldr	r3, [pc, #24]	; (8007774 <WM_GetClientRect+0x24>)
 800775a:	6818      	ldr	r0, [r3, #0]
 800775c:	b910      	cbnz	r0, 8007764 <WM_GetClientRect+0x14>
 800775e:	4b06      	ldr	r3, [pc, #24]	; (8007778 <WM_GetClientRect+0x28>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007764:	4621      	mov	r1, r4
 8007766:	f7ff ffe6 	bl	8007736 <WM_GetClientRectEx>
 800776a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800776e:	f005 b915 	b.w	800c99c <GUI_Unlock>
 8007772:	bf00      	nop
 8007774:	200287e0 	.word	0x200287e0
 8007778:	200002c4 	.word	0x200002c4

0800777c <_cbInvalidateOne>:
 800777c:	f000 bceb 	b.w	8008156 <WM_InvalidateWindow>

08007780 <WM_BringToTop>:
 8007780:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007782:	4604      	mov	r4, r0
 8007784:	f005 f914 	bl	800c9b0 <GUI_Lock>
 8007788:	2c00      	cmp	r4, #0
 800778a:	d033      	beq.n	80077f4 <WM_BringToTop+0x74>
 800778c:	4620      	mov	r0, r4
 800778e:	f006 fdf3 	bl	800e378 <GUI_ALLOC_LockH>
 8007792:	ad02      	add	r5, sp, #8
 8007794:	4603      	mov	r3, r0
 8007796:	f845 0d08 	str.w	r0, [r5, #-8]!
 800779a:	6a00      	ldr	r0, [r0, #32]
 800779c:	b908      	cbnz	r0, 80077a2 <WM_BringToTop+0x22>
 800779e:	4668      	mov	r0, sp
 80077a0:	e00e      	b.n	80077c0 <WM_BringToTop+0x40>
 80077a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a4:	071a      	lsls	r2, r3, #28
 80077a6:	d411      	bmi.n	80077cc <WM_BringToTop+0x4c>
 80077a8:	f006 fde6 	bl	800e378 <GUI_ALLOC_LockH>
 80077ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80077ae:	ae02      	add	r6, sp, #8
 80077b0:	071b      	lsls	r3, r3, #28
 80077b2:	f846 0d04 	str.w	r0, [r6, #-4]!
 80077b6:	d506      	bpl.n	80077c6 <WM_BringToTop+0x46>
 80077b8:	4668      	mov	r0, sp
 80077ba:	f006 fdeb 	bl	800e394 <GUI_ALLOC_UnlockH>
 80077be:	4630      	mov	r0, r6
 80077c0:	f006 fde8 	bl	800e394 <GUI_ALLOC_UnlockH>
 80077c4:	e016      	b.n	80077f4 <WM_BringToTop+0x74>
 80077c6:	4630      	mov	r0, r6
 80077c8:	f006 fde4 	bl	800e394 <GUI_ALLOC_UnlockH>
 80077cc:	9b00      	ldr	r3, [sp, #0]
 80077ce:	4668      	mov	r0, sp
 80077d0:	699e      	ldr	r6, [r3, #24]
 80077d2:	f006 fddf 	bl	800e394 <GUI_ALLOC_UnlockH>
 80077d6:	4620      	mov	r0, r4
 80077d8:	f000 fab8 	bl	8007d4c <WM__RemoveWindowFromList>
 80077dc:	4631      	mov	r1, r6
 80077de:	4620      	mov	r0, r4
 80077e0:	f000 fa62 	bl	8007ca8 <WM__InsertWindowIntoList>
 80077e4:	4620      	mov	r0, r4
 80077e6:	f000 fcb6 	bl	8008156 <WM_InvalidateWindow>
 80077ea:	4620      	mov	r0, r4
 80077ec:	4903      	ldr	r1, [pc, #12]	; (80077fc <WM_BringToTop+0x7c>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	f008 fd30 	bl	8010254 <WM_ForEachDesc>
 80077f4:	f005 f8d2 	bl	800c99c <GUI_Unlock>
 80077f8:	b002      	add	sp, #8
 80077fa:	bd70      	pop	{r4, r5, r6, pc}
 80077fc:	0800777d 	.word	0x0800777d

08007800 <_OnExit>:
 8007800:	4a0a      	ldr	r2, [pc, #40]	; (800782c <_OnExit+0x2c>)
 8007802:	490b      	ldr	r1, [pc, #44]	; (8007830 <_OnExit+0x30>)
 8007804:	2300      	movs	r3, #0
 8007806:	7013      	strb	r3, [r2, #0]
 8007808:	4a0a      	ldr	r2, [pc, #40]	; (8007834 <_OnExit+0x34>)
 800780a:	600b      	str	r3, [r1, #0]
 800780c:	6013      	str	r3, [r2, #0]
 800780e:	4a0a      	ldr	r2, [pc, #40]	; (8007838 <_OnExit+0x38>)
 8007810:	604b      	str	r3, [r1, #4]
 8007812:	6013      	str	r3, [r2, #0]
 8007814:	4a09      	ldr	r2, [pc, #36]	; (800783c <_OnExit+0x3c>)
 8007816:	6013      	str	r3, [r2, #0]
 8007818:	6053      	str	r3, [r2, #4]
 800781a:	4a09      	ldr	r2, [pc, #36]	; (8007840 <_OnExit+0x40>)
 800781c:	6013      	str	r3, [r2, #0]
 800781e:	4a09      	ldr	r2, [pc, #36]	; (8007844 <_OnExit+0x44>)
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	4a09      	ldr	r2, [pc, #36]	; (8007848 <_OnExit+0x48>)
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	4a09      	ldr	r2, [pc, #36]	; (800784c <_OnExit+0x4c>)
 8007828:	6013      	str	r3, [r2, #0]
 800782a:	4770      	bx	lr
 800782c:	2000844c 	.word	0x2000844c
 8007830:	20028800 	.word	0x20028800
 8007834:	20008424 	.word	0x20008424
 8007838:	200287f8 	.word	0x200287f8
 800783c:	200287f0 	.word	0x200287f0
 8007840:	20028814 	.word	0x20028814
 8007844:	200287e0 	.word	0x200287e0
 8007848:	2002880c 	.word	0x2002880c
 800784c:	200287ec 	.word	0x200287ec

08007850 <_Paint1>:
 8007850:	b510      	push	{r4, lr}
 8007852:	4604      	mov	r4, r0
 8007854:	f006 fd86 	bl	800e364 <GUI_ALLOC_h2p>
 8007858:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800785a:	4a04      	ldr	r2, [pc, #16]	; (800786c <_Paint1+0x1c>)
 800785c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007860:	4b03      	ldr	r3, [pc, #12]	; (8007870 <_Paint1+0x20>)
 8007862:	4620      	mov	r0, r4
 8007864:	bf08      	it	eq
 8007866:	4613      	moveq	r3, r2
 8007868:	4798      	blx	r3
 800786a:	bd10      	pop	{r4, pc}
 800786c:	080086f5 	.word	0x080086f5
 8007870:	08008cf1 	.word	0x08008cf1

08007874 <_Findy1>:
 8007874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007876:	4605      	mov	r5, r0
 8007878:	b085      	sub	sp, #20
 800787a:	460c      	mov	r4, r1
 800787c:	4616      	mov	r6, r2
 800787e:	2d00      	cmp	r5, #0
 8007880:	d04c      	beq.n	800791c <_Findy1+0xa8>
 8007882:	4628      	mov	r0, r5
 8007884:	f006 fd78 	bl	800e378 <GUI_ALLOC_LockH>
 8007888:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800788a:	9001      	str	r0, [sp, #4]
 800788c:	07bb      	lsls	r3, r7, #30
 800788e:	4601      	mov	r1, r0
 8007890:	d53d      	bpl.n	800790e <_Findy1+0x9a>
 8007892:	ad02      	add	r5, sp, #8
 8007894:	b126      	cbz	r6, 80078a0 <_Findy1+0x2c>
 8007896:	4628      	mov	r0, r5
 8007898:	4632      	mov	r2, r6
 800789a:	f004 fbbd 	bl	800c018 <GUI__IntersectRects>
 800789e:	e002      	b.n	80078a6 <_Findy1+0x32>
 80078a0:	c803      	ldmia	r0, {r0, r1}
 80078a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80078a6:	4620      	mov	r0, r4
 80078a8:	4629      	mov	r1, r5
 80078aa:	f005 fa11 	bl	800ccd0 <GUI_RectsIntersect>
 80078ae:	b370      	cbz	r0, 800790e <_Findy1+0x9a>
 80078b0:	f017 0f01 	tst.w	r7, #1
 80078b4:	9b01      	ldr	r3, [sp, #4]
 80078b6:	d11e      	bne.n	80078f6 <_Findy1+0x82>
 80078b8:	b13e      	cbz	r6, 80078ca <_Findy1+0x56>
 80078ba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80078be:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	bfa8      	it	ge
 80078c6:	4613      	movge	r3, r2
 80078c8:	e001      	b.n	80078ce <_Findy1+0x5a>
 80078ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80078ce:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80078d2:	4293      	cmp	r3, r2
 80078d4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80078d8:	dd06      	ble.n	80078e8 <_Findy1+0x74>
 80078da:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80078de:	b219      	sxth	r1, r3
 80078e0:	428a      	cmp	r2, r1
 80078e2:	db14      	blt.n	800790e <_Findy1+0x9a>
 80078e4:	3b01      	subs	r3, #1
 80078e6:	e004      	b.n	80078f2 <_Findy1+0x7e>
 80078e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80078ec:	b219      	sxth	r1, r3
 80078ee:	428a      	cmp	r2, r1
 80078f0:	dd0d      	ble.n	800790e <_Findy1+0x9a>
 80078f2:	80e3      	strh	r3, [r4, #6]
 80078f4:	e00b      	b.n	800790e <_Findy1+0x9a>
 80078f6:	69df      	ldr	r7, [r3, #28]
 80078f8:	b14f      	cbz	r7, 800790e <_Findy1+0x9a>
 80078fa:	4638      	mov	r0, r7
 80078fc:	4621      	mov	r1, r4
 80078fe:	462a      	mov	r2, r5
 8007900:	f7ff ffb8 	bl	8007874 <_Findy1>
 8007904:	4638      	mov	r0, r7
 8007906:	f006 fd2d 	bl	800e364 <GUI_ALLOC_h2p>
 800790a:	6a07      	ldr	r7, [r0, #32]
 800790c:	e7f4      	b.n	80078f8 <_Findy1+0x84>
 800790e:	a804      	add	r0, sp, #16
 8007910:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8007914:	6a1d      	ldr	r5, [r3, #32]
 8007916:	f006 fd3d 	bl	800e394 <GUI_ALLOC_UnlockH>
 800791a:	e7b0      	b.n	800787e <_Findy1+0xa>
 800791c:	b005      	add	sp, #20
 800791e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007920 <_Findx0>:
 8007920:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007924:	4604      	mov	r4, r0
 8007926:	460f      	mov	r7, r1
 8007928:	4690      	mov	r8, r2
 800792a:	2500      	movs	r5, #0
 800792c:	2c00      	cmp	r4, #0
 800792e:	d037      	beq.n	80079a0 <_Findx0+0x80>
 8007930:	4620      	mov	r0, r4
 8007932:	f006 fd21 	bl	800e378 <GUI_ALLOC_LockH>
 8007936:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8007938:	9001      	str	r0, [sp, #4]
 800793a:	07b2      	lsls	r2, r6, #30
 800793c:	4601      	mov	r1, r0
 800793e:	d528      	bpl.n	8007992 <_Findx0+0x72>
 8007940:	ac02      	add	r4, sp, #8
 8007942:	f1b8 0f00 	cmp.w	r8, #0
 8007946:	d004      	beq.n	8007952 <_Findx0+0x32>
 8007948:	4620      	mov	r0, r4
 800794a:	4642      	mov	r2, r8
 800794c:	f004 fb64 	bl	800c018 <GUI__IntersectRects>
 8007950:	e002      	b.n	8007958 <_Findx0+0x38>
 8007952:	c803      	ldmia	r0, {r0, r1}
 8007954:	e884 0003 	stmia.w	r4, {r0, r1}
 8007958:	4638      	mov	r0, r7
 800795a:	4621      	mov	r1, r4
 800795c:	f005 f9b8 	bl	800ccd0 <GUI_RectsIntersect>
 8007960:	b1b8      	cbz	r0, 8007992 <_Findx0+0x72>
 8007962:	07f3      	lsls	r3, r6, #31
 8007964:	d405      	bmi.n	8007972 <_Findx0+0x52>
 8007966:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800796a:	3301      	adds	r3, #1
 800796c:	803b      	strh	r3, [r7, #0]
 800796e:	2501      	movs	r5, #1
 8007970:	e00f      	b.n	8007992 <_Findx0+0x72>
 8007972:	9b01      	ldr	r3, [sp, #4]
 8007974:	69de      	ldr	r6, [r3, #28]
 8007976:	b166      	cbz	r6, 8007992 <_Findx0+0x72>
 8007978:	4630      	mov	r0, r6
 800797a:	4639      	mov	r1, r7
 800797c:	4622      	mov	r2, r4
 800797e:	f7ff ffcf 	bl	8007920 <_Findx0>
 8007982:	2800      	cmp	r0, #0
 8007984:	4630      	mov	r0, r6
 8007986:	bf18      	it	ne
 8007988:	2501      	movne	r5, #1
 800798a:	f006 fceb 	bl	800e364 <GUI_ALLOC_h2p>
 800798e:	6a06      	ldr	r6, [r0, #32]
 8007990:	e7f1      	b.n	8007976 <_Findx0+0x56>
 8007992:	a804      	add	r0, sp, #16
 8007994:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8007998:	6a1c      	ldr	r4, [r3, #32]
 800799a:	f006 fcfb 	bl	800e394 <GUI_ALLOC_UnlockH>
 800799e:	e7c5      	b.n	800792c <_Findx0+0xc>
 80079a0:	4628      	mov	r0, r5
 80079a2:	b004      	add	sp, #16
 80079a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080079a8 <_Findx1>:
 80079a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079aa:	4604      	mov	r4, r0
 80079ac:	b085      	sub	sp, #20
 80079ae:	460e      	mov	r6, r1
 80079b0:	4617      	mov	r7, r2
 80079b2:	2c00      	cmp	r4, #0
 80079b4:	d031      	beq.n	8007a1a <_Findx1+0x72>
 80079b6:	4620      	mov	r0, r4
 80079b8:	f006 fcde 	bl	800e378 <GUI_ALLOC_LockH>
 80079bc:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80079be:	9001      	str	r0, [sp, #4]
 80079c0:	07aa      	lsls	r2, r5, #30
 80079c2:	4601      	mov	r1, r0
 80079c4:	d522      	bpl.n	8007a0c <_Findx1+0x64>
 80079c6:	ac02      	add	r4, sp, #8
 80079c8:	b127      	cbz	r7, 80079d4 <_Findx1+0x2c>
 80079ca:	4620      	mov	r0, r4
 80079cc:	463a      	mov	r2, r7
 80079ce:	f004 fb23 	bl	800c018 <GUI__IntersectRects>
 80079d2:	e002      	b.n	80079da <_Findx1+0x32>
 80079d4:	c803      	ldmia	r0, {r0, r1}
 80079d6:	e884 0003 	stmia.w	r4, {r0, r1}
 80079da:	4630      	mov	r0, r6
 80079dc:	4621      	mov	r1, r4
 80079de:	f005 f977 	bl	800ccd0 <GUI_RectsIntersect>
 80079e2:	b198      	cbz	r0, 8007a0c <_Findx1+0x64>
 80079e4:	07eb      	lsls	r3, r5, #31
 80079e6:	d404      	bmi.n	80079f2 <_Findx1+0x4a>
 80079e8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	80b3      	strh	r3, [r6, #4]
 80079f0:	e00c      	b.n	8007a0c <_Findx1+0x64>
 80079f2:	9b01      	ldr	r3, [sp, #4]
 80079f4:	69dd      	ldr	r5, [r3, #28]
 80079f6:	b14d      	cbz	r5, 8007a0c <_Findx1+0x64>
 80079f8:	4628      	mov	r0, r5
 80079fa:	4631      	mov	r1, r6
 80079fc:	4622      	mov	r2, r4
 80079fe:	f7ff ffd3 	bl	80079a8 <_Findx1>
 8007a02:	4628      	mov	r0, r5
 8007a04:	f006 fcae 	bl	800e364 <GUI_ALLOC_h2p>
 8007a08:	6a05      	ldr	r5, [r0, #32]
 8007a0a:	e7f4      	b.n	80079f6 <_Findx1+0x4e>
 8007a0c:	a804      	add	r0, sp, #16
 8007a0e:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8007a12:	6a1c      	ldr	r4, [r3, #32]
 8007a14:	f006 fcbe 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007a18:	e7cb      	b.n	80079b2 <_Findx1+0xa>
 8007a1a:	b005      	add	sp, #20
 8007a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007a20 <_Paint1Trans>:
 8007a20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007a24:	4d21      	ldr	r5, [pc, #132]	; (8007aac <_Paint1Trans+0x8c>)
 8007a26:	682b      	ldr	r3, [r5, #0]
 8007a28:	4606      	mov	r6, r0
 8007a2a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007a2c:	f006 fca4 	bl	800e378 <GUI_ALLOC_LockH>
 8007a30:	9000      	str	r0, [sp, #0]
 8007a32:	4630      	mov	r0, r6
 8007a34:	f006 fca0 	bl	800e378 <GUI_ALLOC_LockH>
 8007a38:	ac02      	add	r4, sp, #8
 8007a3a:	4601      	mov	r1, r0
 8007a3c:	9001      	str	r0, [sp, #4]
 8007a3e:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 8007a42:	3008      	adds	r0, #8
 8007a44:	f005 f944 	bl	800ccd0 <GUI_RectsIntersect>
 8007a48:	4607      	mov	r7, r0
 8007a4a:	b328      	cbz	r0, 8007a98 <_Paint1Trans+0x78>
 8007a4c:	9901      	ldr	r1, [sp, #4]
 8007a4e:	9a00      	ldr	r2, [sp, #0]
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	4c17      	ldr	r4, [pc, #92]	; (8007ab0 <_Paint1Trans+0x90>)
 8007a54:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8007a56:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 8007a5a:	f101 0008 	add.w	r0, r1, #8
 8007a5e:	3208      	adds	r2, #8
 8007a60:	f004 fada 	bl	800c018 <GUI__IntersectRects>
 8007a64:	4668      	mov	r0, sp
 8007a66:	f006 fc95 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007a6a:	9a01      	ldr	r2, [sp, #4]
 8007a6c:	682b      	ldr	r3, [r5, #0]
 8007a6e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8007a72:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8007a76:	64d9      	str	r1, [r3, #76]	; 0x4c
 8007a78:	651a      	str	r2, [r3, #80]	; 0x50
 8007a7a:	a801      	add	r0, sp, #4
 8007a7c:	6026      	str	r6, [r4, #0]
 8007a7e:	f006 fc89 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007a82:	4630      	mov	r0, r6
 8007a84:	f7ff fee4 	bl	8007850 <_Paint1>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	6023      	str	r3, [r4, #0]
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	651f      	str	r7, [r3, #80]	; 0x50
 8007a90:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
 8007a94:	2701      	movs	r7, #1
 8007a96:	e005      	b.n	8007aa4 <_Paint1Trans+0x84>
 8007a98:	4668      	mov	r0, sp
 8007a9a:	f006 fc7b 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007a9e:	a801      	add	r0, sp, #4
 8007aa0:	f006 fc78 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007aa4:	4638      	mov	r0, r7
 8007aa6:	b002      	add	sp, #8
 8007aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aac:	200002c4 	.word	0x200002c4
 8007ab0:	200287e0 	.word	0x200287e0

08007ab4 <_PaintTransChildren>:
 8007ab4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab8:	4606      	mov	r6, r0
 8007aba:	f006 fc5d 	bl	800e378 <GUI_ALLOC_LockH>
 8007abe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007ac0:	9001      	str	r0, [sp, #4]
 8007ac2:	079b      	lsls	r3, r3, #30
 8007ac4:	d405      	bmi.n	8007ad2 <_PaintTransChildren+0x1e>
 8007ac6:	a801      	add	r0, sp, #4
 8007ac8:	f006 fc64 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007acc:	b002      	add	sp, #8
 8007ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad2:	69c4      	ldr	r4, [r0, #28]
 8007ad4:	2c00      	cmp	r4, #0
 8007ad6:	d0f6      	beq.n	8007ac6 <_PaintTransChildren+0x12>
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f006 fc4d 	bl	800e378 <GUI_ALLOC_LockH>
 8007ade:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007ae0:	ad02      	add	r5, sp, #8
 8007ae2:	f003 0303 	and.w	r3, r3, #3
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	f845 0d08 	str.w	r0, [r5, #-8]!
 8007aec:	d137      	bne.n	8007b5e <_PaintTransChildren+0xaa>
 8007aee:	9901      	ldr	r1, [sp, #4]
 8007af0:	3108      	adds	r1, #8
 8007af2:	f005 f8ed 	bl	800ccd0 <GUI_RectsIntersect>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	d031      	beq.n	8007b5e <_PaintTransChildren+0xaa>
 8007afa:	a802      	add	r0, sp, #8
 8007afc:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8007b00:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 8007b04:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 8007b08:	899f      	ldrh	r7, [r3, #12]
 8007b0a:	f8b3 a00e 	ldrh.w	sl, [r3, #14]
 8007b0e:	f006 fc41 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007b12:	4668      	mov	r0, sp
 8007b14:	f006 fc3e 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f7ff ff81 	bl	8007a20 <_Paint1Trans>
 8007b1e:	b170      	cbz	r0, 8007b3e <_PaintTransChildren+0x8a>
 8007b20:	4620      	mov	r0, r4
 8007b22:	f006 fc1f 	bl	800e364 <GUI_ALLOC_h2p>
 8007b26:	9000      	str	r0, [sp, #0]
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f7ff ffc3 	bl	8007ab4 <_PaintTransChildren>
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f006 fc18 	bl	800e364 <GUI_ALLOC_h2p>
 8007b34:	9000      	str	r0, [sp, #0]
 8007b36:	4630      	mov	r0, r6
 8007b38:	f006 fc14 	bl	800e364 <GUI_ALLOC_h2p>
 8007b3c:	9001      	str	r0, [sp, #4]
 8007b3e:	4630      	mov	r0, r6
 8007b40:	f006 fc1a 	bl	800e378 <GUI_ALLOC_LockH>
 8007b44:	9001      	str	r0, [sp, #4]
 8007b46:	4620      	mov	r0, r4
 8007b48:	f006 fc16 	bl	800e378 <GUI_ALLOC_LockH>
 8007b4c:	9b01      	ldr	r3, [sp, #4]
 8007b4e:	9000      	str	r0, [sp, #0]
 8007b50:	f8a3 9008 	strh.w	r9, [r3, #8]
 8007b54:	f8a3 800a 	strh.w	r8, [r3, #10]
 8007b58:	819f      	strh	r7, [r3, #12]
 8007b5a:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8007b5e:	9b00      	ldr	r3, [sp, #0]
 8007b60:	4668      	mov	r0, sp
 8007b62:	6a1c      	ldr	r4, [r3, #32]
 8007b64:	f006 fc16 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007b68:	e7b4      	b.n	8007ad4 <_PaintTransChildren+0x20>
	...

08007b6c <WM__PaintWinAndOverlays>:
 8007b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b6e:	4604      	mov	r4, r0
 8007b70:	f006 fc02 	bl	800e378 <GUI_ALLOC_LockH>
 8007b74:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007b76:	9001      	str	r0, [sp, #4]
 8007b78:	f640 0301 	movw	r3, #2049	; 0x801
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d005      	beq.n	8007b8e <WM__PaintWinAndOverlays+0x22>
 8007b82:	a801      	add	r0, sp, #4
 8007b84:	f006 fc06 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f7ff fe61 	bl	8007850 <_Paint1>
 8007b8e:	4b14      	ldr	r3, [pc, #80]	; (8007be0 <WM__PaintWinAndOverlays+0x74>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	b313      	cbz	r3, 8007bda <WM__PaintWinAndOverlays+0x6e>
 8007b94:	4620      	mov	r0, r4
 8007b96:	f7ff ff8d 	bl	8007ab4 <_PaintTransChildren>
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f006 fbe2 	bl	800e364 <GUI_ALLOC_h2p>
 8007ba0:	6985      	ldr	r5, [r0, #24]
 8007ba2:	6a04      	ldr	r4, [r0, #32]
 8007ba4:	b1cd      	cbz	r5, 8007bda <WM__PaintWinAndOverlays+0x6e>
 8007ba6:	b194      	cbz	r4, 8007bce <WM__PaintWinAndOverlays+0x62>
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f006 fbdb 	bl	800e364 <GUI_ALLOC_h2p>
 8007bae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007bb0:	f003 0303 	and.w	r3, r3, #3
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	d102      	bne.n	8007bbe <WM__PaintWinAndOverlays+0x52>
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f7ff ff31 	bl	8007a20 <_Paint1Trans>
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f7ff ff78 	bl	8007ab4 <_PaintTransChildren>
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	f006 fbcd 	bl	800e364 <GUI_ALLOC_h2p>
 8007bca:	6a04      	ldr	r4, [r0, #32]
 8007bcc:	e7eb      	b.n	8007ba6 <WM__PaintWinAndOverlays+0x3a>
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f006 fbc8 	bl	800e364 <GUI_ALLOC_h2p>
 8007bd4:	6a04      	ldr	r4, [r0, #32]
 8007bd6:	6985      	ldr	r5, [r0, #24]
 8007bd8:	e7e4      	b.n	8007ba4 <WM__PaintWinAndOverlays+0x38>
 8007bda:	b003      	add	sp, #12
 8007bdc:	bd30      	pop	{r4, r5, pc}
 8007bde:	bf00      	nop
 8007be0:	20028814 	.word	0x20028814

08007be4 <_cbPaintMemDev>:
 8007be4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007be8:	4d17      	ldr	r5, [pc, #92]	; (8007c48 <_cbPaintMemDev+0x64>)
 8007bea:	682b      	ldr	r3, [r5, #0]
 8007bec:	4606      	mov	r6, r0
 8007bee:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007bf0:	f006 fbc2 	bl	800e378 <GUI_ALLOC_LockH>
 8007bf4:	682a      	ldr	r2, [r5, #0]
 8007bf6:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 8007bfa:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 8007bfe:	f8b0 800c 	ldrh.w	r8, [r0, #12]
 8007c02:	89c7      	ldrh	r7, [r0, #14]
 8007c04:	ac02      	add	r4, sp, #8
 8007c06:	3208      	adds	r2, #8
 8007c08:	f844 0d04 	str.w	r0, [r4, #-4]!
 8007c0c:	f100 0308 	add.w	r3, r0, #8
 8007c10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c14:	e883 0003 	stmia.w	r3, {r0, r1}
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f006 fbbb 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007c1e:	6830      	ldr	r0, [r6, #0]
 8007c20:	f7ff ffa4 	bl	8007b6c <WM__PaintWinAndOverlays>
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007c28:	f006 fba6 	bl	800e378 <GUI_ALLOC_LockH>
 8007c2c:	9001      	str	r0, [sp, #4]
 8007c2e:	f8a0 a008 	strh.w	sl, [r0, #8]
 8007c32:	f8a0 900a 	strh.w	r9, [r0, #10]
 8007c36:	f8a0 800c 	strh.w	r8, [r0, #12]
 8007c3a:	81c7      	strh	r7, [r0, #14]
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f006 fba9 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007c42:	b002      	add	sp, #8
 8007c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c48:	200002c4 	.word	0x200002c4

08007c4c <WM__ClipAtParentBorders>:
 8007c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c4e:	4607      	mov	r7, r0
 8007c50:	460d      	mov	r5, r1
 8007c52:	4628      	mov	r0, r5
 8007c54:	f006 fb90 	bl	800e378 <GUI_ALLOC_LockH>
 8007c58:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007c5a:	ac02      	add	r4, sp, #8
 8007c5c:	f013 0602 	ands.w	r6, r3, #2
 8007c60:	4601      	mov	r1, r0
 8007c62:	f844 0d04 	str.w	r0, [r4, #-4]!
 8007c66:	d104      	bne.n	8007c72 <WM__ClipAtParentBorders+0x26>
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f006 fb93 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007c6e:	4630      	mov	r0, r6
 8007c70:	e016      	b.n	8007ca0 <WM__ClipAtParentBorders+0x54>
 8007c72:	4638      	mov	r0, r7
 8007c74:	f004 fa02 	bl	800c07c <GUI__IntersectRect>
 8007c78:	9b01      	ldr	r3, [sp, #4]
 8007c7a:	699e      	ldr	r6, [r3, #24]
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	b956      	cbnz	r6, 8007c96 <WM__ClipAtParentBorders+0x4a>
 8007c80:	f006 fb88 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007c84:	4b07      	ldr	r3, [pc, #28]	; (8007ca4 <WM__ClipAtParentBorders+0x58>)
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	4295      	cmp	r5, r2
 8007c8a:	d008      	beq.n	8007c9e <WM__ClipAtParentBorders+0x52>
 8007c8c:	6858      	ldr	r0, [r3, #4]
 8007c8e:	1a2b      	subs	r3, r5, r0
 8007c90:	4258      	negs	r0, r3
 8007c92:	4158      	adcs	r0, r3
 8007c94:	e004      	b.n	8007ca0 <WM__ClipAtParentBorders+0x54>
 8007c96:	f006 fb7d 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007c9a:	4635      	mov	r5, r6
 8007c9c:	e7d9      	b.n	8007c52 <WM__ClipAtParentBorders+0x6>
 8007c9e:	2001      	movs	r0, #1
 8007ca0:	b003      	add	sp, #12
 8007ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ca4:	20028818 	.word	0x20028818

08007ca8 <WM__InsertWindowIntoList>:
 8007ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007caa:	4604      	mov	r4, r0
 8007cac:	b085      	sub	sp, #20
 8007cae:	460d      	mov	r5, r1
 8007cb0:	2900      	cmp	r1, #0
 8007cb2:	d049      	beq.n	8007d48 <WM__InsertWindowIntoList+0xa0>
 8007cb4:	f006 fb60 	bl	800e378 <GUI_ALLOC_LockH>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	6203      	str	r3, [r0, #32]
 8007cbc:	6185      	str	r5, [r0, #24]
 8007cbe:	9001      	str	r0, [sp, #4]
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	f006 fb59 	bl	800e378 <GUI_ALLOC_LockH>
 8007cc6:	9b01      	ldr	r3, [sp, #4]
 8007cc8:	69c5      	ldr	r5, [r0, #28]
 8007cca:	9002      	str	r0, [sp, #8]
 8007ccc:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 8007cce:	b92d      	cbnz	r5, 8007cdc <WM__InsertWindowIntoList+0x34>
 8007cd0:	61c4      	str	r4, [r0, #28]
 8007cd2:	a801      	add	r0, sp, #4
 8007cd4:	f006 fb5e 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007cd8:	a802      	add	r0, sp, #8
 8007cda:	e033      	b.n	8007d44 <WM__InsertWindowIntoList+0x9c>
 8007cdc:	4628      	mov	r0, r5
 8007cde:	f006 fb4b 	bl	800e378 <GUI_ALLOC_LockH>
 8007ce2:	ae04      	add	r6, sp, #16
 8007ce4:	f007 0708 	and.w	r7, r7, #8
 8007ce8:	f846 0d04 	str.w	r0, [r6, #-4]!
 8007cec:	b977      	cbnz	r7, 8007d0c <WM__InsertWindowIntoList+0x64>
 8007cee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007cf0:	071a      	lsls	r2, r3, #28
 8007cf2:	d50b      	bpl.n	8007d0c <WM__InsertWindowIntoList+0x64>
 8007cf4:	9b01      	ldr	r3, [sp, #4]
 8007cf6:	621d      	str	r5, [r3, #32]
 8007cf8:	9b02      	ldr	r3, [sp, #8]
 8007cfa:	a801      	add	r0, sp, #4
 8007cfc:	61dc      	str	r4, [r3, #28]
 8007cfe:	f006 fb49 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007d02:	a802      	add	r0, sp, #8
 8007d04:	f006 fb46 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007d08:	4630      	mov	r0, r6
 8007d0a:	e01b      	b.n	8007d44 <WM__InsertWindowIntoList+0x9c>
 8007d0c:	a802      	add	r0, sp, #8
 8007d0e:	f006 fb41 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007d12:	4630      	mov	r0, r6
 8007d14:	f006 fb3e 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f006 fb23 	bl	800e364 <GUI_ALLOC_h2p>
 8007d1e:	9003      	str	r0, [sp, #12]
 8007d20:	9b03      	ldr	r3, [sp, #12]
 8007d22:	6a1d      	ldr	r5, [r3, #32]
 8007d24:	b90d      	cbnz	r5, 8007d2a <WM__InsertWindowIntoList+0x82>
 8007d26:	621c      	str	r4, [r3, #32]
 8007d28:	e00b      	b.n	8007d42 <WM__InsertWindowIntoList+0x9a>
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f006 fb1a 	bl	800e364 <GUI_ALLOC_h2p>
 8007d30:	2f00      	cmp	r7, #0
 8007d32:	d1f4      	bne.n	8007d1e <WM__InsertWindowIntoList+0x76>
 8007d34:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007d36:	071b      	lsls	r3, r3, #28
 8007d38:	d5f1      	bpl.n	8007d1e <WM__InsertWindowIntoList+0x76>
 8007d3a:	9b03      	ldr	r3, [sp, #12]
 8007d3c:	621c      	str	r4, [r3, #32]
 8007d3e:	9b01      	ldr	r3, [sp, #4]
 8007d40:	621d      	str	r5, [r3, #32]
 8007d42:	a801      	add	r0, sp, #4
 8007d44:	f006 fb26 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007d48:	b005      	add	sp, #20
 8007d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d4c <WM__RemoveWindowFromList>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	4604      	mov	r4, r0
 8007d50:	f006 fb08 	bl	800e364 <GUI_ALLOC_h2p>
 8007d54:	4605      	mov	r5, r0
 8007d56:	6980      	ldr	r0, [r0, #24]
 8007d58:	b1a8      	cbz	r0, 8007d86 <WM__RemoveWindowFromList+0x3a>
 8007d5a:	f006 fb03 	bl	800e364 <GUI_ALLOC_h2p>
 8007d5e:	69c3      	ldr	r3, [r0, #28]
 8007d60:	42a3      	cmp	r3, r4
 8007d62:	4606      	mov	r6, r0
 8007d64:	d105      	bne.n	8007d72 <WM__RemoveWindowFromList+0x26>
 8007d66:	4618      	mov	r0, r3
 8007d68:	f006 fafc 	bl	800e364 <GUI_ALLOC_h2p>
 8007d6c:	6a03      	ldr	r3, [r0, #32]
 8007d6e:	61f3      	str	r3, [r6, #28]
 8007d70:	bd70      	pop	{r4, r5, r6, pc}
 8007d72:	b143      	cbz	r3, 8007d86 <WM__RemoveWindowFromList+0x3a>
 8007d74:	4618      	mov	r0, r3
 8007d76:	f006 faf5 	bl	800e364 <GUI_ALLOC_h2p>
 8007d7a:	6a03      	ldr	r3, [r0, #32]
 8007d7c:	42a3      	cmp	r3, r4
 8007d7e:	d1f8      	bne.n	8007d72 <WM__RemoveWindowFromList+0x26>
 8007d80:	6a2b      	ldr	r3, [r5, #32]
 8007d82:	6203      	str	r3, [r0, #32]
 8007d84:	bd70      	pop	{r4, r5, r6, pc}
 8007d86:	bd70      	pop	{r4, r5, r6, pc}

08007d88 <WM__Client2Screen>:
 8007d88:	4603      	mov	r3, r0
 8007d8a:	4608      	mov	r0, r1
 8007d8c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8007d90:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007d94:	f005 b878 	b.w	800ce88 <GUI_MoveRect>

08007d98 <_SetClipRectUserIntersect>:
 8007d98:	4b11      	ldr	r3, [pc, #68]	; (8007de0 <_SetClipRectUserIntersect+0x48>)
 8007d9a:	b530      	push	{r4, r5, lr}
 8007d9c:	681c      	ldr	r4, [r3, #0]
 8007d9e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007da0:	b085      	sub	sp, #20
 8007da2:	4605      	mov	r5, r0
 8007da4:	b1ba      	cbz	r2, 8007dd6 <_SetClipRectUserIntersect+0x3e>
 8007da6:	6810      	ldr	r0, [r2, #0]
 8007da8:	6851      	ldr	r1, [r2, #4]
 8007daa:	ab02      	add	r3, sp, #8
 8007dac:	c303      	stmia	r3!, {r0, r1}
 8007dae:	4b0d      	ldr	r3, [pc, #52]	; (8007de4 <_SetClipRectUserIntersect+0x4c>)
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	b900      	cbnz	r0, 8007db6 <_SetClipRectUserIntersect+0x1e>
 8007db4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007db6:	f006 fadf 	bl	800e378 <GUI_ALLOC_LockH>
 8007dba:	ac04      	add	r4, sp, #16
 8007dbc:	a902      	add	r1, sp, #8
 8007dbe:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8007dc2:	f7ff ffe1 	bl	8007d88 <WM__Client2Screen>
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f006 fae4 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007dcc:	a802      	add	r0, sp, #8
 8007dce:	4629      	mov	r1, r5
 8007dd0:	f004 f954 	bl	800c07c <GUI__IntersectRect>
 8007dd4:	a802      	add	r0, sp, #8
 8007dd6:	f003 fb13 	bl	800b400 <LCD_SetClipRectEx>
 8007dda:	b005      	add	sp, #20
 8007ddc:	bd30      	pop	{r4, r5, pc}
 8007dde:	bf00      	nop
 8007de0:	200002c4 	.word	0x200002c4
 8007de4:	200287e0 	.word	0x200287e0

08007de8 <WM__ActivateClipRect>:
 8007de8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007dea:	4b0e      	ldr	r3, [pc, #56]	; (8007e24 <WM__ActivateClipRect+0x3c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8007df2:	b10a      	cbz	r2, 8007df8 <WM__ActivateClipRect+0x10>
 8007df4:	480c      	ldr	r0, [pc, #48]	; (8007e28 <WM__ActivateClipRect+0x40>)
 8007df6:	e011      	b.n	8007e1c <WM__ActivateClipRect+0x34>
 8007df8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007dfa:	f006 fabd 	bl	800e378 <GUI_ALLOC_LockH>
 8007dfe:	9001      	str	r0, [sp, #4]
 8007e00:	c803      	ldmia	r0, {r0, r1}
 8007e02:	ac02      	add	r4, sp, #8
 8007e04:	e884 0003 	stmia.w	r4, {r0, r1}
 8007e08:	a801      	add	r0, sp, #4
 8007e0a:	f006 fac3 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007e0e:	4b07      	ldr	r3, [pc, #28]	; (8007e2c <WM__ActivateClipRect+0x44>)
 8007e10:	6819      	ldr	r1, [r3, #0]
 8007e12:	b111      	cbz	r1, 8007e1a <WM__ActivateClipRect+0x32>
 8007e14:	4620      	mov	r0, r4
 8007e16:	f7ff ff19 	bl	8007c4c <WM__ClipAtParentBorders>
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f7ff ffbc 	bl	8007d98 <_SetClipRectUserIntersect>
 8007e20:	b004      	add	sp, #16
 8007e22:	bd10      	pop	{r4, pc}
 8007e24:	200002c4 	.word	0x200002c4
 8007e28:	20008430 	.word	0x20008430
 8007e2c:	200287e0 	.word	0x200287e0

08007e30 <WM__IsWindow>:
 8007e30:	4b06      	ldr	r3, [pc, #24]	; (8007e4c <WM__IsWindow+0x1c>)
 8007e32:	b510      	push	{r4, lr}
 8007e34:	4604      	mov	r4, r0
 8007e36:	6818      	ldr	r0, [r3, #0]
 8007e38:	b128      	cbz	r0, 8007e46 <WM__IsWindow+0x16>
 8007e3a:	42a0      	cmp	r0, r4
 8007e3c:	d004      	beq.n	8007e48 <WM__IsWindow+0x18>
 8007e3e:	f006 fa91 	bl	800e364 <GUI_ALLOC_h2p>
 8007e42:	6940      	ldr	r0, [r0, #20]
 8007e44:	e7f8      	b.n	8007e38 <WM__IsWindow+0x8>
 8007e46:	bd10      	pop	{r4, pc}
 8007e48:	2001      	movs	r0, #1
 8007e4a:	bd10      	pop	{r4, pc}
 8007e4c:	200287d4 	.word	0x200287d4

08007e50 <WM__InvalidateDrawAndDescs>:
 8007e50:	b513      	push	{r0, r1, r4, lr}
 8007e52:	4604      	mov	r4, r0
 8007e54:	b300      	cbz	r0, 8007e98 <WM__InvalidateDrawAndDescs+0x48>
 8007e56:	f006 fa8f 	bl	800e378 <GUI_ALLOC_LockH>
 8007e5a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007e5c:	9001      	str	r0, [sp, #4]
 8007e5e:	0793      	lsls	r3, r2, #30
 8007e60:	d517      	bpl.n	8007e92 <WM__InvalidateDrawAndDescs+0x42>
 8007e62:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007e64:	b140      	cbz	r0, 8007e78 <WM__InvalidateDrawAndDescs+0x28>
 8007e66:	4b0d      	ldr	r3, [pc, #52]	; (8007e9c <WM__InvalidateDrawAndDescs+0x4c>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	42a3      	cmp	r3, r4
 8007e6c:	d004      	beq.n	8007e78 <WM__InvalidateDrawAndDescs+0x28>
 8007e6e:	f001 fe07 	bl	8009a80 <GUI_MEMDEV_Delete>
 8007e72:	9b01      	ldr	r3, [sp, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	625a      	str	r2, [r3, #36]	; 0x24
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f7ff fc23 	bl	80076c4 <WM_GetFirstChild>
 8007e7e:	4604      	mov	r4, r0
 8007e80:	b13c      	cbz	r4, 8007e92 <WM__InvalidateDrawAndDescs+0x42>
 8007e82:	4620      	mov	r0, r4
 8007e84:	f7ff ffe4 	bl	8007e50 <WM__InvalidateDrawAndDescs>
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f006 fa6b 	bl	800e364 <GUI_ALLOC_h2p>
 8007e8e:	6a04      	ldr	r4, [r0, #32]
 8007e90:	e7f6      	b.n	8007e80 <WM__InvalidateDrawAndDescs+0x30>
 8007e92:	a801      	add	r0, sp, #4
 8007e94:	f006 fa7e 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007e98:	b002      	add	sp, #8
 8007e9a:	bd10      	pop	{r4, pc}
 8007e9c:	200287c8 	.word	0x200287c8

08007ea0 <WM__RectIsNZ>:
 8007ea0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8007ea4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	dc08      	bgt.n	8007ebe <WM__RectIsNZ+0x1e>
 8007eac:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8007eb0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	bfcc      	ite	gt
 8007eb8:	2000      	movgt	r0, #0
 8007eba:	2001      	movle	r0, #1
 8007ebc:	4770      	bx	lr
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	4770      	bx	lr
	...

08007ec4 <_Invalidate1Abs>:
 8007ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	4606      	mov	r6, r0
 8007eca:	460d      	mov	r5, r1
 8007ecc:	4617      	mov	r7, r2
 8007ece:	f006 fa49 	bl	800e364 <GUI_ALLOC_h2p>
 8007ed2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8007ed4:	9001      	str	r0, [sp, #4]
 8007ed6:	07a3      	lsls	r3, r4, #30
 8007ed8:	d534      	bpl.n	8007f44 <_Invalidate1Abs+0x80>
 8007eda:	4628      	mov	r0, r5
 8007edc:	f7ff ffe0 	bl	8007ea0 <WM__RectIsNZ>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d02f      	beq.n	8007f44 <_Invalidate1Abs+0x80>
 8007ee4:	f640 0301 	movw	r3, #2049	; 0x801
 8007ee8:	4023      	ands	r3, r4
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d02a      	beq.n	8007f44 <_Invalidate1Abs+0x80>
 8007eee:	4630      	mov	r0, r6
 8007ef0:	f006 fa42 	bl	800e378 <GUI_ALLOC_LockH>
 8007ef4:	ac02      	add	r4, sp, #8
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	9001      	str	r0, [sp, #4]
 8007efa:	4629      	mov	r1, r5
 8007efc:	4620      	mov	r0, r4
 8007efe:	f004 f88b 	bl	800c018 <GUI__IntersectRects>
 8007f02:	4620      	mov	r0, r4
 8007f04:	f7ff ffcc 	bl	8007ea0 <WM__RectIsNZ>
 8007f08:	b1c8      	cbz	r0, 8007f3e <_Invalidate1Abs+0x7a>
 8007f0a:	9b01      	ldr	r3, [sp, #4]
 8007f0c:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8007f0e:	f244 0120 	movw	r1, #16416	; 0x4020
 8007f12:	4031      	ands	r1, r6
 8007f14:	f103 0508 	add.w	r5, r3, #8
 8007f18:	b129      	cbz	r1, 8007f26 <_Invalidate1Abs+0x62>
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	4622      	mov	r2, r4
 8007f20:	f004 ffc2 	bl	800cea8 <GUI_MergeRect>
 8007f24:	e00b      	b.n	8007f3e <_Invalidate1Abs+0x7a>
 8007f26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f2a:	433e      	orrs	r6, r7
 8007f2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f30:	629e      	str	r6, [r3, #40]	; 0x28
 8007f32:	4b05      	ldr	r3, [pc, #20]	; (8007f48 <_Invalidate1Abs+0x84>)
 8007f34:	881a      	ldrh	r2, [r3, #0]
 8007f36:	3201      	adds	r2, #1
 8007f38:	801a      	strh	r2, [r3, #0]
 8007f3a:	f004 fc4f 	bl	800c7dc <GUI_SignalEvent>
 8007f3e:	a801      	add	r0, sp, #4
 8007f40:	f006 fa28 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007f44:	b005      	add	sp, #20
 8007f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f48:	20028810 	.word	0x20028810

08007f4c <WM__Invalidate1Abs>:
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	f7ff bfb9 	b.w	8007ec4 <_Invalidate1Abs>

08007f52 <WM_InvalidateWindowAndDescsEx>:
 8007f52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f54:	460f      	mov	r7, r1
 8007f56:	b085      	sub	sp, #20
 8007f58:	4615      	mov	r5, r2
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	b348      	cbz	r0, 8007fb2 <WM_InvalidateWindowAndDescsEx+0x60>
 8007f5e:	f006 fa0b 	bl	800e378 <GUI_ALLOC_LockH>
 8007f62:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007f64:	ac04      	add	r4, sp, #16
 8007f66:	079b      	lsls	r3, r3, #30
 8007f68:	4602      	mov	r2, r0
 8007f6a:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8007f6e:	d403      	bmi.n	8007f78 <WM_InvalidateWindowAndDescsEx+0x26>
 8007f70:	4620      	mov	r0, r4
 8007f72:	f006 fa0f 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007f76:	e01c      	b.n	8007fb2 <WM_InvalidateWindowAndDescsEx+0x60>
 8007f78:	a802      	add	r0, sp, #8
 8007f7a:	4639      	mov	r1, r7
 8007f7c:	f004 f84c 	bl	800c018 <GUI__IntersectRects>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d0f5      	beq.n	8007f70 <WM_InvalidateWindowAndDescsEx+0x1e>
 8007f84:	4620      	mov	r0, r4
 8007f86:	f006 fa05 	bl	800e394 <GUI_ALLOC_UnlockH>
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	a902      	add	r1, sp, #8
 8007f8e:	462a      	mov	r2, r5
 8007f90:	f7ff ff98 	bl	8007ec4 <_Invalidate1Abs>
 8007f94:	4630      	mov	r0, r6
 8007f96:	f7ff fb95 	bl	80076c4 <WM_GetFirstChild>
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	b14c      	cbz	r4, 8007fb2 <WM_InvalidateWindowAndDescsEx+0x60>
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	a902      	add	r1, sp, #8
 8007fa2:	462a      	mov	r2, r5
 8007fa4:	f7ff ffd5 	bl	8007f52 <WM_InvalidateWindowAndDescsEx>
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f006 f9db 	bl	800e364 <GUI_ALLOC_h2p>
 8007fae:	6a04      	ldr	r4, [r0, #32]
 8007fb0:	e7f4      	b.n	8007f9c <WM_InvalidateWindowAndDescsEx+0x4a>
 8007fb2:	b005      	add	sp, #20
 8007fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007fb6 <WM__InvalidateRect>:
 8007fb6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007fba:	4680      	mov	r8, r0
 8007fbc:	4617      	mov	r7, r2
 8007fbe:	461d      	mov	r5, r3
 8007fc0:	460c      	mov	r4, r1
 8007fc2:	2900      	cmp	r1, #0
 8007fc4:	d030      	beq.n	8008028 <WM__InvalidateRect+0x72>
 8007fc6:	4608      	mov	r0, r1
 8007fc8:	f006 f9d6 	bl	800e378 <GUI_ALLOC_LockH>
 8007fcc:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8007fce:	9001      	str	r0, [sp, #4]
 8007fd0:	07b3      	lsls	r3, r6, #30
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	d525      	bpl.n	8008022 <WM__InvalidateRect+0x6c>
 8007fd6:	a802      	add	r0, sp, #8
 8007fd8:	4641      	mov	r1, r8
 8007fda:	f004 f81d 	bl	800c018 <GUI__IntersectRects>
 8007fde:	b300      	cbz	r0, 8008022 <WM__InvalidateRect+0x6c>
 8007fe0:	f640 0301 	movw	r3, #2049	; 0x801
 8007fe4:	4033      	ands	r3, r6
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d107      	bne.n	8007ffa <WM__InvalidateRect+0x44>
 8007fea:	9b01      	ldr	r3, [sp, #4]
 8007fec:	a802      	add	r0, sp, #8
 8007fee:	6999      	ldr	r1, [r3, #24]
 8007ff0:	6a1a      	ldr	r2, [r3, #32]
 8007ff2:	462b      	mov	r3, r5
 8007ff4:	f7ff ffdf 	bl	8007fb6 <WM__InvalidateRect>
 8007ff8:	e004      	b.n	8008004 <WM__InvalidateRect+0x4e>
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	a902      	add	r1, sp, #8
 8007ffe:	462a      	mov	r2, r5
 8008000:	f7ff ff60 	bl	8007ec4 <_Invalidate1Abs>
 8008004:	9b01      	ldr	r3, [sp, #4]
 8008006:	69dc      	ldr	r4, [r3, #28]
 8008008:	b15c      	cbz	r4, 8008022 <WM__InvalidateRect+0x6c>
 800800a:	42bc      	cmp	r4, r7
 800800c:	d009      	beq.n	8008022 <WM__InvalidateRect+0x6c>
 800800e:	4620      	mov	r0, r4
 8008010:	a902      	add	r1, sp, #8
 8008012:	462a      	mov	r2, r5
 8008014:	f7ff ff9d 	bl	8007f52 <WM_InvalidateWindowAndDescsEx>
 8008018:	4620      	mov	r0, r4
 800801a:	f006 f9a3 	bl	800e364 <GUI_ALLOC_h2p>
 800801e:	6a04      	ldr	r4, [r0, #32]
 8008020:	e7f2      	b.n	8008008 <WM__InvalidateRect+0x52>
 8008022:	a801      	add	r0, sp, #4
 8008024:	f006 f9b6 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008028:	b004      	add	sp, #16
 800802a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800802e <WM__InvalidateParent>:
 800802e:	b570      	push	{r4, r5, r6, lr}
 8008030:	4605      	mov	r5, r0
 8008032:	4608      	mov	r0, r1
 8008034:	460c      	mov	r4, r1
 8008036:	4616      	mov	r6, r2
 8008038:	f006 f994 	bl	800e364 <GUI_ALLOC_h2p>
 800803c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800803e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008042:	4628      	mov	r0, r5
 8008044:	4621      	mov	r1, r4
 8008046:	4632      	mov	r2, r6
 8008048:	bf0c      	ite	eq
 800804a:	2320      	moveq	r3, #32
 800804c:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 8008050:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008054:	f7ff bfaf 	b.w	8007fb6 <WM__InvalidateRect>

08008058 <WM__InvalidateRectEx>:
 8008058:	2320      	movs	r3, #32
 800805a:	f7ff bfac 	b.w	8007fb6 <WM__InvalidateRect>

0800805e <WM__DetachWindow>:
 800805e:	b513      	push	{r0, r1, r4, lr}
 8008060:	4604      	mov	r4, r0
 8008062:	f006 f989 	bl	800e378 <GUI_ALLOC_LockH>
 8008066:	6981      	ldr	r1, [r0, #24]
 8008068:	9001      	str	r0, [sp, #4]
 800806a:	b141      	cbz	r1, 800807e <WM__DetachWindow+0x20>
 800806c:	6a02      	ldr	r2, [r0, #32]
 800806e:	f7ff fff3 	bl	8008058 <WM__InvalidateRectEx>
 8008072:	4620      	mov	r0, r4
 8008074:	f7ff fe6a 	bl	8007d4c <WM__RemoveWindowFromList>
 8008078:	9b01      	ldr	r3, [sp, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	619a      	str	r2, [r3, #24]
 800807e:	a801      	add	r0, sp, #4
 8008080:	f006 f988 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008084:	b002      	add	sp, #8
 8008086:	bd10      	pop	{r4, pc}

08008088 <WM_SendMessage>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	460d      	mov	r5, r1
 800808c:	4604      	mov	r4, r0
 800808e:	b148      	cbz	r0, 80080a4 <WM_SendMessage+0x1c>
 8008090:	f004 fc8e 	bl	800c9b0 <GUI_Lock>
 8008094:	4620      	mov	r0, r4
 8008096:	4629      	mov	r1, r5
 8008098:	f7fe fec8 	bl	8006e2c <WM__SendMessage>
 800809c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080a0:	f004 bc7c 	b.w	800c99c <GUI_Unlock>
 80080a4:	bd38      	pop	{r3, r4, r5, pc}

080080a6 <WM__SendMsgNoData>:
 80080a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080a8:	ab04      	add	r3, sp, #16
 80080aa:	9001      	str	r0, [sp, #4]
 80080ac:	f843 1d10 	str.w	r1, [r3, #-16]!
 80080b0:	4669      	mov	r1, sp
 80080b2:	f7fe febb 	bl	8006e2c <WM__SendMessage>
 80080b6:	b005      	add	sp, #20
 80080b8:	f85d fb04 	ldr.w	pc, [sp], #4

080080bc <WM__GetClientRectWin>:
 80080bc:	2300      	movs	r3, #0
 80080be:	800b      	strh	r3, [r1, #0]
 80080c0:	8882      	ldrh	r2, [r0, #4]
 80080c2:	804b      	strh	r3, [r1, #2]
 80080c4:	8803      	ldrh	r3, [r0, #0]
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	808b      	strh	r3, [r1, #4]
 80080ca:	88c2      	ldrh	r2, [r0, #6]
 80080cc:	8843      	ldrh	r3, [r0, #2]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	80cb      	strh	r3, [r1, #6]
 80080d2:	4770      	bx	lr

080080d4 <WM_InvalidateRect>:
 80080d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080d6:	460f      	mov	r7, r1
 80080d8:	b087      	sub	sp, #28
 80080da:	4605      	mov	r5, r0
 80080dc:	2800      	cmp	r0, #0
 80080de:	d038      	beq.n	8008152 <WM_InvalidateRect+0x7e>
 80080e0:	f004 fc66 	bl	800c9b0 <GUI_Lock>
 80080e4:	4628      	mov	r0, r5
 80080e6:	f006 f947 	bl	800e378 <GUI_ALLOC_LockH>
 80080ea:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80080ec:	9001      	str	r0, [sp, #4]
 80080ee:	07b2      	lsls	r2, r6, #30
 80080f0:	d52a      	bpl.n	8008148 <WM_InvalidateRect+0x74>
 80080f2:	c803      	ldmia	r0, {r0, r1}
 80080f4:	ac04      	add	r4, sp, #16
 80080f6:	03f3      	lsls	r3, r6, #15
 80080f8:	e884 0003 	stmia.w	r4, {r0, r1}
 80080fc:	d502      	bpl.n	8008104 <WM_InvalidateRect+0x30>
 80080fe:	4628      	mov	r0, r5
 8008100:	f7ff fea6 	bl	8007e50 <WM__InvalidateDrawAndDescs>
 8008104:	b15f      	cbz	r7, 800811e <WM_InvalidateRect+0x4a>
 8008106:	6838      	ldr	r0, [r7, #0]
 8008108:	6879      	ldr	r1, [r7, #4]
 800810a:	ab02      	add	r3, sp, #8
 800810c:	c303      	stmia	r3!, {r0, r1}
 800810e:	9801      	ldr	r0, [sp, #4]
 8008110:	a902      	add	r1, sp, #8
 8008112:	f7ff fe39 	bl	8007d88 <WM__Client2Screen>
 8008116:	4620      	mov	r0, r4
 8008118:	a902      	add	r1, sp, #8
 800811a:	f003 ffaf 	bl	800c07c <GUI__IntersectRect>
 800811e:	4620      	mov	r0, r4
 8008120:	4629      	mov	r1, r5
 8008122:	f7ff fd93 	bl	8007c4c <WM__ClipAtParentBorders>
 8008126:	b178      	cbz	r0, 8008148 <WM_InvalidateRect+0x74>
 8008128:	f640 0301 	movw	r3, #2049	; 0x801
 800812c:	4033      	ands	r3, r6
 800812e:	2b01      	cmp	r3, #1
 8008130:	d106      	bne.n	8008140 <WM_InvalidateRect+0x6c>
 8008132:	9b01      	ldr	r3, [sp, #4]
 8008134:	4620      	mov	r0, r4
 8008136:	6999      	ldr	r1, [r3, #24]
 8008138:	6a1a      	ldr	r2, [r3, #32]
 800813a:	f7ff ff8d 	bl	8008058 <WM__InvalidateRectEx>
 800813e:	e003      	b.n	8008148 <WM_InvalidateRect+0x74>
 8008140:	4628      	mov	r0, r5
 8008142:	4621      	mov	r1, r4
 8008144:	f7ff ff02 	bl	8007f4c <WM__Invalidate1Abs>
 8008148:	a801      	add	r0, sp, #4
 800814a:	f006 f923 	bl	800e394 <GUI_ALLOC_UnlockH>
 800814e:	f004 fc25 	bl	800c99c <GUI_Unlock>
 8008152:	b007      	add	sp, #28
 8008154:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008156 <WM_InvalidateWindow>:
 8008156:	2100      	movs	r1, #0
 8008158:	f7ff bfbc 	b.w	80080d4 <WM_InvalidateRect>

0800815c <WM__GetTopLevelLayer>:
 800815c:	b510      	push	{r4, lr}
 800815e:	4604      	mov	r4, r0
 8008160:	f006 f900 	bl	800e364 <GUI_ALLOC_h2p>
 8008164:	6980      	ldr	r0, [r0, #24]
 8008166:	2800      	cmp	r0, #0
 8008168:	d1f9      	bne.n	800815e <WM__GetTopLevelLayer+0x2>
 800816a:	4b05      	ldr	r3, [pc, #20]	; (8008180 <WM__GetTopLevelLayer+0x24>)
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	4294      	cmp	r4, r2
 8008170:	d005      	beq.n	800817e <WM__GetTopLevelLayer+0x22>
 8008172:	6858      	ldr	r0, [r3, #4]
 8008174:	4284      	cmp	r4, r0
 8008176:	bf14      	ite	ne
 8008178:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800817c:	2001      	moveq	r0, #1
 800817e:	bd10      	pop	{r4, pc}
 8008180:	20028818 	.word	0x20028818

08008184 <WM__SelectTopLevelLayer>:
 8008184:	b508      	push	{r3, lr}
 8008186:	f7ff ffe9 	bl	800815c <WM__GetTopLevelLayer>
 800818a:	2800      	cmp	r0, #0
 800818c:	db03      	blt.n	8008196 <WM__SelectTopLevelLayer+0x12>
 800818e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008192:	f004 bd45 	b.w	800cc20 <GUI_SelectLayer>
 8008196:	bd08      	pop	{r3, pc}

08008198 <WM_SelectWindow>:
 8008198:	b570      	push	{r4, r5, r6, lr}
 800819a:	4604      	mov	r4, r0
 800819c:	f004 fc08 	bl	800c9b0 <GUI_Lock>
 80081a0:	4a0d      	ldr	r2, [pc, #52]	; (80081d8 <WM_SelectWindow+0x40>)
 80081a2:	6813      	ldr	r3, [r2, #0]
 80081a4:	4616      	mov	r6, r2
 80081a6:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 80081a8:	b90c      	cbnz	r4, 80081ae <WM_SelectWindow+0x16>
 80081aa:	4a0c      	ldr	r2, [pc, #48]	; (80081dc <WM_SelectWindow+0x44>)
 80081ac:	6814      	ldr	r4, [r2, #0]
 80081ae:	649c      	str	r4, [r3, #72]	; 0x48
 80081b0:	4620      	mov	r0, r4
 80081b2:	f7ff ffe7 	bl	8008184 <WM__SelectTopLevelLayer>
 80081b6:	f003 fd7d 	bl	800bcb4 <LCD_SetClipRectMax>
 80081ba:	4620      	mov	r0, r4
 80081bc:	f006 f8d2 	bl	800e364 <GUI_ALLOC_h2p>
 80081c0:	6833      	ldr	r3, [r6, #0]
 80081c2:	f9b0 1000 	ldrsh.w	r1, [r0]
 80081c6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80081ca:	64d9      	str	r1, [r3, #76]	; 0x4c
 80081cc:	651a      	str	r2, [r3, #80]	; 0x50
 80081ce:	f004 fbe5 	bl	800c99c <GUI_Unlock>
 80081d2:	4628      	mov	r0, r5
 80081d4:	bd70      	pop	{r4, r5, r6, pc}
 80081d6:	bf00      	nop
 80081d8:	200002c4 	.word	0x200002c4
 80081dc:	200287d4 	.word	0x200287d4

080081e0 <WM_CreateWindowAsChild>:
 80081e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081e6:	469b      	mov	fp, r3
 80081e8:	4607      	mov	r7, r0
 80081ea:	4688      	mov	r8, r1
 80081ec:	4692      	mov	sl, r2
 80081ee:	f004 fbdf 	bl	800c9b0 <GUI_Lock>
 80081f2:	4b4b      	ldr	r3, [pc, #300]	; (8008320 <WM_CreateWindowAsChild+0x140>)
 80081f4:	681e      	ldr	r6, [r3, #0]
 80081f6:	bb65      	cbnz	r5, 8008252 <WM_CreateWindowAsChild+0x72>
 80081f8:	4b4a      	ldr	r3, [pc, #296]	; (8008324 <WM_CreateWindowAsChild+0x144>)
 80081fa:	881b      	ldrh	r3, [r3, #0]
 80081fc:	b363      	cbz	r3, 8008258 <WM_CreateWindowAsChild+0x78>
 80081fe:	4b4a      	ldr	r3, [pc, #296]	; (8008328 <WM_CreateWindowAsChild+0x148>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	7c5a      	ldrb	r2, [r3, #17]
 8008204:	4b49      	ldr	r3, [pc, #292]	; (800832c <WM_CreateWindowAsChild+0x14c>)
 8008206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	d024      	beq.n	8008258 <WM_CreateWindowAsChild+0x78>
 800820e:	b31b      	cbz	r3, 8008258 <WM_CreateWindowAsChild+0x78>
 8008210:	461d      	mov	r5, r3
 8008212:	4628      	mov	r0, r5
 8008214:	f006 f8b0 	bl	800e378 <GUI_ALLOC_LockH>
 8008218:	f9b0 2000 	ldrsh.w	r2, [r0]
 800821c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8008220:	9001      	str	r0, [sp, #4]
 8008222:	4417      	add	r7, r2
 8008224:	4498      	add	r8, r3
 8008226:	f1ba 0f00 	cmp.w	sl, #0
 800822a:	d105      	bne.n	8008238 <WM_CreateWindowAsChild+0x58>
 800822c:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 8008230:	ebc2 0a0a 	rsb	sl, r2, sl
 8008234:	f10a 0a01 	add.w	sl, sl, #1
 8008238:	f1bb 0f00 	cmp.w	fp, #0
 800823c:	d105      	bne.n	800824a <WM_CreateWindowAsChild+0x6a>
 800823e:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 8008242:	ebc3 0b0b 	rsb	fp, r3, fp
 8008246:	f10b 0b01 	add.w	fp, fp, #1
 800824a:	a801      	add	r0, sp, #4
 800824c:	f006 f8a2 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008250:	e002      	b.n	8008258 <WM_CreateWindowAsChild+0x78>
 8008252:	1c6b      	adds	r3, r5, #1
 8008254:	d1dd      	bne.n	8008212 <WM_CreateWindowAsChild+0x32>
 8008256:	2500      	movs	r5, #0
 8008258:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800825a:	302c      	adds	r0, #44	; 0x2c
 800825c:	f006 fb13 	bl	800e886 <GUI_ALLOC_AllocZero>
 8008260:	4604      	mov	r4, r0
 8008262:	2800      	cmp	r0, #0
 8008264:	d056      	beq.n	8008314 <WM_CreateWindowAsChild+0x134>
 8008266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008268:	431e      	orrs	r6, r3
 800826a:	4b2e      	ldr	r3, [pc, #184]	; (8008324 <WM_CreateWindowAsChild+0x144>)
 800826c:	881a      	ldrh	r2, [r3, #0]
 800826e:	3201      	adds	r2, #1
 8008270:	801a      	strh	r2, [r3, #0]
 8008272:	f006 f881 	bl	800e378 <GUI_ALLOC_LockH>
 8008276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008278:	6103      	str	r3, [r0, #16]
 800827a:	f10d 0908 	add.w	r9, sp, #8
 800827e:	4b2c      	ldr	r3, [pc, #176]	; (8008330 <WM_CreateWindowAsChild+0x150>)
 8008280:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008282:	f849 0d08 	str.w	r0, [r9, #-8]!
 8008286:	4033      	ands	r3, r6
 8008288:	8007      	strh	r7, [r0, #0]
 800828a:	f8a0 8002 	strh.w	r8, [r0, #2]
 800828e:	4457      	add	r7, sl
 8008290:	44d8      	add	r8, fp
 8008292:	4313      	orrs	r3, r2
 8008294:	3f01      	subs	r7, #1
 8008296:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800829a:	6283      	str	r3, [r0, #40]	; 0x28
 800829c:	8087      	strh	r7, [r0, #4]
 800829e:	f8a0 8006 	strh.w	r8, [r0, #6]
 80082a2:	4668      	mov	r0, sp
 80082a4:	f006 f876 	bl	800e394 <GUI_ALLOC_UnlockH>
 80082a8:	4b22      	ldr	r3, [pc, #136]	; (8008334 <WM_CreateWindowAsChild+0x154>)
 80082aa:	6818      	ldr	r0, [r3, #0]
 80082ac:	b148      	cbz	r0, 80082c2 <WM_CreateWindowAsChild+0xe2>
 80082ae:	f006 f859 	bl	800e364 <GUI_ALLOC_h2p>
 80082b2:	4607      	mov	r7, r0
 80082b4:	4620      	mov	r0, r4
 80082b6:	f006 f855 	bl	800e364 <GUI_ALLOC_h2p>
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	6143      	str	r3, [r0, #20]
 80082be:	617c      	str	r4, [r7, #20]
 80082c0:	e000      	b.n	80082c4 <WM_CreateWindowAsChild+0xe4>
 80082c2:	601c      	str	r4, [r3, #0]
 80082c4:	4629      	mov	r1, r5
 80082c6:	4620      	mov	r0, r4
 80082c8:	f7ff fcee 	bl	8007ca8 <WM__InsertWindowIntoList>
 80082cc:	06b5      	lsls	r5, r6, #26
 80082ce:	d502      	bpl.n	80082d6 <WM_CreateWindowAsChild+0xf6>
 80082d0:	4620      	mov	r0, r4
 80082d2:	f7ff ff61 	bl	8008198 <WM_SelectWindow>
 80082d6:	07f0      	lsls	r0, r6, #31
 80082d8:	d503      	bpl.n	80082e2 <WM_CreateWindowAsChild+0x102>
 80082da:	4b17      	ldr	r3, [pc, #92]	; (8008338 <WM_CreateWindowAsChild+0x158>)
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	3201      	adds	r2, #1
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	0671      	lsls	r1, r6, #25
 80082e4:	d502      	bpl.n	80082ec <WM_CreateWindowAsChild+0x10c>
 80082e6:	4620      	mov	r0, r4
 80082e8:	f007 ffe2 	bl	80102b0 <WM_BringToBottom>
 80082ec:	07b2      	lsls	r2, r6, #30
 80082ee:	d50d      	bpl.n	800830c <WM_CreateWindowAsChild+0x12c>
 80082f0:	4620      	mov	r0, r4
 80082f2:	f006 f841 	bl	800e378 <GUI_ALLOC_LockH>
 80082f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80082f8:	9000      	str	r0, [sp, #0]
 80082fa:	f043 0302 	orr.w	r3, r3, #2
 80082fe:	6283      	str	r3, [r0, #40]	; 0x28
 8008300:	4668      	mov	r0, sp
 8008302:	f006 f847 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008306:	4620      	mov	r0, r4
 8008308:	f7ff ff25 	bl	8008156 <WM_InvalidateWindow>
 800830c:	4620      	mov	r0, r4
 800830e:	2101      	movs	r1, #1
 8008310:	f7ff fec9 	bl	80080a6 <WM__SendMsgNoData>
 8008314:	f004 fb42 	bl	800c99c <GUI_Unlock>
 8008318:	4620      	mov	r0, r4
 800831a:	b003      	add	sp, #12
 800831c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008320:	2002880c 	.word	0x2002880c
 8008324:	200287dc 	.word	0x200287dc
 8008328:	200002c4 	.word	0x200002c4
 800832c:	20028818 	.word	0x20028818
 8008330:	003f3f9f 	.word	0x003f3f9f
 8008334:	200287d4 	.word	0x200287d4
 8008338:	20028814 	.word	0x20028814

0800833c <WM_DeleteWindow>:
 800833c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800833e:	4604      	mov	r4, r0
 8008340:	2800      	cmp	r0, #0
 8008342:	d071      	beq.n	8008428 <WM_DeleteWindow+0xec>
 8008344:	f004 fb34 	bl	800c9b0 <GUI_Lock>
 8008348:	4620      	mov	r0, r4
 800834a:	f7ff fd71 	bl	8007e30 <WM__IsWindow>
 800834e:	2800      	cmp	r0, #0
 8008350:	d068      	beq.n	8008424 <WM_DeleteWindow+0xe8>
 8008352:	4620      	mov	r0, r4
 8008354:	f7ff ff02 	bl	800815c <WM__GetTopLevelLayer>
 8008358:	210b      	movs	r1, #11
 800835a:	4606      	mov	r6, r0
 800835c:	4620      	mov	r0, r4
 800835e:	f7ff fea2 	bl	80080a6 <WM__SendMsgNoData>
 8008362:	4620      	mov	r0, r4
 8008364:	f7fe fdb8 	bl	8006ed8 <WM__DeleteAssocTimer>
 8008368:	4620      	mov	r0, r4
 800836a:	f006 f805 	bl	800e378 <GUI_ALLOC_LockH>
 800836e:	9001      	str	r0, [sp, #4]
 8008370:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008372:	b108      	cbz	r0, 8008378 <WM_DeleteWindow+0x3c>
 8008374:	f001 fb84 	bl	8009a80 <GUI_MEMDEV_Delete>
 8008378:	4b2c      	ldr	r3, [pc, #176]	; (800842c <WM_DeleteWindow+0xf0>)
 800837a:	4a2d      	ldr	r2, [pc, #180]	; (8008430 <WM_DeleteWindow+0xf4>)
 800837c:	2100      	movs	r1, #0
 800837e:	6019      	str	r1, [r3, #0]
 8008380:	4b2c      	ldr	r3, [pc, #176]	; (8008434 <WM_DeleteWindow+0xf8>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008388:	42a0      	cmp	r0, r4
 800838a:	bf08      	it	eq
 800838c:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 8008390:	4a29      	ldr	r2, [pc, #164]	; (8008438 <WM_DeleteWindow+0xfc>)
 8008392:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008396:	42a1      	cmp	r1, r4
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 80083a0:	4b26      	ldr	r3, [pc, #152]	; (800843c <WM_DeleteWindow+0x100>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	b12b      	cbz	r3, 80083b2 <WM_DeleteWindow+0x76>
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	42a2      	cmp	r2, r4
 80083aa:	bf04      	itt	eq
 80083ac:	2200      	moveq	r2, #0
 80083ae:	605a      	streq	r2, [r3, #4]
 80083b0:	e7f7      	b.n	80083a2 <WM_DeleteWindow+0x66>
 80083b2:	4620      	mov	r0, r4
 80083b4:	2107      	movs	r1, #7
 80083b6:	f7fe ffe4 	bl	8007382 <WM_NotifyParent>
 80083ba:	9d01      	ldr	r5, [sp, #4]
 80083bc:	69e8      	ldr	r0, [r5, #28]
 80083be:	f7ff ffbd 	bl	800833c <WM_DeleteWindow>
 80083c2:	69eb      	ldr	r3, [r5, #28]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1f9      	bne.n	80083bc <WM_DeleteWindow+0x80>
 80083c8:	4620      	mov	r0, r4
 80083ca:	f7ff fe48 	bl	800805e <WM__DetachWindow>
 80083ce:	4b1c      	ldr	r3, [pc, #112]	; (8008440 <WM_DeleteWindow+0x104>)
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	b150      	cbz	r0, 80083ea <WM_DeleteWindow+0xae>
 80083d4:	f005 ffc6 	bl	800e364 <GUI_ALLOC_h2p>
 80083d8:	4605      	mov	r5, r0
 80083da:	6940      	ldr	r0, [r0, #20]
 80083dc:	42a0      	cmp	r0, r4
 80083de:	d1f8      	bne.n	80083d2 <WM_DeleteWindow+0x96>
 80083e0:	4620      	mov	r0, r4
 80083e2:	f005 ffbf 	bl	800e364 <GUI_ALLOC_h2p>
 80083e6:	6943      	ldr	r3, [r0, #20]
 80083e8:	616b      	str	r3, [r5, #20]
 80083ea:	9b01      	ldr	r3, [sp, #4]
 80083ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ee:	07da      	lsls	r2, r3, #31
 80083f0:	d503      	bpl.n	80083fa <WM_DeleteWindow+0xbe>
 80083f2:	4a14      	ldr	r2, [pc, #80]	; (8008444 <WM_DeleteWindow+0x108>)
 80083f4:	6811      	ldr	r1, [r2, #0]
 80083f6:	3901      	subs	r1, #1
 80083f8:	6011      	str	r1, [r2, #0]
 80083fa:	069b      	lsls	r3, r3, #26
 80083fc:	d503      	bpl.n	8008406 <WM_DeleteWindow+0xca>
 80083fe:	4b12      	ldr	r3, [pc, #72]	; (8008448 <WM_DeleteWindow+0x10c>)
 8008400:	881a      	ldrh	r2, [r3, #0]
 8008402:	3a01      	subs	r2, #1
 8008404:	801a      	strh	r2, [r3, #0]
 8008406:	a801      	add	r0, sp, #4
 8008408:	f005 ffc4 	bl	800e394 <GUI_ALLOC_UnlockH>
 800840c:	4b0f      	ldr	r3, [pc, #60]	; (800844c <WM_DeleteWindow+0x110>)
 800840e:	881a      	ldrh	r2, [r3, #0]
 8008410:	4620      	mov	r0, r4
 8008412:	3a01      	subs	r2, #1
 8008414:	801a      	strh	r2, [r3, #0]
 8008416:	f005 ffe9 	bl	800e3ec <GUI_ALLOC_Free>
 800841a:	4b0d      	ldr	r3, [pc, #52]	; (8008450 <WM_DeleteWindow+0x114>)
 800841c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008420:	f7ff feba 	bl	8008198 <WM_SelectWindow>
 8008424:	f004 faba 	bl	800c99c <GUI_Unlock>
 8008428:	b002      	add	sp, #8
 800842a:	bd70      	pop	{r4, r5, r6, pc}
 800842c:	20008440 	.word	0x20008440
 8008430:	20028800 	.word	0x20028800
 8008434:	200287e4 	.word	0x200287e4
 8008438:	200287f0 	.word	0x200287f0
 800843c:	200287f8 	.word	0x200287f8
 8008440:	200287d4 	.word	0x200287d4
 8008444:	20028814 	.word	0x20028814
 8008448:	20028810 	.word	0x20028810
 800844c:	200287dc 	.word	0x200287dc
 8008450:	20028818 	.word	0x20028818

08008454 <WM_GetActiveWindow>:
 8008454:	4b01      	ldr	r3, [pc, #4]	; (800845c <WM_GetActiveWindow+0x8>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800845a:	4770      	bx	lr
 800845c:	200002c4 	.word	0x200002c4

08008460 <WM__GetNextIVR>:
 8008460:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008464:	4f5d      	ldr	r7, [pc, #372]	; (80085dc <WM__GetNextIVR+0x17c>)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800846c:	2800      	cmp	r0, #0
 800846e:	f000 80b2 	beq.w	80085d6 <WM__GetNextIVR+0x176>
 8008472:	4b5b      	ldr	r3, [pc, #364]	; (80085e0 <WM__GetNextIVR+0x180>)
 8008474:	695a      	ldr	r2, [r3, #20]
 8008476:	2a01      	cmp	r2, #1
 8008478:	461c      	mov	r4, r3
 800847a:	dd03      	ble.n	8008484 <WM__GetNextIVR+0x24>
 800847c:	3a01      	subs	r2, #1
 800847e:	615a      	str	r2, [r3, #20]
 8008480:	2000      	movs	r0, #0
 8008482:	e0a8      	b.n	80085d6 <WM__GetNextIVR+0x176>
 8008484:	f104 0608 	add.w	r6, r4, #8
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800848e:	3301      	adds	r3, #1
 8008490:	ad02      	add	r5, sp, #8
 8008492:	6123      	str	r3, [r4, #16]
 8008494:	e885 0003 	stmia.w	r5, {r0, r1}
 8008498:	b923      	cbnz	r3, 80084a4 <WM__GetNextIVR+0x44>
 800849a:	8823      	ldrh	r3, [r4, #0]
 800849c:	f8ad 3008 	strh.w	r3, [sp, #8]
 80084a0:	8863      	ldrh	r3, [r4, #2]
 80084a2:	e011      	b.n	80084c8 <WM__GetNextIVR+0x68>
 80084a4:	89a3      	ldrh	r3, [r4, #12]
 80084a6:	8962      	ldrh	r2, [r4, #10]
 80084a8:	f8ad 200a 	strh.w	r2, [sp, #10]
 80084ac:	3301      	adds	r3, #1
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80084b4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80084b8:	b21b      	sxth	r3, r3
 80084ba:	429a      	cmp	r2, r3
 80084bc:	da06      	bge.n	80084cc <WM__GetNextIVR+0x6c>
 80084be:	8823      	ldrh	r3, [r4, #0]
 80084c0:	f8ad 3008 	strh.w	r3, [sp, #8]
 80084c4:	89e3      	ldrh	r3, [r4, #14]
 80084c6:	3301      	adds	r3, #1
 80084c8:	f8ad 300a 	strh.w	r3, [sp, #10]
 80084cc:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80084d0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80084d4:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80085e0 <WM__GetNextIVR+0x180>
 80084d8:	429a      	cmp	r2, r3
 80084da:	dd04      	ble.n	80084e6 <WM__GetNextIVR+0x86>
 80084dc:	6963      	ldr	r3, [r4, #20]
 80084de:	3b01      	subs	r3, #1
 80084e0:	2000      	movs	r0, #0
 80084e2:	6163      	str	r3, [r4, #20]
 80084e4:	e077      	b.n	80085d6 <WM__GetNextIVR+0x176>
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80084ea:	f005 ff45 	bl	800e378 <GUI_ALLOC_LockH>
 80084ee:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80084f2:	f9b8 3000 	ldrsh.w	r3, [r8]
 80084f6:	9001      	str	r0, [sp, #4]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d11c      	bne.n	8008536 <WM__GetNextIVR+0xd6>
 80084fc:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8008500:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008504:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8008508:	f8ad 300c 	strh.w	r3, [sp, #12]
 800850c:	4b33      	ldr	r3, [pc, #204]	; (80085dc <WM__GetNextIVR+0x17c>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008512:	b15a      	cbz	r2, 800852c <WM__GetNextIVR+0xcc>
 8008514:	4610      	mov	r0, r2
 8008516:	f005 ff25 	bl	800e364 <GUI_ALLOC_h2p>
 800851a:	4680      	mov	r8, r0
 800851c:	2200      	movs	r2, #0
 800851e:	6a00      	ldr	r0, [r0, #32]
 8008520:	4629      	mov	r1, r5
 8008522:	f7ff f9a7 	bl	8007874 <_Findy1>
 8008526:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800852a:	e7f2      	b.n	8008512 <WM__GetNextIVR+0xb2>
 800852c:	9b01      	ldr	r3, [sp, #4]
 800852e:	4629      	mov	r1, r5
 8008530:	69d8      	ldr	r0, [r3, #28]
 8008532:	f7ff f99f 	bl	8007874 <_Findy1>
 8008536:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800853a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008542:	b16a      	cbz	r2, 8008560 <WM__GetNextIVR+0x100>
 8008544:	4610      	mov	r0, r2
 8008546:	f005 ff0d 	bl	800e364 <GUI_ALLOC_h2p>
 800854a:	4629      	mov	r1, r5
 800854c:	4680      	mov	r8, r0
 800854e:	2200      	movs	r2, #0
 8008550:	6a00      	ldr	r0, [r0, #32]
 8008552:	f7ff f9e5 	bl	8007920 <_Findx0>
 8008556:	2800      	cmp	r0, #0
 8008558:	d1ed      	bne.n	8008536 <WM__GetNextIVR+0xd6>
 800855a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800855e:	e7f0      	b.n	8008542 <WM__GetNextIVR+0xe2>
 8008560:	9b01      	ldr	r3, [sp, #4]
 8008562:	4629      	mov	r1, r5
 8008564:	69d8      	ldr	r0, [r3, #28]
 8008566:	f7ff f9db 	bl	8007920 <_Findx0>
 800856a:	2800      	cmp	r0, #0
 800856c:	d1e3      	bne.n	8008536 <WM__GetNextIVR+0xd6>
 800856e:	88a3      	ldrh	r3, [r4, #4]
 8008570:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8008574:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008578:	b21b      	sxth	r3, r3
 800857a:	429a      	cmp	r2, r3
 800857c:	dd07      	ble.n	800858e <WM__GetNextIVR+0x12e>
 800857e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008582:	e886 0003 	stmia.w	r6, {r0, r1}
 8008586:	a801      	add	r0, sp, #4
 8008588:	f005 ff04 	bl	800e394 <GUI_ALLOC_UnlockH>
 800858c:	e797      	b.n	80084be <WM__GetNextIVR+0x5e>
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008592:	b152      	cbz	r2, 80085aa <WM__GetNextIVR+0x14a>
 8008594:	4610      	mov	r0, r2
 8008596:	f005 fee5 	bl	800e364 <GUI_ALLOC_h2p>
 800859a:	4607      	mov	r7, r0
 800859c:	2200      	movs	r2, #0
 800859e:	6a00      	ldr	r0, [r0, #32]
 80085a0:	4629      	mov	r1, r5
 80085a2:	f7ff fa01 	bl	80079a8 <_Findx1>
 80085a6:	69ba      	ldr	r2, [r7, #24]
 80085a8:	e7f3      	b.n	8008592 <WM__GetNextIVR+0x132>
 80085aa:	af04      	add	r7, sp, #16
 80085ac:	4629      	mov	r1, r5
 80085ae:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 80085b2:	69d8      	ldr	r0, [r3, #28]
 80085b4:	f7ff f9f8 	bl	80079a8 <_Findx1>
 80085b8:	4638      	mov	r0, r7
 80085ba:	f005 feeb 	bl	800e394 <GUI_ALLOC_UnlockH>
 80085be:	6923      	ldr	r3, [r4, #16]
 80085c0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80085c4:	4293      	cmp	r3, r2
 80085c6:	dc89      	bgt.n	80084dc <WM__GetNextIVR+0x7c>
 80085c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80085cc:	e886 0003 	stmia.w	r6, {r0, r1}
 80085d0:	f7ff fc0a 	bl	8007de8 <WM__ActivateClipRect>
 80085d4:	2001      	movs	r0, #1
 80085d6:	b004      	add	sp, #16
 80085d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085dc:	200002c4 	.word	0x200002c4
 80085e0:	20008428 	.word	0x20008428

080085e4 <WM__InitIVRSearch>:
 80085e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e8:	4f39      	ldr	r7, [pc, #228]	; (80086d0 <WM__InitIVRSearch+0xec>)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80085f0:	b086      	sub	sp, #24
 80085f2:	4606      	mov	r6, r0
 80085f4:	b912      	cbnz	r2, 80085fc <WM__InitIVRSearch+0x18>
 80085f6:	f7ff fbf7 	bl	8007de8 <WM__ActivateClipRect>
 80085fa:	e064      	b.n	80086c6 <WM__InitIVRSearch+0xe2>
 80085fc:	4d35      	ldr	r5, [pc, #212]	; (80086d4 <WM__InitIVRSearch+0xf0>)
 80085fe:	696a      	ldr	r2, [r5, #20]
 8008600:	3201      	adds	r2, #1
 8008602:	2a01      	cmp	r2, #1
 8008604:	616a      	str	r2, [r5, #20]
 8008606:	462c      	mov	r4, r5
 8008608:	dc5d      	bgt.n	80086c6 <WM__InitIVRSearch+0xe2>
 800860a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800860c:	f005 feb4 	bl	800e378 <GUI_ALLOC_LockH>
 8008610:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008614:	612a      	str	r2, [r5, #16]
 8008616:	4a30      	ldr	r2, [pc, #192]	; (80086d8 <WM__InitIVRSearch+0xf4>)
 8008618:	9000      	str	r0, [sp, #0]
 800861a:	7812      	ldrb	r2, [r2, #0]
 800861c:	b12a      	cbz	r2, 800862a <WM__InitIVRSearch+0x46>
 800861e:	f100 0308 	add.w	r3, r0, #8
 8008622:	aa02      	add	r2, sp, #8
 8008624:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008628:	e005      	b.n	8008636 <WM__InitIVRSearch+0x52>
 800862a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800862c:	f012 0802 	ands.w	r8, r2, #2
 8008630:	d00a      	beq.n	8008648 <WM__InitIVRSearch+0x64>
 8008632:	c803      	ldmia	r0, {r0, r1}
 8008634:	aa02      	add	r2, sp, #8
 8008636:	e882 0003 	stmia.w	r2, {r0, r1}
 800863a:	ad02      	add	r5, sp, #8
 800863c:	b166      	cbz	r6, 8008658 <WM__InitIVRSearch+0x74>
 800863e:	4628      	mov	r0, r5
 8008640:	4631      	mov	r1, r6
 8008642:	f003 fd1b 	bl	800c07c <GUI__IntersectRect>
 8008646:	e007      	b.n	8008658 <WM__InitIVRSearch+0x74>
 8008648:	696b      	ldr	r3, [r5, #20]
 800864a:	4668      	mov	r0, sp
 800864c:	3b01      	subs	r3, #1
 800864e:	616b      	str	r3, [r5, #20]
 8008650:	f005 fea0 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008654:	4640      	mov	r0, r8
 8008656:	e037      	b.n	80086c8 <WM__InitIVRSearch+0xe4>
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	4e20      	ldr	r6, [pc, #128]	; (80086dc <WM__InitIVRSearch+0xf8>)
 800865c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800865e:	b1c2      	cbz	r2, 8008692 <WM__InitIVRSearch+0xae>
 8008660:	9b00      	ldr	r3, [sp, #0]
 8008662:	6810      	ldr	r0, [r2, #0]
 8008664:	6851      	ldr	r1, [r2, #4]
 8008666:	9301      	str	r3, [sp, #4]
 8008668:	ab04      	add	r3, sp, #16
 800866a:	c303      	stmia	r3!, {r0, r1}
 800866c:	6833      	ldr	r3, [r6, #0]
 800866e:	b133      	cbz	r3, 800867e <WM__InitIVRSearch+0x9a>
 8008670:	a801      	add	r0, sp, #4
 8008672:	f005 fe8f 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008676:	6830      	ldr	r0, [r6, #0]
 8008678:	f005 fe7e 	bl	800e378 <GUI_ALLOC_LockH>
 800867c:	9001      	str	r0, [sp, #4]
 800867e:	9801      	ldr	r0, [sp, #4]
 8008680:	a904      	add	r1, sp, #16
 8008682:	f7ff fb81 	bl	8007d88 <WM__Client2Screen>
 8008686:	4628      	mov	r0, r5
 8008688:	a904      	add	r1, sp, #16
 800868a:	f003 fcf7 	bl	800c07c <GUI__IntersectRect>
 800868e:	a801      	add	r0, sp, #4
 8008690:	e000      	b.n	8008694 <WM__InitIVRSearch+0xb0>
 8008692:	4668      	mov	r0, sp
 8008694:	f005 fe7e 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008698:	6831      	ldr	r1, [r6, #0]
 800869a:	b119      	cbz	r1, 80086a4 <WM__InitIVRSearch+0xc0>
 800869c:	4628      	mov	r0, r5
 800869e:	f7ff fad5 	bl	8007c4c <WM__ClipAtParentBorders>
 80086a2:	b128      	cbz	r0, 80086b0 <WM__InitIVRSearch+0xcc>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	4628      	mov	r0, r5
 80086a8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80086aa:	f7ff facf 	bl	8007c4c <WM__ClipAtParentBorders>
 80086ae:	b918      	cbnz	r0, 80086b8 <WM__InitIVRSearch+0xd4>
 80086b0:	6963      	ldr	r3, [r4, #20]
 80086b2:	3b01      	subs	r3, #1
 80086b4:	6163      	str	r3, [r4, #20]
 80086b6:	e007      	b.n	80086c8 <WM__InitIVRSearch+0xe4>
 80086b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80086bc:	e884 0003 	stmia.w	r4, {r0, r1}
 80086c0:	f7ff fece 	bl	8008460 <WM__GetNextIVR>
 80086c4:	e000      	b.n	80086c8 <WM__InitIVRSearch+0xe4>
 80086c6:	2001      	movs	r0, #1
 80086c8:	b006      	add	sp, #24
 80086ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ce:	bf00      	nop
 80086d0:	200002c4 	.word	0x200002c4
 80086d4:	20008428 	.word	0x20008428
 80086d8:	20028808 	.word	0x20028808
 80086dc:	200287e0 	.word	0x200287e0

080086e0 <WM_SetDefault>:
 80086e0:	b508      	push	{r3, lr}
 80086e2:	f004 fa37 	bl	800cb54 <GL_SetDefault>
 80086e6:	4b02      	ldr	r3, [pc, #8]	; (80086f0 <WM_SetDefault+0x10>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2200      	movs	r2, #0
 80086ec:	645a      	str	r2, [r3, #68]	; 0x44
 80086ee:	bd08      	pop	{r3, pc}
 80086f0:	200002c4 	.word	0x200002c4

080086f4 <WM__Paint1>:
 80086f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086f6:	b089      	sub	sp, #36	; 0x24
 80086f8:	4604      	mov	r4, r0
 80086fa:	f005 fe3d 	bl	800e378 <GUI_ALLOC_LockH>
 80086fe:	6907      	ldr	r7, [r0, #16]
 8008700:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8008702:	9001      	str	r0, [sp, #4]
 8008704:	3008      	adds	r0, #8
 8008706:	c803      	ldmia	r0, {r0, r1}
 8008708:	ad02      	add	r5, sp, #8
 800870a:	e885 0003 	stmia.w	r5, {r0, r1}
 800870e:	a801      	add	r0, sp, #4
 8008710:	f005 fe40 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008714:	2f00      	cmp	r7, #0
 8008716:	d031      	beq.n	800877c <WM__Paint1+0x88>
 8008718:	07b3      	lsls	r3, r6, #30
 800871a:	d52f      	bpl.n	800877c <WM__Paint1+0x88>
 800871c:	4620      	mov	r0, r4
 800871e:	212e      	movs	r1, #46	; 0x2e
 8008720:	f7fe fd9e 	bl	8007260 <WM_SendMessageNoPara>
 8008724:	4b16      	ldr	r3, [pc, #88]	; (8008780 <WM__Paint1+0x8c>)
 8008726:	781a      	ldrb	r2, [r3, #0]
 8008728:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 800872c:	f102 0201 	add.w	r2, r2, #1
 8008730:	701a      	strb	r2, [r3, #0]
 8008732:	461e      	mov	r6, r3
 8008734:	d00a      	beq.n	800874c <WM__Paint1+0x58>
 8008736:	230f      	movs	r3, #15
 8008738:	9405      	str	r4, [sp, #20]
 800873a:	9304      	str	r3, [sp, #16]
 800873c:	9507      	str	r5, [sp, #28]
 800873e:	f7ff ffcf 	bl	80086e0 <WM_SetDefault>
 8008742:	4620      	mov	r0, r4
 8008744:	a904      	add	r1, sp, #16
 8008746:	f7fe fb71 	bl	8006e2c <WM__SendMessage>
 800874a:	e010      	b.n	800876e <WM__Paint1+0x7a>
 800874c:	4628      	mov	r0, r5
 800874e:	f7ff ff49 	bl	80085e4 <WM__InitIVRSearch>
 8008752:	b160      	cbz	r0, 800876e <WM__Paint1+0x7a>
 8008754:	230f      	movs	r3, #15
 8008756:	9304      	str	r3, [sp, #16]
 8008758:	9405      	str	r4, [sp, #20]
 800875a:	9507      	str	r5, [sp, #28]
 800875c:	f7ff ffc0 	bl	80086e0 <WM_SetDefault>
 8008760:	4620      	mov	r0, r4
 8008762:	a904      	add	r1, sp, #16
 8008764:	f7fe fb62 	bl	8006e2c <WM__SendMessage>
 8008768:	f7ff fe7a 	bl	8008460 <WM__GetNextIVR>
 800876c:	e7f1      	b.n	8008752 <WM__Paint1+0x5e>
 800876e:	7833      	ldrb	r3, [r6, #0]
 8008770:	4620      	mov	r0, r4
 8008772:	3b01      	subs	r3, #1
 8008774:	212f      	movs	r1, #47	; 0x2f
 8008776:	7033      	strb	r3, [r6, #0]
 8008778:	f7fe fd72 	bl	8007260 <WM_SendMessageNoPara>
 800877c:	b009      	add	sp, #36	; 0x24
 800877e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008780:	20028808 	.word	0x20028808

08008784 <WM__Paint>:
 8008784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008786:	b089      	sub	sp, #36	; 0x24
 8008788:	ac06      	add	r4, sp, #24
 800878a:	9003      	str	r0, [sp, #12]
 800878c:	f005 fdf4 	bl	800e378 <GUI_ALLOC_LockH>
 8008790:	f100 0208 	add.w	r2, r0, #8
 8008794:	4603      	mov	r3, r0
 8008796:	9005      	str	r0, [sp, #20]
 8008798:	e892 0003 	ldmia.w	r2, {r0, r1}
 800879c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800879e:	699e      	ldr	r6, [r3, #24]
 80087a0:	691f      	ldr	r7, [r3, #16]
 80087a2:	e884 0003 	stmia.w	r4, {r0, r1}
 80087a6:	a805      	add	r0, sp, #20
 80087a8:	f005 fdf4 	bl	800e394 <GUI_ALLOC_UnlockH>
 80087ac:	f244 0320 	movw	r3, #16416	; 0x4020
 80087b0:	402b      	ands	r3, r5
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d034      	beq.n	8008820 <WM__Paint+0x9c>
 80087b6:	b1bf      	cbz	r7, 80087e8 <WM__Paint+0x64>
 80087b8:	4620      	mov	r0, r4
 80087ba:	9903      	ldr	r1, [sp, #12]
 80087bc:	f7ff fa46 	bl	8007c4c <WM__ClipAtParentBorders>
 80087c0:	b190      	cbz	r0, 80087e8 <WM__Paint+0x64>
 80087c2:	9803      	ldr	r0, [sp, #12]
 80087c4:	f7ff fce8 	bl	8008198 <WM_SelectWindow>
 80087c8:	0769      	lsls	r1, r5, #29
 80087ca:	d50f      	bpl.n	80087ec <WM__Paint+0x68>
 80087cc:	b126      	cbz	r6, 80087d8 <WM__Paint+0x54>
 80087ce:	f005 0501 	and.w	r5, r5, #1
 80087d2:	f085 0501 	eor.w	r5, r5, #1
 80087d6:	e000      	b.n	80087da <WM__Paint+0x56>
 80087d8:	2501      	movs	r5, #1
 80087da:	9500      	str	r5, [sp, #0]
 80087dc:	4620      	mov	r0, r4
 80087de:	4912      	ldr	r1, [pc, #72]	; (8008828 <WM__Paint+0xa4>)
 80087e0:	aa03      	add	r2, sp, #12
 80087e2:	2300      	movs	r3, #0
 80087e4:	f000 faf4 	bl	8008dd0 <GUI_MEMDEV_Draw>
 80087e8:	2400      	movs	r4, #0
 80087ea:	e003      	b.n	80087f4 <WM__Paint+0x70>
 80087ec:	9803      	ldr	r0, [sp, #12]
 80087ee:	f7ff f9bd 	bl	8007b6c <WM__PaintWinAndOverlays>
 80087f2:	2401      	movs	r4, #1
 80087f4:	9803      	ldr	r0, [sp, #12]
 80087f6:	f005 fdbf 	bl	800e378 <GUI_ALLOC_LockH>
 80087fa:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80087fc:	9005      	str	r0, [sp, #20]
 80087fe:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 8008802:	f023 0320 	bic.w	r3, r3, #32
 8008806:	0492      	lsls	r2, r2, #18
 8008808:	bf48      	it	mi
 800880a:	f043 0304 	orrmi.w	r3, r3, #4
 800880e:	6283      	str	r3, [r0, #40]	; 0x28
 8008810:	a805      	add	r0, sp, #20
 8008812:	f005 fdbf 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008816:	4b05      	ldr	r3, [pc, #20]	; (800882c <WM__Paint+0xa8>)
 8008818:	881a      	ldrh	r2, [r3, #0]
 800881a:	3a01      	subs	r2, #1
 800881c:	801a      	strh	r2, [r3, #0]
 800881e:	e000      	b.n	8008822 <WM__Paint+0x9e>
 8008820:	461c      	mov	r4, r3
 8008822:	4620      	mov	r0, r4
 8008824:	b009      	add	sp, #36	; 0x24
 8008826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008828:	08007be5 	.word	0x08007be5
 800882c:	20028810 	.word	0x20028810

08008830 <WM_Exec>:
 8008830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	b09f      	sub	sp, #124	; 0x7c
 8008836:	f004 f8bb 	bl	800c9b0 <GUI_Lock>
 800883a:	4b53      	ldr	r3, [pc, #332]	; (8008988 <WM_Exec+0x158>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	b103      	cbz	r3, 8008842 <WM_Exec+0x12>
 8008840:	4798      	blx	r3
 8008842:	2600      	movs	r6, #0
 8008844:	4d51      	ldr	r5, [pc, #324]	; (800898c <WM_Exec+0x15c>)
 8008846:	682b      	ldr	r3, [r5, #0]
 8008848:	b1fb      	cbz	r3, 800888a <WM_Exec+0x5a>
 800884a:	f004 f8b1 	bl	800c9b0 <GUI_Lock>
 800884e:	4b50      	ldr	r3, [pc, #320]	; (8008990 <WM_Exec+0x160>)
 8008850:	681c      	ldr	r4, [r3, #0]
 8008852:	b1bc      	cbz	r4, 8008884 <WM_Exec+0x54>
 8008854:	4620      	mov	r0, r4
 8008856:	f005 fd8f 	bl	800e378 <GUI_ALLOC_LockH>
 800885a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800885c:	6947      	ldr	r7, [r0, #20]
 800885e:	ab1e      	add	r3, sp, #120	; 0x78
 8008860:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8008864:	f843 0d70 	str.w	r0, [r3, #-112]!
 8008868:	d007      	beq.n	800887a <WM_Exec+0x4a>
 800886a:	4618      	mov	r0, r3
 800886c:	f005 fd92 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008870:	4620      	mov	r0, r4
 8008872:	f7ff fd63 	bl	800833c <WM_DeleteWindow>
 8008876:	463c      	mov	r4, r7
 8008878:	e7eb      	b.n	8008852 <WM_Exec+0x22>
 800887a:	4618      	mov	r0, r3
 800887c:	463c      	mov	r4, r7
 800887e:	f005 fd89 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008882:	e7e6      	b.n	8008852 <WM_Exec+0x22>
 8008884:	602c      	str	r4, [r5, #0]
 8008886:	f004 f889 	bl	800c99c <GUI_Unlock>
 800888a:	4b42      	ldr	r3, [pc, #264]	; (8008994 <WM_Exec+0x164>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	b103      	cbz	r3, 8008892 <WM_Exec+0x62>
 8008890:	4798      	blx	r3
 8008892:	4b41      	ldr	r3, [pc, #260]	; (8008998 <WM_Exec+0x168>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	b92b      	cbnz	r3, 80088a4 <WM_Exec+0x74>
 8008898:	4f40      	ldr	r7, [pc, #256]	; (800899c <WM_Exec+0x16c>)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80088a0:	b143      	cbz	r3, 80088b4 <WM_Exec+0x84>
 80088a2:	e003      	b.n	80088ac <WM_Exec+0x7c>
 80088a4:	4798      	blx	r3
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d0f6      	beq.n	8008898 <WM_Exec+0x68>
 80088aa:	e060      	b.n	800896e <WM_Exec+0x13e>
 80088ac:	f004 facc 	bl	800ce48 <GUI_PollKeyMsg>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d15c      	bne.n	800896e <WM_Exec+0x13e>
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	f893 5054 	ldrb.w	r5, [r3, #84]	; 0x54
 80088ba:	b14d      	cbz	r5, 80088d0 <WM_Exec+0xa0>
 80088bc:	4b38      	ldr	r3, [pc, #224]	; (80089a0 <WM_Exec+0x170>)
 80088be:	881d      	ldrh	r5, [r3, #0]
 80088c0:	b135      	cbz	r5, 80088d0 <WM_Exec+0xa0>
 80088c2:	4b38      	ldr	r3, [pc, #224]	; (80089a4 <WM_Exec+0x174>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d053      	beq.n	8008972 <WM_Exec+0x142>
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4798      	blx	r3
 80088ce:	2501      	movs	r5, #1
 80088d0:	f004 f864 	bl	800c99c <GUI_Unlock>
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80088da:	b923      	cbnz	r3, 80088e6 <WM_Exec+0xb6>
 80088dc:	f004 f868 	bl	800c9b0 <GUI_Lock>
 80088e0:	2d00      	cmp	r5, #0
 80088e2:	d13b      	bne.n	800895c <WM_Exec+0x12c>
 80088e4:	e049      	b.n	800897a <WM_Exec+0x14a>
 80088e6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80089a0 <WM_Exec+0x170>
 80088ea:	f8b8 3000 	ldrh.w	r3, [r8]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d0f4      	beq.n	80088dc <WM_Exec+0xac>
 80088f2:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 80089a8 <WM_Exec+0x178>
 80088f6:	f004 f85b 	bl	800c9b0 <GUI_Lock>
 80088fa:	f8d9 4000 	ldr.w	r4, [r9]
 80088fe:	b90c      	cbnz	r4, 8008904 <WM_Exec+0xd4>
 8008900:	4b23      	ldr	r3, [pc, #140]	; (8008990 <WM_Exec+0x160>)
 8008902:	681c      	ldr	r4, [r3, #0]
 8008904:	a802      	add	r0, sp, #8
 8008906:	f004 f9cf 	bl	800cca8 <GUI_SaveContext_W>
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 8008910:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8008914:	b914      	cbnz	r4, 800891c <WM_Exec+0xec>
 8008916:	2400      	movs	r4, #0
 8008918:	e00d      	b.n	8008936 <WM_Exec+0x106>
 800891a:	b963      	cbnz	r3, 8008936 <WM_Exec+0x106>
 800891c:	4620      	mov	r0, r4
 800891e:	f7ff ff31 	bl	8008784 <WM__Paint>
 8008922:	4603      	mov	r3, r0
 8008924:	4620      	mov	r0, r4
 8008926:	9301      	str	r3, [sp, #4]
 8008928:	f005 fd1c 	bl	800e364 <GUI_ALLOC_h2p>
 800892c:	6944      	ldr	r4, [r0, #20]
 800892e:	9b01      	ldr	r3, [sp, #4]
 8008930:	2c00      	cmp	r4, #0
 8008932:	d1f2      	bne.n	800891a <WM_Exec+0xea>
 8008934:	e7ef      	b.n	8008916 <WM_Exec+0xe6>
 8008936:	4658      	mov	r0, fp
 8008938:	f8c9 4000 	str.w	r4, [r9]
 800893c:	f004 f935 	bl	800cbaa <GUI_SetColor>
 8008940:	4650      	mov	r0, sl
 8008942:	f004 f927 	bl	800cb94 <GUI_SetBkColor>
 8008946:	a802      	add	r0, sp, #8
 8008948:	f004 f9b8 	bl	800ccbc <GUI_RestoreContext>
 800894c:	f004 f826 	bl	800c99c <GUI_Unlock>
 8008950:	f8b8 3000 	ldrh.w	r3, [r8]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d0c1      	beq.n	80088dc <WM_Exec+0xac>
 8008958:	2601      	movs	r6, #1
 800895a:	e7bb      	b.n	80088d4 <WM_Exec+0xa4>
 800895c:	4b11      	ldr	r3, [pc, #68]	; (80089a4 <WM_Exec+0x174>)
 800895e:	6818      	ldr	r0, [r3, #0]
 8008960:	b110      	cbz	r0, 8008968 <WM_Exec+0x138>
 8008962:	6843      	ldr	r3, [r0, #4]
 8008964:	4798      	blx	r3
 8008966:	e008      	b.n	800897a <WM_Exec+0x14a>
 8008968:	f003 fb4e 	bl	800c008 <GUI__ManageCache>
 800896c:	e005      	b.n	800897a <WM_Exec+0x14a>
 800896e:	2601      	movs	r6, #1
 8008970:	e768      	b.n	8008844 <WM_Exec+0x14>
 8008972:	2001      	movs	r0, #1
 8008974:	f003 fb48 	bl	800c008 <GUI__ManageCache>
 8008978:	e7a9      	b.n	80088ce <WM_Exec+0x9e>
 800897a:	f004 f80f 	bl	800c99c <GUI_Unlock>
 800897e:	4630      	mov	r0, r6
 8008980:	b01f      	add	sp, #124	; 0x7c
 8008982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008986:	bf00      	nop
 8008988:	200287fc 	.word	0x200287fc
 800898c:	20008424 	.word	0x20008424
 8008990:	200287d4 	.word	0x200287d4
 8008994:	200287d8 	.word	0x200287d8
 8008998:	20028830 	.word	0x20028830
 800899c:	200002c4 	.word	0x200002c4
 80089a0:	20028810 	.word	0x20028810
 80089a4:	200287ec 	.word	0x200287ec
 80089a8:	20008440 	.word	0x20008440

080089ac <WM_Activate>:
 80089ac:	4b02      	ldr	r3, [pc, #8]	; (80089b8 <WM_Activate+0xc>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80089b6:	4770      	bx	lr
 80089b8:	200002c4 	.word	0x200002c4

080089bc <WM_Deactivate>:
 80089bc:	b508      	push	{r3, lr}
 80089be:	4b06      	ldr	r3, [pc, #24]	; (80089d8 <WM_Deactivate+0x1c>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80089c8:	f003 fff2 	bl	800c9b0 <GUI_Lock>
 80089cc:	f003 f972 	bl	800bcb4 <LCD_SetClipRectMax>
 80089d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80089d4:	f003 bfe2 	b.w	800c99c <GUI_Unlock>
 80089d8:	200002c4 	.word	0x200002c4

080089dc <WM_DefaultProc>:
 80089dc:	b510      	push	{r4, lr}
 80089de:	4604      	mov	r4, r0
 80089e0:	6840      	ldr	r0, [r0, #4]
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	68e1      	ldr	r1, [r4, #12]
 80089e6:	2b17      	cmp	r3, #23
 80089e8:	d00f      	beq.n	8008a0a <WM_DefaultProc+0x2e>
 80089ea:	dc06      	bgt.n	80089fa <WM_DefaultProc+0x1e>
 80089ec:	2b0e      	cmp	r3, #14
 80089ee:	d00e      	beq.n	8008a0e <WM_DefaultProc+0x32>
 80089f0:	2b14      	cmp	r3, #20
 80089f2:	d114      	bne.n	8008a1e <WM_DefaultProc+0x42>
 80089f4:	f7fe fe8e 	bl	8007714 <WM__GetClientRectEx>
 80089f8:	e011      	b.n	8008a1e <WM_DefaultProc+0x42>
 80089fa:	2b22      	cmp	r3, #34	; 0x22
 80089fc:	d00c      	beq.n	8008a18 <WM_DefaultProc+0x3c>
 80089fe:	2b28      	cmp	r3, #40	; 0x28
 8008a00:	d10d      	bne.n	8008a1e <WM_DefaultProc+0x42>
 8008a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a06:	f7ff bba6 	b.w	8008156 <WM_InvalidateWindow>
 8008a0a:	60e0      	str	r0, [r4, #12]
 8008a0c:	bd10      	pop	{r4, pc}
 8008a0e:	4621      	mov	r1, r4
 8008a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a14:	f7fe bc11 	b.w	800723a <WM_SendToParent>
 8008a18:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008a1c:	e000      	b.n	8008a20 <WM_DefaultProc+0x44>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	60e3      	str	r3, [r4, #12]
 8008a22:	bd10      	pop	{r4, pc}

08008a24 <cbBackWin>:
 8008a24:	6803      	ldr	r3, [r0, #0]
 8008a26:	2b0e      	cmp	r3, #14
 8008a28:	b510      	push	{r4, lr}
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	d002      	beq.n	8008a34 <cbBackWin+0x10>
 8008a2e:	2b0f      	cmp	r3, #15
 8008a30:	d009      	beq.n	8008a46 <cbBackWin+0x22>
 8008a32:	e020      	b.n	8008a76 <cbBackWin+0x52>
 8008a34:	68c3      	ldr	r3, [r0, #12]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	2a01      	cmp	r2, #1
 8008a3a:	d121      	bne.n	8008a80 <cbBackWin+0x5c>
 8008a3c:	6818      	ldr	r0, [r3, #0]
 8008a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a42:	f004 b9f9 	b.w	800ce38 <GUI_StoreKey>
 8008a46:	4a0f      	ldr	r2, [pc, #60]	; (8008a84 <cbBackWin+0x60>)
 8008a48:	6843      	ldr	r3, [r0, #4]
 8008a4a:	6811      	ldr	r1, [r2, #0]
 8008a4c:	428b      	cmp	r3, r1
 8008a4e:	d006      	beq.n	8008a5e <cbBackWin+0x3a>
 8008a50:	6852      	ldr	r2, [r2, #4]
 8008a52:	4293      	cmp	r3, r2
 8008a54:	bf14      	ite	ne
 8008a56:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8008a5a:	2301      	moveq	r3, #1
 8008a5c:	e000      	b.n	8008a60 <cbBackWin+0x3c>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	4a09      	ldr	r2, [pc, #36]	; (8008a88 <cbBackWin+0x64>)
 8008a62:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008a66:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008a6a:	4298      	cmp	r0, r3
 8008a6c:	d003      	beq.n	8008a76 <cbBackWin+0x52>
 8008a6e:	f004 f891 	bl	800cb94 <GUI_SetBkColor>
 8008a72:	f005 f8d1 	bl	800dc18 <GUI_Clear>
 8008a76:	4620      	mov	r0, r4
 8008a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a7c:	f7ff bfae 	b.w	80089dc <WM_DefaultProc>
 8008a80:	bd10      	pop	{r4, pc}
 8008a82:	bf00      	nop
 8008a84:	20028818 	.word	0x20028818
 8008a88:	200287cc 	.word	0x200287cc

08008a8c <WM_Init>:
 8008a8c:	b530      	push	{r4, r5, lr}
 8008a8e:	4b2b      	ldr	r3, [pc, #172]	; (8008b3c <WM_Init+0xb0>)
 8008a90:	7818      	ldrb	r0, [r3, #0]
 8008a92:	b085      	sub	sp, #20
 8008a94:	461d      	mov	r5, r3
 8008a96:	2800      	cmp	r0, #0
 8008a98:	d14d      	bne.n	8008b36 <WM_Init+0xaa>
 8008a9a:	4b29      	ldr	r3, [pc, #164]	; (8008b40 <WM_Init+0xb4>)
 8008a9c:	6018      	str	r0, [r3, #0]
 8008a9e:	4b29      	ldr	r3, [pc, #164]	; (8008b44 <WM_Init+0xb8>)
 8008aa0:	6018      	str	r0, [r3, #0]
 8008aa2:	4b29      	ldr	r3, [pc, #164]	; (8008b48 <WM_Init+0xbc>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6458      	str	r0, [r3, #68]	; 0x44
 8008aa8:	4b28      	ldr	r3, [pc, #160]	; (8008b4c <WM_Init+0xc0>)
 8008aaa:	8018      	strh	r0, [r3, #0]
 8008aac:	4b28      	ldr	r3, [pc, #160]	; (8008b50 <WM_Init+0xc4>)
 8008aae:	4604      	mov	r4, r0
 8008ab0:	8018      	strh	r0, [r3, #0]
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f004 ff3a 	bl	800d92c <GUI_DEVICE__GetpDriver>
 8008ab8:	b1c0      	cbz	r0, 8008aec <WM_Init+0x60>
 8008aba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008abe:	2302      	movs	r3, #2
 8008ac0:	e88d 000c 	stmia.w	sp, {r2, r3}
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8008aca:	4b22      	ldr	r3, [pc, #136]	; (8008b54 <WM_Init+0xc8>)
 8008acc:	9302      	str	r3, [sp, #8]
 8008ace:	9003      	str	r0, [sp, #12]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	4601      	mov	r1, r0
 8008ad4:	f7ff fb84 	bl	80081e0 <WM_CreateWindowAsChild>
 8008ad8:	4b1f      	ldr	r3, [pc, #124]	; (8008b58 <WM_Init+0xcc>)
 8008ada:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008ade:	4b1f      	ldr	r3, [pc, #124]	; (8008b5c <WM_Init+0xd0>)
 8008ae0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8008ae4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8008ae8:	f7ff fb35 	bl	8008156 <WM_InvalidateWindow>
 8008aec:	3401      	adds	r4, #1
 8008aee:	2c02      	cmp	r4, #2
 8008af0:	d1df      	bne.n	8008ab2 <WM_Init+0x26>
 8008af2:	481b      	ldr	r0, [pc, #108]	; (8008b60 <WM_Init+0xd4>)
 8008af4:	f007 fbbe 	bl	8010274 <WM__AddCriticalHandle>
 8008af8:	481a      	ldr	r0, [pc, #104]	; (8008b64 <WM_Init+0xd8>)
 8008afa:	f007 fbbb 	bl	8010274 <WM__AddCriticalHandle>
 8008afe:	481a      	ldr	r0, [pc, #104]	; (8008b68 <WM_Init+0xdc>)
 8008b00:	f007 fbb8 	bl	8010274 <WM__AddCriticalHandle>
 8008b04:	4819      	ldr	r0, [pc, #100]	; (8008b6c <WM_Init+0xe0>)
 8008b06:	f007 fbb5 	bl	8010274 <WM__AddCriticalHandle>
 8008b0a:	4819      	ldr	r0, [pc, #100]	; (8008b70 <WM_Init+0xe4>)
 8008b0c:	f007 fbb2 	bl	8010274 <WM__AddCriticalHandle>
 8008b10:	4818      	ldr	r0, [pc, #96]	; (8008b74 <WM_Init+0xe8>)
 8008b12:	f007 fbaf 	bl	8010274 <WM__AddCriticalHandle>
 8008b16:	4b10      	ldr	r3, [pc, #64]	; (8008b58 <WM_Init+0xcc>)
 8008b18:	6818      	ldr	r0, [r3, #0]
 8008b1a:	f7ff fb3d 	bl	8008198 <WM_SelectWindow>
 8008b1e:	f7ff ff45 	bl	80089ac <WM_Activate>
 8008b22:	2301      	movs	r3, #1
 8008b24:	702b      	strb	r3, [r5, #0]
 8008b26:	4814      	ldr	r0, [pc, #80]	; (8008b78 <WM_Init+0xec>)
 8008b28:	4b14      	ldr	r3, [pc, #80]	; (8008b7c <WM_Init+0xf0>)
 8008b2a:	6003      	str	r3, [r0, #0]
 8008b2c:	b005      	add	sp, #20
 8008b2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b32:	f005 b881 	b.w	800dc38 <GUI__RegisterExit>
 8008b36:	b005      	add	sp, #20
 8008b38:	bd30      	pop	{r4, r5, pc}
 8008b3a:	bf00      	nop
 8008b3c:	2000844c 	.word	0x2000844c
 8008b40:	200287d4 	.word	0x200287d4
 8008b44:	20008440 	.word	0x20008440
 8008b48:	200002c4 	.word	0x200002c4
 8008b4c:	20028810 	.word	0x20028810
 8008b50:	200287dc 	.word	0x200287dc
 8008b54:	08008a25 	.word	0x08008a25
 8008b58:	20028818 	.word	0x20028818
 8008b5c:	200287cc 	.word	0x200287cc
 8008b60:	20028930 	.word	0x20028930
 8008b64:	20028940 	.word	0x20028940
 8008b68:	20028920 	.word	0x20028920
 8008b6c:	20028938 	.word	0x20028938
 8008b70:	20028948 	.word	0x20028948
 8008b74:	20028928 	.word	0x20028928
 8008b78:	20008444 	.word	0x20008444
 8008b7c:	08007801 	.word	0x08007801

08008b80 <_CreateStaticDevice>:
 8008b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b84:	b087      	sub	sp, #28
 8008b86:	4604      	mov	r4, r0
 8008b88:	f005 fbf6 	bl	800e378 <GUI_ALLOC_LockH>
 8008b8c:	af06      	add	r7, sp, #24
 8008b8e:	f8b0 8000 	ldrh.w	r8, [r0]
 8008b92:	8886      	ldrh	r6, [r0, #4]
 8008b94:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 8008b98:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 8008b9c:	f847 0d04 	str.w	r0, [r7, #-4]!
 8008ba0:	fa0f f888 	sxth.w	r8, r8
 8008ba4:	b236      	sxth	r6, r6
 8008ba6:	ebc8 0606 	rsb	r6, r8, r6
 8008baa:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8008bae:	3601      	adds	r6, #1
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	fa0f f989 	sxth.w	r9, r9
 8008bb6:	fa0f f58b 	sxth.w	r5, fp
 8008bba:	f005 fbeb 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008bbe:	ebc9 0505 	rsb	r5, r9, r5
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	f105 0501 	add.w	r5, r5, #1
 8008bc8:	dd4d      	ble.n	8008c66 <_CreateStaticDevice+0xe6>
 8008bca:	2d00      	cmp	r5, #0
 8008bcc:	dd4b      	ble.n	8008c66 <_CreateStaticDevice+0xe6>
 8008bce:	f1ba 0f00 	cmp.w	sl, #0
 8008bd2:	d04a      	beq.n	8008c6a <_CreateStaticDevice+0xea>
 8008bd4:	4650      	mov	r0, sl
 8008bd6:	f005 fbcf 	bl	800e378 <GUI_ALLOC_LockH>
 8008bda:	ab06      	add	r3, sp, #24
 8008bdc:	8886      	ldrh	r6, [r0, #4]
 8008bde:	f843 0d08 	str.w	r0, [r3, #-8]!
 8008be2:	88c5      	ldrh	r5, [r0, #6]
 8008be4:	b236      	sxth	r6, r6
 8008be6:	4618      	mov	r0, r3
 8008be8:	f005 fbd4 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008bec:	4546      	cmp	r6, r8
 8008bee:	d102      	bne.n	8008bf6 <_CreateStaticDevice+0x76>
 8008bf0:	b22d      	sxth	r5, r5
 8008bf2:	454d      	cmp	r5, r9
 8008bf4:	d032      	beq.n	8008c5c <_CreateStaticDevice+0xdc>
 8008bf6:	4650      	mov	r0, sl
 8008bf8:	4641      	mov	r1, r8
 8008bfa:	464a      	mov	r2, r9
 8008bfc:	f000 f886 	bl	8008d0c <GUI_MEMDEV_SetOrg>
 8008c00:	e02c      	b.n	8008c5c <_CreateStaticDevice+0xdc>
 8008c02:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c08:	6283      	str	r3, [r0, #40]	; 0x28
 8008c0a:	4638      	mov	r0, r7
 8008c0c:	f005 fbc2 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008c10:	4640      	mov	r0, r8
 8008c12:	f000 ff99 	bl	8009b48 <GUI_MEMDEV_Select>
 8008c16:	4607      	mov	r7, r0
 8008c18:	4650      	mov	r0, sl
 8008c1a:	f003 ffd1 	bl	800cbc0 <GUI__AlphaSuppressMixing>
 8008c1e:	4640      	mov	r0, r8
 8008c20:	f000 f8c0 	bl	8008da4 <GUI_MEMDEV_GetDataPtr>
 8008c24:	4b2d      	ldr	r3, [pc, #180]	; (8008cdc <_CreateStaticDevice+0x15c>)
 8008c26:	fb05 f206 	mul.w	r2, r5, r6
 8008c2a:	7819      	ldrb	r1, [r3, #0]
 8008c2c:	4d2c      	ldr	r5, [pc, #176]	; (8008ce0 <_CreateStaticDevice+0x160>)
 8008c2e:	4e2d      	ldr	r6, [pc, #180]	; (8008ce4 <_CreateStaticDevice+0x164>)
 8008c30:	0092      	lsls	r2, r2, #2
 8008c32:	f003 f90a 	bl	800be4a <GUI__memset>
 8008c36:	4620      	mov	r0, r4
 8008c38:	f8d5 8000 	ldr.w	r8, [r5]
 8008c3c:	6034      	str	r4, [r6, #0]
 8008c3e:	f7fe fd13 	bl	8007668 <WM_GetWindowOrgX>
 8008c42:	6028      	str	r0, [r5, #0]
 8008c44:	4620      	mov	r0, r4
 8008c46:	f7ff fd55 	bl	80086f4 <WM__Paint1>
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	f8c5 8000 	str.w	r8, [r5]
 8008c50:	6030      	str	r0, [r6, #0]
 8008c52:	f003 ffb5 	bl	800cbc0 <GUI__AlphaSuppressMixing>
 8008c56:	4638      	mov	r0, r7
 8008c58:	f000 ff76 	bl	8009b48 <GUI_MEMDEV_Select>
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f005 fb81 	bl	800e364 <GUI_ALLOC_h2p>
 8008c62:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008c64:	e037      	b.n	8008cd6 <_CreateStaticDevice+0x156>
 8008c66:	2000      	movs	r0, #0
 8008c68:	e035      	b.n	8008cd6 <_CreateStaticDevice+0x156>
 8008c6a:	f7fe fd39 	bl	80076e0 <WM_GetDesktopWindow>
 8008c6e:	4284      	cmp	r4, r0
 8008c70:	d112      	bne.n	8008c98 <_CreateStaticDevice+0x118>
 8008c72:	f002 fcd5 	bl	800b620 <LCD_GetXSize>
 8008c76:	4682      	mov	sl, r0
 8008c78:	f002 fcda 	bl	800b630 <LCD_GetYSize>
 8008c7c:	4556      	cmp	r6, sl
 8008c7e:	dc02      	bgt.n	8008c86 <_CreateStaticDevice+0x106>
 8008c80:	4285      	cmp	r5, r0
 8008c82:	dd09      	ble.n	8008c98 <_CreateStaticDevice+0x118>
 8008c84:	e000      	b.n	8008c88 <_CreateStaticDevice+0x108>
 8008c86:	4656      	mov	r6, sl
 8008c88:	4285      	cmp	r5, r0
 8008c8a:	bfa8      	it	ge
 8008c8c:	4605      	movge	r5, r0
 8008c8e:	4631      	mov	r1, r6
 8008c90:	4620      	mov	r0, r4
 8008c92:	462a      	mov	r2, r5
 8008c94:	f7fe f9b0 	bl	8006ff8 <WM_SetSize>
 8008c98:	4b13      	ldr	r3, [pc, #76]	; (8008ce8 <_CreateStaticDevice+0x168>)
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	f04f 0a01 	mov.w	sl, #1
 8008ca0:	4b12      	ldr	r3, [pc, #72]	; (8008cec <_CreateStaticDevice+0x16c>)
 8008ca2:	9302      	str	r3, [sp, #8]
 8008ca4:	4640      	mov	r0, r8
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	4632      	mov	r2, r6
 8008caa:	462b      	mov	r3, r5
 8008cac:	f8cd a000 	str.w	sl, [sp]
 8008cb0:	f000 fe48 	bl	8009944 <GUI_MEMDEV__CreateFixed>
 8008cb4:	4680      	mov	r8, r0
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	f005 fb5e 	bl	800e378 <GUI_ALLOC_LockH>
 8008cbc:	9005      	str	r0, [sp, #20]
 8008cbe:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 8008cc2:	f1b8 0f00 	cmp.w	r8, #0
 8008cc6:	d19c      	bne.n	8008c02 <_CreateStaticDevice+0x82>
 8008cc8:	4638      	mov	r0, r7
 8008cca:	f005 fb63 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f7ff fd10 	bl	80086f4 <WM__Paint1>
 8008cd4:	4640      	mov	r0, r8
 8008cd6:	b007      	add	sp, #28
 8008cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cdc:	2000029c 	.word	0x2000029c
 8008ce0:	20028824 	.word	0x20028824
 8008ce4:	200287c8 	.word	0x200287c8
 8008ce8:	08064b0c 	.word	0x08064b0c
 8008cec:	08067058 	.word	0x08067058

08008cf0 <GUI_MEMDEV_Paint1Static>:
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	4605      	mov	r5, r0
 8008cf4:	2405      	movs	r4, #5
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	f7ff ff42 	bl	8008b80 <_CreateStaticDevice>
 8008cfc:	b910      	cbnz	r0, 8008d04 <GUI_MEMDEV_Paint1Static+0x14>
 8008cfe:	3c01      	subs	r4, #1
 8008d00:	d1f9      	bne.n	8008cf6 <GUI_MEMDEV_Paint1Static+0x6>
 8008d02:	bd38      	pop	{r3, r4, r5, pc}
 8008d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d08:	f007 bfe8 	b.w	8010cdc <GUI_MEMDEV_Write>

08008d0c <GUI_MEMDEV_SetOrg>:
 8008d0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d0e:	460d      	mov	r5, r1
 8008d10:	4616      	mov	r6, r2
 8008d12:	4604      	mov	r4, r0
 8008d14:	b918      	cbnz	r0, 8008d1e <GUI_MEMDEV_SetOrg+0x12>
 8008d16:	4b14      	ldr	r3, [pc, #80]	; (8008d68 <GUI_MEMDEV_SetOrg+0x5c>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8008d1c:	b314      	cbz	r4, 8008d64 <GUI_MEMDEV_SetOrg+0x58>
 8008d1e:	f003 fe47 	bl	800c9b0 <GUI_Lock>
 8008d22:	4620      	mov	r0, r4
 8008d24:	f005 fb28 	bl	800e378 <GUI_ALLOC_LockH>
 8008d28:	b2b4      	uxth	r4, r6
 8008d2a:	b2ad      	uxth	r5, r5
 8008d2c:	80c4      	strh	r4, [r0, #6]
 8008d2e:	8085      	strh	r5, [r0, #4]
 8008d30:	9000      	str	r0, [sp, #0]
 8008d32:	f002 ffbf 	bl	800bcb4 <LCD_SetClipRectMax>
 8008d36:	9b00      	ldr	r3, [sp, #0]
 8008d38:	6958      	ldr	r0, [r3, #20]
 8008d3a:	b170      	cbz	r0, 8008d5a <GUI_MEMDEV_SetOrg+0x4e>
 8008d3c:	f005 fb1c 	bl	800e378 <GUI_ALLOC_LockH>
 8008d40:	9b00      	ldr	r3, [sp, #0]
 8008d42:	9001      	str	r0, [sp, #4]
 8008d44:	891a      	ldrh	r2, [r3, #8]
 8008d46:	895b      	ldrh	r3, [r3, #10]
 8008d48:	8082      	strh	r2, [r0, #4]
 8008d4a:	80c3      	strh	r3, [r0, #6]
 8008d4c:	b112      	cbz	r2, 8008d54 <GUI_MEMDEV_SetOrg+0x48>
 8008d4e:	b10b      	cbz	r3, 8008d54 <GUI_MEMDEV_SetOrg+0x48>
 8008d50:	8005      	strh	r5, [r0, #0]
 8008d52:	8044      	strh	r4, [r0, #2]
 8008d54:	a801      	add	r0, sp, #4
 8008d56:	f005 fb1d 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008d5a:	4668      	mov	r0, sp
 8008d5c:	f005 fb1a 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008d60:	f003 fe1c 	bl	800c99c <GUI_Unlock>
 8008d64:	b002      	add	sp, #8
 8008d66:	bd70      	pop	{r4, r5, r6, pc}
 8008d68:	200002c4 	.word	0x200002c4

08008d6c <GUI_MEMDEV_GetYSize>:
 8008d6c:	b513      	push	{r0, r1, r4, lr}
 8008d6e:	4604      	mov	r4, r0
 8008d70:	f003 fe1e 	bl	800c9b0 <GUI_Lock>
 8008d74:	b91c      	cbnz	r4, 8008d7e <GUI_MEMDEV_GetYSize+0x12>
 8008d76:	4b0a      	ldr	r3, [pc, #40]	; (8008da0 <GUI_MEMDEV_GetYSize+0x34>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8008d7c:	b154      	cbz	r4, 8008d94 <GUI_MEMDEV_GetYSize+0x28>
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f005 fafa 	bl	800e378 <GUI_ALLOC_LockH>
 8008d84:	ab02      	add	r3, sp, #8
 8008d86:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 8008d8a:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f005 fb00 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008d94:	f003 fe02 	bl	800c99c <GUI_Unlock>
 8008d98:	4620      	mov	r0, r4
 8008d9a:	b002      	add	sp, #8
 8008d9c:	bd10      	pop	{r4, pc}
 8008d9e:	bf00      	nop
 8008da0:	200002c4 	.word	0x200002c4

08008da4 <GUI_MEMDEV_GetDataPtr>:
 8008da4:	b513      	push	{r0, r1, r4, lr}
 8008da6:	4604      	mov	r4, r0
 8008da8:	b178      	cbz	r0, 8008dca <GUI_MEMDEV_GetDataPtr+0x26>
 8008daa:	f003 fe01 	bl	800c9b0 <GUI_Lock>
 8008dae:	4620      	mov	r0, r4
 8008db0:	f005 fae2 	bl	800e378 <GUI_ALLOC_LockH>
 8008db4:	4604      	mov	r4, r0
 8008db6:	a802      	add	r0, sp, #8
 8008db8:	f840 4d04 	str.w	r4, [r0, #-4]!
 8008dbc:	f005 faea 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008dc0:	f003 fdec 	bl	800c99c <GUI_Unlock>
 8008dc4:	f104 0018 	add.w	r0, r4, #24
 8008dc8:	e7ff      	b.n	8008dca <GUI_MEMDEV_GetDataPtr+0x26>
 8008dca:	b002      	add	sp, #8
 8008dcc:	bd10      	pop	{r4, pc}
	...

08008dd0 <GUI_MEMDEV_Draw>:
 8008dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd4:	4698      	mov	r8, r3
 8008dd6:	4b47      	ldr	r3, [pc, #284]	; (8008ef4 <GUI_MEMDEV_Draw+0x124>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	7c5c      	ldrb	r4, [r3, #17]
 8008ddc:	4b46      	ldr	r3, [pc, #280]	; (8008ef8 <GUI_MEMDEV_Draw+0x128>)
 8008dde:	571b      	ldrsb	r3, [r3, r4]
 8008de0:	b087      	sub	sp, #28
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	4605      	mov	r5, r0
 8008de6:	9102      	str	r1, [sp, #8]
 8008de8:	4693      	mov	fp, r2
 8008dea:	4620      	mov	r0, r4
 8008dec:	dd06      	ble.n	8008dfc <GUI_MEMDEV_Draw+0x2c>
 8008dee:	f002 fbfb 	bl	800b5e8 <LCD_GetXSizeEx>
 8008df2:	4606      	mov	r6, r0
 8008df4:	4620      	mov	r0, r4
 8008df6:	f002 fbfa 	bl	800b5ee <LCD_GetYSizeEx>
 8008dfa:	e005      	b.n	8008e08 <GUI_MEMDEV_Draw+0x38>
 8008dfc:	f002 fbfa 	bl	800b5f4 <LCD_GetVXSizeEx>
 8008e00:	4606      	mov	r6, r0
 8008e02:	4620      	mov	r0, r4
 8008e04:	f002 fbf9 	bl	800b5fa <LCD_GetVYSizeEx>
 8008e08:	4604      	mov	r4, r0
 8008e0a:	b325      	cbz	r5, 8008e56 <GUI_MEMDEV_Draw+0x86>
 8008e0c:	a804      	add	r0, sp, #16
 8008e0e:	a905      	add	r1, sp, #20
 8008e10:	f004 f930 	bl	800d074 <GUI_GetOrg>
 8008e14:	9b04      	ldr	r3, [sp, #16]
 8008e16:	f9b5 9000 	ldrsh.w	r9, [r5]
 8008e1a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8008e1e:	f9b5 7002 	ldrsh.w	r7, [r5, #2]
 8008e22:	441e      	add	r6, r3
 8008e24:	9b05      	ldr	r3, [sp, #20]
 8008e26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e2a:	3e01      	subs	r6, #1
 8008e2c:	4296      	cmp	r6, r2
 8008e2e:	bfd4      	ite	le
 8008e30:	ebc9 0606 	rsble	r6, r9, r6
 8008e34:	ebc9 0602 	rsbgt	r6, r9, r2
 8008e38:	441c      	add	r4, r3
 8008e3a:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8008e3e:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8008e42:	3c01      	subs	r4, #1
 8008e44:	4294      	cmp	r4, r2
 8008e46:	bfd4      	ite	le
 8008e48:	ebc7 0404 	rsble	r4, r7, r4
 8008e4c:	ebc7 0402 	rsbgt	r4, r7, r2
 8008e50:	3601      	adds	r6, #1
 8008e52:	3401      	adds	r4, #1
 8008e54:	e001      	b.n	8008e5a <GUI_MEMDEV_Draw+0x8a>
 8008e56:	462f      	mov	r7, r5
 8008e58:	46a9      	mov	r9, r5
 8008e5a:	f1b8 0f00 	cmp.w	r8, #0
 8008e5e:	d101      	bne.n	8008e64 <GUI_MEMDEV_Draw+0x94>
 8008e60:	f1c4 0800 	rsb	r8, r4, #0
 8008e64:	2e00      	cmp	r6, #0
 8008e66:	dd40      	ble.n	8008eea <GUI_MEMDEV_Draw+0x11a>
 8008e68:	2c00      	cmp	r4, #0
 8008e6a:	dd3e      	ble.n	8008eea <GUI_MEMDEV_Draw+0x11a>
 8008e6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	4648      	mov	r0, r9
 8008e72:	4639      	mov	r1, r7
 8008e74:	4632      	mov	r2, r6
 8008e76:	4643      	mov	r3, r8
 8008e78:	f000 fe28 	bl	8009acc <GUI_MEMDEV_CreateEx>
 8008e7c:	4605      	mov	r5, r0
 8008e7e:	b920      	cbnz	r0, 8008e8a <GUI_MEMDEV_Draw+0xba>
 8008e80:	4658      	mov	r0, fp
 8008e82:	9b02      	ldr	r3, [sp, #8]
 8008e84:	4798      	blx	r3
 8008e86:	2001      	movs	r0, #1
 8008e88:	e030      	b.n	8008eec <GUI_MEMDEV_Draw+0x11c>
 8008e8a:	f7ff ff6f 	bl	8008d6c <GUI_MEMDEV_GetYSize>
 8008e8e:	4682      	mov	sl, r0
 8008e90:	4628      	mov	r0, r5
 8008e92:	f000 fe59 	bl	8009b48 <GUI_MEMDEV_Select>
 8008e96:	f1ca 0300 	rsb	r3, sl, #0
 8008e9a:	9303      	str	r3, [sp, #12]
 8008e9c:	46a0      	mov	r8, r4
 8008e9e:	2600      	movs	r6, #0
 8008ea0:	45d0      	cmp	r8, sl
 8008ea2:	da03      	bge.n	8008eac <GUI_MEMDEV_Draw+0xdc>
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	4641      	mov	r1, r8
 8008ea8:	f008 f820 	bl	8010eec <GUI_MEMDEV_ReduceYSize>
 8008eac:	b13e      	cbz	r6, 8008ebe <GUI_MEMDEV_Draw+0xee>
 8008eae:	4628      	mov	r0, r5
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	19f2      	adds	r2, r6, r7
 8008eb4:	f7ff ff2a 	bl	8008d0c <GUI_MEMDEV_SetOrg>
 8008eb8:	4628      	mov	r0, r5
 8008eba:	f008 f833 	bl	8010f24 <GUI_MEMDEV_Clear>
 8008ebe:	9b02      	ldr	r3, [sp, #8]
 8008ec0:	4658      	mov	r0, fp
 8008ec2:	4798      	blx	r3
 8008ec4:	4b0d      	ldr	r3, [pc, #52]	; (8008efc <GUI_MEMDEV_Draw+0x12c>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	b10b      	cbz	r3, 8008ece <GUI_MEMDEV_Draw+0xfe>
 8008eca:	2000      	movs	r0, #0
 8008ecc:	4798      	blx	r3
 8008ece:	4628      	mov	r0, r5
 8008ed0:	f000 feba 	bl	8009c48 <GUI_MEMDEV_CopyToLCD>
 8008ed4:	4456      	add	r6, sl
 8008ed6:	9b03      	ldr	r3, [sp, #12]
 8008ed8:	42a6      	cmp	r6, r4
 8008eda:	4498      	add	r8, r3
 8008edc:	dbe0      	blt.n	8008ea0 <GUI_MEMDEV_Draw+0xd0>
 8008ede:	4628      	mov	r0, r5
 8008ee0:	f000 fdce 	bl	8009a80 <GUI_MEMDEV_Delete>
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	f000 fe2f 	bl	8009b48 <GUI_MEMDEV_Select>
 8008eea:	2000      	movs	r0, #0
 8008eec:	b007      	add	sp, #28
 8008eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef2:	bf00      	nop
 8008ef4:	200002c4 	.word	0x200002c4
 8008ef8:	20028856 	.word	0x20028856
 8008efc:	20008450 	.word	0x20008450

08008f00 <_GetDevData>:
 8008f00:	4802      	ldr	r0, [pc, #8]	; (8008f0c <_GetDevData+0xc>)
 8008f02:	2901      	cmp	r1, #1
 8008f04:	bf18      	it	ne
 8008f06:	2000      	movne	r0, #0
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	08064b0c 	.word	0x08064b0c

08008f10 <_GetDevFunc>:
 8008f10:	4802      	ldr	r0, [pc, #8]	; (8008f1c <_GetDevFunc+0xc>)
 8008f12:	2916      	cmp	r1, #22
 8008f14:	bf18      	it	ne
 8008f16:	2000      	movne	r0, #0
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	08010ae1 	.word	0x08010ae1

08008f20 <_GetDevProp>:
 8008f20:	2908      	cmp	r1, #8
 8008f22:	bf0c      	ite	eq
 8008f24:	2020      	moveq	r0, #32
 8008f26:	2000      	movne	r0, #0
 8008f28:	4770      	bx	lr

08008f2a <_SetOrg>:
 8008f2a:	b508      	push	{r3, lr}
 8008f2c:	6800      	ldr	r0, [r0, #0]
 8008f2e:	68c3      	ldr	r3, [r0, #12]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	4798      	blx	r3
 8008f34:	bd08      	pop	{r3, pc}

08008f36 <_GetRect>:
 8008f36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f38:	6880      	ldr	r0, [r0, #8]
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	f005 fa1c 	bl	800e378 <GUI_ALLOC_LockH>
 8008f40:	4603      	mov	r3, r0
 8008f42:	a802      	add	r0, sp, #8
 8008f44:	8899      	ldrh	r1, [r3, #4]
 8008f46:	88da      	ldrh	r2, [r3, #6]
 8008f48:	891d      	ldrh	r5, [r3, #8]
 8008f4a:	f840 3d04 	str.w	r3, [r0, #-4]!
 8008f4e:	895b      	ldrh	r3, [r3, #10]
 8008f50:	8021      	strh	r1, [r4, #0]
 8008f52:	8062      	strh	r2, [r4, #2]
 8008f54:	4429      	add	r1, r5
 8008f56:	441a      	add	r2, r3
 8008f58:	3901      	subs	r1, #1
 8008f5a:	3a01      	subs	r2, #1
 8008f5c:	80a1      	strh	r1, [r4, #4]
 8008f5e:	80e2      	strh	r2, [r4, #6]
 8008f60:	f005 fa18 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008f64:	b003      	add	sp, #12
 8008f66:	bd30      	pop	{r4, r5, pc}

08008f68 <_XY2PTR>:
 8008f68:	4b0e      	ldr	r3, [pc, #56]	; (8008fa4 <_XY2PTR+0x3c>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f6e:	4605      	mov	r5, r0
 8008f70:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8008f72:	460e      	mov	r6, r1
 8008f74:	f005 fa00 	bl	800e378 <GUI_ALLOC_LockH>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	a802      	add	r0, sp, #8
 8008f7c:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8008f80:	f840 3d04 	str.w	r3, [r0, #-4]!
 8008f84:	f103 0118 	add.w	r1, r3, #24
 8008f88:	1b36      	subs	r6, r6, r4
 8008f8a:	68dc      	ldr	r4, [r3, #12]
 8008f8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008f90:	fb04 1406 	mla	r4, r4, r6, r1
 8008f94:	1aed      	subs	r5, r5, r3
 8008f96:	f005 f9fd 	bl	800e394 <GUI_ALLOC_UnlockH>
 8008f9a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	b002      	add	sp, #8
 8008fa2:	bd70      	pop	{r4, r5, r6, pc}
 8008fa4:	200002c4 	.word	0x200002c4

08008fa8 <_GetPixelIndex>:
 8008fa8:	b508      	push	{r3, lr}
 8008faa:	4608      	mov	r0, r1
 8008fac:	4611      	mov	r1, r2
 8008fae:	f7ff ffdb 	bl	8008f68 <_XY2PTR>
 8008fb2:	6800      	ldr	r0, [r0, #0]
 8008fb4:	bd08      	pop	{r3, pc}
	...

08008fb8 <_XorPixel>:
 8008fb8:	4b15      	ldr	r3, [pc, #84]	; (8009010 <_XorPixel+0x58>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fbe:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8008fc0:	4615      	mov	r5, r2
 8008fc2:	460e      	mov	r6, r1
 8008fc4:	f005 f9d8 	bl	800e378 <GUI_ALLOC_LockH>
 8008fc8:	4629      	mov	r1, r5
 8008fca:	9000      	str	r0, [sp, #0]
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f7ff ffcb 	bl	8008f68 <_XY2PTR>
 8008fd2:	9b00      	ldr	r3, [sp, #0]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	4604      	mov	r4, r0
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	4798      	blx	r3
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	4058      	eors	r0, r3
 8008fe2:	9b00      	ldr	r3, [sp, #0]
 8008fe4:	6020      	str	r0, [r4, #0]
 8008fe6:	6958      	ldr	r0, [r3, #20]
 8008fe8:	b160      	cbz	r0, 8009004 <_XorPixel+0x4c>
 8008fea:	f005 f9c5 	bl	800e378 <GUI_ALLOC_LockH>
 8008fee:	ac02      	add	r4, sp, #8
 8008ff0:	6883      	ldr	r3, [r0, #8]
 8008ff2:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4631      	mov	r1, r6
 8008ffa:	462a      	mov	r2, r5
 8008ffc:	4798      	blx	r3
 8008ffe:	4620      	mov	r0, r4
 8009000:	f005 f9c8 	bl	800e394 <GUI_ALLOC_UnlockH>
 8009004:	4668      	mov	r0, sp
 8009006:	f005 f9c5 	bl	800e394 <GUI_ALLOC_UnlockH>
 800900a:	b002      	add	sp, #8
 800900c:	bd70      	pop	{r4, r5, r6, pc}
 800900e:	bf00      	nop
 8009010:	200002c4 	.word	0x200002c4

08009014 <_SetPixelIndex>:
 8009014:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009016:	461c      	mov	r4, r3
 8009018:	4b10      	ldr	r3, [pc, #64]	; (800905c <_SetPixelIndex+0x48>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800901e:	460e      	mov	r6, r1
 8009020:	4615      	mov	r5, r2
 8009022:	f005 f9a9 	bl	800e378 <GUI_ALLOC_LockH>
 8009026:	4629      	mov	r1, r5
 8009028:	9000      	str	r0, [sp, #0]
 800902a:	4630      	mov	r0, r6
 800902c:	f7ff ff9c 	bl	8008f68 <_XY2PTR>
 8009030:	9b00      	ldr	r3, [sp, #0]
 8009032:	6004      	str	r4, [r0, #0]
 8009034:	6958      	ldr	r0, [r3, #20]
 8009036:	b160      	cbz	r0, 8009052 <_SetPixelIndex+0x3e>
 8009038:	f005 f99e 	bl	800e378 <GUI_ALLOC_LockH>
 800903c:	ac02      	add	r4, sp, #8
 800903e:	6883      	ldr	r3, [r0, #8]
 8009040:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4631      	mov	r1, r6
 8009048:	462a      	mov	r2, r5
 800904a:	4798      	blx	r3
 800904c:	4620      	mov	r0, r4
 800904e:	f005 f9a1 	bl	800e394 <GUI_ALLOC_UnlockH>
 8009052:	4668      	mov	r0, sp
 8009054:	f005 f99e 	bl	800e394 <GUI_ALLOC_UnlockH>
 8009058:	b002      	add	sp, #8
 800905a:	bd70      	pop	{r4, r5, r6, pc}
 800905c:	200002c4 	.word	0x200002c4

08009060 <_DrawVLine>:
 8009060:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009064:	4d2c      	ldr	r5, [pc, #176]	; (8009118 <_DrawVLine+0xb8>)
 8009066:	461e      	mov	r6, r3
 8009068:	682b      	ldr	r3, [r5, #0]
 800906a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800906c:	460f      	mov	r7, r1
 800906e:	4614      	mov	r4, r2
 8009070:	f005 f982 	bl	800e378 <GUI_ALLOC_LockH>
 8009074:	9000      	str	r0, [sp, #0]
 8009076:	6940      	ldr	r0, [r0, #20]
 8009078:	46a9      	mov	r9, r5
 800907a:	b108      	cbz	r0, 8009080 <_DrawVLine+0x20>
 800907c:	f005 f97c 	bl	800e378 <GUI_ALLOC_LockH>
 8009080:	9001      	str	r0, [sp, #4]
 8009082:	4621      	mov	r1, r4
 8009084:	4638      	mov	r0, r7
 8009086:	f7ff ff6f 	bl	8008f68 <_XY2PTR>
 800908a:	f8d9 2000 	ldr.w	r2, [r9]
 800908e:	9b00      	ldr	r3, [sp, #0]
 8009090:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8009092:	7c12      	ldrb	r2, [r2, #16]
 8009094:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8009098:	f8d1 9000 	ldr.w	r9, [r1]
 800909c:	07d2      	lsls	r2, r2, #31
 800909e:	4605      	mov	r5, r0
 80090a0:	d51f      	bpl.n	80090e2 <_DrawVLine+0x82>
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	4798      	blx	r3
 80090aa:	4680      	mov	r8, r0
 80090ac:	9801      	ldr	r0, [sp, #4]
 80090ae:	b128      	cbz	r0, 80090bc <_DrawVLine+0x5c>
 80090b0:	6882      	ldr	r2, [r0, #8]
 80090b2:	4639      	mov	r1, r7
 80090b4:	f8d2 c000 	ldr.w	ip, [r2]
 80090b8:	4622      	mov	r2, r4
 80090ba:	47e0      	blx	ip
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	ea83 0308 	eor.w	r3, r3, r8
 80090c2:	602b      	str	r3, [r5, #0]
 80090c4:	9b00      	ldr	r3, [sp, #0]
 80090c6:	3401      	adds	r4, #1
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	42b4      	cmp	r4, r6
 80090cc:	441d      	add	r5, r3
 80090ce:	dded      	ble.n	80090ac <_DrawVLine+0x4c>
 80090d0:	4668      	mov	r0, sp
 80090d2:	f005 f95f 	bl	800e394 <GUI_ALLOC_UnlockH>
 80090d6:	9b01      	ldr	r3, [sp, #4]
 80090d8:	b1d3      	cbz	r3, 8009110 <_DrawVLine+0xb0>
 80090da:	a801      	add	r0, sp, #4
 80090dc:	f005 f95a 	bl	800e394 <GUI_ALLOC_UnlockH>
 80090e0:	e016      	b.n	8009110 <_DrawVLine+0xb0>
 80090e2:	9b01      	ldr	r3, [sp, #4]
 80090e4:	b163      	cbz	r3, 8009100 <_DrawVLine+0xa0>
 80090e6:	9801      	ldr	r0, [sp, #4]
 80090e8:	6883      	ldr	r3, [r0, #8]
 80090ea:	4622      	mov	r2, r4
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4639      	mov	r1, r7
 80090f0:	3401      	adds	r4, #1
 80090f2:	4798      	blx	r3
 80090f4:	42b4      	cmp	r4, r6
 80090f6:	f8c5 9000 	str.w	r9, [r5]
 80090fa:	4445      	add	r5, r8
 80090fc:	ddf3      	ble.n	80090e6 <_DrawVLine+0x86>
 80090fe:	e7e7      	b.n	80090d0 <_DrawVLine+0x70>
 8009100:	1b34      	subs	r4, r6, r4
 8009102:	3401      	adds	r4, #1
 8009104:	3c01      	subs	r4, #1
 8009106:	f8c5 9000 	str.w	r9, [r5]
 800910a:	4445      	add	r5, r8
 800910c:	d1fa      	bne.n	8009104 <_DrawVLine+0xa4>
 800910e:	e7df      	b.n	80090d0 <_DrawVLine+0x70>
 8009110:	b003      	add	sp, #12
 8009112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009116:	bf00      	nop
 8009118:	200002c4 	.word	0x200002c4

0800911c <_FillRect>:
 800911c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009120:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80091d0 <_FillRect+0xb4>
 8009124:	4614      	mov	r4, r2
 8009126:	f8db 2000 	ldr.w	r2, [fp]
 800912a:	b085      	sub	sp, #20
 800912c:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800912e:	460f      	mov	r7, r1
 8009130:	461d      	mov	r5, r3
 8009132:	f005 f921 	bl	800e378 <GUI_ALLOC_LockH>
 8009136:	4621      	mov	r1, r4
 8009138:	9002      	str	r0, [sp, #8]
 800913a:	4638      	mov	r0, r7
 800913c:	f7ff ff14 	bl	8008f68 <_XY2PTR>
 8009140:	9a02      	ldr	r2, [sp, #8]
 8009142:	f8db 3000 	ldr.w	r3, [fp]
 8009146:	f8d2 900c 	ldr.w	r9, [r2, #12]
 800914a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800914c:	4606      	mov	r6, r0
 800914e:	6950      	ldr	r0, [r2, #20]
 8009150:	f8d3 a000 	ldr.w	sl, [r3]
 8009154:	1bed      	subs	r5, r5, r7
 8009156:	3501      	adds	r5, #1
 8009158:	b338      	cbz	r0, 80091aa <_FillRect+0x8e>
 800915a:	f005 f90d 	bl	800e378 <GUI_ALLOC_LockH>
 800915e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009160:	f10d 0810 	add.w	r8, sp, #16
 8009164:	1b13      	subs	r3, r2, r4
 8009166:	f848 0d04 	str.w	r0, [r8, #-4]!
 800916a:	3301      	adds	r3, #1
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	4639      	mov	r1, r7
 8009170:	4622      	mov	r2, r4
 8009172:	462b      	mov	r3, r5
 8009174:	f007 fea5 	bl	8010ec2 <GUI_USAGE_AddRect>
 8009178:	4640      	mov	r0, r8
 800917a:	f005 f90b 	bl	800e394 <GUI_ALLOC_UnlockH>
 800917e:	e014      	b.n	80091aa <_FillRect+0x8e>
 8009180:	f8db 3000 	ldr.w	r3, [fp]
 8009184:	7c1b      	ldrb	r3, [r3, #16]
 8009186:	07db      	lsls	r3, r3, #31
 8009188:	d513      	bpl.n	80091b2 <_FillRect+0x96>
 800918a:	9b02      	ldr	r3, [sp, #8]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	4798      	blx	r3
 8009194:	4632      	mov	r2, r6
 8009196:	462b      	mov	r3, r5
 8009198:	6811      	ldr	r1, [r2, #0]
 800919a:	3b01      	subs	r3, #1
 800919c:	ea81 0100 	eor.w	r1, r1, r0
 80091a0:	f842 1b04 	str.w	r1, [r2], #4
 80091a4:	d1f8      	bne.n	8009198 <_FillRect+0x7c>
 80091a6:	444e      	add	r6, r9
 80091a8:	3401      	adds	r4, #1
 80091aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091ac:	429c      	cmp	r4, r3
 80091ae:	dde7      	ble.n	8009180 <_FillRect+0x64>
 80091b0:	e008      	b.n	80091c4 <_FillRect+0xa8>
 80091b2:	2d00      	cmp	r5, #0
 80091b4:	ddf7      	ble.n	80091a6 <_FillRect+0x8a>
 80091b6:	462b      	mov	r3, r5
 80091b8:	4632      	mov	r2, r6
 80091ba:	3b01      	subs	r3, #1
 80091bc:	f842 ab04 	str.w	sl, [r2], #4
 80091c0:	d1fb      	bne.n	80091ba <_FillRect+0x9e>
 80091c2:	e7f0      	b.n	80091a6 <_FillRect+0x8a>
 80091c4:	a802      	add	r0, sp, #8
 80091c6:	f005 f8e5 	bl	800e394 <GUI_ALLOC_UnlockH>
 80091ca:	b005      	add	sp, #20
 80091cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d0:	200002c4 	.word	0x200002c4

080091d4 <_DrawHLine>:
 80091d4:	b507      	push	{r0, r1, r2, lr}
 80091d6:	9200      	str	r2, [sp, #0]
 80091d8:	f7ff ffa0 	bl	800911c <_FillRect>
 80091dc:	b003      	add	sp, #12
 80091de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080091e4 <_DrawBitmap>:
 80091e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e8:	4c9e      	ldr	r4, [pc, #632]	; (8009464 <_DrawBitmap+0x280>)
 80091ea:	469a      	mov	sl, r3
 80091ec:	6823      	ldr	r3, [r4, #0]
 80091ee:	b091      	sub	sp, #68	; 0x44
 80091f0:	4680      	mov	r8, r0
 80091f2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80091f4:	9207      	str	r2, [sp, #28]
 80091f6:	460e      	mov	r6, r1
 80091f8:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 80091fc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80091fe:	2800      	cmp	r0, #0
 8009200:	f000 837f 	beq.w	8009902 <_DrawBitmap+0x71e>
 8009204:	f005 f8b8 	bl	800e378 <GUI_ALLOC_LockH>
 8009208:	900e      	str	r0, [sp, #56]	; 0x38
 800920a:	6940      	ldr	r0, [r0, #20]
 800920c:	b108      	cbz	r0, 8009212 <_DrawBitmap+0x2e>
 800920e:	f005 f8b3 	bl	800e378 <GUI_ALLOC_LockH>
 8009212:	900f      	str	r0, [sp, #60]	; 0x3c
 8009214:	a810      	add	r0, sp, #64	; 0x40
 8009216:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	930a      	str	r3, [sp, #40]	; 0x28
 800921e:	f005 f8b9 	bl	800e394 <GUI_ALLOC_UnlockH>
 8009222:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009224:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009226:	4437      	add	r7, r6
 8009228:	9704      	str	r7, [sp, #16]
 800922a:	b150      	cbz	r0, 8009242 <_DrawBitmap+0x5e>
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	7c1b      	ldrb	r3, [r3, #16]
 8009230:	079c      	lsls	r4, r3, #30
 8009232:	d406      	bmi.n	8009242 <_DrawBitmap+0x5e>
 8009234:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009236:	9700      	str	r7, [sp, #0]
 8009238:	9904      	ldr	r1, [sp, #16]
 800923a:	9a07      	ldr	r2, [sp, #28]
 800923c:	4653      	mov	r3, sl
 800923e:	f007 fe40 	bl	8010ec2 <GUI_USAGE_AddRect>
 8009242:	9804      	ldr	r0, [sp, #16]
 8009244:	9907      	ldr	r1, [sp, #28]
 8009246:	f7ff fe8f 	bl	8008f68 <_XY2PTR>
 800924a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800924c:	2f17      	cmp	r7, #23
 800924e:	4606      	mov	r6, r0
 8009250:	dd5b      	ble.n	800930a <_DrawBitmap+0x126>
 8009252:	ea4f 078a 	mov.w	r7, sl, lsl #2
 8009256:	9705      	str	r7, [sp, #20]
 8009258:	f04f 0900 	mov.w	r9, #0
 800925c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800925e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009260:	45b9      	cmp	r9, r7
 8009262:	da4e      	bge.n	8009302 <_DrawBitmap+0x11e>
 8009264:	b130      	cbz	r0, 8009274 <_DrawBitmap+0x90>
 8009266:	6883      	ldr	r3, [r0, #8]
 8009268:	9a07      	ldr	r2, [sp, #28]
 800926a:	685c      	ldr	r4, [r3, #4]
 800926c:	9904      	ldr	r1, [sp, #16]
 800926e:	444a      	add	r2, r9
 8009270:	4653      	mov	r3, sl
 8009272:	47a0      	blx	r4
 8009274:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	b12b      	cbz	r3, 8009288 <_DrawBitmap+0xa4>
 800927c:	4630      	mov	r0, r6
 800927e:	4659      	mov	r1, fp
 8009280:	9a05      	ldr	r2, [sp, #20]
 8009282:	f7f6 fff3 	bl	800026c <memcpy>
 8009286:	e035      	b.n	80092f4 <_DrawBitmap+0x110>
 8009288:	4635      	mov	r5, r6
 800928a:	4657      	mov	r7, sl
 800928c:	465c      	mov	r4, fp
 800928e:	463b      	mov	r3, r7
 8009290:	4622      	mov	r2, r4
 8009292:	f04f 0c00 	mov.w	ip, #0
 8009296:	f852 1b04 	ldr.w	r1, [r2], #4
 800929a:	0e09      	lsrs	r1, r1, #24
 800929c:	bf08      	it	eq
 800929e:	f10c 0c01 	addeq.w	ip, ip, #1
 80092a2:	3b01      	subs	r3, #1
 80092a4:	b1a1      	cbz	r1, 80092d0 <_DrawBitmap+0xec>
 80092a6:	f1bc 0f00 	cmp.w	ip, #0
 80092aa:	d014      	beq.n	80092d6 <_DrawBitmap+0xf2>
 80092ac:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80092b0:	4628      	mov	r0, r5
 80092b2:	4621      	mov	r1, r4
 80092b4:	461a      	mov	r2, r3
 80092b6:	9303      	str	r3, [sp, #12]
 80092b8:	f8cd c008 	str.w	ip, [sp, #8]
 80092bc:	f7f6 ffd6 	bl	800026c <memcpy>
 80092c0:	9b03      	ldr	r3, [sp, #12]
 80092c2:	f8dd c008 	ldr.w	ip, [sp, #8]
 80092c6:	441d      	add	r5, r3
 80092c8:	441c      	add	r4, r3
 80092ca:	ebcc 0707 	rsb	r7, ip, r7
 80092ce:	e00f      	b.n	80092f0 <_DrawBitmap+0x10c>
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e0      	bne.n	8009296 <_DrawBitmap+0xb2>
 80092d4:	e7e7      	b.n	80092a6 <_DrawBitmap+0xc2>
 80092d6:	6820      	ldr	r0, [r4, #0]
 80092d8:	0e02      	lsrs	r2, r0, #24
 80092da:	2aff      	cmp	r2, #255	; 0xff
 80092dc:	d005      	beq.n	80092ea <_DrawBitmap+0x106>
 80092de:	43d2      	mvns	r2, r2
 80092e0:	6829      	ldr	r1, [r5, #0]
 80092e2:	b2d2      	uxtb	r2, r2
 80092e4:	f003 f8d3 	bl	800c48e <GUI__MixColors>
 80092e8:	6028      	str	r0, [r5, #0]
 80092ea:	3504      	adds	r5, #4
 80092ec:	3404      	adds	r4, #4
 80092ee:	3f01      	subs	r7, #1
 80092f0:	2f00      	cmp	r7, #0
 80092f2:	d1cc      	bne.n	800928e <_DrawBitmap+0xaa>
 80092f4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80092f6:	44bb      	add	fp, r7
 80092f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80092fa:	f109 0901 	add.w	r9, r9, #1
 80092fe:	443e      	add	r6, r7
 8009300:	e7ac      	b.n	800925c <_DrawBitmap+0x78>
 8009302:	2800      	cmp	r0, #0
 8009304:	f040 82fa 	bne.w	80098fc <_DrawBitmap+0x718>
 8009308:	e2fb      	b.n	8009902 <_DrawBitmap+0x71e>
 800930a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800930c:	2f10      	cmp	r7, #16
 800930e:	d137      	bne.n	8009380 <_DrawBitmap+0x19c>
 8009310:	1f06      	subs	r6, r0, #4
 8009312:	2500      	movs	r5, #0
 8009314:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009316:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8009318:	42bd      	cmp	r5, r7
 800931a:	f280 809e 	bge.w	800945a <_DrawBitmap+0x276>
 800931e:	9f07      	ldr	r7, [sp, #28]
 8009320:	442f      	add	r7, r5
 8009322:	b13c      	cbz	r4, 8009334 <_DrawBitmap+0x150>
 8009324:	68a3      	ldr	r3, [r4, #8]
 8009326:	9904      	ldr	r1, [sp, #16]
 8009328:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800932c:	4620      	mov	r0, r4
 800932e:	463a      	mov	r2, r7
 8009330:	4653      	mov	r3, sl
 8009332:	47e0      	blx	ip
 8009334:	f1ab 0302 	sub.w	r3, fp, #2
 8009338:	9306      	str	r3, [sp, #24]
 800933a:	9605      	str	r6, [sp, #20]
 800933c:	46d1      	mov	r9, sl
 800933e:	9904      	ldr	r1, [sp, #16]
 8009340:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009344:	9a06      	ldr	r2, [sp, #24]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 800934c:	9206      	str	r2, [sp, #24]
 800934e:	4451      	add	r1, sl
 8009350:	ebc9 0101 	rsb	r1, r9, r1
 8009354:	9103      	str	r1, [sp, #12]
 8009356:	4798      	blx	r3
 8009358:	9b05      	ldr	r3, [sp, #20]
 800935a:	9903      	ldr	r1, [sp, #12]
 800935c:	f843 0f04 	str.w	r0, [r3, #4]!
 8009360:	9305      	str	r3, [sp, #20]
 8009362:	b124      	cbz	r4, 800936e <_DrawBitmap+0x18a>
 8009364:	68a3      	ldr	r3, [r4, #8]
 8009366:	4620      	mov	r0, r4
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	463a      	mov	r2, r7
 800936c:	4798      	blx	r3
 800936e:	f1b9 0901 	subs.w	r9, r9, #1
 8009372:	d1e4      	bne.n	800933e <_DrawBitmap+0x15a>
 8009374:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009376:	44bb      	add	fp, r7
 8009378:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800937a:	3501      	adds	r5, #1
 800937c:	443e      	add	r6, r7
 800937e:	e7c9      	b.n	8009314 <_DrawBitmap+0x130>
 8009380:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009382:	2f08      	cmp	r7, #8
 8009384:	f100 0604 	add.w	r6, r0, #4
 8009388:	d16e      	bne.n	8009468 <_DrawBitmap+0x284>
 800938a:	9f07      	ldr	r7, [sp, #28]
 800938c:	9a07      	ldr	r2, [sp, #28]
 800938e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009390:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8009392:	1abb      	subs	r3, r7, r2
 8009394:	428b      	cmp	r3, r1
 8009396:	f1a6 0004 	sub.w	r0, r6, #4
 800939a:	da5e      	bge.n	800945a <_DrawBitmap+0x276>
 800939c:	4b31      	ldr	r3, [pc, #196]	; (8009464 <_DrawBitmap+0x280>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	7c1b      	ldrb	r3, [r3, #16]
 80093a2:	b36d      	cbz	r5, 8009400 <_DrawBitmap+0x21c>
 80093a4:	f013 0303 	ands.w	r3, r3, #3
 80093a8:	d005      	beq.n	80093b6 <_DrawBitmap+0x1d2>
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d14f      	bne.n	800944e <_DrawBitmap+0x26a>
 80093ae:	46b1      	mov	r9, r6
 80093b0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80093b4:	e01c      	b.n	80093f0 <_DrawBitmap+0x20c>
 80093b6:	f81b 2003 	ldrb.w	r2, [fp, r3]
 80093ba:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80093be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80093c2:	3301      	adds	r3, #1
 80093c4:	4553      	cmp	r3, sl
 80093c6:	d1f6      	bne.n	80093b6 <_DrawBitmap+0x1d2>
 80093c8:	e041      	b.n	800944e <_DrawBitmap+0x26a>
 80093ca:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80093ce:	f849 3c04 	str.w	r3, [r9, #-4]
 80093d2:	b12c      	cbz	r4, 80093e0 <_DrawBitmap+0x1fc>
 80093d4:	68a3      	ldr	r3, [r4, #8]
 80093d6:	4620      	mov	r0, r4
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4641      	mov	r1, r8
 80093dc:	463a      	mov	r2, r7
 80093de:	4798      	blx	r3
 80093e0:	9b04      	ldr	r3, [sp, #16]
 80093e2:	f108 0801 	add.w	r8, r8, #1
 80093e6:	4453      	add	r3, sl
 80093e8:	4543      	cmp	r3, r8
 80093ea:	f109 0904 	add.w	r9, r9, #4
 80093ee:	d02e      	beq.n	800944e <_DrawBitmap+0x26a>
 80093f0:	9904      	ldr	r1, [sp, #16]
 80093f2:	ebc1 030b 	rsb	r3, r1, fp
 80093f6:	f813 3008 	ldrb.w	r3, [r3, r8]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d0f0      	beq.n	80093e0 <_DrawBitmap+0x1fc>
 80093fe:	e7e4      	b.n	80093ca <_DrawBitmap+0x1e6>
 8009400:	f013 0303 	ands.w	r3, r3, #3
 8009404:	d005      	beq.n	8009412 <_DrawBitmap+0x22e>
 8009406:	2b02      	cmp	r3, #2
 8009408:	d121      	bne.n	800944e <_DrawBitmap+0x26a>
 800940a:	46b1      	mov	r9, r6
 800940c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009410:	e015      	b.n	800943e <_DrawBitmap+0x25a>
 8009412:	4659      	mov	r1, fp
 8009414:	4652      	mov	r2, sl
 8009416:	f7f6 ff29 	bl	800026c <memcpy>
 800941a:	e018      	b.n	800944e <_DrawBitmap+0x26a>
 800941c:	f849 3c04 	str.w	r3, [r9, #-4]
 8009420:	b12c      	cbz	r4, 800942e <_DrawBitmap+0x24a>
 8009422:	68a3      	ldr	r3, [r4, #8]
 8009424:	4620      	mov	r0, r4
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4641      	mov	r1, r8
 800942a:	463a      	mov	r2, r7
 800942c:	4798      	blx	r3
 800942e:	9b04      	ldr	r3, [sp, #16]
 8009430:	f108 0801 	add.w	r8, r8, #1
 8009434:	4453      	add	r3, sl
 8009436:	4543      	cmp	r3, r8
 8009438:	f109 0904 	add.w	r9, r9, #4
 800943c:	d007      	beq.n	800944e <_DrawBitmap+0x26a>
 800943e:	9a04      	ldr	r2, [sp, #16]
 8009440:	ebc2 030b 	rsb	r3, r2, fp
 8009444:	f813 3008 	ldrb.w	r3, [r3, r8]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d0f0      	beq.n	800942e <_DrawBitmap+0x24a>
 800944c:	e7e6      	b.n	800941c <_DrawBitmap+0x238>
 800944e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009450:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009452:	449b      	add	fp, r3
 8009454:	3701      	adds	r7, #1
 8009456:	440e      	add	r6, r1
 8009458:	e798      	b.n	800938c <_DrawBitmap+0x1a8>
 800945a:	2c00      	cmp	r4, #0
 800945c:	f040 824e 	bne.w	80098fc <_DrawBitmap+0x718>
 8009460:	e24f      	b.n	8009902 <_DrawBitmap+0x71e>
 8009462:	bf00      	nop
 8009464:	200002c4 	.word	0x200002c4
 8009468:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800946a:	4bb2      	ldr	r3, [pc, #712]	; (8009734 <_DrawBitmap+0x550>)
 800946c:	9609      	str	r6, [sp, #36]	; 0x24
 800946e:	007f      	lsls	r7, r7, #1
 8009470:	970c      	str	r7, [sp, #48]	; 0x30
 8009472:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009474:	00bf      	lsls	r7, r7, #2
 8009476:	970d      	str	r7, [sp, #52]	; 0x34
 8009478:	9f07      	ldr	r7, [sp, #28]
 800947a:	9705      	str	r7, [sp, #20]
 800947c:	2d00      	cmp	r5, #0
 800947e:	bf08      	it	eq
 8009480:	461d      	moveq	r5, r3
 8009482:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009484:	9907      	ldr	r1, [sp, #28]
 8009486:	1f3c      	subs	r4, r7, #4
 8009488:	9f05      	ldr	r7, [sp, #20]
 800948a:	1a7b      	subs	r3, r7, r1
 800948c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800948e:	42bb      	cmp	r3, r7
 8009490:	f280 8232 	bge.w	80098f8 <_DrawBitmap+0x714>
 8009494:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009496:	2f02      	cmp	r7, #2
 8009498:	f000 80ad 	beq.w	80095f6 <_DrawBitmap+0x412>
 800949c:	2f04      	cmp	r7, #4
 800949e:	f000 814f 	beq.w	8009740 <_DrawBitmap+0x55c>
 80094a2:	2f01      	cmp	r7, #1
 80094a4:	f040 821e 	bne.w	80098e4 <_DrawBitmap+0x700>
 80094a8:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800973c <_DrawBitmap+0x558>
 80094ac:	f8d9 3000 	ldr.w	r3, [r9]
 80094b0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80094b2:	f004 ff61 	bl	800e378 <GUI_ALLOC_LockH>
 80094b6:	f89b 3000 	ldrb.w	r3, [fp]
 80094ba:	4a9f      	ldr	r2, [pc, #636]	; (8009738 <_DrawBitmap+0x554>)
 80094bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80094be:	5cd6      	ldrb	r6, [r2, r3]
 80094c0:	f8d9 3000 	ldr.w	r3, [r9]
 80094c4:	900e      	str	r0, [sp, #56]	; 0x38
 80094c6:	7c1b      	ldrb	r3, [r3, #16]
 80094c8:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 80094cc:	f003 0303 	and.w	r3, r3, #3
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	4657      	mov	r7, sl
 80094d4:	f1c1 0808 	rsb	r8, r1, #8
 80094d8:	fa46 f601 	asr.w	r6, r6, r1
 80094dc:	d020      	beq.n	8009520 <_DrawBitmap+0x33c>
 80094de:	2b03      	cmp	r3, #3
 80094e0:	d061      	beq.n	80095a6 <_DrawBitmap+0x3c2>
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d05f      	beq.n	80095a6 <_DrawBitmap+0x3c2>
 80094e6:	465a      	mov	r2, fp
 80094e8:	4547      	cmp	r7, r8
 80094ea:	bf38      	it	cc
 80094ec:	46b8      	movcc	r8, r7
 80094ee:	ebc8 0707 	rsb	r7, r8, r7
 80094f2:	4643      	mov	r3, r8
 80094f4:	4621      	mov	r1, r4
 80094f6:	f006 0001 	and.w	r0, r6, #1
 80094fa:	3b01      	subs	r3, #1
 80094fc:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8009500:	f841 0b04 	str.w	r0, [r1], #4
 8009504:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009508:	d1f5      	bne.n	80094f6 <_DrawBitmap+0x312>
 800950a:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800950e:	2f00      	cmp	r7, #0
 8009510:	d06d      	beq.n	80095ee <_DrawBitmap+0x40a>
 8009512:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009516:	4988      	ldr	r1, [pc, #544]	; (8009738 <_DrawBitmap+0x554>)
 8009518:	f04f 0808 	mov.w	r8, #8
 800951c:	5cce      	ldrb	r6, [r1, r3]
 800951e:	e7e3      	b.n	80094e8 <_DrawBitmap+0x304>
 8009520:	686b      	ldr	r3, [r5, #4]
 8009522:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8009526:	930b      	str	r3, [sp, #44]	; 0x2c
 8009528:	f8cd b020 	str.w	fp, [sp, #32]
 800952c:	4547      	cmp	r7, r8
 800952e:	bf38      	it	cc
 8009530:	46b8      	movcc	r8, r7
 8009532:	ebc8 0707 	rsb	r7, r8, r7
 8009536:	f1bc 0f00 	cmp.w	ip, #0
 800953a:	d026      	beq.n	800958a <_DrawBitmap+0x3a6>
 800953c:	b91e      	cbnz	r6, 8009546 <_DrawBitmap+0x362>
 800953e:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8009542:	44c1      	add	r9, r8
 8009544:	e025      	b.n	8009592 <_DrawBitmap+0x3ae>
 8009546:	07f0      	lsls	r0, r6, #31
 8009548:	d50c      	bpl.n	8009564 <_DrawBitmap+0x380>
 800954a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800954e:	9a05      	ldr	r2, [sp, #20]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f8cd c008 	str.w	ip, [sp, #8]
 8009556:	4660      	mov	r0, ip
 8009558:	4649      	mov	r1, r9
 800955a:	4798      	blx	r3
 800955c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800955e:	f8dd c008 	ldr.w	ip, [sp, #8]
 8009562:	6023      	str	r3, [r4, #0]
 8009564:	f1b8 0801 	subs.w	r8, r8, #1
 8009568:	f109 0901 	add.w	r9, r9, #1
 800956c:	f104 0404 	add.w	r4, r4, #4
 8009570:	d00f      	beq.n	8009592 <_DrawBitmap+0x3ae>
 8009572:	0876      	lsrs	r6, r6, #1
 8009574:	e7e2      	b.n	800953c <_DrawBitmap+0x358>
 8009576:	07f1      	lsls	r1, r6, #31
 8009578:	bf44      	itt	mi
 800957a:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 800957c:	6023      	strmi	r3, [r4, #0]
 800957e:	f1b8 0801 	subs.w	r8, r8, #1
 8009582:	f104 0404 	add.w	r4, r4, #4
 8009586:	d004      	beq.n	8009592 <_DrawBitmap+0x3ae>
 8009588:	0876      	lsrs	r6, r6, #1
 800958a:	2e00      	cmp	r6, #0
 800958c:	d1f3      	bne.n	8009576 <_DrawBitmap+0x392>
 800958e:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8009592:	b367      	cbz	r7, 80095ee <_DrawBitmap+0x40a>
 8009594:	9908      	ldr	r1, [sp, #32]
 8009596:	4a68      	ldr	r2, [pc, #416]	; (8009738 <_DrawBitmap+0x554>)
 8009598:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800959c:	9108      	str	r1, [sp, #32]
 800959e:	5cd6      	ldrb	r6, [r2, r3]
 80095a0:	f04f 0808 	mov.w	r8, #8
 80095a4:	e7c2      	b.n	800952c <_DrawBitmap+0x348>
 80095a6:	6803      	ldr	r3, [r0, #0]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	4798      	blx	r3
 80095ae:	4659      	mov	r1, fp
 80095b0:	4547      	cmp	r7, r8
 80095b2:	bf38      	it	cc
 80095b4:	46b8      	movcc	r8, r7
 80095b6:	ebc8 0707 	rsb	r7, r8, r7
 80095ba:	1d23      	adds	r3, r4, #4
 80095bc:	46c6      	mov	lr, r8
 80095be:	07f2      	lsls	r2, r6, #31
 80095c0:	d504      	bpl.n	80095cc <_DrawBitmap+0x3e8>
 80095c2:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80095c6:	4042      	eors	r2, r0
 80095c8:	f843 2c04 	str.w	r2, [r3, #-4]
 80095cc:	f1be 0e01 	subs.w	lr, lr, #1
 80095d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80095d4:	f103 0304 	add.w	r3, r3, #4
 80095d8:	d1f1      	bne.n	80095be <_DrawBitmap+0x3da>
 80095da:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 80095de:	b137      	cbz	r7, 80095ee <_DrawBitmap+0x40a>
 80095e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80095e4:	4a54      	ldr	r2, [pc, #336]	; (8009738 <_DrawBitmap+0x554>)
 80095e6:	f04f 0808 	mov.w	r8, #8
 80095ea:	5cd6      	ldrb	r6, [r2, r3]
 80095ec:	e7e0      	b.n	80095b0 <_DrawBitmap+0x3cc>
 80095ee:	a80e      	add	r0, sp, #56	; 0x38
 80095f0:	f004 fed0 	bl	800e394 <GUI_ALLOC_UnlockH>
 80095f4:	e176      	b.n	80098e4 <_DrawBitmap+0x700>
 80095f6:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80095f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095fa:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 80095fe:	f1c7 0604 	rsb	r6, r7, #4
 8009602:	f89b 7000 	ldrb.w	r7, [fp]
 8009606:	409f      	lsls	r7, r3
 8009608:	4b4c      	ldr	r3, [pc, #304]	; (800973c <_DrawBitmap+0x558>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	7c1b      	ldrb	r3, [r3, #16]
 800960e:	f003 0303 	and.w	r3, r3, #3
 8009612:	2b01      	cmp	r3, #1
 8009614:	b2f6      	uxtb	r6, r6
 8009616:	b2ff      	uxtb	r7, r7
 8009618:	d066      	beq.n	80096e8 <_DrawBitmap+0x504>
 800961a:	d308      	bcc.n	800962e <_DrawBitmap+0x44a>
 800961c:	2b02      	cmp	r3, #2
 800961e:	f040 8161 	bne.w	80098e4 <_DrawBitmap+0x700>
 8009622:	9904      	ldr	r1, [sp, #16]
 8009624:	f8cd b020 	str.w	fp, [sp, #32]
 8009628:	46d0      	mov	r8, sl
 800962a:	9106      	str	r1, [sp, #24]
 800962c:	e03e      	b.n	80096ac <_DrawBitmap+0x4c8>
 800962e:	465a      	mov	r2, fp
 8009630:	4653      	mov	r3, sl
 8009632:	429e      	cmp	r6, r3
 8009634:	bfc8      	it	gt
 8009636:	b2de      	uxtbgt	r6, r3
 8009638:	1b9b      	subs	r3, r3, r6
 800963a:	4631      	mov	r1, r6
 800963c:	4620      	mov	r0, r4
 800963e:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 8009642:	3901      	subs	r1, #1
 8009644:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 8009648:	f840 cb04 	str.w	ip, [r0], #4
 800964c:	00bf      	lsls	r7, r7, #2
 800964e:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8009652:	b2ff      	uxtb	r7, r7
 8009654:	d1f3      	bne.n	800963e <_DrawBitmap+0x45a>
 8009656:	3e01      	subs	r6, #1
 8009658:	b2f6      	uxtb	r6, r6
 800965a:	3601      	adds	r6, #1
 800965c:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8009660:	2b00      	cmp	r3, #0
 8009662:	f000 813f 	beq.w	80098e4 <_DrawBitmap+0x700>
 8009666:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800966a:	2604      	movs	r6, #4
 800966c:	e7e1      	b.n	8009632 <_DrawBitmap+0x44e>
 800966e:	9906      	ldr	r1, [sp, #24]
 8009670:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 8009674:	4449      	add	r1, r9
 8009676:	d122      	bne.n	80096be <_DrawBitmap+0x4da>
 8009678:	f109 0901 	add.w	r9, r9, #1
 800967c:	fa5f f289 	uxtb.w	r2, r9
 8009680:	00bf      	lsls	r7, r7, #2
 8009682:	4296      	cmp	r6, r2
 8009684:	b2ff      	uxtb	r7, r7
 8009686:	d1f2      	bne.n	800966e <_DrawBitmap+0x48a>
 8009688:	9f06      	ldr	r7, [sp, #24]
 800968a:	3e01      	subs	r6, #1
 800968c:	b2f6      	uxtb	r6, r6
 800968e:	1c7b      	adds	r3, r7, #1
 8009690:	1c72      	adds	r2, r6, #1
 8009692:	199e      	adds	r6, r3, r6
 8009694:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8009698:	9606      	str	r6, [sp, #24]
 800969a:	f1b8 0f00 	cmp.w	r8, #0
 800969e:	f000 8121 	beq.w	80098e4 <_DrawBitmap+0x700>
 80096a2:	9b08      	ldr	r3, [sp, #32]
 80096a4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80096a8:	9308      	str	r3, [sp, #32]
 80096aa:	2604      	movs	r6, #4
 80096ac:	4546      	cmp	r6, r8
 80096ae:	bfc8      	it	gt
 80096b0:	fa5f f688 	uxtbgt.w	r6, r8
 80096b4:	ebc6 0808 	rsb	r8, r6, r8
 80096b8:	f04f 0900 	mov.w	r9, #0
 80096bc:	e7d7      	b.n	800966e <_DrawBitmap+0x48a>
 80096be:	09ba      	lsrs	r2, r7, #6
 80096c0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80096c4:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 80096c8:	f1bc 0f00 	cmp.w	ip, #0
 80096cc:	d0d4      	beq.n	8009678 <_DrawBitmap+0x494>
 80096ce:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80096d2:	6812      	ldr	r2, [r2, #0]
 80096d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80096d6:	4660      	mov	r0, ip
 80096d8:	f8cd c008 	str.w	ip, [sp, #8]
 80096dc:	9a05      	ldr	r2, [sp, #20]
 80096de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096e0:	4798      	blx	r3
 80096e2:	f8dd c008 	ldr.w	ip, [sp, #8]
 80096e6:	e7c7      	b.n	8009678 <_DrawBitmap+0x494>
 80096e8:	4658      	mov	r0, fp
 80096ea:	4653      	mov	r3, sl
 80096ec:	429e      	cmp	r6, r3
 80096ee:	bfc8      	it	gt
 80096f0:	b2de      	uxtbgt	r6, r3
 80096f2:	1b9b      	subs	r3, r3, r6
 80096f4:	1d22      	adds	r2, r4, #4
 80096f6:	46b4      	mov	ip, r6
 80096f8:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 80096fc:	d005      	beq.n	800970a <_DrawBitmap+0x526>
 80096fe:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8009702:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 8009706:	f842 1c04 	str.w	r1, [r2, #-4]
 800970a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800970e:	00bf      	lsls	r7, r7, #2
 8009710:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 8009714:	b2ff      	uxtb	r7, r7
 8009716:	f102 0204 	add.w	r2, r2, #4
 800971a:	d1ed      	bne.n	80096f8 <_DrawBitmap+0x514>
 800971c:	3e01      	subs	r6, #1
 800971e:	b2f6      	uxtb	r6, r6
 8009720:	3601      	adds	r6, #1
 8009722:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8009726:	2b00      	cmp	r3, #0
 8009728:	f000 80dc 	beq.w	80098e4 <_DrawBitmap+0x700>
 800972c:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8009730:	2604      	movs	r6, #4
 8009732:	e7db      	b.n	80096ec <_DrawBitmap+0x508>
 8009734:	08064acc 	.word	0x08064acc
 8009738:	08066f28 	.word	0x08066f28
 800973c:	200002c4 	.word	0x200002c4
 8009740:	4a71      	ldr	r2, [pc, #452]	; (8009908 <_DrawBitmap+0x724>)
 8009742:	f89b 3000 	ldrb.w	r3, [fp]
 8009746:	6812      	ldr	r2, [r2, #0]
 8009748:	990d      	ldr	r1, [sp, #52]	; 0x34
 800974a:	7c12      	ldrb	r2, [r2, #16]
 800974c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800974e:	f002 0203 	and.w	r2, r2, #3
 8009752:	408b      	lsls	r3, r1
 8009754:	2a01      	cmp	r2, #1
 8009756:	b2de      	uxtb	r6, r3
 8009758:	f000 809c 	beq.w	8009894 <_DrawBitmap+0x6b0>
 800975c:	d302      	bcc.n	8009764 <_DrawBitmap+0x580>
 800975e:	2a02      	cmp	r2, #2
 8009760:	d035      	beq.n	80097ce <_DrawBitmap+0x5ea>
 8009762:	e0bf      	b.n	80098e4 <_DrawBitmap+0x700>
 8009764:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009766:	b15f      	cbz	r7, 8009780 <_DrawBitmap+0x59c>
 8009768:	0936      	lsrs	r6, r6, #4
 800976a:	f10b 0201 	add.w	r2, fp, #1
 800976e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8009772:	6023      	str	r3, [r4, #0]
 8009774:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8009778:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800977a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800977e:	e001      	b.n	8009784 <_DrawBitmap+0x5a0>
 8009780:	4653      	mov	r3, sl
 8009782:	465a      	mov	r2, fp
 8009784:	2b01      	cmp	r3, #1
 8009786:	dd1a      	ble.n	80097be <_DrawBitmap+0x5da>
 8009788:	1058      	asrs	r0, r3, #1
 800978a:	f104 0108 	add.w	r1, r4, #8
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	eb02 0800 	add.w	r8, r2, r0
 8009796:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 800979a:	f006 060f 	and.w	r6, r6, #15
 800979e:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 80097a2:	f841 7c08 	str.w	r7, [r1, #-8]
 80097a6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80097aa:	f841 6c04 	str.w	r6, [r1, #-4]
 80097ae:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 80097b2:	4542      	cmp	r2, r8
 80097b4:	f101 0108 	add.w	r1, r1, #8
 80097b8:	d1ed      	bne.n	8009796 <_DrawBitmap+0x5b2>
 80097ba:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f000 8090 	beq.w	80098e4 <_DrawBitmap+0x700>
 80097c4:	0936      	lsrs	r6, r6, #4
 80097c6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 80097ca:	6023      	str	r3, [r4, #0]
 80097cc:	e08a      	b.n	80098e4 <_DrawBitmap+0x700>
 80097ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80097d0:	b1c1      	cbz	r1, 8009804 <_DrawBitmap+0x620>
 80097d2:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80097d6:	d00a      	beq.n	80097ee <_DrawBitmap+0x60a>
 80097d8:	0936      	lsrs	r6, r6, #4
 80097da:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 80097de:	6023      	str	r3, [r4, #0]
 80097e0:	b12f      	cbz	r7, 80097ee <_DrawBitmap+0x60a>
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	9904      	ldr	r1, [sp, #16]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	9a05      	ldr	r2, [sp, #20]
 80097ea:	4638      	mov	r0, r7
 80097ec:	4798      	blx	r3
 80097ee:	9a04      	ldr	r2, [sp, #16]
 80097f0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80097f2:	f89b 6001 	ldrb.w	r6, [fp, #1]
 80097f6:	f102 0801 	add.w	r8, r2, #1
 80097fa:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 80097fe:	f10b 0901 	add.w	r9, fp, #1
 8009802:	e011      	b.n	8009828 <_DrawBitmap+0x644>
 8009804:	46d4      	mov	ip, sl
 8009806:	46d9      	mov	r9, fp
 8009808:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800980c:	e00c      	b.n	8009828 <_DrawBitmap+0x644>
 800980e:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 8009812:	d10d      	bne.n	8009830 <_DrawBitmap+0x64c>
 8009814:	f016 060f 	ands.w	r6, r6, #15
 8009818:	d11b      	bne.n	8009852 <_DrawBitmap+0x66e>
 800981a:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 800981e:	3408      	adds	r4, #8
 8009820:	f108 0802 	add.w	r8, r8, #2
 8009824:	f1ac 0c02 	sub.w	ip, ip, #2
 8009828:	f1bc 0f01 	cmp.w	ip, #1
 800982c:	dcef      	bgt.n	800980e <_DrawBitmap+0x62a>
 800982e:	e021      	b.n	8009874 <_DrawBitmap+0x690>
 8009830:	0933      	lsrs	r3, r6, #4
 8009832:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8009836:	6023      	str	r3, [r4, #0]
 8009838:	2f00      	cmp	r7, #0
 800983a:	d0eb      	beq.n	8009814 <_DrawBitmap+0x630>
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	9a05      	ldr	r2, [sp, #20]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f8cd c008 	str.w	ip, [sp, #8]
 8009846:	4638      	mov	r0, r7
 8009848:	4641      	mov	r1, r8
 800984a:	4798      	blx	r3
 800984c:	f8dd c008 	ldr.w	ip, [sp, #8]
 8009850:	e7e0      	b.n	8009814 <_DrawBitmap+0x630>
 8009852:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8009856:	6063      	str	r3, [r4, #4]
 8009858:	2f00      	cmp	r7, #0
 800985a:	d0de      	beq.n	800981a <_DrawBitmap+0x636>
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	9a05      	ldr	r2, [sp, #20]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f8cd c008 	str.w	ip, [sp, #8]
 8009866:	4638      	mov	r0, r7
 8009868:	f108 0101 	add.w	r1, r8, #1
 800986c:	4798      	blx	r3
 800986e:	f8dd c008 	ldr.w	ip, [sp, #8]
 8009872:	e7d2      	b.n	800981a <_DrawBitmap+0x636>
 8009874:	f1bc 0f00 	cmp.w	ip, #0
 8009878:	d034      	beq.n	80098e4 <_DrawBitmap+0x700>
 800987a:	0936      	lsrs	r6, r6, #4
 800987c:	d032      	beq.n	80098e4 <_DrawBitmap+0x700>
 800987e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8009882:	6023      	str	r3, [r4, #0]
 8009884:	b377      	cbz	r7, 80098e4 <_DrawBitmap+0x700>
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	9a05      	ldr	r2, [sp, #20]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4638      	mov	r0, r7
 800988e:	4641      	mov	r1, r8
 8009890:	4798      	blx	r3
 8009892:	e027      	b.n	80098e4 <_DrawBitmap+0x700>
 8009894:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009896:	f1c7 0302 	rsb	r3, r7, #2
 800989a:	b2db      	uxtb	r3, r3
 800989c:	465f      	mov	r7, fp
 800989e:	4652      	mov	r2, sl
 80098a0:	4293      	cmp	r3, r2
 80098a2:	bfc8      	it	gt
 80098a4:	b2d3      	uxtbgt	r3, r2
 80098a6:	1ad2      	subs	r2, r2, r3
 80098a8:	1d20      	adds	r0, r4, #4
 80098aa:	469c      	mov	ip, r3
 80098ac:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 80098b0:	d005      	beq.n	80098be <_DrawBitmap+0x6da>
 80098b2:	f850 1c04 	ldr.w	r1, [r0, #-4]
 80098b6:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 80098ba:	f840 1c04 	str.w	r1, [r0, #-4]
 80098be:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80098c2:	0136      	lsls	r6, r6, #4
 80098c4:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 80098c8:	b2f6      	uxtb	r6, r6
 80098ca:	f100 0004 	add.w	r0, r0, #4
 80098ce:	d1ed      	bne.n	80098ac <_DrawBitmap+0x6c8>
 80098d0:	3b01      	subs	r3, #1
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	3301      	adds	r3, #1
 80098d6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80098da:	b11a      	cbz	r2, 80098e4 <_DrawBitmap+0x700>
 80098dc:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 80098e0:	2302      	movs	r3, #2
 80098e2:	e7dd      	b.n	80098a0 <_DrawBitmap+0x6bc>
 80098e4:	9b05      	ldr	r3, [sp, #20]
 80098e6:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80098e8:	3301      	adds	r3, #1
 80098ea:	44bb      	add	fp, r7
 80098ec:	9305      	str	r3, [sp, #20]
 80098ee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80098f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f2:	443b      	add	r3, r7
 80098f4:	9309      	str	r3, [sp, #36]	; 0x24
 80098f6:	e5c4      	b.n	8009482 <_DrawBitmap+0x29e>
 80098f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098fa:	b113      	cbz	r3, 8009902 <_DrawBitmap+0x71e>
 80098fc:	a80f      	add	r0, sp, #60	; 0x3c
 80098fe:	f004 fd49 	bl	800e394 <GUI_ALLOC_UnlockH>
 8009902:	b011      	add	sp, #68	; 0x44
 8009904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009908:	200002c4 	.word	0x200002c4

0800990c <GUI_MEMDEV__WriteToActiveAt>:
 800990c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009910:	460e      	mov	r6, r1
 8009912:	4690      	mov	r8, r2
 8009914:	4607      	mov	r7, r0
 8009916:	f004 fd2f 	bl	800e378 <GUI_ALLOC_LockH>
 800991a:	6803      	ldr	r3, [r0, #0]
 800991c:	ac02      	add	r4, sp, #8
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009926:	2000      	movs	r0, #0
 8009928:	2116      	movs	r1, #22
 800992a:	4798      	blx	r3
 800992c:	4605      	mov	r5, r0
 800992e:	4620      	mov	r0, r4
 8009930:	f004 fd30 	bl	800e394 <GUI_ALLOC_UnlockH>
 8009934:	b11d      	cbz	r5, 800993e <GUI_MEMDEV__WriteToActiveAt+0x32>
 8009936:	4638      	mov	r0, r7
 8009938:	4631      	mov	r1, r6
 800993a:	4642      	mov	r2, r8
 800993c:	47a8      	blx	r5
 800993e:	b002      	add	sp, #8
 8009940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009944 <GUI_MEMDEV__CreateFixed>:
 8009944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009948:	4e3e      	ldr	r6, [pc, #248]	; (8009a44 <GUI_MEMDEV__CreateFixed+0x100>)
 800994a:	b087      	sub	sp, #28
 800994c:	461d      	mov	r5, r3
 800994e:	6833      	ldr	r3, [r6, #0]
 8009950:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8009952:	7c5b      	ldrb	r3, [r3, #17]
 8009954:	4683      	mov	fp, r0
 8009956:	468a      	mov	sl, r1
 8009958:	4690      	mov	r8, r2
 800995a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800995c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800995e:	2200      	movs	r2, #0
 8009960:	f003 fff6 	bl	800d950 <GUI_DEVICE_Create>
 8009964:	4604      	mov	r4, r0
 8009966:	2800      	cmp	r0, #0
 8009968:	d033      	beq.n	80099d2 <GUI_MEMDEV__CreateFixed+0x8e>
 800996a:	6903      	ldr	r3, [r0, #16]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	4798      	blx	r3
 8009970:	f001 fede 	bl	800b730 <LCD__GetBPPDevice>
 8009974:	fb08 f600 	mul.w	r6, r8, r0
 8009978:	9003      	str	r0, [sp, #12]
 800997a:	3607      	adds	r6, #7
 800997c:	f004 fec8 	bl	800e710 <GUI_ALLOC_RequestSize>
 8009980:	f017 0901 	ands.w	r9, r7, #1
 8009984:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 8009988:	d104      	bne.n	8009994 <GUI_MEMDEV__CreateFixed+0x50>
 800998a:	2304      	movs	r3, #4
 800998c:	fb90 f0f3 	sdiv	r0, r0, r3
 8009990:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8009994:	2d00      	cmp	r5, #0
 8009996:	dc09      	bgt.n	80099ac <GUI_MEMDEV__CreateFixed+0x68>
 8009998:	b11e      	cbz	r6, 80099a2 <GUI_MEMDEV__CreateFixed+0x5e>
 800999a:	3818      	subs	r0, #24
 800999c:	fbb0 f0f6 	udiv	r0, r0, r6
 80099a0:	e000      	b.n	80099a4 <GUI_MEMDEV__CreateFixed+0x60>
 80099a2:	4630      	mov	r0, r6
 80099a4:	426d      	negs	r5, r5
 80099a6:	42a8      	cmp	r0, r5
 80099a8:	bfb8      	it	lt
 80099aa:	4605      	movlt	r5, r0
 80099ac:	f1b9 0f00 	cmp.w	r9, #0
 80099b0:	d109      	bne.n	80099c6 <GUI_MEMDEV__CreateFixed+0x82>
 80099b2:	f8cd 9000 	str.w	r9, [sp]
 80099b6:	4658      	mov	r0, fp
 80099b8:	4651      	mov	r1, sl
 80099ba:	4642      	mov	r2, r8
 80099bc:	462b      	mov	r3, r5
 80099be:	f007 fa37 	bl	8010e30 <GUI_USAGE_BM_Create>
 80099c2:	4607      	mov	r7, r0
 80099c4:	e000      	b.n	80099c8 <GUI_MEMDEV__CreateFixed+0x84>
 80099c6:	2700      	movs	r7, #0
 80099c8:	2d00      	cmp	r5, #0
 80099ca:	dc04      	bgt.n	80099d6 <GUI_MEMDEV__CreateFixed+0x92>
 80099cc:	4620      	mov	r0, r4
 80099ce:	f003 ffbd 	bl	800d94c <GUI_DEVICE_Delete>
 80099d2:	2000      	movs	r0, #0
 80099d4:	e032      	b.n	8009a3c <GUI_MEMDEV__CreateFixed+0xf8>
 80099d6:	fb06 f005 	mul.w	r0, r6, r5
 80099da:	3018      	adds	r0, #24
 80099dc:	f1b9 0f00 	cmp.w	r9, #0
 80099e0:	d002      	beq.n	80099e8 <GUI_MEMDEV__CreateFixed+0xa4>
 80099e2:	f004 ff29 	bl	800e838 <GUI_ALLOC_AllocNoInit>
 80099e6:	e001      	b.n	80099ec <GUI_MEMDEV__CreateFixed+0xa8>
 80099e8:	f004 ff4d 	bl	800e886 <GUI_ALLOC_AllocZero>
 80099ec:	4681      	mov	r9, r0
 80099ee:	b940      	cbnz	r0, 8009a02 <GUI_MEMDEV__CreateFixed+0xbe>
 80099f0:	4620      	mov	r0, r4
 80099f2:	f003 ffab 	bl	800d94c <GUI_DEVICE_Delete>
 80099f6:	2f00      	cmp	r7, #0
 80099f8:	d0eb      	beq.n	80099d2 <GUI_MEMDEV__CreateFixed+0x8e>
 80099fa:	4638      	mov	r0, r7
 80099fc:	f004 fcf6 	bl	800e3ec <GUI_ALLOC_Free>
 8009a00:	e01b      	b.n	8009a3a <GUI_MEMDEV__CreateFixed+0xf6>
 8009a02:	f004 fcb9 	bl	800e378 <GUI_ALLOC_LockH>
 8009a06:	4603      	mov	r3, r0
 8009a08:	a806      	add	r0, sp, #24
 8009a0a:	9a03      	ldr	r2, [sp, #12]
 8009a0c:	f840 3d04 	str.w	r3, [r0, #-4]!
 8009a10:	611a      	str	r2, [r3, #16]
 8009a12:	601c      	str	r4, [r3, #0]
 8009a14:	f8a3 b004 	strh.w	fp, [r3, #4]
 8009a18:	f8a3 a006 	strh.w	sl, [r3, #6]
 8009a1c:	f8a3 8008 	strh.w	r8, [r3, #8]
 8009a20:	815d      	strh	r5, [r3, #10]
 8009a22:	60de      	str	r6, [r3, #12]
 8009a24:	615f      	str	r7, [r3, #20]
 8009a26:	f004 fcb5 	bl	800e394 <GUI_ALLOC_UnlockH>
 8009a2a:	4a06      	ldr	r2, [pc, #24]	; (8009a44 <GUI_MEMDEV__CreateFixed+0x100>)
 8009a2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a2e:	6123      	str	r3, [r4, #16]
 8009a30:	6813      	ldr	r3, [r2, #0]
 8009a32:	f8c4 9008 	str.w	r9, [r4, #8]
 8009a36:	7c5b      	ldrb	r3, [r3, #17]
 8009a38:	61a3      	str	r3, [r4, #24]
 8009a3a:	4648      	mov	r0, r9
 8009a3c:	b007      	add	sp, #28
 8009a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a42:	bf00      	nop
 8009a44:	200002c4 	.word	0x200002c4

08009a48 <GUI_MEMDEV_GetBitsPerPixel>:
 8009a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	b1a0      	cbz	r0, 8009a78 <GUI_MEMDEV_GetBitsPerPixel+0x30>
 8009a4e:	f002 ffaf 	bl	800c9b0 <GUI_Lock>
 8009a52:	4620      	mov	r0, r4
 8009a54:	f004 fc90 	bl	800e378 <GUI_ALLOC_LockH>
 8009a58:	6803      	ldr	r3, [r0, #0]
 8009a5a:	ac02      	add	r4, sp, #8
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	4798      	blx	r3
 8009a66:	f001 fe63 	bl	800b730 <LCD__GetBPPDevice>
 8009a6a:	4605      	mov	r5, r0
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	f004 fc91 	bl	800e394 <GUI_ALLOC_UnlockH>
 8009a72:	f002 ff93 	bl	800c99c <GUI_Unlock>
 8009a76:	e000      	b.n	8009a7a <GUI_MEMDEV_GetBitsPerPixel+0x32>
 8009a78:	4605      	mov	r5, r0
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	b003      	add	sp, #12
 8009a7e:	bd30      	pop	{r4, r5, pc}

08009a80 <GUI_MEMDEV_Delete>:
 8009a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a82:	4604      	mov	r4, r0
 8009a84:	b1f0      	cbz	r0, 8009ac4 <GUI_MEMDEV_Delete+0x44>
 8009a86:	f002 ff93 	bl	800c9b0 <GUI_Lock>
 8009a8a:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <GUI_MEMDEV_Delete+0x48>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a90:	42a3      	cmp	r3, r4
 8009a92:	d101      	bne.n	8009a98 <GUI_MEMDEV_Delete+0x18>
 8009a94:	f003 f8fa 	bl	800cc8c <GUI_SelectLCD>
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f004 fc6d 	bl	800e378 <GUI_ALLOC_LockH>
 8009a9e:	9001      	str	r0, [sp, #4]
 8009aa0:	6940      	ldr	r0, [r0, #20]
 8009aa2:	b108      	cbz	r0, 8009aa8 <GUI_MEMDEV_Delete+0x28>
 8009aa4:	f007 f9f4 	bl	8010e90 <GUI_USAGE_DecUseCnt>
 8009aa8:	ad02      	add	r5, sp, #8
 8009aaa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009aae:	6818      	ldr	r0, [r3, #0]
 8009ab0:	f003 ff4c 	bl	800d94c <GUI_DEVICE_Delete>
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	f004 fc6d 	bl	800e394 <GUI_ALLOC_UnlockH>
 8009aba:	4620      	mov	r0, r4
 8009abc:	f004 fc96 	bl	800e3ec <GUI_ALLOC_Free>
 8009ac0:	f002 ff6c 	bl	800c99c <GUI_Unlock>
 8009ac4:	b003      	add	sp, #12
 8009ac6:	bd30      	pop	{r4, r5, pc}
 8009ac8:	200002c4 	.word	0x200002c4

08009acc <GUI_MEMDEV_CreateEx>:
 8009acc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ad2:	4607      	mov	r7, r0
 8009ad4:	469a      	mov	sl, r3
 8009ad6:	4688      	mov	r8, r1
 8009ad8:	4691      	mov	r9, r2
 8009ada:	f002 ff69 	bl	800c9b0 <GUI_Lock>
 8009ade:	4b17      	ldr	r3, [pc, #92]	; (8009b3c <GUI_MEMDEV_CreateEx+0x70>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	7c58      	ldrb	r0, [r3, #17]
 8009ae4:	4b16      	ldr	r3, [pc, #88]	; (8009b40 <GUI_MEMDEV_CreateEx+0x74>)
 8009ae6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8009aea:	68e3      	ldr	r3, [r4, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2b04      	cmp	r3, #4
 8009af0:	d005      	beq.n	8009afe <GUI_MEMDEV_CreateEx+0x32>
 8009af2:	6824      	ldr	r4, [r4, #0]
 8009af4:	2c00      	cmp	r4, #0
 8009af6:	d1f8      	bne.n	8009aea <GUI_MEMDEV_CreateEx+0x1e>
 8009af8:	f003 ff18 	bl	800d92c <GUI_DEVICE__GetpDriver>
 8009afc:	4604      	mov	r4, r0
 8009afe:	68e3      	ldr	r3, [r4, #12]
 8009b00:	4620      	mov	r0, r4
 8009b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b04:	2101      	movs	r1, #1
 8009b06:	4798      	blx	r3
 8009b08:	4606      	mov	r6, r0
 8009b0a:	b188      	cbz	r0, 8009b30 <GUI_MEMDEV_CreateEx+0x64>
 8009b0c:	6924      	ldr	r4, [r4, #16]
 8009b0e:	68a3      	ldr	r3, [r4, #8]
 8009b10:	4798      	blx	r3
 8009b12:	3001      	adds	r0, #1
 8009b14:	bf04      	itt	eq
 8009b16:	f045 0501 	orreq.w	r5, r5, #1
 8009b1a:	4c0a      	ldreq	r4, [pc, #40]	; (8009b44 <GUI_MEMDEV_CreateEx+0x78>)
 8009b1c:	9402      	str	r4, [sp, #8]
 8009b1e:	e88d 0060 	stmia.w	sp, {r5, r6}
 8009b22:	4638      	mov	r0, r7
 8009b24:	4641      	mov	r1, r8
 8009b26:	464a      	mov	r2, r9
 8009b28:	4653      	mov	r3, sl
 8009b2a:	f7ff ff0b 	bl	8009944 <GUI_MEMDEV__CreateFixed>
 8009b2e:	4606      	mov	r6, r0
 8009b30:	f002 ff34 	bl	800c99c <GUI_Unlock>
 8009b34:	4630      	mov	r0, r6
 8009b36:	b004      	add	sp, #16
 8009b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b3c:	200002c4 	.word	0x200002c4
 8009b40:	20028844 	.word	0x20028844
 8009b44:	08067058 	.word	0x08067058

08009b48 <GUI_MEMDEV_Select>:
 8009b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	f002 ff30 	bl	800c9b0 <GUI_Lock>
 8009b50:	4b11      	ldr	r3, [pc, #68]	; (8009b98 <GUI_MEMDEV_Select+0x50>)
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	461f      	mov	r7, r3
 8009b56:	6e16      	ldr	r6, [r2, #96]	; 0x60
 8009b58:	b914      	cbnz	r4, 8009b60 <GUI_MEMDEV_Select+0x18>
 8009b5a:	f003 f897 	bl	800cc8c <GUI_SelectLCD>
 8009b5e:	e016      	b.n	8009b8e <GUI_MEMDEV_Select+0x46>
 8009b60:	b10e      	cbz	r6, 8009b66 <GUI_MEMDEV_Select+0x1e>
 8009b62:	f003 f893 	bl	800cc8c <GUI_SelectLCD>
 8009b66:	f7fe ff29 	bl	80089bc <WM_Deactivate>
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f004 fc04 	bl	800e378 <GUI_ALLOC_LockH>
 8009b70:	ad02      	add	r5, sp, #8
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	f845 0d04 	str.w	r0, [r5, #-4]!
 8009b78:	661c      	str	r4, [r3, #96]	; 0x60
 8009b7a:	6800      	ldr	r0, [r0, #0]
 8009b7c:	f003 ff10 	bl	800d9a0 <GUI_DEVICE_Link>
 8009b80:	4628      	mov	r0, r5
 8009b82:	f004 fc07 	bl	800e394 <GUI_ALLOC_UnlockH>
 8009b86:	f001 fc29 	bl	800b3dc <LCD_UpdateColorIndices>
 8009b8a:	f002 f893 	bl	800bcb4 <LCD_SetClipRectMax>
 8009b8e:	f002 ff05 	bl	800c99c <GUI_Unlock>
 8009b92:	4630      	mov	r0, r6
 8009b94:	b003      	add	sp, #12
 8009b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b98:	200002c4 	.word	0x200002c4

08009b9c <GUI_MEMDEV_CopyToLCDAt>:
 8009b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	4615      	mov	r5, r2
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d045      	beq.n	8009c38 <GUI_MEMDEV_CopyToLCDAt+0x9c>
 8009bac:	f002 ff00 	bl	800c9b0 <GUI_Lock>
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	f002 ffc3 	bl	800cb3c <GUI_SetDrawMode>
 8009bb6:	4b22      	ldr	r3, [pc, #136]	; (8009c40 <GUI_MEMDEV_CopyToLCDAt+0xa4>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4607      	mov	r7, r0
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 8009bc2:	f004 fbd9 	bl	800e378 <GUI_ALLOC_LockH>
 8009bc6:	6803      	ldr	r3, [r0, #0]
 8009bc8:	9001      	str	r0, [sp, #4]
 8009bca:	6998      	ldr	r0, [r3, #24]
 8009bcc:	f003 f828 	bl	800cc20 <GUI_SelectLayer>
 8009bd0:	4b1c      	ldr	r3, [pc, #112]	; (8009c44 <GUI_MEMDEV_CopyToLCDAt+0xa8>)
 8009bd2:	429c      	cmp	r4, r3
 8009bd4:	9b01      	ldr	r3, [sp, #4]
 8009bd6:	bf04      	itt	eq
 8009bd8:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 8009bdc:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 8009be0:	891a      	ldrh	r2, [r3, #8]
 8009be2:	895b      	ldrh	r3, [r3, #10]
 8009be4:	f8ad 4008 	strh.w	r4, [sp, #8]
 8009be8:	3a01      	subs	r2, #1
 8009bea:	3b01      	subs	r3, #1
 8009bec:	4422      	add	r2, r4
 8009bee:	442b      	add	r3, r5
 8009bf0:	4681      	mov	r9, r0
 8009bf2:	f8ad 200c 	strh.w	r2, [sp, #12]
 8009bf6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009bfa:	f8ad 500a 	strh.w	r5, [sp, #10]
 8009bfe:	f7fe fed5 	bl	80089ac <WM_Activate>
 8009c02:	a801      	add	r0, sp, #4
 8009c04:	f004 fbc6 	bl	800e394 <GUI_ALLOC_UnlockH>
 8009c08:	a802      	add	r0, sp, #8
 8009c0a:	f7fe fceb 	bl	80085e4 <WM__InitIVRSearch>
 8009c0e:	b958      	cbnz	r0, 8009c28 <GUI_MEMDEV_CopyToLCDAt+0x8c>
 8009c10:	4648      	mov	r0, r9
 8009c12:	f003 f805 	bl	800cc20 <GUI_SelectLayer>
 8009c16:	4640      	mov	r0, r8
 8009c18:	f7ff ff96 	bl	8009b48 <GUI_MEMDEV_Select>
 8009c1c:	4638      	mov	r0, r7
 8009c1e:	f002 ff8d 	bl	800cb3c <GUI_SetDrawMode>
 8009c22:	f002 febb 	bl	800c99c <GUI_Unlock>
 8009c26:	e007      	b.n	8009c38 <GUI_MEMDEV_CopyToLCDAt+0x9c>
 8009c28:	4630      	mov	r0, r6
 8009c2a:	4621      	mov	r1, r4
 8009c2c:	462a      	mov	r2, r5
 8009c2e:	f006 fbc7 	bl	80103c0 <GUI_MEMDEV__WriteToActiveOpaque>
 8009c32:	f7fe fc15 	bl	8008460 <WM__GetNextIVR>
 8009c36:	e7ea      	b.n	8009c0e <GUI_MEMDEV_CopyToLCDAt+0x72>
 8009c38:	b005      	add	sp, #20
 8009c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c3e:	bf00      	nop
 8009c40:	200002c4 	.word	0x200002c4
 8009c44:	fffff001 	.word	0xfffff001

08009c48 <GUI_MEMDEV_CopyToLCD>:
 8009c48:	4901      	ldr	r1, [pc, #4]	; (8009c50 <GUI_MEMDEV_CopyToLCD+0x8>)
 8009c4a:	460a      	mov	r2, r1
 8009c4c:	f7ff bfa6 	b.w	8009b9c <GUI_MEMDEV_CopyToLCDAt>
 8009c50:	fffff001 	.word	0xfffff001

08009c54 <_GetRect>:
 8009c54:	6883      	ldr	r3, [r0, #8]
 8009c56:	2200      	movs	r2, #0
 8009c58:	800a      	strh	r2, [r1, #0]
 8009c5a:	804a      	strh	r2, [r1, #2]
 8009c5c:	695a      	ldr	r2, [r3, #20]
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	3a01      	subs	r2, #1
 8009c62:	3b01      	subs	r3, #1
 8009c64:	808a      	strh	r2, [r1, #4]
 8009c66:	80cb      	strh	r3, [r1, #6]
 8009c68:	4770      	bx	lr

08009c6a <_SetPixelIndex>:
 8009c6a:	b510      	push	{r4, lr}
 8009c6c:	6880      	ldr	r0, [r0, #8]
 8009c6e:	69c4      	ldr	r4, [r0, #28]
 8009c70:	6800      	ldr	r0, [r0, #0]
 8009c72:	fb04 1202 	mla	r2, r4, r2, r1
 8009c76:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009c7a:	bd10      	pop	{r4, pc}

08009c7c <_GetPixelIndex>:
 8009c7c:	6883      	ldr	r3, [r0, #8]
 8009c7e:	69d8      	ldr	r0, [r3, #28]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	fb00 1202 	mla	r2, r0, r2, r1
 8009c86:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009c8a:	4770      	bx	lr

08009c8c <_XorPixel>:
 8009c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c90:	4604      	mov	r4, r0
 8009c92:	460f      	mov	r7, r1
 8009c94:	4616      	mov	r6, r2
 8009c96:	f7ff fff1 	bl	8009c7c <_GetPixelIndex>
 8009c9a:	6925      	ldr	r5, [r4, #16]
 8009c9c:	68ab      	ldr	r3, [r5, #8]
 8009c9e:	4680      	mov	r8, r0
 8009ca0:	4798      	blx	r3
 8009ca2:	4639      	mov	r1, r7
 8009ca4:	ea80 0308 	eor.w	r3, r0, r8
 8009ca8:	4632      	mov	r2, r6
 8009caa:	4620      	mov	r0, r4
 8009cac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb0:	f7ff bfdb 	b.w	8009c6a <_SetPixelIndex>

08009cb4 <_FillRect>:
 8009cb4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb8:	6886      	ldr	r6, [r0, #8]
 8009cba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009cbc:	6b34      	ldr	r4, [r6, #48]	; 0x30
 8009cbe:	f8df c114 	ldr.w	ip, [pc, #276]	; 8009dd4 <_FillRect+0x120>
 8009cc2:	4689      	mov	r9, r1
 8009cc4:	4692      	mov	sl, r2
 8009cc6:	b144      	cbz	r4, 8009cda <_FillRect+0x26>
 8009cc8:	9700      	str	r7, [sp, #0]
 8009cca:	f8dc 5000 	ldr.w	r5, [ip]
 8009cce:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 8009cd0:	682d      	ldr	r5, [r5, #0]
 8009cd2:	9501      	str	r5, [sp, #4]
 8009cd4:	6980      	ldr	r0, [r0, #24]
 8009cd6:	47a0      	blx	r4
 8009cd8:	e079      	b.n	8009dce <_FillRect+0x11a>
 8009cda:	1a5b      	subs	r3, r3, r1
 8009cdc:	f8dc 1000 	ldr.w	r1, [ip]
 8009ce0:	f891 c010 	ldrb.w	ip, [r1, #16]
 8009ce4:	ebc2 0807 	rsb	r8, r2, r7
 8009ce8:	f01c 0c01 	ands.w	ip, ip, #1
 8009cec:	f103 0401 	add.w	r4, r3, #1
 8009cf0:	f108 0501 	add.w	r5, r8, #1
 8009cf4:	69f7      	ldr	r7, [r6, #28]
 8009cf6:	d021      	beq.n	8009d3c <_FillRect+0x88>
 8009cf8:	6903      	ldr	r3, [r0, #16]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	4798      	blx	r3
 8009cfe:	69f2      	ldr	r2, [r6, #28]
 8009d00:	2c00      	cmp	r4, #0
 8009d02:	d064      	beq.n	8009dce <_FillRect+0x11a>
 8009d04:	f06f 0c03 	mvn.w	ip, #3
 8009d08:	fb02 990a 	mla	r9, r2, sl, r9
 8009d0c:	fb0c fc07 	mul.w	ip, ip, r7
 8009d10:	fb07 9708 	mla	r7, r7, r8, r9
 8009d14:	00bf      	lsls	r7, r7, #2
 8009d16:	2d00      	cmp	r5, #0
 8009d18:	d059      	beq.n	8009dce <_FillRect+0x11a>
 8009d1a:	3d01      	subs	r5, #1
 8009d1c:	463b      	mov	r3, r7
 8009d1e:	4622      	mov	r2, r4
 8009d20:	f8d6 8000 	ldr.w	r8, [r6]
 8009d24:	f853 1008 	ldr.w	r1, [r3, r8]
 8009d28:	3a01      	subs	r2, #1
 8009d2a:	ea81 0100 	eor.w	r1, r1, r0
 8009d2e:	f843 1008 	str.w	r1, [r3, r8]
 8009d32:	f103 0304 	add.w	r3, r3, #4
 8009d36:	d1f3      	bne.n	8009d20 <_FillRect+0x6c>
 8009d38:	4467      	add	r7, ip
 8009d3a:	e7ec      	b.n	8009d16 <_FillRect+0x62>
 8009d3c:	6830      	ldr	r0, [r6, #0]
 8009d3e:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8009d40:	fb07 9202 	mla	r2, r7, r2, r9
 8009d44:	2c0f      	cmp	r4, #15
 8009d46:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009d4a:	6808      	ldr	r0, [r1, #0]
 8009d4c:	d92f      	bls.n	8009dae <_FillRect+0xfa>
 8009d4e:	f1a3 0a0f 	sub.w	sl, r3, #15
 8009d52:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 8009d56:	ea4f 0987 	mov.w	r9, r7, lsl #2
 8009d5a:	f108 4180 	add.w	r1, r8, #1073741824	; 0x40000000
 8009d5e:	f10a 0a01 	add.w	sl, sl, #1
 8009d62:	fb09 2101 	mla	r1, r9, r1, r2
 8009d66:	ea4f 1a8a 	mov.w	sl, sl, lsl #6
 8009d6a:	462e      	mov	r6, r5
 8009d6c:	4662      	mov	r2, ip
 8009d6e:	b1e6      	cbz	r6, 8009daa <_FillRect+0xf6>
 8009d70:	4622      	mov	r2, r4
 8009d72:	460b      	mov	r3, r1
 8009d74:	3a10      	subs	r2, #16
 8009d76:	2a0f      	cmp	r2, #15
 8009d78:	6018      	str	r0, [r3, #0]
 8009d7a:	6058      	str	r0, [r3, #4]
 8009d7c:	6098      	str	r0, [r3, #8]
 8009d7e:	60d8      	str	r0, [r3, #12]
 8009d80:	6118      	str	r0, [r3, #16]
 8009d82:	6158      	str	r0, [r3, #20]
 8009d84:	6198      	str	r0, [r3, #24]
 8009d86:	61d8      	str	r0, [r3, #28]
 8009d88:	6218      	str	r0, [r3, #32]
 8009d8a:	6258      	str	r0, [r3, #36]	; 0x24
 8009d8c:	6298      	str	r0, [r3, #40]	; 0x28
 8009d8e:	62d8      	str	r0, [r3, #44]	; 0x2c
 8009d90:	6318      	str	r0, [r3, #48]	; 0x30
 8009d92:	6358      	str	r0, [r3, #52]	; 0x34
 8009d94:	6398      	str	r0, [r3, #56]	; 0x38
 8009d96:	63d8      	str	r0, [r3, #60]	; 0x3c
 8009d98:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8009d9c:	d8ea      	bhi.n	8009d74 <_FillRect+0xc0>
 8009d9e:	eb01 020a 	add.w	r2, r1, sl
 8009da2:	3e01      	subs	r6, #1
 8009da4:	ebc9 0101 	rsb	r1, r9, r1
 8009da8:	e7e1      	b.n	8009d6e <_FillRect+0xba>
 8009daa:	f004 040f 	and.w	r4, r4, #15
 8009dae:	b174      	cbz	r4, 8009dce <_FillRect+0x11a>
 8009db0:	00bf      	lsls	r7, r7, #2
 8009db2:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8009db6:	fb07 2208 	mla	r2, r7, r8, r2
 8009dba:	b145      	cbz	r5, 8009dce <_FillRect+0x11a>
 8009dbc:	4611      	mov	r1, r2
 8009dbe:	4623      	mov	r3, r4
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	f841 0b04 	str.w	r0, [r1], #4
 8009dc6:	d1fb      	bne.n	8009dc0 <_FillRect+0x10c>
 8009dc8:	3d01      	subs	r5, #1
 8009dca:	1bd2      	subs	r2, r2, r7
 8009dcc:	e7f5      	b.n	8009dba <_FillRect+0x106>
 8009dce:	b002      	add	sp, #8
 8009dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd4:	200002c4 	.word	0x200002c4

08009dd8 <_DrawHLine>:
 8009dd8:	b507      	push	{r0, r1, r2, lr}
 8009dda:	9200      	str	r2, [sp, #0]
 8009ddc:	f7ff ff6a 	bl	8009cb4 <_FillRect>
 8009de0:	b003      	add	sp, #12
 8009de2:	f85d fb04 	ldr.w	pc, [sp], #4

08009de6 <_DrawVLine>:
 8009de6:	b507      	push	{r0, r1, r2, lr}
 8009de8:	9300      	str	r3, [sp, #0]
 8009dea:	460b      	mov	r3, r1
 8009dec:	f7ff ff62 	bl	8009cb4 <_FillRect>
 8009df0:	b003      	add	sp, #12
 8009df2:	f85d fb04 	ldr.w	pc, [sp], #4

08009df6 <_GetDevProp>:
 8009df6:	3901      	subs	r1, #1
 8009df8:	6883      	ldr	r3, [r0, #8]
 8009dfa:	290d      	cmp	r1, #13
 8009dfc:	d814      	bhi.n	8009e28 <_GetDevProp+0x32>
 8009dfe:	e8df f001 	tbb	[pc, r1]
 8009e02:	0b09      	.short	0x0b09
 8009e04:	13130f0d 	.word	0x13130f0d
 8009e08:	11160713 	.word	0x11160713
 8009e0c:	16161611 	.word	0x16161611
 8009e10:	2020      	movs	r0, #32
 8009e12:	4770      	bx	lr
 8009e14:	68d8      	ldr	r0, [r3, #12]
 8009e16:	4770      	bx	lr
 8009e18:	6918      	ldr	r0, [r3, #16]
 8009e1a:	4770      	bx	lr
 8009e1c:	6958      	ldr	r0, [r3, #20]
 8009e1e:	4770      	bx	lr
 8009e20:	6998      	ldr	r0, [r3, #24]
 8009e22:	4770      	bx	lr
 8009e24:	2001      	movs	r0, #1
 8009e26:	4770      	bx	lr
 8009e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e2c:	4770      	bx	lr
 8009e2e:	2000      	movs	r0, #0
 8009e30:	4770      	bx	lr
	...

08009e34 <_GetDevData>:
 8009e34:	4802      	ldr	r0, [pc, #8]	; (8009e40 <_GetDevData+0xc>)
 8009e36:	2901      	cmp	r1, #1
 8009e38:	bf18      	it	ne
 8009e3a:	2000      	movne	r0, #0
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	08064b0c 	.word	0x08064b0c

08009e44 <_ReadRect>:
 8009e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e48:	460f      	mov	r7, r1
 8009e4a:	6881      	ldr	r1, [r0, #8]
 8009e4c:	69c8      	ldr	r0, [r1, #28]
 8009e4e:	f06f 0903 	mvn.w	r9, #3
 8009e52:	fb00 7502 	mla	r5, r0, r2, r7
 8009e56:	1bdb      	subs	r3, r3, r7
 8009e58:	00ae      	lsls	r6, r5, #2
 8009e5a:	fb09 fc00 	mul.w	ip, r9, r0
 8009e5e:	fb09 f505 	mul.w	r5, r9, r5
 8009e62:	f103 0901 	add.w	r9, r3, #1
 8009e66:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8009e6a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8009e6e:	1c5f      	adds	r7, r3, #1
 8009e70:	4630      	mov	r0, r6
 8009e72:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009e76:	680c      	ldr	r4, [r1, #0]
 8009e78:	44aa      	add	sl, r5
 8009e7a:	f850 b004 	ldr.w	fp, [r0, r4]
 8009e7e:	f84a b000 	str.w	fp, [sl, r0]
 8009e82:	3f01      	subs	r7, #1
 8009e84:	f100 0004 	add.w	r0, r0, #4
 8009e88:	d1f3      	bne.n	8009e72 <_ReadRect+0x2e>
 8009e8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009e8c:	444c      	add	r4, r9
 8009e8e:	940a      	str	r4, [sp, #40]	; 0x28
 8009e90:	3201      	adds	r2, #1
 8009e92:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009e94:	1e50      	subs	r0, r2, #1
 8009e96:	42a0      	cmp	r0, r4
 8009e98:	4446      	add	r6, r8
 8009e9a:	4465      	add	r5, ip
 8009e9c:	dbe7      	blt.n	8009e6e <_ReadRect+0x2a>
 8009e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009ea4 <_GetDevFunc>:
 8009ea4:	3901      	subs	r1, #1
 8009ea6:	2924      	cmp	r1, #36	; 0x24
 8009ea8:	d844      	bhi.n	8009f34 <_GetDevFunc+0x90>
 8009eaa:	e8df f001 	tbb	[pc, r1]
 8009eae:	1b41      	.short	0x1b41
 8009eb0:	1d431917 	.word	0x1d431917
 8009eb4:	45134343 	.word	0x45134343
 8009eb8:	21431f15 	.word	0x21431f15
 8009ebc:	43434323 	.word	0x43434323
 8009ec0:	2f292725 	.word	0x2f292725
 8009ec4:	43314343 	.word	0x43314343
 8009ec8:	43434343 	.word	0x43434343
 8009ecc:	2d2b3543 	.word	0x2d2b3543
 8009ed0:	433d      	.short	0x433d
 8009ed2:	39          	.byte	0x39
 8009ed3:	00          	.byte	0x00
 8009ed4:	4819      	ldr	r0, [pc, #100]	; (8009f3c <_GetDevFunc+0x98>)
 8009ed6:	4770      	bx	lr
 8009ed8:	4819      	ldr	r0, [pc, #100]	; (8009f40 <_GetDevFunc+0x9c>)
 8009eda:	4770      	bx	lr
 8009edc:	4819      	ldr	r0, [pc, #100]	; (8009f44 <_GetDevFunc+0xa0>)
 8009ede:	4770      	bx	lr
 8009ee0:	4819      	ldr	r0, [pc, #100]	; (8009f48 <_GetDevFunc+0xa4>)
 8009ee2:	4770      	bx	lr
 8009ee4:	4819      	ldr	r0, [pc, #100]	; (8009f4c <_GetDevFunc+0xa8>)
 8009ee6:	4770      	bx	lr
 8009ee8:	4819      	ldr	r0, [pc, #100]	; (8009f50 <_GetDevFunc+0xac>)
 8009eea:	4770      	bx	lr
 8009eec:	4819      	ldr	r0, [pc, #100]	; (8009f54 <_GetDevFunc+0xb0>)
 8009eee:	4770      	bx	lr
 8009ef0:	4819      	ldr	r0, [pc, #100]	; (8009f58 <_GetDevFunc+0xb4>)
 8009ef2:	4770      	bx	lr
 8009ef4:	4819      	ldr	r0, [pc, #100]	; (8009f5c <_GetDevFunc+0xb8>)
 8009ef6:	4770      	bx	lr
 8009ef8:	4819      	ldr	r0, [pc, #100]	; (8009f60 <_GetDevFunc+0xbc>)
 8009efa:	4770      	bx	lr
 8009efc:	4819      	ldr	r0, [pc, #100]	; (8009f64 <_GetDevFunc+0xc0>)
 8009efe:	4770      	bx	lr
 8009f00:	4819      	ldr	r0, [pc, #100]	; (8009f68 <_GetDevFunc+0xc4>)
 8009f02:	4770      	bx	lr
 8009f04:	4819      	ldr	r0, [pc, #100]	; (8009f6c <_GetDevFunc+0xc8>)
 8009f06:	4770      	bx	lr
 8009f08:	4819      	ldr	r0, [pc, #100]	; (8009f70 <_GetDevFunc+0xcc>)
 8009f0a:	4770      	bx	lr
 8009f0c:	4819      	ldr	r0, [pc, #100]	; (8009f74 <_GetDevFunc+0xd0>)
 8009f0e:	4770      	bx	lr
 8009f10:	6803      	ldr	r3, [r0, #0]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009f16:	4770      	bx	lr
 8009f18:	6803      	ldr	r3, [r0, #0]
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009f1e:	4770      	bx	lr
 8009f20:	6803      	ldr	r3, [r0, #0]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009f26:	4770      	bx	lr
 8009f28:	6803      	ldr	r3, [r0, #0]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009f2e:	4770      	bx	lr
 8009f30:	4811      	ldr	r0, [pc, #68]	; (8009f78 <_GetDevFunc+0xd4>)
 8009f32:	4770      	bx	lr
 8009f34:	2000      	movs	r0, #0
 8009f36:	4770      	bx	lr
 8009f38:	4810      	ldr	r0, [pc, #64]	; (8009f7c <_GetDevFunc+0xd8>)
 8009f3a:	4770      	bx	lr
 8009f3c:	0800a63d 	.word	0x0800a63d
 8009f40:	0800a6b9 	.word	0x0800a6b9
 8009f44:	0800a60f 	.word	0x0800a60f
 8009f48:	0800a563 	.word	0x0800a563
 8009f4c:	0800a5e7 	.word	0x0800a5e7
 8009f50:	0800a5bf 	.word	0x0800a5bf
 8009f54:	0800a5a5 	.word	0x0800a5a5
 8009f58:	08009fcd 	.word	0x08009fcd
 8009f5c:	08009fc3 	.word	0x08009fc3
 8009f60:	08009fad 	.word	0x08009fad
 8009f64:	08009f97 	.word	0x08009f97
 8009f68:	08009f81 	.word	0x08009f81
 8009f6c:	0800a667 	.word	0x0800a667
 8009f70:	0800a57f 	.word	0x0800a57f
 8009f74:	0800a51d 	.word	0x0800a51d
 8009f78:	08009e45 	.word	0x08009e45
 8009f7c:	0800a6fb 	.word	0x0800a6fb

08009f80 <_SetChroma>:
 8009f80:	b507      	push	{r0, r1, r2, lr}
 8009f82:	6980      	ldr	r0, [r0, #24]
 8009f84:	e88d 0006 	stmia.w	sp, {r1, r2}
 8009f88:	210d      	movs	r1, #13
 8009f8a:	466a      	mov	r2, sp
 8009f8c:	f7f6 ff42 	bl	8000e14 <LCD_X_DisplayDriver>
 8009f90:	b003      	add	sp, #12
 8009f92:	f85d fb04 	ldr.w	pc, [sp], #4

08009f96 <_SetChromaMode>:
 8009f96:	b507      	push	{r0, r1, r2, lr}
 8009f98:	aa02      	add	r2, sp, #8
 8009f9a:	6980      	ldr	r0, [r0, #24]
 8009f9c:	f842 1d04 	str.w	r1, [r2, #-4]!
 8009fa0:	210c      	movs	r1, #12
 8009fa2:	f7f6 ff37 	bl	8000e14 <LCD_X_DisplayDriver>
 8009fa6:	b003      	add	sp, #12
 8009fa8:	f85d fb04 	ldr.w	pc, [sp], #4

08009fac <_SetAlphaMode>:
 8009fac:	b507      	push	{r0, r1, r2, lr}
 8009fae:	aa02      	add	r2, sp, #8
 8009fb0:	6980      	ldr	r0, [r0, #24]
 8009fb2:	f842 1d04 	str.w	r1, [r2, #-4]!
 8009fb6:	210b      	movs	r1, #11
 8009fb8:	f7f6 ff2c 	bl	8000e14 <LCD_X_DisplayDriver>
 8009fbc:	b003      	add	sp, #12
 8009fbe:	f85d fb04 	ldr.w	pc, [sp], #4

08009fc2 <_Off>:
 8009fc2:	6980      	ldr	r0, [r0, #24]
 8009fc4:	2106      	movs	r1, #6
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f7f6 bf24 	b.w	8000e14 <LCD_X_DisplayDriver>

08009fcc <_On>:
 8009fcc:	6980      	ldr	r0, [r0, #24]
 8009fce:	2105      	movs	r1, #5
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f7f6 bf1f 	b.w	8000e14 <LCD_X_DisplayDriver>

08009fd6 <_SetOrg>:
 8009fd6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fda:	2300      	movs	r3, #0
 8009fdc:	4607      	mov	r7, r0
 8009fde:	6884      	ldr	r4, [r0, #8]
 8009fe0:	6980      	ldr	r0, [r0, #24]
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	460d      	mov	r5, r1
 8009fe6:	4616      	mov	r6, r2
 8009fe8:	9301      	str	r3, [sp, #4]
 8009fea:	f001 fb0f 	bl	800b60c <LCD_GetMirrorXEx>
 8009fee:	4680      	mov	r8, r0
 8009ff0:	69b8      	ldr	r0, [r7, #24]
 8009ff2:	f001 fb0e 	bl	800b612 <LCD_GetMirrorYEx>
 8009ff6:	4681      	mov	r9, r0
 8009ff8:	69b8      	ldr	r0, [r7, #24]
 8009ffa:	f001 fb0d 	bl	800b618 <LCD_GetSwapXYEx>
 8009ffe:	0080      	lsls	r0, r0, #2
 800a000:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 800a004:	ea40 0008 	orr.w	r0, r0, r8
 800a008:	2807      	cmp	r0, #7
 800a00a:	d826      	bhi.n	800a05a <_SetOrg+0x84>
 800a00c:	e8df f000 	tbb	[pc, r0]
 800a010:	0b0f0408 	.word	0x0b0f0408
 800a014:	1b1f1519 	.word	0x1b1f1519
 800a018:	6962      	ldr	r2, [r4, #20]
 800a01a:	68e3      	ldr	r3, [r4, #12]
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	1b5d      	subs	r5, r3, r5
 800a020:	9500      	str	r5, [sp, #0]
 800a022:	9601      	str	r6, [sp, #4]
 800a024:	e019      	b.n	800a05a <_SetOrg+0x84>
 800a026:	6962      	ldr	r2, [r4, #20]
 800a028:	68e3      	ldr	r3, [r4, #12]
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	1b5d      	subs	r5, r3, r5
 800a02e:	69a2      	ldr	r2, [r4, #24]
 800a030:	6923      	ldr	r3, [r4, #16]
 800a032:	9500      	str	r5, [sp, #0]
 800a034:	1ad3      	subs	r3, r2, r3
 800a036:	1b9e      	subs	r6, r3, r6
 800a038:	e7f3      	b.n	800a022 <_SetOrg+0x4c>
 800a03a:	69a2      	ldr	r2, [r4, #24]
 800a03c:	6923      	ldr	r3, [r4, #16]
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	1b9e      	subs	r6, r3, r6
 800a042:	9600      	str	r6, [sp, #0]
 800a044:	e008      	b.n	800a058 <_SetOrg+0x82>
 800a046:	69a2      	ldr	r2, [r4, #24]
 800a048:	6923      	ldr	r3, [r4, #16]
 800a04a:	1ad3      	subs	r3, r2, r3
 800a04c:	1b9e      	subs	r6, r3, r6
 800a04e:	6962      	ldr	r2, [r4, #20]
 800a050:	68e3      	ldr	r3, [r4, #12]
 800a052:	9600      	str	r6, [sp, #0]
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	1b5d      	subs	r5, r3, r5
 800a058:	9501      	str	r5, [sp, #4]
 800a05a:	69b8      	ldr	r0, [r7, #24]
 800a05c:	2103      	movs	r1, #3
 800a05e:	466a      	mov	r2, sp
 800a060:	f7f6 fed8 	bl	8000e14 <LCD_X_DisplayDriver>
 800a064:	b003      	add	sp, #12
 800a066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800a06c <_DrawBitmap>:
 800a06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a070:	b08d      	sub	sp, #52	; 0x34
 800a072:	4606      	mov	r6, r0
 800a074:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a076:	910a      	str	r1, [sp, #40]	; 0x28
 800a078:	2804      	cmp	r0, #4
 800a07a:	469b      	mov	fp, r3
 800a07c:	9209      	str	r2, [sp, #36]	; 0x24
 800a07e:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800a080:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a082:	68b3      	ldr	r3, [r6, #8]
 800a084:	d011      	beq.n	800a0aa <_DrawBitmap+0x3e>
 800a086:	dc09      	bgt.n	800a09c <_DrawBitmap+0x30>
 800a088:	2801      	cmp	r0, #1
 800a08a:	d013      	beq.n	800a0b4 <_DrawBitmap+0x48>
 800a08c:	2802      	cmp	r0, #2
 800a08e:	f040 822d 	bne.w	800a4ec <_DrawBitmap+0x480>
 800a092:	4aab      	ldr	r2, [pc, #684]	; (800a340 <_DrawBitmap+0x2d4>)
 800a094:	6812      	ldr	r2, [r2, #0]
 800a096:	920b      	str	r2, [sp, #44]	; 0x2c
 800a098:	2100      	movs	r1, #0
 800a09a:	e0b8      	b.n	800a20e <_DrawBitmap+0x1a2>
 800a09c:	2808      	cmp	r0, #8
 800a09e:	f000 8172 	beq.w	800a386 <_DrawBitmap+0x31a>
 800a0a2:	2820      	cmp	r0, #32
 800a0a4:	f000 81fb 	beq.w	800a49e <_DrawBitmap+0x432>
 800a0a8:	e220      	b.n	800a4ec <_DrawBitmap+0x480>
 800a0aa:	4aa5      	ldr	r2, [pc, #660]	; (800a340 <_DrawBitmap+0x2d4>)
 800a0ac:	6812      	ldr	r2, [r2, #0]
 800a0ae:	920b      	str	r2, [sp, #44]	; 0x2c
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	e10a      	b.n	800a2ca <_DrawBitmap+0x25e>
 800a0b4:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800a0b6:	b90f      	cbnz	r7, 800a0bc <_DrawBitmap+0x50>
 800a0b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a0ba:	e042      	b.n	800a142 <_DrawBitmap+0xd6>
 800a0bc:	4ba0      	ldr	r3, [pc, #640]	; (800a340 <_DrawBitmap+0x2d4>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	7c1b      	ldrb	r3, [r3, #16]
 800a0c2:	07db      	lsls	r3, r3, #31
 800a0c4:	d4f8      	bmi.n	800a0b8 <_DrawBitmap+0x4c>
 800a0c6:	981a      	ldr	r0, [sp, #104]	; 0x68
 800a0c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a0ca:	9302      	str	r3, [sp, #8]
 800a0cc:	e88d 0801 	stmia.w	sp, {r0, fp}
 800a0d0:	9818      	ldr	r0, [sp, #96]	; 0x60
 800a0d2:	9003      	str	r0, [sp, #12]
 800a0d4:	9504      	str	r5, [sp, #16]
 800a0d6:	69b0      	ldr	r0, [r6, #24]
 800a0d8:	4623      	mov	r3, r4
 800a0da:	47b8      	blx	r7
 800a0dc:	e206      	b.n	800a4ec <_DrawBitmap+0x480>
 800a0de:	4b98      	ldr	r3, [pc, #608]	; (800a340 <_DrawBitmap+0x2d4>)
 800a0e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a0e8:	7c1b      	ldrb	r3, [r3, #16]
 800a0ea:	f8d5 c000 	ldr.w	ip, [r5]
 800a0ee:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800a0f2:	68b0      	ldr	r0, [r6, #8]
 800a0f4:	f003 0303 	and.w	r3, r3, #3
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	448a      	add	sl, r1
 800a0fc:	d02d      	beq.n	800a15a <_DrawBitmap+0xee>
 800a0fe:	2b03      	cmp	r3, #3
 800a100:	d04d      	beq.n	800a19e <_DrawBitmap+0x132>
 800a102:	2b01      	cmp	r3, #1
 800a104:	d04b      	beq.n	800a19e <_DrawBitmap+0x132>
 800a106:	f1c1 0308 	rsb	r3, r1, #8
 800a10a:	7822      	ldrb	r2, [r4, #0]
 800a10c:	498d      	ldr	r1, [pc, #564]	; (800a344 <_DrawBitmap+0x2d8>)
 800a10e:	5c8a      	ldrb	r2, [r1, r2]
 800a110:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a112:	410a      	asrs	r2, r1
 800a114:	69c1      	ldr	r1, [r0, #28]
 800a116:	6800      	ldr	r0, [r0, #0]
 800a118:	fb01 a107 	mla	r1, r1, r7, sl
 800a11c:	eb00 0a81 	add.w	sl, r0, r1, lsl #2
 800a120:	4659      	mov	r1, fp
 800a122:	4620      	mov	r0, r4
 800a124:	f012 0f01 	tst.w	r2, #1
 800a128:	bf0c      	ite	eq
 800a12a:	46e0      	moveq	r8, ip
 800a12c:	46c8      	movne	r8, r9
 800a12e:	3b01      	subs	r3, #1
 800a130:	d00d      	beq.n	800a14e <_DrawBitmap+0xe2>
 800a132:	0852      	lsrs	r2, r2, #1
 800a134:	3901      	subs	r1, #1
 800a136:	f84a 8b04 	str.w	r8, [sl], #4
 800a13a:	d1f3      	bne.n	800a124 <_DrawBitmap+0xb8>
 800a13c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a13e:	3701      	adds	r7, #1
 800a140:	4414      	add	r4, r2
 800a142:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a144:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a146:	1a3b      	subs	r3, r7, r0
 800a148:	428b      	cmp	r3, r1
 800a14a:	dbc8      	blt.n	800a0de <_DrawBitmap+0x72>
 800a14c:	e1ce      	b.n	800a4ec <_DrawBitmap+0x480>
 800a14e:	7843      	ldrb	r3, [r0, #1]
 800a150:	4a7c      	ldr	r2, [pc, #496]	; (800a344 <_DrawBitmap+0x2d8>)
 800a152:	3001      	adds	r0, #1
 800a154:	5cd2      	ldrb	r2, [r2, r3]
 800a156:	2308      	movs	r3, #8
 800a158:	e7ec      	b.n	800a134 <_DrawBitmap+0xc8>
 800a15a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a15c:	4979      	ldr	r1, [pc, #484]	; (800a344 <_DrawBitmap+0x2d8>)
 800a15e:	f1c2 0308 	rsb	r3, r2, #8
 800a162:	7822      	ldrb	r2, [r4, #0]
 800a164:	5c89      	ldrb	r1, [r1, r2]
 800a166:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a168:	4111      	asrs	r1, r2
 800a16a:	69c2      	ldr	r2, [r0, #28]
 800a16c:	6800      	ldr	r0, [r0, #0]
 800a16e:	fb02 a207 	mla	r2, r2, r7, sl
 800a172:	eb00 0a82 	add.w	sl, r0, r2, lsl #2
 800a176:	4622      	mov	r2, r4
 800a178:	2000      	movs	r0, #0
 800a17a:	f011 0f01 	tst.w	r1, #1
 800a17e:	bf18      	it	ne
 800a180:	f84a 9020 	strne.w	r9, [sl, r0, lsl #2]
 800a184:	3b01      	subs	r3, #1
 800a186:	d001      	beq.n	800a18c <_DrawBitmap+0x120>
 800a188:	0849      	lsrs	r1, r1, #1
 800a18a:	e004      	b.n	800a196 <_DrawBitmap+0x12a>
 800a18c:	7853      	ldrb	r3, [r2, #1]
 800a18e:	496d      	ldr	r1, [pc, #436]	; (800a344 <_DrawBitmap+0x2d8>)
 800a190:	3201      	adds	r2, #1
 800a192:	5cc9      	ldrb	r1, [r1, r3]
 800a194:	2308      	movs	r3, #8
 800a196:	3001      	adds	r0, #1
 800a198:	4558      	cmp	r0, fp
 800a19a:	d1ee      	bne.n	800a17a <_DrawBitmap+0x10e>
 800a19c:	e7ce      	b.n	800a13c <_DrawBitmap+0xd0>
 800a19e:	6933      	ldr	r3, [r6, #16]
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	4798      	blx	r3
 800a1a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a1a8:	900b      	str	r0, [sp, #44]	; 0x2c
 800a1aa:	46d9      	mov	r9, fp
 800a1ac:	46a4      	mov	ip, r4
 800a1ae:	f89c 1000 	ldrb.w	r1, [ip]
 800a1b2:	2280      	movs	r2, #128	; 0x80
 800a1b4:	fa42 f208 	asr.w	r2, r2, r8
 800a1b8:	eb0a 030b 	add.w	r3, sl, fp
 800a1bc:	4211      	tst	r1, r2
 800a1be:	ebc9 0303 	rsb	r3, r9, r3
 800a1c2:	d013      	beq.n	800a1ec <_DrawBitmap+0x180>
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	463a      	mov	r2, r7
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	f8cd c01c 	str.w	ip, [sp, #28]
 800a1ce:	9308      	str	r3, [sp, #32]
 800a1d0:	f7ff fd54 	bl	8009c7c <_GetPixelIndex>
 800a1d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1d6:	9b08      	ldr	r3, [sp, #32]
 800a1d8:	ea80 0e01 	eor.w	lr, r0, r1
 800a1dc:	463a      	mov	r2, r7
 800a1de:	4619      	mov	r1, r3
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	4673      	mov	r3, lr
 800a1e4:	f7ff fd41 	bl	8009c6a <_SetPixelIndex>
 800a1e8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800a1ec:	f108 0801 	add.w	r8, r8, #1
 800a1f0:	f1b8 0f08 	cmp.w	r8, #8
 800a1f4:	bf04      	itt	eq
 800a1f6:	f10c 0c01 	addeq.w	ip, ip, #1
 800a1fa:	f04f 0800 	moveq.w	r8, #0
 800a1fe:	f1b9 0901 	subs.w	r9, r9, #1
 800a202:	d1d4      	bne.n	800a1ae <_DrawBitmap+0x142>
 800a204:	e79a      	b.n	800a13c <_DrawBitmap+0xd0>
 800a206:	b935      	cbnz	r5, 800a216 <_DrawBitmap+0x1aa>
 800a208:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800a20a:	3101      	adds	r1, #1
 800a20c:	443c      	add	r4, r7
 800a20e:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800a210:	42b9      	cmp	r1, r7
 800a212:	dbf8      	blt.n	800a206 <_DrawBitmap+0x19a>
 800a214:	e16a      	b.n	800a4ec <_DrawBitmap+0x480>
 800a216:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800a21a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a21c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a21e:	69da      	ldr	r2, [r3, #28]
 800a220:	7826      	ldrb	r6, [r4, #0]
 800a222:	4438      	add	r0, r7
 800a224:	4488      	add	r8, r1
 800a226:	fb02 0808 	mla	r8, r2, r8, r0
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a22e:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 800a232:	7c02      	ldrb	r2, [r0, #16]
 800a234:	f012 0203 	ands.w	r2, r2, #3
 800a238:	46c4      	mov	ip, r8
 800a23a:	d005      	beq.n	800a248 <_DrawBitmap+0x1dc>
 800a23c:	2a02      	cmp	r2, #2
 800a23e:	d1e3      	bne.n	800a208 <_DrawBitmap+0x19c>
 800a240:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a242:	9406      	str	r4, [sp, #24]
 800a244:	2000      	movs	r0, #0
 800a246:	e020      	b.n	800a28a <_DrawBitmap+0x21e>
 800a248:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a24a:	4658      	mov	r0, fp
 800a24c:	4627      	mov	r7, r4
 800a24e:	f1c2 0803 	rsb	r8, r2, #3
 800a252:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800a256:	f1c8 0906 	rsb	r9, r8, #6
 800a25a:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 800a25e:	fa4a f909 	asr.w	r9, sl, r9
 800a262:	ea09 0906 	and.w	r9, r9, r6
 800a266:	fa29 f808 	lsr.w	r8, r9, r8
 800a26a:	3201      	adds	r2, #1
 800a26c:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 800a270:	f84c 8b04 	str.w	r8, [ip], #4
 800a274:	2a04      	cmp	r2, #4
 800a276:	d102      	bne.n	800a27e <_DrawBitmap+0x212>
 800a278:	787e      	ldrb	r6, [r7, #1]
 800a27a:	2200      	movs	r2, #0
 800a27c:	3701      	adds	r7, #1
 800a27e:	3801      	subs	r0, #1
 800a280:	d1e5      	bne.n	800a24e <_DrawBitmap+0x1e2>
 800a282:	e7c1      	b.n	800a208 <_DrawBitmap+0x19c>
 800a284:	3001      	adds	r0, #1
 800a286:	4558      	cmp	r0, fp
 800a288:	d0be      	beq.n	800a208 <_DrawBitmap+0x19c>
 800a28a:	f1c2 0c03 	rsb	ip, r2, #3
 800a28e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800a292:	f1cc 0906 	rsb	r9, ip, #6
 800a296:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 800a29a:	fa4a f909 	asr.w	r9, sl, r9
 800a29e:	ea09 0906 	and.w	r9, r9, r6
 800a2a2:	fa39 fc0c 	lsrs.w	ip, r9, ip
 800a2a6:	bf1c      	itt	ne
 800a2a8:	f855 702c 	ldrne.w	r7, [r5, ip, lsl #2]
 800a2ac:	f848 7020 	strne.w	r7, [r8, r0, lsl #2]
 800a2b0:	3201      	adds	r2, #1
 800a2b2:	2a04      	cmp	r2, #4
 800a2b4:	d1e6      	bne.n	800a284 <_DrawBitmap+0x218>
 800a2b6:	9a06      	ldr	r2, [sp, #24]
 800a2b8:	7856      	ldrb	r6, [r2, #1]
 800a2ba:	3201      	adds	r2, #1
 800a2bc:	9206      	str	r2, [sp, #24]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	e7e0      	b.n	800a284 <_DrawBitmap+0x218>
 800a2c2:	b935      	cbnz	r5, 800a2d2 <_DrawBitmap+0x266>
 800a2c4:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800a2c6:	3101      	adds	r1, #1
 800a2c8:	443c      	add	r4, r7
 800a2ca:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800a2cc:	42b9      	cmp	r1, r7
 800a2ce:	dbf8      	blt.n	800a2c2 <_DrawBitmap+0x256>
 800a2d0:	e10c      	b.n	800a4ec <_DrawBitmap+0x480>
 800a2d2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800a2d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a2d8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a2da:	69da      	ldr	r2, [r3, #28]
 800a2dc:	7826      	ldrb	r6, [r4, #0]
 800a2de:	4438      	add	r0, r7
 800a2e0:	4488      	add	r8, r1
 800a2e2:	fb02 0808 	mla	r8, r2, r8, r0
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a2ea:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 800a2ee:	7c02      	ldrb	r2, [r0, #16]
 800a2f0:	f012 0203 	ands.w	r2, r2, #3
 800a2f4:	46c4      	mov	ip, r8
 800a2f6:	d005      	beq.n	800a304 <_DrawBitmap+0x298>
 800a2f8:	2a02      	cmp	r2, #2
 800a2fa:	d1e3      	bne.n	800a2c4 <_DrawBitmap+0x258>
 800a2fc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a2fe:	9406      	str	r4, [sp, #24]
 800a300:	2000      	movs	r0, #0
 800a302:	e024      	b.n	800a34e <_DrawBitmap+0x2e2>
 800a304:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a306:	4658      	mov	r0, fp
 800a308:	4627      	mov	r7, r4
 800a30a:	f1c2 0801 	rsb	r8, r2, #1
 800a30e:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800a312:	f1c8 0904 	rsb	r9, r8, #4
 800a316:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 800a31a:	fa4a f909 	asr.w	r9, sl, r9
 800a31e:	ea09 0906 	and.w	r9, r9, r6
 800a322:	fa29 f808 	lsr.w	r8, r9, r8
 800a326:	3201      	adds	r2, #1
 800a328:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 800a32c:	f84c 8b04 	str.w	r8, [ip], #4
 800a330:	2a02      	cmp	r2, #2
 800a332:	d102      	bne.n	800a33a <_DrawBitmap+0x2ce>
 800a334:	787e      	ldrb	r6, [r7, #1]
 800a336:	2200      	movs	r2, #0
 800a338:	3701      	adds	r7, #1
 800a33a:	3801      	subs	r0, #1
 800a33c:	d1e5      	bne.n	800a30a <_DrawBitmap+0x29e>
 800a33e:	e7c1      	b.n	800a2c4 <_DrawBitmap+0x258>
 800a340:	200002c4 	.word	0x200002c4
 800a344:	08066f28 	.word	0x08066f28
 800a348:	3001      	adds	r0, #1
 800a34a:	4558      	cmp	r0, fp
 800a34c:	d0ba      	beq.n	800a2c4 <_DrawBitmap+0x258>
 800a34e:	f1c2 0c01 	rsb	ip, r2, #1
 800a352:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800a356:	f1cc 0904 	rsb	r9, ip, #4
 800a35a:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 800a35e:	fa4a f909 	asr.w	r9, sl, r9
 800a362:	ea09 0906 	and.w	r9, r9, r6
 800a366:	fa39 fc0c 	lsrs.w	ip, r9, ip
 800a36a:	bf1c      	itt	ne
 800a36c:	f855 702c 	ldrne.w	r7, [r5, ip, lsl #2]
 800a370:	f848 7020 	strne.w	r7, [r8, r0, lsl #2]
 800a374:	3201      	adds	r2, #1
 800a376:	2a02      	cmp	r2, #2
 800a378:	d1e6      	bne.n	800a348 <_DrawBitmap+0x2dc>
 800a37a:	9a06      	ldr	r2, [sp, #24]
 800a37c:	7856      	ldrb	r6, [r2, #1]
 800a37e:	3201      	adds	r2, #1
 800a380:	9206      	str	r2, [sp, #24]
 800a382:	2200      	movs	r2, #0
 800a384:	e7e0      	b.n	800a348 <_DrawBitmap+0x2dc>
 800a386:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800a388:	f8df c168 	ldr.w	ip, [pc, #360]	; 800a4f4 <_DrawBitmap+0x488>
 800a38c:	b127      	cbz	r7, 800a398 <_DrawBitmap+0x32c>
 800a38e:	f8dc 0000 	ldr.w	r0, [ip]
 800a392:	7c00      	ldrb	r0, [r0, #16]
 800a394:	0780      	lsls	r0, r0, #30
 800a396:	d504      	bpl.n	800a3a2 <_DrawBitmap+0x336>
 800a398:	f8dc c000 	ldr.w	ip, [ip]
 800a39c:	f04f 0900 	mov.w	r9, #0
 800a3a0:	e011      	b.n	800a3c6 <_DrawBitmap+0x35a>
 800a3a2:	2d00      	cmp	r5, #0
 800a3a4:	d0f8      	beq.n	800a398 <_DrawBitmap+0x32c>
 800a3a6:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a3a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a3aa:	9302      	str	r3, [sp, #8]
 800a3ac:	f8cd b000 	str.w	fp, [sp]
 800a3b0:	9001      	str	r0, [sp, #4]
 800a3b2:	9503      	str	r5, [sp, #12]
 800a3b4:	69b0      	ldr	r0, [r6, #24]
 800a3b6:	4623      	mov	r3, r4
 800a3b8:	47b8      	blx	r7
 800a3ba:	e097      	b.n	800a4ec <_DrawBitmap+0x480>
 800a3bc:	b93d      	cbnz	r5, 800a3ce <_DrawBitmap+0x362>
 800a3be:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800a3c0:	f109 0901 	add.w	r9, r9, #1
 800a3c4:	443c      	add	r4, r7
 800a3c6:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800a3c8:	45b9      	cmp	r9, r7
 800a3ca:	dbf7      	blt.n	800a3bc <_DrawBitmap+0x350>
 800a3cc:	e08e      	b.n	800a4ec <_DrawBitmap+0x480>
 800a3ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3d0:	69da      	ldr	r2, [r3, #28]
 800a3d2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a3d4:	4448      	add	r0, r9
 800a3d6:	fb02 7000 	mla	r0, r2, r0, r7
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800a3e0:	f89c 2010 	ldrb.w	r2, [ip, #16]
 800a3e4:	f012 0203 	ands.w	r2, r2, #3
 800a3e8:	4601      	mov	r1, r0
 800a3ea:	d003      	beq.n	800a3f4 <_DrawBitmap+0x388>
 800a3ec:	2a02      	cmp	r2, #2
 800a3ee:	d1e6      	bne.n	800a3be <_DrawBitmap+0x352>
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	e04f      	b.n	800a494 <_DrawBitmap+0x428>
 800a3f4:	4658      	mov	r0, fp
 800a3f6:	4622      	mov	r2, r4
 800a3f8:	2807      	cmp	r0, #7
 800a3fa:	dd23      	ble.n	800a444 <_DrawBitmap+0x3d8>
 800a3fc:	7816      	ldrb	r6, [r2, #0]
 800a3fe:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a402:	600e      	str	r6, [r1, #0]
 800a404:	7856      	ldrb	r6, [r2, #1]
 800a406:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a40a:	604e      	str	r6, [r1, #4]
 800a40c:	7896      	ldrb	r6, [r2, #2]
 800a40e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a412:	608e      	str	r6, [r1, #8]
 800a414:	78d6      	ldrb	r6, [r2, #3]
 800a416:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a41a:	60ce      	str	r6, [r1, #12]
 800a41c:	7916      	ldrb	r6, [r2, #4]
 800a41e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a422:	610e      	str	r6, [r1, #16]
 800a424:	7956      	ldrb	r6, [r2, #5]
 800a426:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a42a:	614e      	str	r6, [r1, #20]
 800a42c:	7996      	ldrb	r6, [r2, #6]
 800a42e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a432:	618e      	str	r6, [r1, #24]
 800a434:	79d6      	ldrb	r6, [r2, #7]
 800a436:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a43a:	61ce      	str	r6, [r1, #28]
 800a43c:	3808      	subs	r0, #8
 800a43e:	3208      	adds	r2, #8
 800a440:	3120      	adds	r1, #32
 800a442:	e7d9      	b.n	800a3f8 <_DrawBitmap+0x38c>
 800a444:	2803      	cmp	r0, #3
 800a446:	dd13      	ble.n	800a470 <_DrawBitmap+0x404>
 800a448:	7816      	ldrb	r6, [r2, #0]
 800a44a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a44e:	600e      	str	r6, [r1, #0]
 800a450:	7856      	ldrb	r6, [r2, #1]
 800a452:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a456:	604e      	str	r6, [r1, #4]
 800a458:	7896      	ldrb	r6, [r2, #2]
 800a45a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a45e:	608e      	str	r6, [r1, #8]
 800a460:	78d6      	ldrb	r6, [r2, #3]
 800a462:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a466:	60ce      	str	r6, [r1, #12]
 800a468:	3804      	subs	r0, #4
 800a46a:	3204      	adds	r2, #4
 800a46c:	3110      	adds	r1, #16
 800a46e:	e7e9      	b.n	800a444 <_DrawBitmap+0x3d8>
 800a470:	2600      	movs	r6, #0
 800a472:	4286      	cmp	r6, r0
 800a474:	d0a3      	beq.n	800a3be <_DrawBitmap+0x352>
 800a476:	f812 8006 	ldrb.w	r8, [r2, r6]
 800a47a:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
 800a47e:	f841 7026 	str.w	r7, [r1, r6, lsl #2]
 800a482:	3601      	adds	r6, #1
 800a484:	e7f5      	b.n	800a472 <_DrawBitmap+0x406>
 800a486:	5c62      	ldrb	r2, [r4, r1]
 800a488:	b11a      	cbz	r2, 800a492 <_DrawBitmap+0x426>
 800a48a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a48e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 800a492:	3101      	adds	r1, #1
 800a494:	ebc1 020b 	rsb	r2, r1, fp
 800a498:	2a00      	cmp	r2, #0
 800a49a:	dcf4      	bgt.n	800a486 <_DrawBitmap+0x41a>
 800a49c:	e78f      	b.n	800a3be <_DrawBitmap+0x352>
 800a49e:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800a4a0:	b90d      	cbnz	r5, 800a4a6 <_DrawBitmap+0x43a>
 800a4a2:	462b      	mov	r3, r5
 800a4a4:	e012      	b.n	800a4cc <_DrawBitmap+0x460>
 800a4a6:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800a4a8:	9701      	str	r7, [sp, #4]
 800a4aa:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800a4ac:	f8cd b000 	str.w	fp, [sp]
 800a4b0:	9702      	str	r7, [sp, #8]
 800a4b2:	69b0      	ldr	r0, [r6, #24]
 800a4b4:	4623      	mov	r3, r4
 800a4b6:	47a8      	blx	r5
 800a4b8:	e018      	b.n	800a4ec <_DrawBitmap+0x480>
 800a4ba:	f851 7f04 	ldr.w	r7, [r1, #4]!
 800a4be:	1b0d      	subs	r5, r1, r4
 800a4c0:	3a01      	subs	r2, #1
 800a4c2:	502f      	str	r7, [r5, r0]
 800a4c4:	d1f9      	bne.n	800a4ba <_DrawBitmap+0x44e>
 800a4c6:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	443c      	add	r4, r7
 800a4cc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800a4ce:	42ab      	cmp	r3, r5
 800a4d0:	da0c      	bge.n	800a4ec <_DrawBitmap+0x480>
 800a4d2:	68b2      	ldr	r2, [r6, #8]
 800a4d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4d6:	69d1      	ldr	r1, [r2, #28]
 800a4d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a4da:	6812      	ldr	r2, [r2, #0]
 800a4dc:	4418      	add	r0, r3
 800a4de:	fb01 5100 	mla	r1, r1, r0, r5
 800a4e2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800a4e6:	1f21      	subs	r1, r4, #4
 800a4e8:	465a      	mov	r2, fp
 800a4ea:	e7e6      	b.n	800a4ba <_DrawBitmap+0x44e>
 800a4ec:	b00d      	add	sp, #52	; 0x34
 800a4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f2:	bf00      	nop
 800a4f4:	200002c4 	.word	0x200002c4

0800a4f8 <_InitOnce.isra.4>:
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	6805      	ldr	r5, [r0, #0]
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	b93d      	cbnz	r5, 800a510 <_InitOnce.isra.4+0x18>
 800a500:	2048      	movs	r0, #72	; 0x48
 800a502:	f004 f895 	bl	800e630 <GUI_ALLOC_GetFixedBlock>
 800a506:	4629      	mov	r1, r5
 800a508:	6020      	str	r0, [r4, #0]
 800a50a:	2248      	movs	r2, #72	; 0x48
 800a50c:	f001 fc9d 	bl	800be4a <GUI__memset>
 800a510:	6820      	ldr	r0, [r4, #0]
 800a512:	f1d0 0001 	rsbs	r0, r0, #1
 800a516:	bf38      	it	cc
 800a518:	2000      	movcc	r0, #0
 800a51a:	bd38      	pop	{r3, r4, r5, pc}

0800a51c <_SetDevFunc>:
 800a51c:	b570      	push	{r4, r5, r6, lr}
 800a51e:	4605      	mov	r5, r0
 800a520:	3008      	adds	r0, #8
 800a522:	460e      	mov	r6, r1
 800a524:	4614      	mov	r4, r2
 800a526:	f7ff ffe7 	bl	800a4f8 <_InitOnce.isra.4>
 800a52a:	68ab      	ldr	r3, [r5, #8]
 800a52c:	b1c3      	cbz	r3, 800a560 <_SetDevFunc+0x44>
 800a52e:	f1a6 0119 	sub.w	r1, r6, #25
 800a532:	290f      	cmp	r1, #15
 800a534:	d814      	bhi.n	800a560 <_SetDevFunc+0x44>
 800a536:	e8df f001 	tbb	[pc, r1]
 800a53a:	1308      	.short	0x1308
 800a53c:	13131313 	.word	0x13131313
 800a540:	130a0c13 	.word	0x130a0c13
 800a544:	130e1310 	.word	0x130e1310
 800a548:	1213      	.short	0x1213
 800a54a:	631c      	str	r4, [r3, #48]	; 0x30
 800a54c:	bd70      	pop	{r4, r5, r6, pc}
 800a54e:	635c      	str	r4, [r3, #52]	; 0x34
 800a550:	bd70      	pop	{r4, r5, r6, pc}
 800a552:	639c      	str	r4, [r3, #56]	; 0x38
 800a554:	bd70      	pop	{r4, r5, r6, pc}
 800a556:	63dc      	str	r4, [r3, #60]	; 0x3c
 800a558:	bd70      	pop	{r4, r5, r6, pc}
 800a55a:	641c      	str	r4, [r3, #64]	; 0x40
 800a55c:	bd70      	pop	{r4, r5, r6, pc}
 800a55e:	645c      	str	r4, [r3, #68]	; 0x44
 800a560:	bd70      	pop	{r4, r5, r6, pc}

0800a562 <_GetPos>:
 800a562:	b570      	push	{r4, r5, r6, lr}
 800a564:	4604      	mov	r4, r0
 800a566:	3008      	adds	r0, #8
 800a568:	460d      	mov	r5, r1
 800a56a:	4616      	mov	r6, r2
 800a56c:	f7ff ffc4 	bl	800a4f8 <_InitOnce.isra.4>
 800a570:	68a3      	ldr	r3, [r4, #8]
 800a572:	b11b      	cbz	r3, 800a57c <_GetPos+0x1a>
 800a574:	6a18      	ldr	r0, [r3, #32]
 800a576:	6028      	str	r0, [r5, #0]
 800a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57a:	6033      	str	r3, [r6, #0]
 800a57c:	bd70      	pop	{r4, r5, r6, pc}

0800a57e <_ShowBuffer>:
 800a57e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a580:	4604      	mov	r4, r0
 800a582:	2300      	movs	r3, #0
 800a584:	3008      	adds	r0, #8
 800a586:	9301      	str	r3, [sp, #4]
 800a588:	460d      	mov	r5, r1
 800a58a:	f7ff ffb5 	bl	800a4f8 <_InitOnce.isra.4>
 800a58e:	68a3      	ldr	r3, [r4, #8]
 800a590:	b133      	cbz	r3, 800a5a0 <_ShowBuffer+0x22>
 800a592:	aa02      	add	r2, sp, #8
 800a594:	69a0      	ldr	r0, [r4, #24]
 800a596:	f842 5d04 	str.w	r5, [r2, #-4]!
 800a59a:	210e      	movs	r1, #14
 800a59c:	f7f6 fc3a 	bl	8000e14 <LCD_X_DisplayDriver>
 800a5a0:	b003      	add	sp, #12
 800a5a2:	bd30      	pop	{r4, r5, pc}

0800a5a4 <_Init>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	3008      	adds	r0, #8
 800a5aa:	f7ff ffa5 	bl	800a4f8 <_InitOnce.isra.4>
 800a5ae:	2101      	movs	r1, #1
 800a5b0:	4605      	mov	r5, r0
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	69a0      	ldr	r0, [r4, #24]
 800a5b6:	f7f6 fc2d 	bl	8000e14 <LCD_X_DisplayDriver>
 800a5ba:	4328      	orrs	r0, r5
 800a5bc:	bd38      	pop	{r3, r4, r5, pc}

0800a5be <_SetVis>:
 800a5be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	3008      	adds	r0, #8
 800a5c6:	9301      	str	r3, [sp, #4]
 800a5c8:	460d      	mov	r5, r1
 800a5ca:	f7ff ff95 	bl	800a4f8 <_InitOnce.isra.4>
 800a5ce:	68a3      	ldr	r3, [r4, #8]
 800a5d0:	b13b      	cbz	r3, 800a5e2 <_SetVis+0x24>
 800a5d2:	aa02      	add	r2, sp, #8
 800a5d4:	62dd      	str	r5, [r3, #44]	; 0x2c
 800a5d6:	f842 5d04 	str.w	r5, [r2, #-4]!
 800a5da:	69a0      	ldr	r0, [r4, #24]
 800a5dc:	2109      	movs	r1, #9
 800a5de:	f7f6 fc19 	bl	8000e14 <LCD_X_DisplayDriver>
 800a5e2:	b003      	add	sp, #12
 800a5e4:	bd30      	pop	{r4, r5, pc}

0800a5e6 <_SetAlpha>:
 800a5e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5e8:	4604      	mov	r4, r0
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	3008      	adds	r0, #8
 800a5ee:	9301      	str	r3, [sp, #4]
 800a5f0:	460d      	mov	r5, r1
 800a5f2:	f7ff ff81 	bl	800a4f8 <_InitOnce.isra.4>
 800a5f6:	68a3      	ldr	r3, [r4, #8]
 800a5f8:	b13b      	cbz	r3, 800a60a <_SetAlpha+0x24>
 800a5fa:	aa02      	add	r2, sp, #8
 800a5fc:	629d      	str	r5, [r3, #40]	; 0x28
 800a5fe:	f842 5d04 	str.w	r5, [r2, #-4]!
 800a602:	69a0      	ldr	r0, [r4, #24]
 800a604:	210a      	movs	r1, #10
 800a606:	f7f6 fc05 	bl	8000e14 <LCD_X_DisplayDriver>
 800a60a:	b003      	add	sp, #12
 800a60c:	bd30      	pop	{r4, r5, pc}

0800a60e <_SetPos>:
 800a60e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a610:	4604      	mov	r4, r0
 800a612:	2300      	movs	r3, #0
 800a614:	3008      	adds	r0, #8
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	9301      	str	r3, [sp, #4]
 800a61a:	460d      	mov	r5, r1
 800a61c:	4616      	mov	r6, r2
 800a61e:	f7ff ff6b 	bl	800a4f8 <_InitOnce.isra.4>
 800a622:	68a3      	ldr	r3, [r4, #8]
 800a624:	b143      	cbz	r3, 800a638 <_SetPos+0x2a>
 800a626:	621d      	str	r5, [r3, #32]
 800a628:	625e      	str	r6, [r3, #36]	; 0x24
 800a62a:	69a0      	ldr	r0, [r4, #24]
 800a62c:	2108      	movs	r1, #8
 800a62e:	466a      	mov	r2, sp
 800a630:	e88d 0060 	stmia.w	sp, {r5, r6}
 800a634:	f7f6 fbee 	bl	8000e14 <LCD_X_DisplayDriver>
 800a638:	b002      	add	sp, #8
 800a63a:	bd70      	pop	{r4, r5, r6, pc}

0800a63c <_SetVRAMAddr>:
 800a63c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a63e:	4604      	mov	r4, r0
 800a640:	2300      	movs	r3, #0
 800a642:	3008      	adds	r0, #8
 800a644:	9301      	str	r3, [sp, #4]
 800a646:	460d      	mov	r5, r1
 800a648:	f7ff ff56 	bl	800a4f8 <_InitOnce.isra.4>
 800a64c:	68a3      	ldr	r3, [r4, #8]
 800a64e:	b143      	cbz	r3, 800a662 <_SetVRAMAddr+0x26>
 800a650:	aa02      	add	r2, sp, #8
 800a652:	601d      	str	r5, [r3, #0]
 800a654:	605d      	str	r5, [r3, #4]
 800a656:	f842 5d04 	str.w	r5, [r2, #-4]!
 800a65a:	69a0      	ldr	r0, [r4, #24]
 800a65c:	2102      	movs	r1, #2
 800a65e:	f7f6 fbd9 	bl	8000e14 <LCD_X_DisplayDriver>
 800a662:	b003      	add	sp, #12
 800a664:	bd30      	pop	{r4, r5, pc}

0800a666 <_CopyBuffer>:
 800a666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a66a:	4605      	mov	r5, r0
 800a66c:	3008      	adds	r0, #8
 800a66e:	460e      	mov	r6, r1
 800a670:	4617      	mov	r7, r2
 800a672:	f7ff ff41 	bl	800a4f8 <_InitOnce.isra.4>
 800a676:	68ac      	ldr	r4, [r5, #8]
 800a678:	b1e4      	cbz	r4, 800a6b4 <_CopyBuffer+0x4e>
 800a67a:	42be      	cmp	r6, r7
 800a67c:	d01a      	beq.n	800a6b4 <_CopyBuffer+0x4e>
 800a67e:	68eb      	ldr	r3, [r5, #12]
 800a680:	2108      	movs	r1, #8
 800a682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a684:	4628      	mov	r0, r5
 800a686:	4798      	blx	r3
 800a688:	6923      	ldr	r3, [r4, #16]
 800a68a:	68e2      	ldr	r2, [r4, #12]
 800a68c:	6861      	ldr	r1, [r4, #4]
 800a68e:	435a      	muls	r2, r3
 800a690:	4350      	muls	r0, r2
 800a692:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a694:	08c2      	lsrs	r2, r0, #3
 800a696:	fb07 1802 	mla	r8, r7, r2, r1
 800a69a:	b123      	cbz	r3, 800a6a6 <_CopyBuffer+0x40>
 800a69c:	69a8      	ldr	r0, [r5, #24]
 800a69e:	4631      	mov	r1, r6
 800a6a0:	463a      	mov	r2, r7
 800a6a2:	4798      	blx	r3
 800a6a4:	e004      	b.n	800a6b0 <_CopyBuffer+0x4a>
 800a6a6:	4640      	mov	r0, r8
 800a6a8:	fb06 1102 	mla	r1, r6, r2, r1
 800a6ac:	f7f5 fdde 	bl	800026c <memcpy>
 800a6b0:	f8c4 8000 	str.w	r8, [r4]
 800a6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a6b8 <_SetSize>:
 800a6b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6ba:	4605      	mov	r5, r0
 800a6bc:	2300      	movs	r3, #0
 800a6be:	3008      	adds	r0, #8
 800a6c0:	460e      	mov	r6, r1
 800a6c2:	4617      	mov	r7, r2
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	9301      	str	r3, [sp, #4]
 800a6c8:	f7ff ff16 	bl	800a4f8 <_InitOnce.isra.4>
 800a6cc:	68ac      	ldr	r4, [r5, #8]
 800a6ce:	b194      	cbz	r4, 800a6f6 <_SetSize+0x3e>
 800a6d0:	69e3      	ldr	r3, [r4, #28]
 800a6d2:	b93b      	cbnz	r3, 800a6e4 <_SetSize+0x2c>
 800a6d4:	69a8      	ldr	r0, [r5, #24]
 800a6d6:	f000 ff9f 	bl	800b618 <LCD_GetSwapXYEx>
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	bf0c      	ite	eq
 800a6de:	4630      	moveq	r0, r6
 800a6e0:	4638      	movne	r0, r7
 800a6e2:	61e0      	str	r0, [r4, #28]
 800a6e4:	60e6      	str	r6, [r4, #12]
 800a6e6:	6127      	str	r7, [r4, #16]
 800a6e8:	69a8      	ldr	r0, [r5, #24]
 800a6ea:	2107      	movs	r1, #7
 800a6ec:	466a      	mov	r2, sp
 800a6ee:	e88d 00c0 	stmia.w	sp, {r6, r7}
 800a6f2:	f7f6 fb8f 	bl	8000e14 <LCD_X_DisplayDriver>
 800a6f6:	b003      	add	sp, #12
 800a6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a6fa <_SetVSize>:
 800a6fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fc:	4606      	mov	r6, r0
 800a6fe:	3008      	adds	r0, #8
 800a700:	460d      	mov	r5, r1
 800a702:	4617      	mov	r7, r2
 800a704:	f7ff fef8 	bl	800a4f8 <_InitOnce.isra.4>
 800a708:	68b4      	ldr	r4, [r6, #8]
 800a70a:	b144      	cbz	r4, 800a71e <_SetVSize+0x24>
 800a70c:	69b0      	ldr	r0, [r6, #24]
 800a70e:	f000 ff83 	bl	800b618 <LCD_GetSwapXYEx>
 800a712:	6165      	str	r5, [r4, #20]
 800a714:	61a7      	str	r7, [r4, #24]
 800a716:	b108      	cbz	r0, 800a71c <_SetVSize+0x22>
 800a718:	61e7      	str	r7, [r4, #28]
 800a71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a71c:	61e5      	str	r5, [r4, #28]
 800a71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a720 <_GetRect>:
 800a720:	6883      	ldr	r3, [r0, #8]
 800a722:	2200      	movs	r2, #0
 800a724:	800a      	strh	r2, [r1, #0]
 800a726:	804a      	strh	r2, [r1, #2]
 800a728:	695a      	ldr	r2, [r3, #20]
 800a72a:	699b      	ldr	r3, [r3, #24]
 800a72c:	3a01      	subs	r2, #1
 800a72e:	3b01      	subs	r3, #1
 800a730:	808a      	strh	r2, [r1, #4]
 800a732:	80cb      	strh	r3, [r1, #6]
 800a734:	4770      	bx	lr

0800a736 <_SetPixelIndex>:
 800a736:	b510      	push	{r4, lr}
 800a738:	6880      	ldr	r0, [r0, #8]
 800a73a:	69c4      	ldr	r4, [r0, #28]
 800a73c:	6800      	ldr	r0, [r0, #0]
 800a73e:	fb04 1202 	mla	r2, r4, r2, r1
 800a742:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 800a746:	bd10      	pop	{r4, pc}

0800a748 <_GetPixelIndex>:
 800a748:	6883      	ldr	r3, [r0, #8]
 800a74a:	69d8      	ldr	r0, [r3, #28]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	fb00 1202 	mla	r2, r0, r2, r1
 800a752:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800a756:	4770      	bx	lr

0800a758 <_XorPixel>:
 800a758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a75c:	4604      	mov	r4, r0
 800a75e:	460f      	mov	r7, r1
 800a760:	4616      	mov	r6, r2
 800a762:	f7ff fff1 	bl	800a748 <_GetPixelIndex>
 800a766:	6925      	ldr	r5, [r4, #16]
 800a768:	68ab      	ldr	r3, [r5, #8]
 800a76a:	4680      	mov	r8, r0
 800a76c:	4798      	blx	r3
 800a76e:	4639      	mov	r1, r7
 800a770:	ea80 0308 	eor.w	r3, r0, r8
 800a774:	4632      	mov	r2, r6
 800a776:	4620      	mov	r0, r4
 800a778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a77c:	f7ff bfdb 	b.w	800a736 <_SetPixelIndex>

0800a780 <_GetDevProp>:
 800a780:	3901      	subs	r1, #1
 800a782:	6883      	ldr	r3, [r0, #8]
 800a784:	290d      	cmp	r1, #13
 800a786:	d814      	bhi.n	800a7b2 <_GetDevProp+0x32>
 800a788:	e8df f001 	tbb	[pc, r1]
 800a78c:	0f0d0b09 	.word	0x0f0d0b09
 800a790:	07131313 	.word	0x07131313
 800a794:	16111116 	.word	0x16111116
 800a798:	1616      	.short	0x1616
 800a79a:	2010      	movs	r0, #16
 800a79c:	4770      	bx	lr
 800a79e:	68d8      	ldr	r0, [r3, #12]
 800a7a0:	4770      	bx	lr
 800a7a2:	6918      	ldr	r0, [r3, #16]
 800a7a4:	4770      	bx	lr
 800a7a6:	6958      	ldr	r0, [r3, #20]
 800a7a8:	4770      	bx	lr
 800a7aa:	6998      	ldr	r0, [r3, #24]
 800a7ac:	4770      	bx	lr
 800a7ae:	2001      	movs	r0, #1
 800a7b0:	4770      	bx	lr
 800a7b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7b6:	4770      	bx	lr
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	4770      	bx	lr

0800a7bc <_GetDevData>:
 800a7bc:	4802      	ldr	r0, [pc, #8]	; (800a7c8 <_GetDevData+0xc>)
 800a7be:	2901      	cmp	r1, #1
 800a7c0:	bf18      	it	ne
 800a7c2:	2000      	movne	r0, #0
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	08067114 	.word	0x08067114

0800a7cc <_ReadRect>:
 800a7cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7d0:	6886      	ldr	r6, [r0, #8]
 800a7d2:	9c08      	ldr	r4, [sp, #32]
 800a7d4:	69f0      	ldr	r0, [r6, #28]
 800a7d6:	6837      	ldr	r7, [r6, #0]
 800a7d8:	1a5b      	subs	r3, r3, r1
 800a7da:	0046      	lsls	r6, r0, #1
 800a7dc:	fb00 1002 	mla	r0, r0, r2, r1
 800a7e0:	1c59      	adds	r1, r3, #1
 800a7e2:	0040      	lsls	r0, r0, #1
 800a7e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800a7e8:	0049      	lsls	r1, r1, #1
 800a7ea:	1ea3      	subs	r3, r4, #2
 800a7ec:	eb04 080c 	add.w	r8, r4, ip
 800a7f0:	ebc4 0907 	rsb	r9, r4, r7
 800a7f4:	4499      	add	r9, r3
 800a7f6:	eb09 0500 	add.w	r5, r9, r0
 800a7fa:	f8b5 9002 	ldrh.w	r9, [r5, #2]
 800a7fe:	f823 9f02 	strh.w	r9, [r3, #2]!
 800a802:	4543      	cmp	r3, r8
 800a804:	d1f4      	bne.n	800a7f0 <_ReadRect+0x24>
 800a806:	3201      	adds	r2, #1
 800a808:	9d07      	ldr	r5, [sp, #28]
 800a80a:	1e53      	subs	r3, r2, #1
 800a80c:	42ab      	cmp	r3, r5
 800a80e:	440c      	add	r4, r1
 800a810:	4430      	add	r0, r6
 800a812:	dbea      	blt.n	800a7ea <_ReadRect+0x1e>
 800a814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a818 <_GetDevFunc>:
 800a818:	3901      	subs	r1, #1
 800a81a:	2924      	cmp	r1, #36	; 0x24
 800a81c:	d844      	bhi.n	800a8a8 <_GetDevFunc+0x90>
 800a81e:	e8df f001 	tbb	[pc, r1]
 800a822:	1b41      	.short	0x1b41
 800a824:	1d431917 	.word	0x1d431917
 800a828:	45134343 	.word	0x45134343
 800a82c:	21431f15 	.word	0x21431f15
 800a830:	43434323 	.word	0x43434323
 800a834:	2f292725 	.word	0x2f292725
 800a838:	43314343 	.word	0x43314343
 800a83c:	43434343 	.word	0x43434343
 800a840:	2d2b3543 	.word	0x2d2b3543
 800a844:	433d      	.short	0x433d
 800a846:	39          	.byte	0x39
 800a847:	00          	.byte	0x00
 800a848:	4819      	ldr	r0, [pc, #100]	; (800a8b0 <_GetDevFunc+0x98>)
 800a84a:	4770      	bx	lr
 800a84c:	4819      	ldr	r0, [pc, #100]	; (800a8b4 <_GetDevFunc+0x9c>)
 800a84e:	4770      	bx	lr
 800a850:	4819      	ldr	r0, [pc, #100]	; (800a8b8 <_GetDevFunc+0xa0>)
 800a852:	4770      	bx	lr
 800a854:	4819      	ldr	r0, [pc, #100]	; (800a8bc <_GetDevFunc+0xa4>)
 800a856:	4770      	bx	lr
 800a858:	4819      	ldr	r0, [pc, #100]	; (800a8c0 <_GetDevFunc+0xa8>)
 800a85a:	4770      	bx	lr
 800a85c:	4819      	ldr	r0, [pc, #100]	; (800a8c4 <_GetDevFunc+0xac>)
 800a85e:	4770      	bx	lr
 800a860:	4819      	ldr	r0, [pc, #100]	; (800a8c8 <_GetDevFunc+0xb0>)
 800a862:	4770      	bx	lr
 800a864:	4819      	ldr	r0, [pc, #100]	; (800a8cc <_GetDevFunc+0xb4>)
 800a866:	4770      	bx	lr
 800a868:	4819      	ldr	r0, [pc, #100]	; (800a8d0 <_GetDevFunc+0xb8>)
 800a86a:	4770      	bx	lr
 800a86c:	4819      	ldr	r0, [pc, #100]	; (800a8d4 <_GetDevFunc+0xbc>)
 800a86e:	4770      	bx	lr
 800a870:	4819      	ldr	r0, [pc, #100]	; (800a8d8 <_GetDevFunc+0xc0>)
 800a872:	4770      	bx	lr
 800a874:	4819      	ldr	r0, [pc, #100]	; (800a8dc <_GetDevFunc+0xc4>)
 800a876:	4770      	bx	lr
 800a878:	4819      	ldr	r0, [pc, #100]	; (800a8e0 <_GetDevFunc+0xc8>)
 800a87a:	4770      	bx	lr
 800a87c:	4819      	ldr	r0, [pc, #100]	; (800a8e4 <_GetDevFunc+0xcc>)
 800a87e:	4770      	bx	lr
 800a880:	4819      	ldr	r0, [pc, #100]	; (800a8e8 <_GetDevFunc+0xd0>)
 800a882:	4770      	bx	lr
 800a884:	6803      	ldr	r3, [r0, #0]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a88a:	4770      	bx	lr
 800a88c:	6803      	ldr	r3, [r0, #0]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a892:	4770      	bx	lr
 800a894:	6803      	ldr	r3, [r0, #0]
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a89a:	4770      	bx	lr
 800a89c:	6803      	ldr	r3, [r0, #0]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a8a2:	4770      	bx	lr
 800a8a4:	4811      	ldr	r0, [pc, #68]	; (800a8ec <_GetDevFunc+0xd4>)
 800a8a6:	4770      	bx	lr
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	4770      	bx	lr
 800a8ac:	4810      	ldr	r0, [pc, #64]	; (800a8f0 <_GetDevFunc+0xd8>)
 800a8ae:	4770      	bx	lr
 800a8b0:	0800acf9 	.word	0x0800acf9
 800a8b4:	0800ad75 	.word	0x0800ad75
 800a8b8:	0800accb 	.word	0x0800accb
 800a8bc:	0800ac1f 	.word	0x0800ac1f
 800a8c0:	0800aca3 	.word	0x0800aca3
 800a8c4:	0800ac7b 	.word	0x0800ac7b
 800a8c8:	0800ac61 	.word	0x0800ac61
 800a8cc:	0800a941 	.word	0x0800a941
 800a8d0:	0800a937 	.word	0x0800a937
 800a8d4:	0800a921 	.word	0x0800a921
 800a8d8:	0800a90b 	.word	0x0800a90b
 800a8dc:	0800a8f5 	.word	0x0800a8f5
 800a8e0:	0800ad23 	.word	0x0800ad23
 800a8e4:	0800ac3b 	.word	0x0800ac3b
 800a8e8:	0800abdb 	.word	0x0800abdb
 800a8ec:	0800a7cd 	.word	0x0800a7cd
 800a8f0:	0800adb7 	.word	0x0800adb7

0800a8f4 <_SetChroma>:
 800a8f4:	b507      	push	{r0, r1, r2, lr}
 800a8f6:	6980      	ldr	r0, [r0, #24]
 800a8f8:	e88d 0006 	stmia.w	sp, {r1, r2}
 800a8fc:	210d      	movs	r1, #13
 800a8fe:	466a      	mov	r2, sp
 800a900:	f7f6 fa88 	bl	8000e14 <LCD_X_DisplayDriver>
 800a904:	b003      	add	sp, #12
 800a906:	f85d fb04 	ldr.w	pc, [sp], #4

0800a90a <_SetChromaMode>:
 800a90a:	b507      	push	{r0, r1, r2, lr}
 800a90c:	aa02      	add	r2, sp, #8
 800a90e:	6980      	ldr	r0, [r0, #24]
 800a910:	f842 1d04 	str.w	r1, [r2, #-4]!
 800a914:	210c      	movs	r1, #12
 800a916:	f7f6 fa7d 	bl	8000e14 <LCD_X_DisplayDriver>
 800a91a:	b003      	add	sp, #12
 800a91c:	f85d fb04 	ldr.w	pc, [sp], #4

0800a920 <_SetAlphaMode>:
 800a920:	b507      	push	{r0, r1, r2, lr}
 800a922:	aa02      	add	r2, sp, #8
 800a924:	6980      	ldr	r0, [r0, #24]
 800a926:	f842 1d04 	str.w	r1, [r2, #-4]!
 800a92a:	210b      	movs	r1, #11
 800a92c:	f7f6 fa72 	bl	8000e14 <LCD_X_DisplayDriver>
 800a930:	b003      	add	sp, #12
 800a932:	f85d fb04 	ldr.w	pc, [sp], #4

0800a936 <_Off>:
 800a936:	6980      	ldr	r0, [r0, #24]
 800a938:	2106      	movs	r1, #6
 800a93a:	2200      	movs	r2, #0
 800a93c:	f7f6 ba6a 	b.w	8000e14 <LCD_X_DisplayDriver>

0800a940 <_On>:
 800a940:	6980      	ldr	r0, [r0, #24]
 800a942:	2105      	movs	r1, #5
 800a944:	2200      	movs	r2, #0
 800a946:	f7f6 ba65 	b.w	8000e14 <LCD_X_DisplayDriver>

0800a94a <_SetOrg>:
 800a94a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a94e:	2300      	movs	r3, #0
 800a950:	4607      	mov	r7, r0
 800a952:	6884      	ldr	r4, [r0, #8]
 800a954:	6980      	ldr	r0, [r0, #24]
 800a956:	9300      	str	r3, [sp, #0]
 800a958:	460d      	mov	r5, r1
 800a95a:	4616      	mov	r6, r2
 800a95c:	9301      	str	r3, [sp, #4]
 800a95e:	f000 fe55 	bl	800b60c <LCD_GetMirrorXEx>
 800a962:	4680      	mov	r8, r0
 800a964:	69b8      	ldr	r0, [r7, #24]
 800a966:	f000 fe54 	bl	800b612 <LCD_GetMirrorYEx>
 800a96a:	4681      	mov	r9, r0
 800a96c:	69b8      	ldr	r0, [r7, #24]
 800a96e:	f000 fe53 	bl	800b618 <LCD_GetSwapXYEx>
 800a972:	0080      	lsls	r0, r0, #2
 800a974:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 800a978:	ea40 0008 	orr.w	r0, r0, r8
 800a97c:	2807      	cmp	r0, #7
 800a97e:	d826      	bhi.n	800a9ce <_SetOrg+0x84>
 800a980:	e8df f000 	tbb	[pc, r0]
 800a984:	0b0f0408 	.word	0x0b0f0408
 800a988:	1b1f1519 	.word	0x1b1f1519
 800a98c:	6962      	ldr	r2, [r4, #20]
 800a98e:	68e3      	ldr	r3, [r4, #12]
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	1b5d      	subs	r5, r3, r5
 800a994:	9500      	str	r5, [sp, #0]
 800a996:	9601      	str	r6, [sp, #4]
 800a998:	e019      	b.n	800a9ce <_SetOrg+0x84>
 800a99a:	6962      	ldr	r2, [r4, #20]
 800a99c:	68e3      	ldr	r3, [r4, #12]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	1b5d      	subs	r5, r3, r5
 800a9a2:	69a2      	ldr	r2, [r4, #24]
 800a9a4:	6923      	ldr	r3, [r4, #16]
 800a9a6:	9500      	str	r5, [sp, #0]
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	1b9e      	subs	r6, r3, r6
 800a9ac:	e7f3      	b.n	800a996 <_SetOrg+0x4c>
 800a9ae:	69a2      	ldr	r2, [r4, #24]
 800a9b0:	6923      	ldr	r3, [r4, #16]
 800a9b2:	1ad3      	subs	r3, r2, r3
 800a9b4:	1b9e      	subs	r6, r3, r6
 800a9b6:	9600      	str	r6, [sp, #0]
 800a9b8:	e008      	b.n	800a9cc <_SetOrg+0x82>
 800a9ba:	69a2      	ldr	r2, [r4, #24]
 800a9bc:	6923      	ldr	r3, [r4, #16]
 800a9be:	1ad3      	subs	r3, r2, r3
 800a9c0:	1b9e      	subs	r6, r3, r6
 800a9c2:	6962      	ldr	r2, [r4, #20]
 800a9c4:	68e3      	ldr	r3, [r4, #12]
 800a9c6:	9600      	str	r6, [sp, #0]
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	1b5d      	subs	r5, r3, r5
 800a9cc:	9501      	str	r5, [sp, #4]
 800a9ce:	69b8      	ldr	r0, [r7, #24]
 800a9d0:	2103      	movs	r1, #3
 800a9d2:	466a      	mov	r2, sp
 800a9d4:	f7f6 fa1e 	bl	8000e14 <LCD_X_DisplayDriver>
 800a9d8:	b003      	add	sp, #12
 800a9da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800a9e0 <_FillRect>:
 800a9e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	6884      	ldr	r4, [r0, #8]
 800a9e6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a9ea:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800a9ec:	4f69      	ldr	r7, [pc, #420]	; (800ab94 <_FillRect+0x1b4>)
 800a9ee:	4691      	mov	r9, r2
 800a9f0:	469c      	mov	ip, r3
 800a9f2:	b145      	cbz	r5, 800aa06 <_FillRect+0x26>
 800a9f4:	f8cd a000 	str.w	sl, [sp]
 800a9f8:	683c      	ldr	r4, [r7, #0]
 800a9fa:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800a9fc:	6824      	ldr	r4, [r4, #0]
 800a9fe:	9401      	str	r4, [sp, #4]
 800aa00:	6980      	ldr	r0, [r0, #24]
 800aa02:	47a8      	blx	r5
 800aa04:	e0c2      	b.n	800ab8c <_FillRect+0x1ac>
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	69e7      	ldr	r7, [r4, #28]
 800aa0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa0c:	7c1b      	ldrb	r3, [r3, #16]
 800aa0e:	f8d2 8000 	ldr.w	r8, [r2]
 800aa12:	6822      	ldr	r2, [r4, #0]
 800aa14:	107f      	asrs	r7, r7, #1
 800aa16:	fb07 f009 	mul.w	r0, r7, r9
 800aa1a:	eb00 0051 	add.w	r0, r0, r1, lsr #1
 800aa1e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800aa22:	ebc1 0c0c 	rsb	ip, r1, ip
 800aa26:	ebc9 020a 	rsb	r2, r9, sl
 800aa2a:	f013 0f01 	tst.w	r3, #1
 800aa2e:	f10c 0401 	add.w	r4, ip, #1
 800aa32:	f102 0501 	add.w	r5, r2, #1
 800aa36:	f001 0301 	and.w	r3, r1, #1
 800aa3a:	d03f      	beq.n	800aabc <_FillRect+0xdc>
 800aa3c:	b183      	cbz	r3, 800aa60 <_FillRect+0x80>
 800aa3e:	00bb      	lsls	r3, r7, #2
 800aa40:	462c      	mov	r4, r5
 800aa42:	4601      	mov	r1, r0
 800aa44:	b144      	cbz	r4, 800aa58 <_FillRect+0x78>
 800aa46:	680e      	ldr	r6, [r1, #0]
 800aa48:	f086 467f 	eor.w	r6, r6, #4278190080	; 0xff000000
 800aa4c:	f486 067f 	eor.w	r6, r6, #16711680	; 0xff0000
 800aa50:	600e      	str	r6, [r1, #0]
 800aa52:	3c01      	subs	r4, #1
 800aa54:	4419      	add	r1, r3
 800aa56:	e7f5      	b.n	800aa44 <_FillRect+0x64>
 800aa58:	fb03 0305 	mla	r3, r3, r5, r0
 800aa5c:	4664      	mov	r4, ip
 800aa5e:	3004      	adds	r0, #4
 800aa60:	2c01      	cmp	r4, #1
 800aa62:	dd1d      	ble.n	800aaa0 <_FillRect+0xc0>
 800aa64:	1ea1      	subs	r1, r4, #2
 800aa66:	0849      	lsrs	r1, r1, #1
 800aa68:	00be      	lsls	r6, r7, #2
 800aa6a:	ea4f 0881 	mov.w	r8, r1, lsl #2
 800aa6e:	3101      	adds	r1, #1
 800aa70:	fb06 0202 	mla	r2, r6, r2, r0
 800aa74:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 800aa78:	4618      	mov	r0, r3
 800aa7a:	4629      	mov	r1, r5
 800aa7c:	b171      	cbz	r1, 800aa9c <_FillRect+0xbc>
 800aa7e:	f108 0904 	add.w	r9, r8, #4
 800aa82:	3901      	subs	r1, #1
 800aa84:	4491      	add	r9, r2
 800aa86:	4613      	mov	r3, r2
 800aa88:	6818      	ldr	r0, [r3, #0]
 800aa8a:	43c0      	mvns	r0, r0
 800aa8c:	f843 0b04 	str.w	r0, [r3], #4
 800aa90:	454b      	cmp	r3, r9
 800aa92:	d1f9      	bne.n	800aa88 <_FillRect+0xa8>
 800aa94:	eb02 000c 	add.w	r0, r2, ip
 800aa98:	1b92      	subs	r2, r2, r6
 800aa9a:	e7ef      	b.n	800aa7c <_FillRect+0x9c>
 800aa9c:	f004 0401 	and.w	r4, r4, #1
 800aaa0:	2c01      	cmp	r4, #1
 800aaa2:	d173      	bne.n	800ab8c <_FillRect+0x1ac>
 800aaa4:	00bf      	lsls	r7, r7, #2
 800aaa6:	2d00      	cmp	r5, #0
 800aaa8:	d070      	beq.n	800ab8c <_FillRect+0x1ac>
 800aaaa:	6803      	ldr	r3, [r0, #0]
 800aaac:	f483 437f 	eor.w	r3, r3, #65280	; 0xff00
 800aab0:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800aab4:	6003      	str	r3, [r0, #0]
 800aab6:	3d01      	subs	r5, #1
 800aab8:	4438      	add	r0, r7
 800aaba:	e7f4      	b.n	800aaa6 <_FillRect+0xc6>
 800aabc:	ea4f 4608 	mov.w	r6, r8, lsl #16
 800aac0:	b183      	cbz	r3, 800aae4 <_FillRect+0x104>
 800aac2:	00bb      	lsls	r3, r7, #2
 800aac4:	462c      	mov	r4, r5
 800aac6:	4601      	mov	r1, r0
 800aac8:	b144      	cbz	r4, 800aadc <_FillRect+0xfc>
 800aaca:	f8b1 9000 	ldrh.w	r9, [r1]
 800aace:	ea49 0906 	orr.w	r9, r9, r6
 800aad2:	f8c1 9000 	str.w	r9, [r1]
 800aad6:	3c01      	subs	r4, #1
 800aad8:	4419      	add	r1, r3
 800aada:	e7f5      	b.n	800aac8 <_FillRect+0xe8>
 800aadc:	fb03 0305 	mla	r3, r3, r5, r0
 800aae0:	4664      	mov	r4, ip
 800aae2:	3004      	adds	r0, #4
 800aae4:	2c0f      	cmp	r4, #15
 800aae6:	4446      	add	r6, r8
 800aae8:	dd25      	ble.n	800ab36 <_FillRect+0x156>
 800aaea:	f1a4 0910 	sub.w	r9, r4, #16
 800aaee:	ea4f 1b19 	mov.w	fp, r9, lsr #4
 800aaf2:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 800aaf6:	f10b 0b01 	add.w	fp, fp, #1
 800aafa:	fb0a 0c02 	mla	ip, sl, r2, r0
 800aafe:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
 800ab02:	4629      	mov	r1, r5
 800ab04:	4618      	mov	r0, r3
 800ab06:	b199      	cbz	r1, 800ab30 <_FillRect+0x150>
 800ab08:	3901      	subs	r1, #1
 800ab0a:	4648      	mov	r0, r9
 800ab0c:	4663      	mov	r3, ip
 800ab0e:	3810      	subs	r0, #16
 800ab10:	601e      	str	r6, [r3, #0]
 800ab12:	605e      	str	r6, [r3, #4]
 800ab14:	609e      	str	r6, [r3, #8]
 800ab16:	60de      	str	r6, [r3, #12]
 800ab18:	611e      	str	r6, [r3, #16]
 800ab1a:	615e      	str	r6, [r3, #20]
 800ab1c:	619e      	str	r6, [r3, #24]
 800ab1e:	61de      	str	r6, [r3, #28]
 800ab20:	f103 0320 	add.w	r3, r3, #32
 800ab24:	d5f3      	bpl.n	800ab0e <_FillRect+0x12e>
 800ab26:	eb0c 000b 	add.w	r0, ip, fp
 800ab2a:	ebca 0c0c 	rsb	ip, sl, ip
 800ab2e:	e7ea      	b.n	800ab06 <_FillRect+0x126>
 800ab30:	f004 040f 	and.w	r4, r4, #15
 800ab34:	4603      	mov	r3, r0
 800ab36:	2c01      	cmp	r4, #1
 800ab38:	dd1d      	ble.n	800ab76 <_FillRect+0x196>
 800ab3a:	f1a4 0902 	sub.w	r9, r4, #2
 800ab3e:	ea4f 0959 	mov.w	r9, r9, lsr #1
 800ab42:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 800ab46:	f109 0901 	add.w	r9, r9, #1
 800ab4a:	fb0c 0202 	mla	r2, ip, r2, r0
 800ab4e:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800ab52:	4629      	mov	r1, r5
 800ab54:	4618      	mov	r0, r3
 800ab56:	b161      	cbz	r1, 800ab72 <_FillRect+0x192>
 800ab58:	3901      	subs	r1, #1
 800ab5a:	4623      	mov	r3, r4
 800ab5c:	4610      	mov	r0, r2
 800ab5e:	3b02      	subs	r3, #2
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	f840 6b04 	str.w	r6, [r0], #4
 800ab66:	dcfa      	bgt.n	800ab5e <_FillRect+0x17e>
 800ab68:	eb02 0009 	add.w	r0, r2, r9
 800ab6c:	ebcc 0202 	rsb	r2, ip, r2
 800ab70:	e7f1      	b.n	800ab56 <_FillRect+0x176>
 800ab72:	f004 0401 	and.w	r4, r4, #1
 800ab76:	2c01      	cmp	r4, #1
 800ab78:	d108      	bne.n	800ab8c <_FillRect+0x1ac>
 800ab7a:	00bf      	lsls	r7, r7, #2
 800ab7c:	b135      	cbz	r5, 800ab8c <_FillRect+0x1ac>
 800ab7e:	8843      	ldrh	r3, [r0, #2]
 800ab80:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ab84:	6003      	str	r3, [r0, #0]
 800ab86:	3d01      	subs	r5, #1
 800ab88:	4438      	add	r0, r7
 800ab8a:	e7f7      	b.n	800ab7c <_FillRect+0x19c>
 800ab8c:	b003      	add	sp, #12
 800ab8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab92:	bf00      	nop
 800ab94:	200002c4 	.word	0x200002c4

0800ab98 <_DrawHLine>:
 800ab98:	b507      	push	{r0, r1, r2, lr}
 800ab9a:	9200      	str	r2, [sp, #0]
 800ab9c:	f7ff ff20 	bl	800a9e0 <_FillRect>
 800aba0:	b003      	add	sp, #12
 800aba2:	f85d fb04 	ldr.w	pc, [sp], #4

0800aba6 <_DrawVLine>:
 800aba6:	b507      	push	{r0, r1, r2, lr}
 800aba8:	9300      	str	r3, [sp, #0]
 800abaa:	460b      	mov	r3, r1
 800abac:	f7ff ff18 	bl	800a9e0 <_FillRect>
 800abb0:	b003      	add	sp, #12
 800abb2:	f85d fb04 	ldr.w	pc, [sp], #4

0800abb6 <_InitOnce.isra.2>:
 800abb6:	b538      	push	{r3, r4, r5, lr}
 800abb8:	6805      	ldr	r5, [r0, #0]
 800abba:	4604      	mov	r4, r0
 800abbc:	b93d      	cbnz	r5, 800abce <_InitOnce.isra.2+0x18>
 800abbe:	2048      	movs	r0, #72	; 0x48
 800abc0:	f003 fd36 	bl	800e630 <GUI_ALLOC_GetFixedBlock>
 800abc4:	4629      	mov	r1, r5
 800abc6:	6020      	str	r0, [r4, #0]
 800abc8:	2248      	movs	r2, #72	; 0x48
 800abca:	f001 f93e 	bl	800be4a <GUI__memset>
 800abce:	6820      	ldr	r0, [r4, #0]
 800abd0:	f1d0 0001 	rsbs	r0, r0, #1
 800abd4:	bf38      	it	cc
 800abd6:	2000      	movcc	r0, #0
 800abd8:	bd38      	pop	{r3, r4, r5, pc}

0800abda <_SetDevFunc>:
 800abda:	b570      	push	{r4, r5, r6, lr}
 800abdc:	4605      	mov	r5, r0
 800abde:	3008      	adds	r0, #8
 800abe0:	460e      	mov	r6, r1
 800abe2:	4614      	mov	r4, r2
 800abe4:	f7ff ffe7 	bl	800abb6 <_InitOnce.isra.2>
 800abe8:	68ab      	ldr	r3, [r5, #8]
 800abea:	b1bb      	cbz	r3, 800ac1c <_SetDevFunc+0x42>
 800abec:	f1a6 0119 	sub.w	r1, r6, #25
 800abf0:	290c      	cmp	r1, #12
 800abf2:	d813      	bhi.n	800ac1c <_SetDevFunc+0x42>
 800abf4:	e8df f001 	tbb	[pc, r1]
 800abf8:	12121207 	.word	0x12121207
 800abfc:	0b121212 	.word	0x0b121212
 800ac00:	110f1209 	.word	0x110f1209
 800ac04:	0d          	.byte	0x0d
 800ac05:	00          	.byte	0x00
 800ac06:	631c      	str	r4, [r3, #48]	; 0x30
 800ac08:	bd70      	pop	{r4, r5, r6, pc}
 800ac0a:	635c      	str	r4, [r3, #52]	; 0x34
 800ac0c:	bd70      	pop	{r4, r5, r6, pc}
 800ac0e:	639c      	str	r4, [r3, #56]	; 0x38
 800ac10:	bd70      	pop	{r4, r5, r6, pc}
 800ac12:	63dc      	str	r4, [r3, #60]	; 0x3c
 800ac14:	bd70      	pop	{r4, r5, r6, pc}
 800ac16:	641c      	str	r4, [r3, #64]	; 0x40
 800ac18:	bd70      	pop	{r4, r5, r6, pc}
 800ac1a:	645c      	str	r4, [r3, #68]	; 0x44
 800ac1c:	bd70      	pop	{r4, r5, r6, pc}

0800ac1e <_GetPos>:
 800ac1e:	b570      	push	{r4, r5, r6, lr}
 800ac20:	4604      	mov	r4, r0
 800ac22:	3008      	adds	r0, #8
 800ac24:	460d      	mov	r5, r1
 800ac26:	4616      	mov	r6, r2
 800ac28:	f7ff ffc5 	bl	800abb6 <_InitOnce.isra.2>
 800ac2c:	68a3      	ldr	r3, [r4, #8]
 800ac2e:	b11b      	cbz	r3, 800ac38 <_GetPos+0x1a>
 800ac30:	6a18      	ldr	r0, [r3, #32]
 800ac32:	6028      	str	r0, [r5, #0]
 800ac34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac36:	6033      	str	r3, [r6, #0]
 800ac38:	bd70      	pop	{r4, r5, r6, pc}

0800ac3a <_ShowBuffer>:
 800ac3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac3c:	4604      	mov	r4, r0
 800ac3e:	2300      	movs	r3, #0
 800ac40:	3008      	adds	r0, #8
 800ac42:	9301      	str	r3, [sp, #4]
 800ac44:	460d      	mov	r5, r1
 800ac46:	f7ff ffb6 	bl	800abb6 <_InitOnce.isra.2>
 800ac4a:	68a3      	ldr	r3, [r4, #8]
 800ac4c:	b133      	cbz	r3, 800ac5c <_ShowBuffer+0x22>
 800ac4e:	aa02      	add	r2, sp, #8
 800ac50:	69a0      	ldr	r0, [r4, #24]
 800ac52:	f842 5d04 	str.w	r5, [r2, #-4]!
 800ac56:	210e      	movs	r1, #14
 800ac58:	f7f6 f8dc 	bl	8000e14 <LCD_X_DisplayDriver>
 800ac5c:	b003      	add	sp, #12
 800ac5e:	bd30      	pop	{r4, r5, pc}

0800ac60 <_Init>:
 800ac60:	b538      	push	{r3, r4, r5, lr}
 800ac62:	4604      	mov	r4, r0
 800ac64:	3008      	adds	r0, #8
 800ac66:	f7ff ffa6 	bl	800abb6 <_InitOnce.isra.2>
 800ac6a:	2101      	movs	r1, #1
 800ac6c:	4605      	mov	r5, r0
 800ac6e:	2200      	movs	r2, #0
 800ac70:	69a0      	ldr	r0, [r4, #24]
 800ac72:	f7f6 f8cf 	bl	8000e14 <LCD_X_DisplayDriver>
 800ac76:	4328      	orrs	r0, r5
 800ac78:	bd38      	pop	{r3, r4, r5, pc}

0800ac7a <_SetVis>:
 800ac7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	2300      	movs	r3, #0
 800ac80:	3008      	adds	r0, #8
 800ac82:	9301      	str	r3, [sp, #4]
 800ac84:	460d      	mov	r5, r1
 800ac86:	f7ff ff96 	bl	800abb6 <_InitOnce.isra.2>
 800ac8a:	68a3      	ldr	r3, [r4, #8]
 800ac8c:	b13b      	cbz	r3, 800ac9e <_SetVis+0x24>
 800ac8e:	aa02      	add	r2, sp, #8
 800ac90:	62dd      	str	r5, [r3, #44]	; 0x2c
 800ac92:	f842 5d04 	str.w	r5, [r2, #-4]!
 800ac96:	69a0      	ldr	r0, [r4, #24]
 800ac98:	2109      	movs	r1, #9
 800ac9a:	f7f6 f8bb 	bl	8000e14 <LCD_X_DisplayDriver>
 800ac9e:	b003      	add	sp, #12
 800aca0:	bd30      	pop	{r4, r5, pc}

0800aca2 <_SetAlpha>:
 800aca2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aca4:	4604      	mov	r4, r0
 800aca6:	2300      	movs	r3, #0
 800aca8:	3008      	adds	r0, #8
 800acaa:	9301      	str	r3, [sp, #4]
 800acac:	460d      	mov	r5, r1
 800acae:	f7ff ff82 	bl	800abb6 <_InitOnce.isra.2>
 800acb2:	68a3      	ldr	r3, [r4, #8]
 800acb4:	b13b      	cbz	r3, 800acc6 <_SetAlpha+0x24>
 800acb6:	aa02      	add	r2, sp, #8
 800acb8:	629d      	str	r5, [r3, #40]	; 0x28
 800acba:	f842 5d04 	str.w	r5, [r2, #-4]!
 800acbe:	69a0      	ldr	r0, [r4, #24]
 800acc0:	210a      	movs	r1, #10
 800acc2:	f7f6 f8a7 	bl	8000e14 <LCD_X_DisplayDriver>
 800acc6:	b003      	add	sp, #12
 800acc8:	bd30      	pop	{r4, r5, pc}

0800acca <_SetPos>:
 800acca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800accc:	4604      	mov	r4, r0
 800acce:	2300      	movs	r3, #0
 800acd0:	3008      	adds	r0, #8
 800acd2:	9300      	str	r3, [sp, #0]
 800acd4:	9301      	str	r3, [sp, #4]
 800acd6:	460d      	mov	r5, r1
 800acd8:	4616      	mov	r6, r2
 800acda:	f7ff ff6c 	bl	800abb6 <_InitOnce.isra.2>
 800acde:	68a3      	ldr	r3, [r4, #8]
 800ace0:	b143      	cbz	r3, 800acf4 <_SetPos+0x2a>
 800ace2:	621d      	str	r5, [r3, #32]
 800ace4:	625e      	str	r6, [r3, #36]	; 0x24
 800ace6:	69a0      	ldr	r0, [r4, #24]
 800ace8:	2108      	movs	r1, #8
 800acea:	466a      	mov	r2, sp
 800acec:	e88d 0060 	stmia.w	sp, {r5, r6}
 800acf0:	f7f6 f890 	bl	8000e14 <LCD_X_DisplayDriver>
 800acf4:	b002      	add	sp, #8
 800acf6:	bd70      	pop	{r4, r5, r6, pc}

0800acf8 <_SetVRAMAddr>:
 800acf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acfa:	4604      	mov	r4, r0
 800acfc:	2300      	movs	r3, #0
 800acfe:	3008      	adds	r0, #8
 800ad00:	9301      	str	r3, [sp, #4]
 800ad02:	460d      	mov	r5, r1
 800ad04:	f7ff ff57 	bl	800abb6 <_InitOnce.isra.2>
 800ad08:	68a3      	ldr	r3, [r4, #8]
 800ad0a:	b143      	cbz	r3, 800ad1e <_SetVRAMAddr+0x26>
 800ad0c:	aa02      	add	r2, sp, #8
 800ad0e:	601d      	str	r5, [r3, #0]
 800ad10:	605d      	str	r5, [r3, #4]
 800ad12:	f842 5d04 	str.w	r5, [r2, #-4]!
 800ad16:	69a0      	ldr	r0, [r4, #24]
 800ad18:	2102      	movs	r1, #2
 800ad1a:	f7f6 f87b 	bl	8000e14 <LCD_X_DisplayDriver>
 800ad1e:	b003      	add	sp, #12
 800ad20:	bd30      	pop	{r4, r5, pc}

0800ad22 <_CopyBuffer>:
 800ad22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad26:	4605      	mov	r5, r0
 800ad28:	3008      	adds	r0, #8
 800ad2a:	460e      	mov	r6, r1
 800ad2c:	4617      	mov	r7, r2
 800ad2e:	f7ff ff42 	bl	800abb6 <_InitOnce.isra.2>
 800ad32:	68ac      	ldr	r4, [r5, #8]
 800ad34:	b1e4      	cbz	r4, 800ad70 <_CopyBuffer+0x4e>
 800ad36:	42be      	cmp	r6, r7
 800ad38:	d01a      	beq.n	800ad70 <_CopyBuffer+0x4e>
 800ad3a:	68eb      	ldr	r3, [r5, #12]
 800ad3c:	2108      	movs	r1, #8
 800ad3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad40:	4628      	mov	r0, r5
 800ad42:	4798      	blx	r3
 800ad44:	6923      	ldr	r3, [r4, #16]
 800ad46:	68e2      	ldr	r2, [r4, #12]
 800ad48:	6861      	ldr	r1, [r4, #4]
 800ad4a:	435a      	muls	r2, r3
 800ad4c:	4350      	muls	r0, r2
 800ad4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad50:	08c2      	lsrs	r2, r0, #3
 800ad52:	fb07 1802 	mla	r8, r7, r2, r1
 800ad56:	b123      	cbz	r3, 800ad62 <_CopyBuffer+0x40>
 800ad58:	69a8      	ldr	r0, [r5, #24]
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	463a      	mov	r2, r7
 800ad5e:	4798      	blx	r3
 800ad60:	e004      	b.n	800ad6c <_CopyBuffer+0x4a>
 800ad62:	4640      	mov	r0, r8
 800ad64:	fb06 1102 	mla	r1, r6, r2, r1
 800ad68:	f7f5 fa80 	bl	800026c <memcpy>
 800ad6c:	f8c4 8000 	str.w	r8, [r4]
 800ad70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ad74 <_SetSize>:
 800ad74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad76:	4605      	mov	r5, r0
 800ad78:	2300      	movs	r3, #0
 800ad7a:	3008      	adds	r0, #8
 800ad7c:	460e      	mov	r6, r1
 800ad7e:	4617      	mov	r7, r2
 800ad80:	9300      	str	r3, [sp, #0]
 800ad82:	9301      	str	r3, [sp, #4]
 800ad84:	f7ff ff17 	bl	800abb6 <_InitOnce.isra.2>
 800ad88:	68ac      	ldr	r4, [r5, #8]
 800ad8a:	b194      	cbz	r4, 800adb2 <_SetSize+0x3e>
 800ad8c:	69e3      	ldr	r3, [r4, #28]
 800ad8e:	b93b      	cbnz	r3, 800ada0 <_SetSize+0x2c>
 800ad90:	69a8      	ldr	r0, [r5, #24]
 800ad92:	f000 fc41 	bl	800b618 <LCD_GetSwapXYEx>
 800ad96:	2800      	cmp	r0, #0
 800ad98:	bf0c      	ite	eq
 800ad9a:	4630      	moveq	r0, r6
 800ad9c:	4638      	movne	r0, r7
 800ad9e:	61e0      	str	r0, [r4, #28]
 800ada0:	60e6      	str	r6, [r4, #12]
 800ada2:	6127      	str	r7, [r4, #16]
 800ada4:	69a8      	ldr	r0, [r5, #24]
 800ada6:	2107      	movs	r1, #7
 800ada8:	466a      	mov	r2, sp
 800adaa:	e88d 00c0 	stmia.w	sp, {r6, r7}
 800adae:	f7f6 f831 	bl	8000e14 <LCD_X_DisplayDriver>
 800adb2:	b003      	add	sp, #12
 800adb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800adb6 <_SetVSize>:
 800adb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb8:	4606      	mov	r6, r0
 800adba:	3008      	adds	r0, #8
 800adbc:	460d      	mov	r5, r1
 800adbe:	4617      	mov	r7, r2
 800adc0:	f7ff fef9 	bl	800abb6 <_InitOnce.isra.2>
 800adc4:	68b4      	ldr	r4, [r6, #8]
 800adc6:	b144      	cbz	r4, 800adda <_SetVSize+0x24>
 800adc8:	69b0      	ldr	r0, [r6, #24]
 800adca:	f000 fc25 	bl	800b618 <LCD_GetSwapXYEx>
 800adce:	6165      	str	r5, [r4, #20]
 800add0:	61a7      	str	r7, [r4, #24]
 800add2:	b108      	cbz	r0, 800add8 <_SetVSize+0x22>
 800add4:	61e7      	str	r7, [r4, #28]
 800add6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800add8:	61e5      	str	r5, [r4, #28]
 800adda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800addc <_DrawBitmap>:
 800addc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade0:	b08f      	sub	sp, #60	; 0x3c
 800ade2:	461e      	mov	r6, r3
 800ade4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ade6:	9008      	str	r0, [sp, #32]
 800ade8:	3b01      	subs	r3, #1
 800adea:	910b      	str	r1, [sp, #44]	; 0x2c
 800adec:	920c      	str	r2, [sp, #48]	; 0x30
 800adee:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800adf0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800adf2:	6880      	ldr	r0, [r0, #8]
 800adf4:	2b0f      	cmp	r3, #15
 800adf6:	f200 82ed 	bhi.w	800b3d4 <_DrawBitmap+0x5f8>
 800adfa:	e8df f013 	tbh	[pc, r3, lsl #1]
 800adfe:	0016      	.short	0x0016
 800ae00:	02eb0013 	.word	0x02eb0013
 800ae04:	02eb0010 	.word	0x02eb0010
 800ae08:	02eb02eb 	.word	0x02eb02eb
 800ae0c:	02eb0232 	.word	0x02eb0232
 800ae10:	02eb02eb 	.word	0x02eb02eb
 800ae14:	02eb02eb 	.word	0x02eb02eb
 800ae18:	02eb02eb 	.word	0x02eb02eb
 800ae1c:	02bd      	.short	0x02bd
 800ae1e:	2300      	movs	r3, #0
 800ae20:	9309      	str	r3, [sp, #36]	; 0x24
 800ae22:	e17f      	b.n	800b124 <_DrawBitmap+0x348>
 800ae24:	2000      	movs	r0, #0
 800ae26:	9009      	str	r0, [sp, #36]	; 0x24
 800ae28:	e0c2      	b.n	800afb0 <_DrawBitmap+0x1d4>
 800ae2a:	6b87      	ldr	r7, [r0, #56]	; 0x38
 800ae2c:	b917      	cbnz	r7, 800ae34 <_DrawBitmap+0x58>
 800ae2e:	f04f 0b00 	mov.w	fp, #0
 800ae32:	e066      	b.n	800af02 <_DrawBitmap+0x126>
 800ae34:	4bae      	ldr	r3, [pc, #696]	; (800b0f0 <_DrawBitmap+0x314>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	7c1b      	ldrb	r3, [r3, #16]
 800ae3a:	07d9      	lsls	r1, r3, #31
 800ae3c:	d4f7      	bmi.n	800ae2e <_DrawBitmap+0x52>
 800ae3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ae40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ae42:	981a      	ldr	r0, [sp, #104]	; 0x68
 800ae44:	9302      	str	r3, [sp, #8]
 800ae46:	e88d 0044 	stmia.w	sp, {r2, r6}
 800ae4a:	9a08      	ldr	r2, [sp, #32]
 800ae4c:	9003      	str	r0, [sp, #12]
 800ae4e:	9504      	str	r5, [sp, #16]
 800ae50:	6990      	ldr	r0, [r2, #24]
 800ae52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae56:	4623      	mov	r3, r4
 800ae58:	47b8      	blx	r7
 800ae5a:	e2bb      	b.n	800b3d4 <_DrawBitmap+0x5f8>
 800ae5c:	9b08      	ldr	r3, [sp, #32]
 800ae5e:	6828      	ldr	r0, [r5, #0]
 800ae60:	686a      	ldr	r2, [r5, #4]
 800ae62:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800ae66:	900a      	str	r0, [sp, #40]	; 0x28
 800ae68:	9209      	str	r2, [sp, #36]	; 0x24
 800ae6a:	981c      	ldr	r0, [sp, #112]	; 0x70
 800ae6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ae6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae70:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ae74:	4402      	add	r2, r0
 800ae76:	4459      	add	r1, fp
 800ae78:	fb03 2101 	mla	r1, r3, r1, r2
 800ae7c:	7823      	ldrb	r3, [r4, #0]
 800ae7e:	4a9d      	ldr	r2, [pc, #628]	; (800b0f4 <_DrawBitmap+0x318>)
 800ae80:	f812 8003 	ldrb.w	r8, [r2, r3]
 800ae84:	4b9a      	ldr	r3, [pc, #616]	; (800b0f0 <_DrawBitmap+0x314>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	7c1b      	ldrb	r3, [r3, #16]
 800ae8a:	f003 0303 	and.w	r3, r3, #3
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	f1c0 0708 	rsb	r7, r0, #8
 800ae94:	fa48 f800 	asr.w	r8, r8, r0
 800ae98:	ea4f 0a41 	mov.w	sl, r1, lsl #1
 800ae9c:	d035      	beq.n	800af0a <_DrawBitmap+0x12e>
 800ae9e:	2b03      	cmp	r3, #3
 800aea0:	d04d      	beq.n	800af3e <_DrawBitmap+0x162>
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d04b      	beq.n	800af3e <_DrawBitmap+0x162>
 800aea6:	f8d9 2000 	ldr.w	r2, [r9]
 800aeaa:	920d      	str	r2, [sp, #52]	; 0x34
 800aeac:	9407      	str	r4, [sp, #28]
 800aeae:	4632      	mov	r2, r6
 800aeb0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aeb2:	42ba      	cmp	r2, r7
 800aeb4:	bf34      	ite	cc
 800aeb6:	4613      	movcc	r3, r2
 800aeb8:	463b      	movcs	r3, r7
 800aeba:	eb00 0941 	add.w	r9, r0, r1, lsl #1
 800aebe:	469c      	mov	ip, r3
 800aec0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800aec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aec6:	f018 0f01 	tst.w	r8, #1
 800aeca:	bf18      	it	ne
 800aecc:	4682      	movne	sl, r0
 800aece:	f1bc 0c01 	subs.w	ip, ip, #1
 800aed2:	f829 ab02 	strh.w	sl, [r9], #2
 800aed6:	ea4f 0858 	mov.w	r8, r8, lsr #1
 800aeda:	d1f1      	bne.n	800aec0 <_DrawBitmap+0xe4>
 800aedc:	1aff      	subs	r7, r7, r3
 800aede:	4419      	add	r1, r3
 800aee0:	ebc3 0202 	rsb	r2, r3, r2
 800aee4:	d107      	bne.n	800aef6 <_DrawBitmap+0x11a>
 800aee6:	9807      	ldr	r0, [sp, #28]
 800aee8:	4f82      	ldr	r7, [pc, #520]	; (800b0f4 <_DrawBitmap+0x318>)
 800aeea:	7843      	ldrb	r3, [r0, #1]
 800aeec:	3001      	adds	r0, #1
 800aeee:	f817 8003 	ldrb.w	r8, [r7, r3]
 800aef2:	9007      	str	r0, [sp, #28]
 800aef4:	2708      	movs	r7, #8
 800aef6:	2a00      	cmp	r2, #0
 800aef8:	d1da      	bne.n	800aeb0 <_DrawBitmap+0xd4>
 800aefa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800aefc:	f10b 0b01 	add.w	fp, fp, #1
 800af00:	441c      	add	r4, r3
 800af02:	9818      	ldr	r0, [sp, #96]	; 0x60
 800af04:	4583      	cmp	fp, r0
 800af06:	dba9      	blt.n	800ae5c <_DrawBitmap+0x80>
 800af08:	e264      	b.n	800b3d4 <_DrawBitmap+0x5f8>
 800af0a:	4631      	mov	r1, r6
 800af0c:	4623      	mov	r3, r4
 800af0e:	f018 0f01 	tst.w	r8, #1
 800af12:	d004      	beq.n	800af1e <_DrawBitmap+0x142>
 800af14:	f8d9 2000 	ldr.w	r2, [r9]
 800af18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af1a:	f82a 0002 	strh.w	r0, [sl, r2]
 800af1e:	3f01      	subs	r7, #1
 800af20:	d002      	beq.n	800af28 <_DrawBitmap+0x14c>
 800af22:	ea4f 0858 	mov.w	r8, r8, lsr #1
 800af26:	e005      	b.n	800af34 <_DrawBitmap+0x158>
 800af28:	785a      	ldrb	r2, [r3, #1]
 800af2a:	4872      	ldr	r0, [pc, #456]	; (800b0f4 <_DrawBitmap+0x318>)
 800af2c:	f810 8002 	ldrb.w	r8, [r0, r2]
 800af30:	3301      	adds	r3, #1
 800af32:	2708      	movs	r7, #8
 800af34:	3901      	subs	r1, #1
 800af36:	f10a 0a02 	add.w	sl, sl, #2
 800af3a:	d1e8      	bne.n	800af0e <_DrawBitmap+0x132>
 800af3c:	e7dd      	b.n	800aefa <_DrawBitmap+0x11e>
 800af3e:	9a08      	ldr	r2, [sp, #32]
 800af40:	6913      	ldr	r3, [r2, #16]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	4798      	blx	r3
 800af46:	4653      	mov	r3, sl
 800af48:	4632      	mov	r2, r6
 800af4a:	4621      	mov	r1, r4
 800af4c:	f018 0f01 	tst.w	r8, #1
 800af50:	d007      	beq.n	800af62 <_DrawBitmap+0x186>
 800af52:	f8d9 c000 	ldr.w	ip, [r9]
 800af56:	f833 a00c 	ldrh.w	sl, [r3, ip]
 800af5a:	ea8a 0a00 	eor.w	sl, sl, r0
 800af5e:	f823 a00c 	strh.w	sl, [r3, ip]
 800af62:	3f01      	subs	r7, #1
 800af64:	d002      	beq.n	800af6c <_DrawBitmap+0x190>
 800af66:	ea4f 0858 	mov.w	r8, r8, lsr #1
 800af6a:	e006      	b.n	800af7a <_DrawBitmap+0x19e>
 800af6c:	784f      	ldrb	r7, [r1, #1]
 800af6e:	f8df c184 	ldr.w	ip, [pc, #388]	; 800b0f4 <_DrawBitmap+0x318>
 800af72:	3101      	adds	r1, #1
 800af74:	f81c 8007 	ldrb.w	r8, [ip, r7]
 800af78:	2708      	movs	r7, #8
 800af7a:	3a01      	subs	r2, #1
 800af7c:	f103 0302 	add.w	r3, r3, #2
 800af80:	d1e4      	bne.n	800af4c <_DrawBitmap+0x170>
 800af82:	e7ba      	b.n	800aefa <_DrawBitmap+0x11e>
 800af84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af88:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800af8c:	981c      	ldr	r0, [sp, #112]	; 0x70
 800af8e:	7827      	ldrb	r7, [r4, #0]
 800af90:	441a      	add	r2, r3
 800af92:	4b57      	ldr	r3, [pc, #348]	; (800b0f0 <_DrawBitmap+0x314>)
 800af94:	920a      	str	r2, [sp, #40]	; 0x28
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	7c1b      	ldrb	r3, [r3, #16]
 800af9a:	f013 0303 	ands.w	r3, r3, #3
 800af9e:	4480      	add	r8, r0
 800afa0:	d00b      	beq.n	800afba <_DrawBitmap+0x1de>
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d055      	beq.n	800b052 <_DrawBitmap+0x276>
 800afa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afa8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800afaa:	3301      	adds	r3, #1
 800afac:	4414      	add	r4, r2
 800afae:	9309      	str	r3, [sp, #36]	; 0x24
 800afb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afb2:	9818      	ldr	r0, [sp, #96]	; 0x60
 800afb4:	4282      	cmp	r2, r0
 800afb6:	dbe5      	blt.n	800af84 <_DrawBitmap+0x1a8>
 800afb8:	e20c      	b.n	800b3d4 <_DrawBitmap+0x5f8>
 800afba:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 800afbe:	46a2      	mov	sl, r4
 800afc0:	4641      	mov	r1, r8
 800afc2:	b345      	cbz	r5, 800b016 <_DrawBitmap+0x23a>
 800afc4:	f1c9 0303 	rsb	r3, r9, #3
 800afc8:	005b      	lsls	r3, r3, #1
 800afca:	f1c3 0206 	rsb	r2, r3, #6
 800afce:	20c0      	movs	r0, #192	; 0xc0
 800afd0:	fa40 f202 	asr.w	r2, r0, r2
 800afd4:	403a      	ands	r2, r7
 800afd6:	fa22 f303 	lsr.w	r3, r2, r3
 800afda:	9808      	ldr	r0, [sp, #32]
 800afdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afde:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800afe2:	f109 0901 	add.w	r9, r9, #1
 800afe6:	f101 0b01 	add.w	fp, r1, #1
 800afea:	f7ff fba4 	bl	800a736 <_SetPixelIndex>
 800afee:	f1b9 0f04 	cmp.w	r9, #4
 800aff2:	d105      	bne.n	800b000 <_DrawBitmap+0x224>
 800aff4:	f89a 7001 	ldrb.w	r7, [sl, #1]
 800aff8:	f04f 0900 	mov.w	r9, #0
 800affc:	f10a 0a01 	add.w	sl, sl, #1
 800b000:	eb08 0306 	add.w	r3, r8, r6
 800b004:	455b      	cmp	r3, fp
 800b006:	d0ce      	beq.n	800afa6 <_DrawBitmap+0x1ca>
 800b008:	4659      	mov	r1, fp
 800b00a:	e7db      	b.n	800afc4 <_DrawBitmap+0x1e8>
 800b00c:	eb08 0306 	add.w	r3, r8, r6
 800b010:	455b      	cmp	r3, fp
 800b012:	d0c8      	beq.n	800afa6 <_DrawBitmap+0x1ca>
 800b014:	4659      	mov	r1, fp
 800b016:	f1c9 0e03 	rsb	lr, r9, #3
 800b01a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800b01e:	f1ce 0306 	rsb	r3, lr, #6
 800b022:	22c0      	movs	r2, #192	; 0xc0
 800b024:	fa42 f303 	asr.w	r3, r2, r3
 800b028:	403b      	ands	r3, r7
 800b02a:	9808      	ldr	r0, [sp, #32]
 800b02c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b02e:	fa23 f30e 	lsr.w	r3, r3, lr
 800b032:	f109 0901 	add.w	r9, r9, #1
 800b036:	f101 0b01 	add.w	fp, r1, #1
 800b03a:	f7ff fb7c 	bl	800a736 <_SetPixelIndex>
 800b03e:	f1b9 0f04 	cmp.w	r9, #4
 800b042:	d1e3      	bne.n	800b00c <_DrawBitmap+0x230>
 800b044:	f89a 7001 	ldrb.w	r7, [sl, #1]
 800b048:	f04f 0900 	mov.w	r9, #0
 800b04c:	f10a 0a01 	add.w	sl, sl, #1
 800b050:	e7dc      	b.n	800b00c <_DrawBitmap+0x230>
 800b052:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 800b056:	46b2      	mov	sl, r6
 800b058:	46a3      	mov	fp, r4
 800b05a:	b39d      	cbz	r5, 800b0c4 <_DrawBitmap+0x2e8>
 800b05c:	f1c9 0303 	rsb	r3, r9, #3
 800b060:	005b      	lsls	r3, r3, #1
 800b062:	f1c3 0206 	rsb	r2, r3, #6
 800b066:	20c0      	movs	r0, #192	; 0xc0
 800b068:	fa40 f202 	asr.w	r2, r0, r2
 800b06c:	403a      	ands	r2, r7
 800b06e:	eb08 0106 	add.w	r1, r8, r6
 800b072:	fa32 f303 	lsrs.w	r3, r2, r3
 800b076:	ebca 0101 	rsb	r1, sl, r1
 800b07a:	d005      	beq.n	800b088 <_DrawBitmap+0x2ac>
 800b07c:	9808      	ldr	r0, [sp, #32]
 800b07e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b080:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800b084:	f7ff fb57 	bl	800a736 <_SetPixelIndex>
 800b088:	f109 0901 	add.w	r9, r9, #1
 800b08c:	f1b9 0f04 	cmp.w	r9, #4
 800b090:	d105      	bne.n	800b09e <_DrawBitmap+0x2c2>
 800b092:	f89b 7001 	ldrb.w	r7, [fp, #1]
 800b096:	f04f 0900 	mov.w	r9, #0
 800b09a:	f10b 0b01 	add.w	fp, fp, #1
 800b09e:	f1ba 0a01 	subs.w	sl, sl, #1
 800b0a2:	d1db      	bne.n	800b05c <_DrawBitmap+0x280>
 800b0a4:	e77f      	b.n	800afa6 <_DrawBitmap+0x1ca>
 800b0a6:	f109 0901 	add.w	r9, r9, #1
 800b0aa:	f1b9 0f04 	cmp.w	r9, #4
 800b0ae:	d105      	bne.n	800b0bc <_DrawBitmap+0x2e0>
 800b0b0:	f89b 7001 	ldrb.w	r7, [fp, #1]
 800b0b4:	f04f 0900 	mov.w	r9, #0
 800b0b8:	f10b 0b01 	add.w	fp, fp, #1
 800b0bc:	f1ba 0a01 	subs.w	sl, sl, #1
 800b0c0:	f43f af71 	beq.w	800afa6 <_DrawBitmap+0x1ca>
 800b0c4:	f1c9 0303 	rsb	r3, r9, #3
 800b0c8:	005b      	lsls	r3, r3, #1
 800b0ca:	f1c3 0206 	rsb	r2, r3, #6
 800b0ce:	20c0      	movs	r0, #192	; 0xc0
 800b0d0:	fa40 f202 	asr.w	r2, r0, r2
 800b0d4:	403a      	ands	r2, r7
 800b0d6:	eb08 0106 	add.w	r1, r8, r6
 800b0da:	fa32 f303 	lsrs.w	r3, r2, r3
 800b0de:	ebca 0101 	rsb	r1, sl, r1
 800b0e2:	d0e0      	beq.n	800b0a6 <_DrawBitmap+0x2ca>
 800b0e4:	9808      	ldr	r0, [sp, #32]
 800b0e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0e8:	f7ff fb25 	bl	800a736 <_SetPixelIndex>
 800b0ec:	e7db      	b.n	800b0a6 <_DrawBitmap+0x2ca>
 800b0ee:	bf00      	nop
 800b0f0:	200002c4 	.word	0x200002c4
 800b0f4:	08066f28 	.word	0x08066f28
 800b0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0fa:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b0fc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800b100:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b102:	7827      	ldrb	r7, [r4, #0]
 800b104:	4403      	add	r3, r0
 800b106:	930a      	str	r3, [sp, #40]	; 0x28
 800b108:	4ba6      	ldr	r3, [pc, #664]	; (800b3a4 <_DrawBitmap+0x5c8>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	7c1b      	ldrb	r3, [r3, #16]
 800b10e:	f013 0303 	ands.w	r3, r3, #3
 800b112:	4490      	add	r8, r2
 800b114:	d00b      	beq.n	800b12e <_DrawBitmap+0x352>
 800b116:	2b02      	cmp	r3, #2
 800b118:	d055      	beq.n	800b1c6 <_DrawBitmap+0x3ea>
 800b11a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b11c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b11e:	3001      	adds	r0, #1
 800b120:	441c      	add	r4, r3
 800b122:	9009      	str	r0, [sp, #36]	; 0x24
 800b124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b126:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b128:	4293      	cmp	r3, r2
 800b12a:	dbe5      	blt.n	800b0f8 <_DrawBitmap+0x31c>
 800b12c:	e152      	b.n	800b3d4 <_DrawBitmap+0x5f8>
 800b12e:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 800b132:	46a2      	mov	sl, r4
 800b134:	4641      	mov	r1, r8
 800b136:	b345      	cbz	r5, 800b18a <_DrawBitmap+0x3ae>
 800b138:	f1c9 0301 	rsb	r3, r9, #1
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	f1c3 0204 	rsb	r2, r3, #4
 800b142:	20f0      	movs	r0, #240	; 0xf0
 800b144:	fa40 f202 	asr.w	r2, r0, r2
 800b148:	403a      	ands	r2, r7
 800b14a:	fa22 f303 	lsr.w	r3, r2, r3
 800b14e:	9808      	ldr	r0, [sp, #32]
 800b150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b152:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800b156:	f109 0901 	add.w	r9, r9, #1
 800b15a:	f101 0b01 	add.w	fp, r1, #1
 800b15e:	f7ff faea 	bl	800a736 <_SetPixelIndex>
 800b162:	f1b9 0f02 	cmp.w	r9, #2
 800b166:	d105      	bne.n	800b174 <_DrawBitmap+0x398>
 800b168:	f89a 7001 	ldrb.w	r7, [sl, #1]
 800b16c:	f04f 0900 	mov.w	r9, #0
 800b170:	f10a 0a01 	add.w	sl, sl, #1
 800b174:	eb08 0306 	add.w	r3, r8, r6
 800b178:	455b      	cmp	r3, fp
 800b17a:	d0ce      	beq.n	800b11a <_DrawBitmap+0x33e>
 800b17c:	4659      	mov	r1, fp
 800b17e:	e7db      	b.n	800b138 <_DrawBitmap+0x35c>
 800b180:	eb08 0306 	add.w	r3, r8, r6
 800b184:	455b      	cmp	r3, fp
 800b186:	d0c8      	beq.n	800b11a <_DrawBitmap+0x33e>
 800b188:	4659      	mov	r1, fp
 800b18a:	f1c9 0e01 	rsb	lr, r9, #1
 800b18e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800b192:	f1ce 0304 	rsb	r3, lr, #4
 800b196:	22f0      	movs	r2, #240	; 0xf0
 800b198:	fa42 f303 	asr.w	r3, r2, r3
 800b19c:	403b      	ands	r3, r7
 800b19e:	9808      	ldr	r0, [sp, #32]
 800b1a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1a2:	fa23 f30e 	lsr.w	r3, r3, lr
 800b1a6:	f109 0901 	add.w	r9, r9, #1
 800b1aa:	f101 0b01 	add.w	fp, r1, #1
 800b1ae:	f7ff fac2 	bl	800a736 <_SetPixelIndex>
 800b1b2:	f1b9 0f02 	cmp.w	r9, #2
 800b1b6:	d1e3      	bne.n	800b180 <_DrawBitmap+0x3a4>
 800b1b8:	f89a 7001 	ldrb.w	r7, [sl, #1]
 800b1bc:	f04f 0900 	mov.w	r9, #0
 800b1c0:	f10a 0a01 	add.w	sl, sl, #1
 800b1c4:	e7dc      	b.n	800b180 <_DrawBitmap+0x3a4>
 800b1c6:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 800b1ca:	46b2      	mov	sl, r6
 800b1cc:	46a3      	mov	fp, r4
 800b1ce:	b39d      	cbz	r5, 800b238 <_DrawBitmap+0x45c>
 800b1d0:	f1c9 0301 	rsb	r3, r9, #1
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	f1c3 0204 	rsb	r2, r3, #4
 800b1da:	20f0      	movs	r0, #240	; 0xf0
 800b1dc:	fa40 f202 	asr.w	r2, r0, r2
 800b1e0:	403a      	ands	r2, r7
 800b1e2:	eb08 0106 	add.w	r1, r8, r6
 800b1e6:	fa32 f303 	lsrs.w	r3, r2, r3
 800b1ea:	ebca 0101 	rsb	r1, sl, r1
 800b1ee:	d005      	beq.n	800b1fc <_DrawBitmap+0x420>
 800b1f0:	9808      	ldr	r0, [sp, #32]
 800b1f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1f4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800b1f8:	f7ff fa9d 	bl	800a736 <_SetPixelIndex>
 800b1fc:	f109 0901 	add.w	r9, r9, #1
 800b200:	f1b9 0f02 	cmp.w	r9, #2
 800b204:	d105      	bne.n	800b212 <_DrawBitmap+0x436>
 800b206:	f89b 7001 	ldrb.w	r7, [fp, #1]
 800b20a:	f04f 0900 	mov.w	r9, #0
 800b20e:	f10b 0b01 	add.w	fp, fp, #1
 800b212:	f1ba 0a01 	subs.w	sl, sl, #1
 800b216:	d1db      	bne.n	800b1d0 <_DrawBitmap+0x3f4>
 800b218:	e77f      	b.n	800b11a <_DrawBitmap+0x33e>
 800b21a:	f109 0901 	add.w	r9, r9, #1
 800b21e:	f1b9 0f02 	cmp.w	r9, #2
 800b222:	d105      	bne.n	800b230 <_DrawBitmap+0x454>
 800b224:	f89b 7001 	ldrb.w	r7, [fp, #1]
 800b228:	f04f 0900 	mov.w	r9, #0
 800b22c:	f10b 0b01 	add.w	fp, fp, #1
 800b230:	f1ba 0a01 	subs.w	sl, sl, #1
 800b234:	f43f af71 	beq.w	800b11a <_DrawBitmap+0x33e>
 800b238:	f1c9 0301 	rsb	r3, r9, #1
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	f1c3 0204 	rsb	r2, r3, #4
 800b242:	20f0      	movs	r0, #240	; 0xf0
 800b244:	fa40 f202 	asr.w	r2, r0, r2
 800b248:	403a      	ands	r2, r7
 800b24a:	eb08 0106 	add.w	r1, r8, r6
 800b24e:	fa32 f303 	lsrs.w	r3, r2, r3
 800b252:	ebca 0101 	rsb	r1, sl, r1
 800b256:	d0e0      	beq.n	800b21a <_DrawBitmap+0x43e>
 800b258:	9808      	ldr	r0, [sp, #32]
 800b25a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b25c:	f7ff fa6b 	bl	800a736 <_SetPixelIndex>
 800b260:	e7db      	b.n	800b21a <_DrawBitmap+0x43e>
 800b262:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800b264:	4b4f      	ldr	r3, [pc, #316]	; (800b3a4 <_DrawBitmap+0x5c8>)
 800b266:	b11f      	cbz	r7, 800b270 <_DrawBitmap+0x494>
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	7c12      	ldrb	r2, [r2, #16]
 800b26c:	0792      	lsls	r2, r2, #30
 800b26e:	d504      	bpl.n	800b27a <_DrawBitmap+0x49e>
 800b270:	f8d3 8000 	ldr.w	r8, [r3]
 800b274:	f04f 0c00 	mov.w	ip, #0
 800b278:	e013      	b.n	800b2a2 <_DrawBitmap+0x4c6>
 800b27a:	2d00      	cmp	r5, #0
 800b27c:	d0f8      	beq.n	800b270 <_DrawBitmap+0x494>
 800b27e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b280:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b282:	9b08      	ldr	r3, [sp, #32]
 800b284:	9202      	str	r2, [sp, #8]
 800b286:	9600      	str	r6, [sp, #0]
 800b288:	9001      	str	r0, [sp, #4]
 800b28a:	9503      	str	r5, [sp, #12]
 800b28c:	6998      	ldr	r0, [r3, #24]
 800b28e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b290:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b292:	4623      	mov	r3, r4
 800b294:	47b8      	blx	r7
 800b296:	e09d      	b.n	800b3d4 <_DrawBitmap+0x5f8>
 800b298:	b93d      	cbnz	r5, 800b2aa <_DrawBitmap+0x4ce>
 800b29a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b29c:	f10c 0c01 	add.w	ip, ip, #1
 800b2a0:	441c      	add	r4, r3
 800b2a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b2a4:	4594      	cmp	ip, r2
 800b2a6:	dbf7      	blt.n	800b298 <_DrawBitmap+0x4bc>
 800b2a8:	e094      	b.n	800b3d4 <_DrawBitmap+0x5f8>
 800b2aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b2ac:	69c3      	ldr	r3, [r0, #28]
 800b2ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2b0:	4461      	add	r1, ip
 800b2b2:	fb03 2101 	mla	r1, r3, r1, r2
 800b2b6:	6803      	ldr	r3, [r0, #0]
 800b2b8:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800b2bc:	f898 3010 	ldrb.w	r3, [r8, #16]
 800b2c0:	f013 0303 	ands.w	r3, r3, #3
 800b2c4:	460a      	mov	r2, r1
 800b2c6:	d003      	beq.n	800b2d0 <_DrawBitmap+0x4f4>
 800b2c8:	2b02      	cmp	r3, #2
 800b2ca:	d1e6      	bne.n	800b29a <_DrawBitmap+0x4be>
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	e04f      	b.n	800b370 <_DrawBitmap+0x594>
 800b2d0:	4631      	mov	r1, r6
 800b2d2:	4623      	mov	r3, r4
 800b2d4:	2907      	cmp	r1, #7
 800b2d6:	dd23      	ble.n	800b320 <_DrawBitmap+0x544>
 800b2d8:	781f      	ldrb	r7, [r3, #0]
 800b2da:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800b2de:	8017      	strh	r7, [r2, #0]
 800b2e0:	785f      	ldrb	r7, [r3, #1]
 800b2e2:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800b2e6:	8057      	strh	r7, [r2, #2]
 800b2e8:	789f      	ldrb	r7, [r3, #2]
 800b2ea:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800b2ee:	8097      	strh	r7, [r2, #4]
 800b2f0:	78df      	ldrb	r7, [r3, #3]
 800b2f2:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800b2f6:	80d7      	strh	r7, [r2, #6]
 800b2f8:	791f      	ldrb	r7, [r3, #4]
 800b2fa:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800b2fe:	8117      	strh	r7, [r2, #8]
 800b300:	795f      	ldrb	r7, [r3, #5]
 800b302:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800b306:	8157      	strh	r7, [r2, #10]
 800b308:	799f      	ldrb	r7, [r3, #6]
 800b30a:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800b30e:	8197      	strh	r7, [r2, #12]
 800b310:	79df      	ldrb	r7, [r3, #7]
 800b312:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800b316:	81d7      	strh	r7, [r2, #14]
 800b318:	3908      	subs	r1, #8
 800b31a:	3308      	adds	r3, #8
 800b31c:	3210      	adds	r2, #16
 800b31e:	e7d9      	b.n	800b2d4 <_DrawBitmap+0x4f8>
 800b320:	2903      	cmp	r1, #3
 800b322:	dd13      	ble.n	800b34c <_DrawBitmap+0x570>
 800b324:	781f      	ldrb	r7, [r3, #0]
 800b326:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800b32a:	8017      	strh	r7, [r2, #0]
 800b32c:	785f      	ldrb	r7, [r3, #1]
 800b32e:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800b332:	8057      	strh	r7, [r2, #2]
 800b334:	789f      	ldrb	r7, [r3, #2]
 800b336:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800b33a:	8097      	strh	r7, [r2, #4]
 800b33c:	78df      	ldrb	r7, [r3, #3]
 800b33e:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800b342:	80d7      	strh	r7, [r2, #6]
 800b344:	3904      	subs	r1, #4
 800b346:	3304      	adds	r3, #4
 800b348:	3208      	adds	r2, #8
 800b34a:	e7e9      	b.n	800b320 <_DrawBitmap+0x544>
 800b34c:	2700      	movs	r7, #0
 800b34e:	428f      	cmp	r7, r1
 800b350:	d0a3      	beq.n	800b29a <_DrawBitmap+0x4be>
 800b352:	f813 9007 	ldrb.w	r9, [r3, r7]
 800b356:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
 800b35a:	f822 9017 	strh.w	r9, [r2, r7, lsl #1]
 800b35e:	3701      	adds	r7, #1
 800b360:	e7f5      	b.n	800b34e <_DrawBitmap+0x572>
 800b362:	5ce2      	ldrb	r2, [r4, r3]
 800b364:	b11a      	cbz	r2, 800b36e <_DrawBitmap+0x592>
 800b366:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800b36a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 800b36e:	3301      	adds	r3, #1
 800b370:	1af2      	subs	r2, r6, r3
 800b372:	2a00      	cmp	r2, #0
 800b374:	dcf5      	bgt.n	800b362 <_DrawBitmap+0x586>
 800b376:	e790      	b.n	800b29a <_DrawBitmap+0x4be>
 800b378:	6c45      	ldr	r5, [r0, #68]	; 0x44
 800b37a:	b915      	cbnz	r5, 800b382 <_DrawBitmap+0x5a6>
 800b37c:	0076      	lsls	r6, r6, #1
 800b37e:	2500      	movs	r5, #0
 800b380:	e012      	b.n	800b3a8 <_DrawBitmap+0x5cc>
 800b382:	4b08      	ldr	r3, [pc, #32]	; (800b3a4 <_DrawBitmap+0x5c8>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	7c1b      	ldrb	r3, [r3, #16]
 800b388:	07db      	lsls	r3, r3, #31
 800b38a:	d4f7      	bmi.n	800b37c <_DrawBitmap+0x5a0>
 800b38c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b38e:	981a      	ldr	r0, [sp, #104]	; 0x68
 800b390:	9a08      	ldr	r2, [sp, #32]
 800b392:	9301      	str	r3, [sp, #4]
 800b394:	9600      	str	r6, [sp, #0]
 800b396:	9002      	str	r0, [sp, #8]
 800b398:	6990      	ldr	r0, [r2, #24]
 800b39a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b39c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b39e:	4623      	mov	r3, r4
 800b3a0:	47a8      	blx	r5
 800b3a2:	e017      	b.n	800b3d4 <_DrawBitmap+0x5f8>
 800b3a4:	200002c4 	.word	0x200002c4
 800b3a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b3aa:	429d      	cmp	r5, r3
 800b3ac:	da12      	bge.n	800b3d4 <_DrawBitmap+0x5f8>
 800b3ae:	9808      	ldr	r0, [sp, #32]
 800b3b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3b2:	6883      	ldr	r3, [r0, #8]
 800b3b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b3b6:	69d9      	ldr	r1, [r3, #28]
 800b3b8:	442a      	add	r2, r5
 800b3ba:	fb01 0102 	mla	r1, r1, r2, r0
 800b3be:	6818      	ldr	r0, [r3, #0]
 800b3c0:	4632      	mov	r2, r6
 800b3c2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	f7f4 ff50 	bl	800026c <memcpy>
 800b3cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b3ce:	3501      	adds	r5, #1
 800b3d0:	4414      	add	r4, r2
 800b3d2:	e7e9      	b.n	800b3a8 <_DrawBitmap+0x5cc>
 800b3d4:	b00f      	add	sp, #60	; 0x3c
 800b3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3da:	bf00      	nop

0800b3dc <LCD_UpdateColorIndices>:
 800b3dc:	b510      	push	{r4, lr}
 800b3de:	4c07      	ldr	r4, [pc, #28]	; (800b3fc <LCD_UpdateColorIndices+0x20>)
 800b3e0:	6823      	ldr	r3, [r4, #0]
 800b3e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b3e4:	f000 fcc0 	bl	800bd68 <LCD_Color2Index>
 800b3e8:	f000 fcde 	bl	800bda8 <LCD_SetColorIndex>
 800b3ec:	6823      	ldr	r3, [r4, #0]
 800b3ee:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b3f0:	f000 fcba 	bl	800bd68 <LCD_Color2Index>
 800b3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3f8:	f000 bcf2 	b.w	800bde0 <LCD_SetBkColorIndex>
 800b3fc:	200002c4 	.word	0x200002c4

0800b400 <LCD_SetClipRectEx>:
 800b400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b402:	4c09      	ldr	r4, [pc, #36]	; (800b428 <LCD_SetClipRectEx+0x28>)
 800b404:	6823      	ldr	r3, [r4, #0]
 800b406:	7c5a      	ldrb	r2, [r3, #17]
 800b408:	4b08      	ldr	r3, [pc, #32]	; (800b42c <LCD_SetClipRectEx+0x2c>)
 800b40a:	4605      	mov	r5, r0
 800b40c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b410:	68c2      	ldr	r2, [r0, #12]
 800b412:	4669      	mov	r1, sp
 800b414:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b416:	4790      	blx	r2
 800b418:	6820      	ldr	r0, [r4, #0]
 800b41a:	4629      	mov	r1, r5
 800b41c:	466a      	mov	r2, sp
 800b41e:	3008      	adds	r0, #8
 800b420:	f000 fdfa 	bl	800c018 <GUI__IntersectRects>
 800b424:	b003      	add	sp, #12
 800b426:	bd30      	pop	{r4, r5, pc}
 800b428:	200002c4 	.word	0x200002c4
 800b42c:	20028844 	.word	0x20028844

0800b430 <LCD_SetVRAMAddrEx>:
 800b430:	b513      	push	{r0, r1, r4, lr}
 800b432:	460c      	mov	r4, r1
 800b434:	f002 fa7a 	bl	800d92c <GUI_DEVICE__GetpDriver>
 800b438:	9001      	str	r0, [sp, #4]
 800b43a:	b908      	cbnz	r0, 800b440 <LCD_SetVRAMAddrEx+0x10>
 800b43c:	2001      	movs	r0, #1
 800b43e:	e00b      	b.n	800b458 <LCD_SetVRAMAddrEx+0x28>
 800b440:	68c3      	ldr	r3, [r0, #12]
 800b442:	2109      	movs	r1, #9
 800b444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b446:	a801      	add	r0, sp, #4
 800b448:	4798      	blx	r3
 800b44a:	4603      	mov	r3, r0
 800b44c:	2800      	cmp	r0, #0
 800b44e:	d0f5      	beq.n	800b43c <LCD_SetVRAMAddrEx+0xc>
 800b450:	9801      	ldr	r0, [sp, #4]
 800b452:	4621      	mov	r1, r4
 800b454:	4798      	blx	r3
 800b456:	2000      	movs	r0, #0
 800b458:	b002      	add	sp, #8
 800b45a:	bd10      	pop	{r4, pc}

0800b45c <LCD_SetVSizeEx>:
 800b45c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b45e:	460d      	mov	r5, r1
 800b460:	4614      	mov	r4, r2
 800b462:	f002 fa63 	bl	800d92c <GUI_DEVICE__GetpDriver>
 800b466:	9001      	str	r0, [sp, #4]
 800b468:	b908      	cbnz	r0, 800b46e <LCD_SetVSizeEx+0x12>
 800b46a:	2001      	movs	r0, #1
 800b46c:	e00c      	b.n	800b488 <LCD_SetVSizeEx+0x2c>
 800b46e:	68c3      	ldr	r3, [r0, #12]
 800b470:	210a      	movs	r1, #10
 800b472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b474:	a801      	add	r0, sp, #4
 800b476:	4798      	blx	r3
 800b478:	4603      	mov	r3, r0
 800b47a:	2800      	cmp	r0, #0
 800b47c:	d0f5      	beq.n	800b46a <LCD_SetVSizeEx+0xe>
 800b47e:	9801      	ldr	r0, [sp, #4]
 800b480:	4629      	mov	r1, r5
 800b482:	4622      	mov	r2, r4
 800b484:	4798      	blx	r3
 800b486:	2000      	movs	r0, #0
 800b488:	b003      	add	sp, #12
 800b48a:	bd30      	pop	{r4, r5, pc}

0800b48c <LCD_SetSizeEx>:
 800b48c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b48e:	460d      	mov	r5, r1
 800b490:	4614      	mov	r4, r2
 800b492:	f002 fa4b 	bl	800d92c <GUI_DEVICE__GetpDriver>
 800b496:	9001      	str	r0, [sp, #4]
 800b498:	b908      	cbnz	r0, 800b49e <LCD_SetSizeEx+0x12>
 800b49a:	2001      	movs	r0, #1
 800b49c:	e00c      	b.n	800b4b8 <LCD_SetSizeEx+0x2c>
 800b49e:	68c3      	ldr	r3, [r0, #12]
 800b4a0:	210b      	movs	r1, #11
 800b4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a4:	a801      	add	r0, sp, #4
 800b4a6:	4798      	blx	r3
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	d0f5      	beq.n	800b49a <LCD_SetSizeEx+0xe>
 800b4ae:	9801      	ldr	r0, [sp, #4]
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	4622      	mov	r2, r4
 800b4b4:	4798      	blx	r3
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	b003      	add	sp, #12
 800b4ba:	bd30      	pop	{r4, r5, pc}

0800b4bc <LCD_SetVisEx>:
 800b4bc:	b513      	push	{r0, r1, r4, lr}
 800b4be:	460c      	mov	r4, r1
 800b4c0:	f002 fa34 	bl	800d92c <GUI_DEVICE__GetpDriver>
 800b4c4:	9001      	str	r0, [sp, #4]
 800b4c6:	b908      	cbnz	r0, 800b4cc <LCD_SetVisEx+0x10>
 800b4c8:	2001      	movs	r0, #1
 800b4ca:	e00b      	b.n	800b4e4 <LCD_SetVisEx+0x28>
 800b4cc:	68c3      	ldr	r3, [r0, #12]
 800b4ce:	2106      	movs	r1, #6
 800b4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d2:	a801      	add	r0, sp, #4
 800b4d4:	4798      	blx	r3
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d0f5      	beq.n	800b4c8 <LCD_SetVisEx+0xc>
 800b4dc:	9801      	ldr	r0, [sp, #4]
 800b4de:	4621      	mov	r1, r4
 800b4e0:	4798      	blx	r3
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	b002      	add	sp, #8
 800b4e6:	bd10      	pop	{r4, pc}

0800b4e8 <LCD_SetPosEx>:
 800b4e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4ea:	460d      	mov	r5, r1
 800b4ec:	4614      	mov	r4, r2
 800b4ee:	f002 fa1d 	bl	800d92c <GUI_DEVICE__GetpDriver>
 800b4f2:	9001      	str	r0, [sp, #4]
 800b4f4:	b908      	cbnz	r0, 800b4fa <LCD_SetPosEx+0x12>
 800b4f6:	2001      	movs	r0, #1
 800b4f8:	e00c      	b.n	800b514 <LCD_SetPosEx+0x2c>
 800b4fa:	68c3      	ldr	r3, [r0, #12]
 800b4fc:	2103      	movs	r1, #3
 800b4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b500:	a801      	add	r0, sp, #4
 800b502:	4798      	blx	r3
 800b504:	4603      	mov	r3, r0
 800b506:	2800      	cmp	r0, #0
 800b508:	d0f5      	beq.n	800b4f6 <LCD_SetPosEx+0xe>
 800b50a:	9801      	ldr	r0, [sp, #4]
 800b50c:	4629      	mov	r1, r5
 800b50e:	4622      	mov	r2, r4
 800b510:	4798      	blx	r3
 800b512:	2000      	movs	r0, #0
 800b514:	b003      	add	sp, #12
 800b516:	bd30      	pop	{r4, r5, pc}

0800b518 <LCD_SetLUTEntryEx>:
 800b518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b51a:	460d      	mov	r5, r1
 800b51c:	4614      	mov	r4, r2
 800b51e:	f002 fa05 	bl	800d92c <GUI_DEVICE__GetpDriver>
 800b522:	9001      	str	r0, [sp, #4]
 800b524:	b908      	cbnz	r0, 800b52a <LCD_SetLUTEntryEx+0x12>
 800b526:	2001      	movs	r0, #1
 800b528:	e00c      	b.n	800b544 <LCD_SetLUTEntryEx+0x2c>
 800b52a:	68c3      	ldr	r3, [r0, #12]
 800b52c:	2110      	movs	r1, #16
 800b52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b530:	a801      	add	r0, sp, #4
 800b532:	4798      	blx	r3
 800b534:	4603      	mov	r3, r0
 800b536:	2800      	cmp	r0, #0
 800b538:	d0f5      	beq.n	800b526 <LCD_SetLUTEntryEx+0xe>
 800b53a:	9801      	ldr	r0, [sp, #4]
 800b53c:	4629      	mov	r1, r5
 800b53e:	4622      	mov	r2, r4
 800b540:	4798      	blx	r3
 800b542:	2000      	movs	r0, #0
 800b544:	b003      	add	sp, #12
 800b546:	bd30      	pop	{r4, r5, pc}

0800b548 <LCD_GetPosEx>:
 800b548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b54a:	460d      	mov	r5, r1
 800b54c:	4614      	mov	r4, r2
 800b54e:	f002 f9ed 	bl	800d92c <GUI_DEVICE__GetpDriver>
 800b552:	9001      	str	r0, [sp, #4]
 800b554:	b908      	cbnz	r0, 800b55a <LCD_GetPosEx+0x12>
 800b556:	2001      	movs	r0, #1
 800b558:	e00c      	b.n	800b574 <LCD_GetPosEx+0x2c>
 800b55a:	68c3      	ldr	r3, [r0, #12]
 800b55c:	2104      	movs	r1, #4
 800b55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b560:	a801      	add	r0, sp, #4
 800b562:	4798      	blx	r3
 800b564:	4603      	mov	r3, r0
 800b566:	2800      	cmp	r0, #0
 800b568:	d0f5      	beq.n	800b556 <LCD_GetPosEx+0xe>
 800b56a:	9801      	ldr	r0, [sp, #4]
 800b56c:	4629      	mov	r1, r5
 800b56e:	4622      	mov	r2, r4
 800b570:	4798      	blx	r3
 800b572:	2000      	movs	r0, #0
 800b574:	b003      	add	sp, #12
 800b576:	bd30      	pop	{r4, r5, pc}

0800b578 <LCD_SetDevFunc>:
 800b578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b57a:	460d      	mov	r5, r1
 800b57c:	4614      	mov	r4, r2
 800b57e:	f002 f9d5 	bl	800d92c <GUI_DEVICE__GetpDriver>
 800b582:	9001      	str	r0, [sp, #4]
 800b584:	b908      	cbnz	r0, 800b58a <LCD_SetDevFunc+0x12>
 800b586:	2001      	movs	r0, #1
 800b588:	e00c      	b.n	800b5a4 <LCD_SetDevFunc+0x2c>
 800b58a:	68c3      	ldr	r3, [r0, #12]
 800b58c:	2116      	movs	r1, #22
 800b58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b590:	a801      	add	r0, sp, #4
 800b592:	4798      	blx	r3
 800b594:	4603      	mov	r3, r0
 800b596:	2800      	cmp	r0, #0
 800b598:	d0f5      	beq.n	800b586 <LCD_SetDevFunc+0xe>
 800b59a:	9801      	ldr	r0, [sp, #4]
 800b59c:	4629      	mov	r1, r5
 800b59e:	4622      	mov	r2, r4
 800b5a0:	4798      	blx	r3
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	b003      	add	sp, #12
 800b5a6:	bd30      	pop	{r4, r5, pc}

0800b5a8 <_GetDevProp>:
 800b5a8:	2801      	cmp	r0, #1
 800b5aa:	b510      	push	{r4, lr}
 800b5ac:	460c      	mov	r4, r1
 800b5ae:	dc08      	bgt.n	800b5c2 <_GetDevProp+0x1a>
 800b5b0:	f002 f9bc 	bl	800d92c <GUI_DEVICE__GetpDriver>
 800b5b4:	b120      	cbz	r0, 800b5c0 <_GetDevProp+0x18>
 800b5b6:	68c3      	ldr	r3, [r0, #12]
 800b5b8:	4621      	mov	r1, r4
 800b5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5bc:	4798      	blx	r3
 800b5be:	bd10      	pop	{r4, pc}
 800b5c0:	bd10      	pop	{r4, pc}
 800b5c2:	2000      	movs	r0, #0
 800b5c4:	bd10      	pop	{r4, pc}

0800b5c6 <_GetMaxValue>:
 800b5c6:	b538      	push	{r3, r4, r5, lr}
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	2001      	movs	r0, #1
 800b5ce:	f7ff ffeb 	bl	800b5a8 <_GetDevProp>
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	4605      	mov	r5, r0
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	f7ff ffe6 	bl	800b5a8 <_GetDevProp>
 800b5dc:	42a8      	cmp	r0, r5
 800b5de:	bfb8      	it	lt
 800b5e0:	4628      	movlt	r0, r5
 800b5e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}

0800b5e8 <LCD_GetXSizeEx>:
 800b5e8:	2101      	movs	r1, #1
 800b5ea:	f7ff bfdd 	b.w	800b5a8 <_GetDevProp>

0800b5ee <LCD_GetYSizeEx>:
 800b5ee:	2102      	movs	r1, #2
 800b5f0:	f7ff bfda 	b.w	800b5a8 <_GetDevProp>

0800b5f4 <LCD_GetVXSizeEx>:
 800b5f4:	2103      	movs	r1, #3
 800b5f6:	f7ff bfd7 	b.w	800b5a8 <_GetDevProp>

0800b5fa <LCD_GetVYSizeEx>:
 800b5fa:	2104      	movs	r1, #4
 800b5fc:	f7ff bfd4 	b.w	800b5a8 <_GetDevProp>

0800b600 <LCD_GetBitsPerPixelEx>:
 800b600:	2108      	movs	r1, #8
 800b602:	f7ff bfd1 	b.w	800b5a8 <_GetDevProp>

0800b606 <LCD_GetNumColorsEx>:
 800b606:	2109      	movs	r1, #9
 800b608:	f7ff bfce 	b.w	800b5a8 <_GetDevProp>

0800b60c <LCD_GetMirrorXEx>:
 800b60c:	210c      	movs	r1, #12
 800b60e:	f7ff bfcb 	b.w	800b5a8 <_GetDevProp>

0800b612 <LCD_GetMirrorYEx>:
 800b612:	210d      	movs	r1, #13
 800b614:	f7ff bfc8 	b.w	800b5a8 <_GetDevProp>

0800b618 <LCD_GetSwapXYEx>:
 800b618:	210e      	movs	r1, #14
 800b61a:	f7ff bfc5 	b.w	800b5a8 <_GetDevProp>
	...

0800b620 <LCD_GetXSize>:
 800b620:	4b02      	ldr	r3, [pc, #8]	; (800b62c <LCD_GetXSize+0xc>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	7c58      	ldrb	r0, [r3, #17]
 800b626:	f7ff bfdf 	b.w	800b5e8 <LCD_GetXSizeEx>
 800b62a:	bf00      	nop
 800b62c:	200002c4 	.word	0x200002c4

0800b630 <LCD_GetYSize>:
 800b630:	4b02      	ldr	r3, [pc, #8]	; (800b63c <LCD_GetYSize+0xc>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	7c58      	ldrb	r0, [r3, #17]
 800b636:	f7ff bfda 	b.w	800b5ee <LCD_GetYSizeEx>
 800b63a:	bf00      	nop
 800b63c:	200002c4 	.word	0x200002c4

0800b640 <LCD_GetNumColors>:
 800b640:	4b02      	ldr	r3, [pc, #8]	; (800b64c <LCD_GetNumColors+0xc>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	7c58      	ldrb	r0, [r3, #17]
 800b646:	f7ff bfde 	b.w	800b606 <LCD_GetNumColorsEx>
 800b64a:	bf00      	nop
 800b64c:	200002c4 	.word	0x200002c4

0800b650 <GUI_GetBitsPerPixelEx>:
 800b650:	b508      	push	{r3, lr}
 800b652:	4b04      	ldr	r3, [pc, #16]	; (800b664 <GUI_GetBitsPerPixelEx+0x14>)
 800b654:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b658:	68c3      	ldr	r3, [r0, #12]
 800b65a:	2108      	movs	r1, #8
 800b65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b65e:	4798      	blx	r3
 800b660:	bd08      	pop	{r3, pc}
 800b662:	bf00      	nop
 800b664:	20028844 	.word	0x20028844

0800b668 <LCD_GetPaletteEx>:
 800b668:	b508      	push	{r3, lr}
 800b66a:	f002 f95f 	bl	800d92c <GUI_DEVICE__GetpDriver>
 800b66e:	b120      	cbz	r0, 800b67a <LCD_GetPaletteEx+0x12>
 800b670:	68c3      	ldr	r3, [r0, #12]
 800b672:	2102      	movs	r1, #2
 800b674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b676:	4798      	blx	r3
 800b678:	bd08      	pop	{r3, pc}
 800b67a:	bd08      	pop	{r3, pc}

0800b67c <LCD_GetPalette>:
 800b67c:	4b02      	ldr	r3, [pc, #8]	; (800b688 <LCD_GetPalette+0xc>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	7c58      	ldrb	r0, [r3, #17]
 800b682:	f7ff bff1 	b.w	800b668 <LCD_GetPaletteEx>
 800b686:	bf00      	nop
 800b688:	200002c4 	.word	0x200002c4

0800b68c <GUI_GetpfIndex2ColorEx>:
 800b68c:	4b02      	ldr	r3, [pc, #8]	; (800b698 <GUI_GetpfIndex2ColorEx+0xc>)
 800b68e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	6858      	ldr	r0, [r3, #4]
 800b696:	4770      	bx	lr
 800b698:	20028844 	.word	0x20028844

0800b69c <GUI_GetpfColor2IndexEx>:
 800b69c:	4b02      	ldr	r3, [pc, #8]	; (800b6a8 <GUI_GetpfColor2IndexEx+0xc>)
 800b69e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	6818      	ldr	r0, [r3, #0]
 800b6a6:	4770      	bx	lr
 800b6a8:	20028844 	.word	0x20028844

0800b6ac <LCD_GetVXSizeMax>:
 800b6ac:	2003      	movs	r0, #3
 800b6ae:	f7ff bf8a 	b.w	800b5c6 <_GetMaxValue>

0800b6b2 <LCD__GetBPP>:
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d03b      	beq.n	800b72e <LCD__GetBPP+0x7c>
 800b6b6:	f030 0301 	bics.w	r3, r0, #1
 800b6ba:	d029      	beq.n	800b710 <LCD__GetBPP+0x5e>
 800b6bc:	f030 0303 	bics.w	r3, r0, #3
 800b6c0:	d028      	beq.n	800b714 <LCD__GetBPP+0x62>
 800b6c2:	f030 0307 	bics.w	r3, r0, #7
 800b6c6:	d027      	beq.n	800b718 <LCD__GetBPP+0x66>
 800b6c8:	f030 030f 	bics.w	r3, r0, #15
 800b6cc:	d026      	beq.n	800b71c <LCD__GetBPP+0x6a>
 800b6ce:	f030 031f 	bics.w	r3, r0, #31
 800b6d2:	d025      	beq.n	800b720 <LCD__GetBPP+0x6e>
 800b6d4:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800b6d8:	d024      	beq.n	800b724 <LCD__GetBPP+0x72>
 800b6da:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800b6de:	f023 0301 	bic.w	r3, r3, #1
 800b6e2:	b30b      	cbz	r3, 800b728 <LCD__GetBPP+0x76>
 800b6e4:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800b6e8:	f023 030f 	bic.w	r3, r3, #15
 800b6ec:	b1e3      	cbz	r3, 800b728 <LCD__GetBPP+0x76>
 800b6ee:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800b6f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b6f6:	b1bb      	cbz	r3, 800b728 <LCD__GetBPP+0x76>
 800b6f8:	0c03      	lsrs	r3, r0, #16
 800b6fa:	041b      	lsls	r3, r3, #16
 800b6fc:	b1a3      	cbz	r3, 800b728 <LCD__GetBPP+0x76>
 800b6fe:	0c83      	lsrs	r3, r0, #18
 800b700:	049b      	lsls	r3, r3, #18
 800b702:	b19b      	cbz	r3, 800b72c <LCD__GetBPP+0x7a>
 800b704:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b708:	bf0c      	ite	eq
 800b70a:	2018      	moveq	r0, #24
 800b70c:	2020      	movne	r0, #32
 800b70e:	4770      	bx	lr
 800b710:	2001      	movs	r0, #1
 800b712:	4770      	bx	lr
 800b714:	2002      	movs	r0, #2
 800b716:	4770      	bx	lr
 800b718:	2003      	movs	r0, #3
 800b71a:	4770      	bx	lr
 800b71c:	2004      	movs	r0, #4
 800b71e:	4770      	bx	lr
 800b720:	2005      	movs	r0, #5
 800b722:	4770      	bx	lr
 800b724:	2008      	movs	r0, #8
 800b726:	4770      	bx	lr
 800b728:	2010      	movs	r0, #16
 800b72a:	4770      	bx	lr
 800b72c:	2012      	movs	r0, #18
 800b72e:	4770      	bx	lr

0800b730 <LCD__GetBPPDevice>:
 800b730:	b508      	push	{r3, lr}
 800b732:	f7ff ffbe 	bl	800b6b2 <LCD__GetBPP>
 800b736:	2801      	cmp	r0, #1
 800b738:	d00f      	beq.n	800b75a <LCD__GetBPPDevice+0x2a>
 800b73a:	1e83      	subs	r3, r0, #2
 800b73c:	2b06      	cmp	r3, #6
 800b73e:	d909      	bls.n	800b754 <LCD__GetBPPDevice+0x24>
 800b740:	f1a0 0309 	sub.w	r3, r0, #9
 800b744:	2b07      	cmp	r3, #7
 800b746:	d907      	bls.n	800b758 <LCD__GetBPPDevice+0x28>
 800b748:	3811      	subs	r0, #17
 800b74a:	2810      	cmp	r0, #16
 800b74c:	bf34      	ite	cc
 800b74e:	2020      	movcc	r0, #32
 800b750:	2000      	movcs	r0, #0
 800b752:	bd08      	pop	{r3, pc}
 800b754:	2008      	movs	r0, #8
 800b756:	bd08      	pop	{r3, pc}
 800b758:	2010      	movs	r0, #16
 800b75a:	bd08      	pop	{r3, pc}

0800b75c <_SetDrawMode>:
 800b75c:	b570      	push	{r4, r5, r6, lr}
 800b75e:	4b08      	ldr	r3, [pc, #32]	; (800b780 <_SetDrawMode+0x24>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	7c1a      	ldrb	r2, [r3, #16]
 800b764:	ea80 0102 	eor.w	r1, r0, r2
 800b768:	0749      	lsls	r1, r1, #29
 800b76a:	d505      	bpl.n	800b778 <_SetDrawMode+0x1c>
 800b76c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800b76e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b770:	6826      	ldr	r6, [r4, #0]
 800b772:	680d      	ldr	r5, [r1, #0]
 800b774:	6025      	str	r5, [r4, #0]
 800b776:	600e      	str	r6, [r1, #0]
 800b778:	7418      	strb	r0, [r3, #16]
 800b77a:	4610      	mov	r0, r2
 800b77c:	bd70      	pop	{r4, r5, r6, pc}
 800b77e:	bf00      	nop
 800b780:	200002c4 	.word	0x200002c4

0800b784 <LCD_SetDrawMode>:
 800b784:	b508      	push	{r3, lr}
 800b786:	4b02      	ldr	r3, [pc, #8]	; (800b790 <LCD_SetDrawMode+0xc>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	4798      	blx	r3
 800b78e:	bd08      	pop	{r3, pc}
 800b790:	200002a0 	.word	0x200002a0

0800b794 <LCD_DrawPixel>:
 800b794:	b538      	push	{r3, r4, r5, lr}
 800b796:	4b14      	ldr	r3, [pc, #80]	; (800b7e8 <LCD_DrawPixel+0x54>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	460a      	mov	r2, r1
 800b79c:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800b7a0:	428a      	cmp	r2, r1
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	db1e      	blt.n	800b7e4 <LCD_DrawPixel+0x50>
 800b7a6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800b7aa:	428a      	cmp	r2, r1
 800b7ac:	dc1a      	bgt.n	800b7e4 <LCD_DrawPixel+0x50>
 800b7ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800b7b2:	4288      	cmp	r0, r1
 800b7b4:	db16      	blt.n	800b7e4 <LCD_DrawPixel+0x50>
 800b7b6:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800b7ba:	4288      	cmp	r0, r1
 800b7bc:	dc12      	bgt.n	800b7e4 <LCD_DrawPixel+0x50>
 800b7be:	7c19      	ldrb	r1, [r3, #16]
 800b7c0:	7c58      	ldrb	r0, [r3, #17]
 800b7c2:	f011 0f01 	tst.w	r1, #1
 800b7c6:	4909      	ldr	r1, [pc, #36]	; (800b7ec <LCD_DrawPixel+0x58>)
 800b7c8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800b7cc:	d004      	beq.n	800b7d8 <LCD_DrawPixel+0x44>
 800b7ce:	68c3      	ldr	r3, [r0, #12]
 800b7d0:	4621      	mov	r1, r4
 800b7d2:	69db      	ldr	r3, [r3, #28]
 800b7d4:	4798      	blx	r3
 800b7d6:	bd38      	pop	{r3, r4, r5, pc}
 800b7d8:	68c1      	ldr	r1, [r0, #12]
 800b7da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7dc:	698d      	ldr	r5, [r1, #24]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4621      	mov	r1, r4
 800b7e2:	47a8      	blx	r5
 800b7e4:	bd38      	pop	{r3, r4, r5, pc}
 800b7e6:	bf00      	nop
 800b7e8:	200002c4 	.word	0x200002c4
 800b7ec:	20028844 	.word	0x20028844

0800b7f0 <LCD_DrawHLine>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4b10      	ldr	r3, [pc, #64]	; (800b834 <LCD_DrawHLine+0x44>)
 800b7f4:	681c      	ldr	r4, [r3, #0]
 800b7f6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800b7fa:	4299      	cmp	r1, r3
 800b7fc:	460d      	mov	r5, r1
 800b7fe:	db17      	blt.n	800b830 <LCD_DrawHLine+0x40>
 800b800:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800b804:	4299      	cmp	r1, r3
 800b806:	dc13      	bgt.n	800b830 <LCD_DrawHLine+0x40>
 800b808:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800b80c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b810:	4288      	cmp	r0, r1
 800b812:	bfa8      	it	ge
 800b814:	4601      	movge	r1, r0
 800b816:	429a      	cmp	r2, r3
 800b818:	bfb8      	it	lt
 800b81a:	4613      	movlt	r3, r2
 800b81c:	428b      	cmp	r3, r1
 800b81e:	db07      	blt.n	800b830 <LCD_DrawHLine+0x40>
 800b820:	7c60      	ldrb	r0, [r4, #17]
 800b822:	4a05      	ldr	r2, [pc, #20]	; (800b838 <LCD_DrawHLine+0x48>)
 800b824:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800b828:	68c2      	ldr	r2, [r0, #12]
 800b82a:	6894      	ldr	r4, [r2, #8]
 800b82c:	462a      	mov	r2, r5
 800b82e:	47a0      	blx	r4
 800b830:	bd38      	pop	{r3, r4, r5, pc}
 800b832:	bf00      	nop
 800b834:	200002c4 	.word	0x200002c4
 800b838:	20028844 	.word	0x20028844

0800b83c <LCD_DrawVLine>:
 800b83c:	b538      	push	{r3, r4, r5, lr}
 800b83e:	4b10      	ldr	r3, [pc, #64]	; (800b880 <LCD_DrawVLine+0x44>)
 800b840:	681c      	ldr	r4, [r3, #0]
 800b842:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800b846:	4605      	mov	r5, r0
 800b848:	429d      	cmp	r5, r3
 800b84a:	4610      	mov	r0, r2
 800b84c:	db17      	blt.n	800b87e <LCD_DrawVLine+0x42>
 800b84e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b852:	429d      	cmp	r5, r3
 800b854:	dc13      	bgt.n	800b87e <LCD_DrawVLine+0x42>
 800b856:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800b85a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800b85e:	4291      	cmp	r1, r2
 800b860:	bfa8      	it	ge
 800b862:	460a      	movge	r2, r1
 800b864:	4298      	cmp	r0, r3
 800b866:	bfb8      	it	lt
 800b868:	4603      	movlt	r3, r0
 800b86a:	4293      	cmp	r3, r2
 800b86c:	db07      	blt.n	800b87e <LCD_DrawVLine+0x42>
 800b86e:	7c60      	ldrb	r0, [r4, #17]
 800b870:	4904      	ldr	r1, [pc, #16]	; (800b884 <LCD_DrawVLine+0x48>)
 800b872:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800b876:	68c1      	ldr	r1, [r0, #12]
 800b878:	68cc      	ldr	r4, [r1, #12]
 800b87a:	4629      	mov	r1, r5
 800b87c:	47a0      	blx	r4
 800b87e:	bd38      	pop	{r3, r4, r5, pc}
 800b880:	200002c4 	.word	0x200002c4
 800b884:	20028844 	.word	0x20028844

0800b888 <LCD_FillRect>:
 800b888:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b88a:	460e      	mov	r6, r1
 800b88c:	4912      	ldr	r1, [pc, #72]	; (800b8d8 <LCD_FillRect+0x50>)
 800b88e:	680c      	ldr	r4, [r1, #0]
 800b890:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800b894:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b898:	4288      	cmp	r0, r1
 800b89a:	bfa8      	it	ge
 800b89c:	4601      	movge	r1, r0
 800b89e:	42aa      	cmp	r2, r5
 800b8a0:	bfb8      	it	lt
 800b8a2:	4615      	movlt	r5, r2
 800b8a4:	428d      	cmp	r5, r1
 800b8a6:	db14      	blt.n	800b8d2 <LCD_FillRect+0x4a>
 800b8a8:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800b8ac:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800b8b0:	4296      	cmp	r6, r2
 800b8b2:	bfa8      	it	ge
 800b8b4:	4632      	movge	r2, r6
 800b8b6:	4283      	cmp	r3, r0
 800b8b8:	bfa8      	it	ge
 800b8ba:	4603      	movge	r3, r0
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	db08      	blt.n	800b8d2 <LCD_FillRect+0x4a>
 800b8c0:	7c64      	ldrb	r4, [r4, #17]
 800b8c2:	4806      	ldr	r0, [pc, #24]	; (800b8dc <LCD_FillRect+0x54>)
 800b8c4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b8c8:	68c4      	ldr	r4, [r0, #12]
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	6924      	ldr	r4, [r4, #16]
 800b8ce:	462b      	mov	r3, r5
 800b8d0:	47a0      	blx	r4
 800b8d2:	b002      	add	sp, #8
 800b8d4:	bd70      	pop	{r4, r5, r6, pc}
 800b8d6:	bf00      	nop
 800b8d8:	200002c4 	.word	0x200002c4
 800b8dc:	20028844 	.word	0x20028844

0800b8e0 <LCD__DrawBitmap_1bpp>:
 800b8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e4:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 800ba9c <LCD__DrawBitmap_1bpp+0x1bc>
 800b8e8:	b08f      	sub	sp, #60	; 0x3c
 800b8ea:	f8dc c000 	ldr.w	ip, [ip]
 800b8ee:	9009      	str	r0, [sp, #36]	; 0x24
 800b8f0:	460e      	mov	r6, r1
 800b8f2:	4615      	mov	r5, r2
 800b8f4:	469b      	mov	fp, r3
 800b8f6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b8f8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800b8fc:	f1bc 0f00 	cmp.w	ip, #0
 800b900:	d00d      	beq.n	800b91e <LCD__DrawBitmap_1bpp+0x3e>
 800b902:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800b904:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800b906:	9500      	str	r5, [sp, #0]
 800b908:	9601      	str	r6, [sp, #4]
 800b90a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b90c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b90e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b910:	9702      	str	r7, [sp, #8]
 800b912:	9503      	str	r5, [sp, #12]
 800b914:	9404      	str	r4, [sp, #16]
 800b916:	9605      	str	r6, [sp, #20]
 800b918:	f8dc 4000 	ldr.w	r4, [ip]
 800b91c:	e053      	b.n	800b9c6 <LCD__DrawBitmap_1bpp+0xe6>
 800b91e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800b920:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b922:	ea47 0300 	orr.w	r3, r7, r0
 800b926:	2b01      	cmp	r3, #1
 800b928:	d14f      	bne.n	800b9ca <LCD__DrawBitmap_1bpp+0xea>
 800b92a:	4b5a      	ldr	r3, [pc, #360]	; (800ba94 <LCD__DrawBitmap_1bpp+0x1b4>)
 800b92c:	6818      	ldr	r0, [r3, #0]
 800b92e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800b932:	1a51      	subs	r1, r2, r1
 800b934:	2900      	cmp	r1, #0
 800b936:	dd08      	ble.n	800b94a <LCD__DrawBitmap_1bpp+0x6a>
 800b938:	ebc1 030b 	rsb	r3, r1, fp
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f340 80a5 	ble.w	800ba8c <LCD__DrawBitmap_1bpp+0x1ac>
 800b942:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b944:	fb07 4401 	mla	r4, r7, r1, r4
 800b948:	e001      	b.n	800b94e <LCD__DrawBitmap_1bpp+0x6e>
 800b94a:	465b      	mov	r3, fp
 800b94c:	4632      	mov	r2, r6
 800b94e:	445e      	add	r6, fp
 800b950:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 800b954:	3e01      	subs	r6, #1
 800b956:	1a76      	subs	r6, r6, r1
 800b958:	2e00      	cmp	r6, #0
 800b95a:	dd03      	ble.n	800b964 <LCD__DrawBitmap_1bpp+0x84>
 800b95c:	1b9b      	subs	r3, r3, r6
 800b95e:	2b00      	cmp	r3, #0
 800b960:	f340 8094 	ble.w	800ba8c <LCD__DrawBitmap_1bpp+0x1ac>
 800b964:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b966:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800b96a:	4429      	add	r1, r5
 800b96c:	3901      	subs	r1, #1
 800b96e:	1b89      	subs	r1, r1, r6
 800b970:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b972:	2900      	cmp	r1, #0
 800b974:	bfc8      	it	gt
 800b976:	ebc1 0505 	rsbgt	r5, r1, r5
 800b97a:	ebc8 0106 	rsb	r1, r8, r6
 800b97e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800b982:	42b1      	cmp	r1, r6
 800b984:	da0c      	bge.n	800b9a0 <LCD__DrawBitmap_1bpp+0xc0>
 800b986:	ebc1 0c06 	rsb	ip, r1, r6
 800b98a:	eb08 070c 	add.w	r7, r8, ip
 800b98e:	1b8e      	subs	r6, r1, r6
 800b990:	f02c 0c07 	bic.w	ip, ip, #7
 800b994:	4435      	add	r5, r6
 800b996:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 800b99a:	4461      	add	r1, ip
 800b99c:	f007 0807 	and.w	r8, r7, #7
 800b9a0:	2d00      	cmp	r5, #0
 800b9a2:	dd73      	ble.n	800ba8c <LCD__DrawBitmap_1bpp+0x1ac>
 800b9a4:	7c46      	ldrb	r6, [r0, #17]
 800b9a6:	483c      	ldr	r0, [pc, #240]	; (800ba98 <LCD__DrawBitmap_1bpp+0x1b8>)
 800b9a8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b9aa:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800b9ae:	68c6      	ldr	r6, [r0, #12]
 800b9b0:	9701      	str	r7, [sp, #4]
 800b9b2:	9403      	str	r4, [sp, #12]
 800b9b4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b9b6:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800b9b8:	9300      	str	r3, [sp, #0]
 800b9ba:	9702      	str	r7, [sp, #8]
 800b9bc:	f8cd 8010 	str.w	r8, [sp, #16]
 800b9c0:	9405      	str	r4, [sp, #20]
 800b9c2:	6874      	ldr	r4, [r6, #4]
 800b9c4:	462b      	mov	r3, r5
 800b9c6:	47a0      	blx	r4
 800b9c8:	e060      	b.n	800ba8c <LCD__DrawBitmap_1bpp+0x1ac>
 800b9ca:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b9cc:	f1c7 0708 	rsb	r7, r7, #8
 800b9d0:	970c      	str	r7, [sp, #48]	; 0x30
 800b9d2:	46e0      	mov	r8, ip
 800b9d4:	4667      	mov	r7, ip
 800b9d6:	455f      	cmp	r7, fp
 800b9d8:	da58      	bge.n	800ba8c <LCD__DrawBitmap_1bpp+0x1ac>
 800b9da:	4b2e      	ldr	r3, [pc, #184]	; (800ba94 <LCD__DrawBitmap_1bpp+0x1b4>)
 800b9dc:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4430      	add	r0, r6
 800b9e2:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800b9e6:	900a      	str	r0, [sp, #40]	; 0x28
 800b9e8:	1e41      	subs	r1, r0, #1
 800b9ea:	4291      	cmp	r1, r2
 800b9ec:	910b      	str	r1, [sp, #44]	; 0x2c
 800b9ee:	db48      	blt.n	800ba82 <LCD__DrawBitmap_1bpp+0x1a2>
 800b9f0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b9f4:	429e      	cmp	r6, r3
 800b9f6:	dc44      	bgt.n	800ba82 <LCD__DrawBitmap_1bpp+0x1a2>
 800b9f8:	f04f 0900 	mov.w	r9, #0
 800b9fc:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800ba00:	9408      	str	r4, [sp, #32]
 800ba02:	46cc      	mov	ip, r9
 800ba04:	45a9      	cmp	r9, r5
 800ba06:	da3c      	bge.n	800ba82 <LCD__DrawBitmap_1bpp+0x1a2>
 800ba08:	f1bc 0f00 	cmp.w	ip, #0
 800ba0c:	d106      	bne.n	800ba1c <LCD__DrawBitmap_1bpp+0x13c>
 800ba0e:	9a08      	ldr	r2, [sp, #32]
 800ba10:	f892 8000 	ldrb.w	r8, [r2]
 800ba14:	3201      	adds	r2, #1
 800ba16:	9208      	str	r2, [sp, #32]
 800ba18:	f04f 0c08 	mov.w	ip, #8
 800ba1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ba1e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ba20:	4a1c      	ldr	r2, [pc, #112]	; (800ba94 <LCD__DrawBitmap_1bpp+0x1b4>)
 800ba22:	fa48 f300 	asr.w	r3, r8, r0
 800ba26:	ebc1 0c0c 	rsb	ip, r1, ip
 800ba2a:	fa08 f801 	lsl.w	r8, r8, r1
 800ba2e:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800ba32:	fa5f f888 	uxtb.w	r8, r8
 800ba36:	d103      	bne.n	800ba40 <LCD__DrawBitmap_1bpp+0x160>
 800ba38:	6810      	ldr	r0, [r2, #0]
 800ba3a:	7c00      	ldrb	r0, [r0, #16]
 800ba3c:	0780      	lsls	r0, r0, #30
 800ba3e:	d41b      	bmi.n	800ba78 <LCD__DrawBitmap_1bpp+0x198>
 800ba40:	6812      	ldr	r2, [r2, #0]
 800ba42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ba44:	6810      	ldr	r0, [r2, #0]
 800ba46:	900d      	str	r0, [sp, #52]	; 0x34
 800ba48:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ba4a:	b110      	cbz	r0, 800ba52 <LCD__DrawBitmap_1bpp+0x172>
 800ba4c:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800ba50:	e000      	b.n	800ba54 <LCD__DrawBitmap_1bpp+0x174>
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ba56:	6013      	str	r3, [r2, #0]
 800ba58:	1e4a      	subs	r2, r1, #1
 800ba5a:	4452      	add	r2, sl
 800ba5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba5e:	f8cd c01c 	str.w	ip, [sp, #28]
 800ba62:	4650      	mov	r0, sl
 800ba64:	4631      	mov	r1, r6
 800ba66:	f7ff ff0f 	bl	800b888 <LCD_FillRect>
 800ba6a:	4b0a      	ldr	r3, [pc, #40]	; (800ba94 <LCD__DrawBitmap_1bpp+0x1b4>)
 800ba6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800ba74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba76:	601a      	str	r2, [r3, #0]
 800ba78:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ba7a:	f109 0901 	add.w	r9, r9, #1
 800ba7e:	449a      	add	sl, r3
 800ba80:	e7c0      	b.n	800ba04 <LCD__DrawBitmap_1bpp+0x124>
 800ba82:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ba84:	3701      	adds	r7, #1
 800ba86:	4434      	add	r4, r6
 800ba88:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ba8a:	e7a4      	b.n	800b9d6 <LCD__DrawBitmap_1bpp+0xf6>
 800ba8c:	b00f      	add	sp, #60	; 0x3c
 800ba8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba92:	bf00      	nop
 800ba94:	200002c4 	.word	0x200002c4
 800ba98:	20028844 	.word	0x20028844
 800ba9c:	20028850 	.word	0x20028850

0800baa0 <LCD_DrawBitmap>:
 800baa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa4:	f8df c208 	ldr.w	ip, [pc, #520]	; 800bcb0 <LCD_DrawBitmap+0x210>
 800baa8:	b091      	sub	sp, #68	; 0x44
 800baaa:	f8dc c000 	ldr.w	ip, [ip]
 800baae:	9207      	str	r2, [sp, #28]
 800bab0:	4605      	mov	r5, r0
 800bab2:	4688      	mov	r8, r1
 800bab4:	469b      	mov	fp, r3
 800bab6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800bab8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800baba:	f1bc 0f00 	cmp.w	ip, #0
 800babe:	d00c      	beq.n	800bada <LCD_DrawBitmap+0x3a>
 800bac0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800bac2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800bac4:	9500      	str	r5, [sp, #0]
 800bac6:	9701      	str	r7, [sp, #4]
 800bac8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800baca:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800bacc:	9602      	str	r6, [sp, #8]
 800bace:	9503      	str	r5, [sp, #12]
 800bad0:	9404      	str	r4, [sp, #16]
 800bad2:	9705      	str	r7, [sp, #20]
 800bad4:	f8dc 4000 	ldr.w	r4, [ip]
 800bad8:	e081      	b.n	800bbde <LCD_DrawBitmap+0x13e>
 800bada:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800badc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bade:	ea47 0300 	orr.w	r3, r7, r0
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d17d      	bne.n	800bbe2 <LCD_DrawBitmap+0x142>
 800bae6:	4b70      	ldr	r3, [pc, #448]	; (800bca8 <LCD_DrawBitmap+0x208>)
 800bae8:	6818      	ldr	r0, [r3, #0]
 800baea:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800baee:	1a53      	subs	r3, r2, r1
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	dd08      	ble.n	800bb06 <LCD_DrawBitmap+0x66>
 800baf4:	ebc3 010b 	rsb	r1, r3, fp
 800baf8:	2900      	cmp	r1, #0
 800bafa:	f340 80d2 	ble.w	800bca2 <LCD_DrawBitmap+0x202>
 800bafe:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800bb00:	fb07 4403 	mla	r4, r7, r3, r4
 800bb04:	e001      	b.n	800bb0a <LCD_DrawBitmap+0x6a>
 800bb06:	4659      	mov	r1, fp
 800bb08:	4642      	mov	r2, r8
 800bb0a:	44d8      	add	r8, fp
 800bb0c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800bb10:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bb14:	ebc3 0808 	rsb	r8, r3, r8
 800bb18:	f1b8 0f00 	cmp.w	r8, #0
 800bb1c:	dd04      	ble.n	800bb28 <LCD_DrawBitmap+0x88>
 800bb1e:	ebc8 0101 	rsb	r1, r8, r1
 800bb22:	2900      	cmp	r1, #0
 800bb24:	f340 80bd 	ble.w	800bca2 <LCD_DrawBitmap+0x202>
 800bb28:	9b07      	ldr	r3, [sp, #28]
 800bb2a:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 800bb2e:	442b      	add	r3, r5
 800bb30:	3b01      	subs	r3, #1
 800bb32:	ebcc 0303 	rsb	r3, ip, r3
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	dd02      	ble.n	800bb40 <LCD_DrawBitmap+0xa0>
 800bb3a:	9f07      	ldr	r7, [sp, #28]
 800bb3c:	1aff      	subs	r7, r7, r3
 800bb3e:	9707      	str	r7, [sp, #28]
 800bb40:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800bb44:	4565      	cmp	r5, ip
 800bb46:	da33      	bge.n	800bbb0 <LCD_DrawBitmap+0x110>
 800bb48:	9f07      	ldr	r7, [sp, #28]
 800bb4a:	ebc5 030c 	rsb	r3, r5, ip
 800bb4e:	1aff      	subs	r7, r7, r3
 800bb50:	2e08      	cmp	r6, #8
 800bb52:	9707      	str	r7, [sp, #28]
 800bb54:	d027      	beq.n	800bba6 <LCD_DrawBitmap+0x106>
 800bb56:	dc0d      	bgt.n	800bb74 <LCD_DrawBitmap+0xd4>
 800bb58:	2e02      	cmp	r6, #2
 800bb5a:	d014      	beq.n	800bb86 <LCD_DrawBitmap+0xe6>
 800bb5c:	2e04      	cmp	r6, #4
 800bb5e:	d01a      	beq.n	800bb96 <LCD_DrawBitmap+0xf6>
 800bb60:	2e01      	cmp	r6, #1
 800bb62:	d126      	bne.n	800bbb2 <LCD_DrawBitmap+0x112>
 800bb64:	f023 0c07 	bic.w	ip, r3, #7
 800bb68:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800bb6c:	4465      	add	r5, ip
 800bb6e:	f003 0307 	and.w	r3, r3, #7
 800bb72:	e01e      	b.n	800bbb2 <LCD_DrawBitmap+0x112>
 800bb74:	2e18      	cmp	r6, #24
 800bb76:	d018      	beq.n	800bbaa <LCD_DrawBitmap+0x10a>
 800bb78:	2e20      	cmp	r6, #32
 800bb7a:	d016      	beq.n	800bbaa <LCD_DrawBitmap+0x10a>
 800bb7c:	2e10      	cmp	r6, #16
 800bb7e:	d118      	bne.n	800bbb2 <LCD_DrawBitmap+0x112>
 800bb80:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800bb84:	e013      	b.n	800bbae <LCD_DrawBitmap+0x10e>
 800bb86:	f023 0c03 	bic.w	ip, r3, #3
 800bb8a:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800bb8e:	4465      	add	r5, ip
 800bb90:	f003 0303 	and.w	r3, r3, #3
 800bb94:	e00d      	b.n	800bbb2 <LCD_DrawBitmap+0x112>
 800bb96:	f023 0c01 	bic.w	ip, r3, #1
 800bb9a:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800bb9e:	4465      	add	r5, ip
 800bba0:	f003 0301 	and.w	r3, r3, #1
 800bba4:	e005      	b.n	800bbb2 <LCD_DrawBitmap+0x112>
 800bba6:	441c      	add	r4, r3
 800bba8:	e001      	b.n	800bbae <LCD_DrawBitmap+0x10e>
 800bbaa:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800bbae:	4665      	mov	r5, ip
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	9f07      	ldr	r7, [sp, #28]
 800bbb4:	2f00      	cmp	r7, #0
 800bbb6:	dd74      	ble.n	800bca2 <LCD_DrawBitmap+0x202>
 800bbb8:	f890 e011 	ldrb.w	lr, [r0, #17]
 800bbbc:	483b      	ldr	r0, [pc, #236]	; (800bcac <LCD_DrawBitmap+0x20c>)
 800bbbe:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800bbc0:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 800bbc4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800bbc8:	9403      	str	r4, [sp, #12]
 800bbca:	e88d 0042 	stmia.w	sp, {r1, r6}
 800bbce:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800bbd0:	9304      	str	r3, [sp, #16]
 800bbd2:	9702      	str	r7, [sp, #8]
 800bbd4:	9405      	str	r4, [sp, #20]
 800bbd6:	f8de 4004 	ldr.w	r4, [lr, #4]
 800bbda:	9b07      	ldr	r3, [sp, #28]
 800bbdc:	4629      	mov	r1, r5
 800bbde:	47a0      	blx	r4
 800bbe0:	e05f      	b.n	800bca2 <LCD_DrawBitmap+0x202>
 800bbe2:	f1c6 0708 	rsb	r7, r6, #8
 800bbe6:	970e      	str	r7, [sp, #56]	; 0x38
 800bbe8:	4667      	mov	r7, ip
 800bbea:	45dc      	cmp	ip, fp
 800bbec:	da59      	bge.n	800bca2 <LCD_DrawBitmap+0x202>
 800bbee:	4b2e      	ldr	r3, [pc, #184]	; (800bca8 <LCD_DrawBitmap+0x208>)
 800bbf0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4440      	add	r0, r8
 800bbf6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800bbfa:	900c      	str	r0, [sp, #48]	; 0x30
 800bbfc:	1e41      	subs	r1, r0, #1
 800bbfe:	4291      	cmp	r1, r2
 800bc00:	910d      	str	r1, [sp, #52]	; 0x34
 800bc02:	db47      	blt.n	800bc94 <LCD_DrawBitmap+0x1f4>
 800bc04:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800bc08:	4598      	cmp	r8, r3
 800bc0a:	dc43      	bgt.n	800bc94 <LCD_DrawBitmap+0x1f4>
 800bc0c:	f04f 0900 	mov.w	r9, #0
 800bc10:	940b      	str	r4, [sp, #44]	; 0x2c
 800bc12:	46aa      	mov	sl, r5
 800bc14:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800bc18:	9807      	ldr	r0, [sp, #28]
 800bc1a:	4581      	cmp	r9, r0
 800bc1c:	da3a      	bge.n	800bc94 <LCD_DrawBitmap+0x1f4>
 800bc1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc20:	b92a      	cbnz	r2, 800bc2e <LCD_DrawBitmap+0x18e>
 800bc22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc24:	2008      	movs	r0, #8
 800bc26:	781f      	ldrb	r7, [r3, #0]
 800bc28:	900a      	str	r0, [sp, #40]	; 0x28
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc2e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bc30:	fa07 f206 	lsl.w	r2, r7, r6
 800bc34:	fa47 f301 	asr.w	r3, r7, r1
 800bc38:	b2d7      	uxtb	r7, r2
 800bc3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc3c:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800bc40:	ebc6 0202 	rsb	r2, r6, r2
 800bc44:	920a      	str	r2, [sp, #40]	; 0x28
 800bc46:	4a18      	ldr	r2, [pc, #96]	; (800bca8 <LCD_DrawBitmap+0x208>)
 800bc48:	d103      	bne.n	800bc52 <LCD_DrawBitmap+0x1b2>
 800bc4a:	6810      	ldr	r0, [r2, #0]
 800bc4c:	7c00      	ldrb	r0, [r0, #16]
 800bc4e:	0780      	lsls	r0, r0, #30
 800bc50:	d41b      	bmi.n	800bc8a <LCD_DrawBitmap+0x1ea>
 800bc52:	6812      	ldr	r2, [r2, #0]
 800bc54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bc56:	6810      	ldr	r0, [r2, #0]
 800bc58:	900f      	str	r0, [sp, #60]	; 0x3c
 800bc5a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800bc5c:	b110      	cbz	r0, 800bc64 <LCD_DrawBitmap+0x1c4>
 800bc5e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800bc62:	e000      	b.n	800bc66 <LCD_DrawBitmap+0x1c6>
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bc68:	6013      	str	r3, [r2, #0]
 800bc6a:	1e4a      	subs	r2, r1, #1
 800bc6c:	4452      	add	r2, sl
 800bc6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc70:	f8cd c020 	str.w	ip, [sp, #32]
 800bc74:	4650      	mov	r0, sl
 800bc76:	4641      	mov	r1, r8
 800bc78:	f7ff fe06 	bl	800b888 <LCD_FillRect>
 800bc7c:	4b0a      	ldr	r3, [pc, #40]	; (800bca8 <LCD_DrawBitmap+0x208>)
 800bc7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f8dd c020 	ldr.w	ip, [sp, #32]
 800bc86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc88:	601a      	str	r2, [r3, #0]
 800bc8a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bc8c:	f109 0901 	add.w	r9, r9, #1
 800bc90:	449a      	add	sl, r3
 800bc92:	e7c1      	b.n	800bc18 <LCD_DrawBitmap+0x178>
 800bc94:	991d      	ldr	r1, [sp, #116]	; 0x74
 800bc96:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800bc9a:	f10c 0c01 	add.w	ip, ip, #1
 800bc9e:	440c      	add	r4, r1
 800bca0:	e7a3      	b.n	800bbea <LCD_DrawBitmap+0x14a>
 800bca2:	b011      	add	sp, #68	; 0x44
 800bca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca8:	200002c4 	.word	0x200002c4
 800bcac:	20028844 	.word	0x20028844
 800bcb0:	20028850 	.word	0x20028850

0800bcb4 <LCD_SetClipRectMax>:
 800bcb4:	b508      	push	{r3, lr}
 800bcb6:	4b05      	ldr	r3, [pc, #20]	; (800bccc <LCD_SetClipRectMax+0x18>)
 800bcb8:	6819      	ldr	r1, [r3, #0]
 800bcba:	4b05      	ldr	r3, [pc, #20]	; (800bcd0 <LCD_SetClipRectMax+0x1c>)
 800bcbc:	7c4a      	ldrb	r2, [r1, #17]
 800bcbe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bcc2:	68c3      	ldr	r3, [r0, #12]
 800bcc4:	3108      	adds	r1, #8
 800bcc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcc8:	4798      	blx	r3
 800bcca:	bd08      	pop	{r3, pc}
 800bccc:	200002c4 	.word	0x200002c4
 800bcd0:	20028844 	.word	0x20028844

0800bcd4 <emWin_LCD_Init>:
 800bcd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcd6:	f7ff ffed 	bl	800bcb4 <LCD_SetClipRectMax>
 800bcda:	f005 ff89 	bl	8011bf0 <LCD_InitColors>
 800bcde:	4604      	mov	r4, r0
 800bce0:	2800      	cmp	r0, #0
 800bce2:	d13d      	bne.n	800bd60 <emWin_LCD_Init+0x8c>
 800bce4:	4605      	mov	r5, r0
 800bce6:	4628      	mov	r0, r5
 800bce8:	f001 fe20 	bl	800d92c <GUI_DEVICE__GetpDriver>
 800bcec:	9001      	str	r0, [sp, #4]
 800bcee:	b148      	cbz	r0, 800bd04 <emWin_LCD_Init+0x30>
 800bcf0:	68c3      	ldr	r3, [r0, #12]
 800bcf2:	210c      	movs	r1, #12
 800bcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf6:	a801      	add	r0, sp, #4
 800bcf8:	4798      	blx	r3
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	b370      	cbz	r0, 800bd5c <emWin_LCD_Init+0x88>
 800bcfe:	9801      	ldr	r0, [sp, #4]
 800bd00:	4798      	blx	r3
 800bd02:	4304      	orrs	r4, r0
 800bd04:	3501      	adds	r5, #1
 800bd06:	2d02      	cmp	r5, #2
 800bd08:	d1ed      	bne.n	800bce6 <emWin_LCD_Init+0x12>
 800bd0a:	bb4c      	cbnz	r4, 800bd60 <emWin_LCD_Init+0x8c>
 800bd0c:	f005 ffbc 	bl	8011c88 <LCD_InitLUT>
 800bd10:	2401      	movs	r4, #1
 800bd12:	4620      	mov	r0, r4
 800bd14:	f001 fe0a 	bl	800d92c <GUI_DEVICE__GetpDriver>
 800bd18:	9001      	str	r0, [sp, #4]
 800bd1a:	b1d0      	cbz	r0, 800bd52 <emWin_LCD_Init+0x7e>
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	f000 ff7f 	bl	800cc20 <GUI_SelectLayer>
 800bd22:	2004      	movs	r0, #4
 800bd24:	f7ff fd2e 	bl	800b784 <LCD_SetDrawMode>
 800bd28:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	4601      	mov	r1, r0
 800bd30:	4613      	mov	r3, r2
 800bd32:	f7ff fda9 	bl	800b888 <LCD_FillRect>
 800bd36:	2000      	movs	r0, #0
 800bd38:	f7ff fd24 	bl	800b784 <LCD_SetDrawMode>
 800bd3c:	a802      	add	r0, sp, #8
 800bd3e:	210e      	movs	r1, #14
 800bd40:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800bd44:	68db      	ldr	r3, [r3, #12]
 800bd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd48:	4798      	blx	r3
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	b108      	cbz	r0, 800bd52 <emWin_LCD_Init+0x7e>
 800bd4e:	9801      	ldr	r0, [sp, #4]
 800bd50:	4798      	blx	r3
 800bd52:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800bd56:	d2dc      	bcs.n	800bd12 <emWin_LCD_Init+0x3e>
 800bd58:	2000      	movs	r0, #0
 800bd5a:	e002      	b.n	800bd62 <emWin_LCD_Init+0x8e>
 800bd5c:	2001      	movs	r0, #1
 800bd5e:	e000      	b.n	800bd62 <emWin_LCD_Init+0x8e>
 800bd60:	4620      	mov	r0, r4
 800bd62:	b003      	add	sp, #12
 800bd64:	bd30      	pop	{r4, r5, pc}
	...

0800bd68 <LCD_Color2Index>:
 800bd68:	b508      	push	{r3, lr}
 800bd6a:	4b05      	ldr	r3, [pc, #20]	; (800bd80 <LCD_Color2Index+0x18>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	7c5a      	ldrb	r2, [r3, #17]
 800bd70:	4b04      	ldr	r3, [pc, #16]	; (800bd84 <LCD_Color2Index+0x1c>)
 800bd72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd76:	691b      	ldr	r3, [r3, #16]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4798      	blx	r3
 800bd7c:	bd08      	pop	{r3, pc}
 800bd7e:	bf00      	nop
 800bd80:	200002c4 	.word	0x200002c4
 800bd84:	20028844 	.word	0x20028844

0800bd88 <LCD_Index2Color>:
 800bd88:	b508      	push	{r3, lr}
 800bd8a:	4b05      	ldr	r3, [pc, #20]	; (800bda0 <LCD_Index2Color+0x18>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	7c5a      	ldrb	r2, [r3, #17]
 800bd90:	4b04      	ldr	r3, [pc, #16]	; (800bda4 <LCD_Index2Color+0x1c>)
 800bd92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd96:	691b      	ldr	r3, [r3, #16]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	4798      	blx	r3
 800bd9c:	bd08      	pop	{r3, pc}
 800bd9e:	bf00      	nop
 800bda0:	200002c4 	.word	0x200002c4
 800bda4:	20028844 	.word	0x20028844

0800bda8 <LCD_SetColorIndex>:
 800bda8:	4b04      	ldr	r3, [pc, #16]	; (800bdbc <LCD_SetColorIndex+0x14>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	7c1a      	ldrb	r2, [r3, #16]
 800bdae:	0752      	lsls	r2, r2, #29
 800bdb0:	bf4c      	ite	mi
 800bdb2:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800bdb4:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800bdb6:	6018      	str	r0, [r3, #0]
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop
 800bdbc:	200002c4 	.word	0x200002c4

0800bdc0 <_SetColor>:
 800bdc0:	b508      	push	{r3, lr}
 800bdc2:	4b06      	ldr	r3, [pc, #24]	; (800bddc <_SetColor+0x1c>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bdc8:	4281      	cmp	r1, r0
 800bdca:	d006      	beq.n	800bdda <_SetColor+0x1a>
 800bdcc:	6318      	str	r0, [r3, #48]	; 0x30
 800bdce:	f7ff ffcb 	bl	800bd68 <LCD_Color2Index>
 800bdd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bdd6:	f7ff bfe7 	b.w	800bda8 <LCD_SetColorIndex>
 800bdda:	bd08      	pop	{r3, pc}
 800bddc:	200002c4 	.word	0x200002c4

0800bde0 <LCD_SetBkColorIndex>:
 800bde0:	4b04      	ldr	r3, [pc, #16]	; (800bdf4 <LCD_SetBkColorIndex+0x14>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	7c1a      	ldrb	r2, [r3, #16]
 800bde6:	0752      	lsls	r2, r2, #29
 800bde8:	bf4c      	ite	mi
 800bdea:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800bdec:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800bdee:	6018      	str	r0, [r3, #0]
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	200002c4 	.word	0x200002c4

0800bdf8 <_SetBkColor>:
 800bdf8:	b508      	push	{r3, lr}
 800bdfa:	4b06      	ldr	r3, [pc, #24]	; (800be14 <_SetBkColor+0x1c>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800be00:	4281      	cmp	r1, r0
 800be02:	d006      	beq.n	800be12 <_SetBkColor+0x1a>
 800be04:	6358      	str	r0, [r3, #52]	; 0x34
 800be06:	f7ff ffaf 	bl	800bd68 <LCD_Color2Index>
 800be0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800be0e:	f7ff bfe7 	b.w	800bde0 <LCD_SetBkColorIndex>
 800be12:	bd08      	pop	{r3, pc}
 800be14:	200002c4 	.word	0x200002c4

0800be18 <LCD_SetBkColor>:
 800be18:	b508      	push	{r3, lr}
 800be1a:	4b02      	ldr	r3, [pc, #8]	; (800be24 <LCD_SetBkColor+0xc>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	4798      	blx	r3
 800be22:	bd08      	pop	{r3, pc}
 800be24:	200002a0 	.word	0x200002a0

0800be28 <LCD_SetColor>:
 800be28:	b508      	push	{r3, lr}
 800be2a:	4b02      	ldr	r3, [pc, #8]	; (800be34 <LCD_SetColor+0xc>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4798      	blx	r3
 800be32:	bd08      	pop	{r3, pc}
 800be34:	200002a0 	.word	0x200002a0

0800be38 <GUI__strlen>:
 800be38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be3c:	b118      	cbz	r0, 800be46 <GUI__strlen+0xe>
 800be3e:	3301      	adds	r3, #1
 800be40:	5cc2      	ldrb	r2, [r0, r3]
 800be42:	2a00      	cmp	r2, #0
 800be44:	d1fb      	bne.n	800be3e <GUI__strlen+0x6>
 800be46:	4618      	mov	r0, r3
 800be48:	4770      	bx	lr

0800be4a <GUI__memset>:
 800be4a:	b570      	push	{r4, r5, r6, lr}
 800be4c:	b12a      	cbz	r2, 800be5a <GUI__memset+0x10>
 800be4e:	0783      	lsls	r3, r0, #30
 800be50:	d003      	beq.n	800be5a <GUI__memset+0x10>
 800be52:	f800 1b01 	strb.w	r1, [r0], #1
 800be56:	3a01      	subs	r2, #1
 800be58:	e7f8      	b.n	800be4c <GUI__memset+0x2>
 800be5a:	0893      	lsrs	r3, r2, #2
 800be5c:	d101      	bne.n	800be62 <GUI__memset+0x18>
 800be5e:	4402      	add	r2, r0
 800be60:	e017      	b.n	800be92 <GUI__memset+0x48>
 800be62:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800be66:	f002 0203 	and.w	r2, r2, #3
 800be6a:	434c      	muls	r4, r1
 800be6c:	2b03      	cmp	r3, #3
 800be6e:	4605      	mov	r5, r0
 800be70:	dd06      	ble.n	800be80 <GUI__memset+0x36>
 800be72:	6004      	str	r4, [r0, #0]
 800be74:	6044      	str	r4, [r0, #4]
 800be76:	6084      	str	r4, [r0, #8]
 800be78:	60c4      	str	r4, [r0, #12]
 800be7a:	3b04      	subs	r3, #4
 800be7c:	3010      	adds	r0, #16
 800be7e:	e7f5      	b.n	800be6c <GUI__memset+0x22>
 800be80:	461e      	mov	r6, r3
 800be82:	b11b      	cbz	r3, 800be8c <GUI__memset+0x42>
 800be84:	f845 4b04 	str.w	r4, [r5], #4
 800be88:	3b01      	subs	r3, #1
 800be8a:	e7fa      	b.n	800be82 <GUI__memset+0x38>
 800be8c:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 800be90:	e7e5      	b.n	800be5e <GUI__memset+0x14>
 800be92:	4290      	cmp	r0, r2
 800be94:	d002      	beq.n	800be9c <GUI__memset+0x52>
 800be96:	f800 1b01 	strb.w	r1, [r0], #1
 800be9a:	e7fa      	b.n	800be92 <GUI__memset+0x48>
 800be9c:	bd70      	pop	{r4, r5, r6, pc}

0800be9e <GUI__SetText>:
 800be9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bea0:	6807      	ldr	r7, [r0, #0]
 800bea2:	4605      	mov	r5, r0
 800bea4:	4638      	mov	r0, r7
 800bea6:	460e      	mov	r6, r1
 800bea8:	f005 ffb4 	bl	8011e14 <GUI__strcmp_hp>
 800beac:	b908      	cbnz	r0, 800beb2 <GUI__SetText+0x14>
 800beae:	2000      	movs	r0, #0
 800beb0:	e02e      	b.n	800bf10 <GUI__SetText+0x72>
 800beb2:	4630      	mov	r0, r6
 800beb4:	f7ff ffc0 	bl	800be38 <GUI__strlen>
 800beb8:	1c44      	adds	r4, r0, #1
 800beba:	4638      	mov	r0, r7
 800bebc:	f002 fa8a 	bl	800e3d4 <GUI_ALLOC_GetSize>
 800bec0:	4284      	cmp	r4, r0
 800bec2:	d10f      	bne.n	800bee4 <GUI__SetText+0x46>
 800bec4:	2c00      	cmp	r4, #0
 800bec6:	d0f2      	beq.n	800beae <GUI__SetText+0x10>
 800bec8:	4638      	mov	r0, r7
 800beca:	f002 fa55 	bl	800e378 <GUI_ALLOC_LockH>
 800bece:	ad02      	add	r5, sp, #8
 800bed0:	4631      	mov	r1, r6
 800bed2:	f845 0d04 	str.w	r0, [r5, #-4]!
 800bed6:	4622      	mov	r2, r4
 800bed8:	f7f4 f9c8 	bl	800026c <memcpy>
 800bedc:	4628      	mov	r0, r5
 800bede:	f002 fa59 	bl	800e394 <GUI_ALLOC_UnlockH>
 800bee2:	e014      	b.n	800bf0e <GUI__SetText+0x70>
 800bee4:	4620      	mov	r0, r4
 800bee6:	f002 fca7 	bl	800e838 <GUI_ALLOC_AllocNoInit>
 800beea:	4607      	mov	r7, r0
 800beec:	2800      	cmp	r0, #0
 800beee:	d0de      	beq.n	800beae <GUI__SetText+0x10>
 800bef0:	f002 fa42 	bl	800e378 <GUI_ALLOC_LockH>
 800bef4:	ac02      	add	r4, sp, #8
 800bef6:	4631      	mov	r1, r6
 800bef8:	f844 0d04 	str.w	r0, [r4, #-4]!
 800befc:	f007 fa5c 	bl	80133b8 <strcpy>
 800bf00:	4620      	mov	r0, r4
 800bf02:	f002 fa47 	bl	800e394 <GUI_ALLOC_UnlockH>
 800bf06:	4628      	mov	r0, r5
 800bf08:	f002 fca3 	bl	800e852 <GUI_ALLOC_FreePtr>
 800bf0c:	602f      	str	r7, [r5, #0]
 800bf0e:	2001      	movs	r0, #1
 800bf10:	b003      	add	sp, #12
 800bf12:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf14 <GUI__ReduceRect>:
 800bf14:	880b      	ldrh	r3, [r1, #0]
 800bf16:	b292      	uxth	r2, r2
 800bf18:	4413      	add	r3, r2
 800bf1a:	8003      	strh	r3, [r0, #0]
 800bf1c:	888b      	ldrh	r3, [r1, #4]
 800bf1e:	1a9b      	subs	r3, r3, r2
 800bf20:	8083      	strh	r3, [r0, #4]
 800bf22:	884b      	ldrh	r3, [r1, #2]
 800bf24:	4413      	add	r3, r2
 800bf26:	8043      	strh	r3, [r0, #2]
 800bf28:	88cb      	ldrh	r3, [r1, #6]
 800bf2a:	1a9a      	subs	r2, r3, r2
 800bf2c:	80c2      	strh	r2, [r0, #6]
 800bf2e:	4770      	bx	lr

0800bf30 <GUI__ManageCacheEx>:
 800bf30:	2801      	cmp	r0, #1
 800bf32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf34:	4604      	mov	r4, r0
 800bf36:	460d      	mov	r5, r1
 800bf38:	dc5e      	bgt.n	800bff8 <GUI__ManageCacheEx+0xc8>
 800bf3a:	2901      	cmp	r1, #1
 800bf3c:	d004      	beq.n	800bf48 <GUI__ManageCacheEx+0x18>
 800bf3e:	2902      	cmp	r1, #2
 800bf40:	d020      	beq.n	800bf84 <GUI__ManageCacheEx+0x54>
 800bf42:	2900      	cmp	r1, #0
 800bf44:	d158      	bne.n	800bff8 <GUI__ManageCacheEx+0xc8>
 800bf46:	e033      	b.n	800bfb0 <GUI__ManageCacheEx+0x80>
 800bf48:	4e2d      	ldr	r6, [pc, #180]	; (800c000 <GUI__ManageCacheEx+0xd0>)
 800bf4a:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 800bf4e:	b9af      	cbnz	r7, 800bf7c <GUI__ManageCacheEx+0x4c>
 800bf50:	f001 fcec 	bl	800d92c <GUI_DEVICE__GetpDriver>
 800bf54:	9001      	str	r0, [sp, #4]
 800bf56:	2800      	cmp	r0, #0
 800bf58:	d04e      	beq.n	800bff8 <GUI__ManageCacheEx+0xc8>
 800bf5a:	68c3      	ldr	r3, [r0, #12]
 800bf5c:	210d      	movs	r1, #13
 800bf5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf60:	a801      	add	r0, sp, #4
 800bf62:	4798      	blx	r3
 800bf64:	4603      	mov	r3, r0
 800bf66:	2800      	cmp	r0, #0
 800bf68:	d046      	beq.n	800bff8 <GUI__ManageCacheEx+0xc8>
 800bf6a:	9801      	ldr	r0, [sp, #4]
 800bf6c:	4629      	mov	r1, r5
 800bf6e:	4798      	blx	r3
 800bf70:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800bf74:	3301      	adds	r3, #1
 800bf76:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 800bf7a:	e017      	b.n	800bfac <GUI__ManageCacheEx+0x7c>
 800bf7c:	3701      	adds	r7, #1
 800bf7e:	f846 7020 	str.w	r7, [r6, r0, lsl #2]
 800bf82:	e039      	b.n	800bff8 <GUI__ManageCacheEx+0xc8>
 800bf84:	f001 fcd2 	bl	800d92c <GUI_DEVICE__GetpDriver>
 800bf88:	9001      	str	r0, [sp, #4]
 800bf8a:	2800      	cmp	r0, #0
 800bf8c:	d034      	beq.n	800bff8 <GUI__ManageCacheEx+0xc8>
 800bf8e:	68c3      	ldr	r3, [r0, #12]
 800bf90:	210d      	movs	r1, #13
 800bf92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf94:	a801      	add	r0, sp, #4
 800bf96:	4798      	blx	r3
 800bf98:	4604      	mov	r4, r0
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	d02c      	beq.n	800bff8 <GUI__ManageCacheEx+0xc8>
 800bf9e:	4b19      	ldr	r3, [pc, #100]	; (800c004 <GUI__ManageCacheEx+0xd4>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	b103      	cbz	r3, 800bfa6 <GUI__ManageCacheEx+0x76>
 800bfa4:	4798      	blx	r3
 800bfa6:	9801      	ldr	r0, [sp, #4]
 800bfa8:	2102      	movs	r1, #2
 800bfaa:	47a0      	blx	r4
 800bfac:	2000      	movs	r0, #0
 800bfae:	e024      	b.n	800bffa <GUI__ManageCacheEx+0xca>
 800bfb0:	4d13      	ldr	r5, [pc, #76]	; (800c000 <GUI__ManageCacheEx+0xd0>)
 800bfb2:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d001      	beq.n	800bfbe <GUI__ManageCacheEx+0x8e>
 800bfba:	2001      	movs	r0, #1
 800bfbc:	e014      	b.n	800bfe8 <GUI__ManageCacheEx+0xb8>
 800bfbe:	f001 fcb5 	bl	800d92c <GUI_DEVICE__GetpDriver>
 800bfc2:	9001      	str	r0, [sp, #4]
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	d0f8      	beq.n	800bfba <GUI__ManageCacheEx+0x8a>
 800bfc8:	68c3      	ldr	r3, [r0, #12]
 800bfca:	210d      	movs	r1, #13
 800bfcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfce:	a801      	add	r0, sp, #4
 800bfd0:	4798      	blx	r3
 800bfd2:	4606      	mov	r6, r0
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d0f0      	beq.n	800bfba <GUI__ManageCacheEx+0x8a>
 800bfd8:	4b0a      	ldr	r3, [pc, #40]	; (800c004 <GUI__ManageCacheEx+0xd4>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	b103      	cbz	r3, 800bfe0 <GUI__ManageCacheEx+0xb0>
 800bfde:	4798      	blx	r3
 800bfe0:	9801      	ldr	r0, [sp, #4]
 800bfe2:	2100      	movs	r1, #0
 800bfe4:	47b0      	blx	r6
 800bfe6:	2000      	movs	r0, #0
 800bfe8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	bf18      	it	ne
 800bff0:	3b01      	subne	r3, #1
 800bff2:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800bff6:	e000      	b.n	800bffa <GUI__ManageCacheEx+0xca>
 800bff8:	2001      	movs	r0, #1
 800bffa:	b003      	add	sp, #12
 800bffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bffe:	bf00      	nop
 800c000:	20008458 	.word	0x20008458
 800c004:	20008454 	.word	0x20008454

0800c008 <GUI__ManageCache>:
 800c008:	4b02      	ldr	r3, [pc, #8]	; (800c014 <GUI__ManageCache+0xc>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4601      	mov	r1, r0
 800c00e:	7c58      	ldrb	r0, [r3, #17]
 800c010:	f7ff bf8e 	b.w	800bf30 <GUI__ManageCacheEx>
 800c014:	200002c4 	.word	0x200002c4

0800c018 <GUI__IntersectRects>:
 800c018:	b570      	push	{r4, r5, r6, lr}
 800c01a:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c01e:	f9b1 4000 	ldrsh.w	r4, [r1]
 800c022:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800c026:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 800c02a:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800c02e:	429c      	cmp	r4, r3
 800c030:	bfb8      	it	lt
 800c032:	461c      	movlt	r4, r3
 800c034:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800c038:	429d      	cmp	r5, r3
 800c03a:	bfa8      	it	ge
 800c03c:	462b      	movge	r3, r5
 800c03e:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800c042:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800c046:	42ae      	cmp	r6, r5
 800c048:	bfb8      	it	lt
 800c04a:	4635      	movlt	r5, r6
 800c04c:	b2a4      	uxth	r4, r4
 800c04e:	b2ad      	uxth	r5, r5
 800c050:	4291      	cmp	r1, r2
 800c052:	bfb8      	it	lt
 800c054:	460a      	movlt	r2, r1
 800c056:	8004      	strh	r4, [r0, #0]
 800c058:	8085      	strh	r5, [r0, #4]
 800c05a:	b224      	sxth	r4, r4
 800c05c:	b22d      	sxth	r5, r5
 800c05e:	b29b      	uxth	r3, r3
 800c060:	b292      	uxth	r2, r2
 800c062:	42a5      	cmp	r5, r4
 800c064:	8043      	strh	r3, [r0, #2]
 800c066:	80c2      	strh	r2, [r0, #6]
 800c068:	db06      	blt.n	800c078 <GUI__IntersectRects+0x60>
 800c06a:	b210      	sxth	r0, r2
 800c06c:	b21b      	sxth	r3, r3
 800c06e:	4298      	cmp	r0, r3
 800c070:	bfb4      	ite	lt
 800c072:	2000      	movlt	r0, #0
 800c074:	2001      	movge	r0, #1
 800c076:	bd70      	pop	{r4, r5, r6, pc}
 800c078:	2000      	movs	r0, #0
 800c07a:	bd70      	pop	{r4, r5, r6, pc}

0800c07c <GUI__IntersectRect>:
 800c07c:	880b      	ldrh	r3, [r1, #0]
 800c07e:	b510      	push	{r4, lr}
 800c080:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c084:	b21a      	sxth	r2, r3
 800c086:	4294      	cmp	r4, r2
 800c088:	bfb8      	it	lt
 800c08a:	8003      	strhlt	r3, [r0, #0]
 800c08c:	884b      	ldrh	r3, [r1, #2]
 800c08e:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800c092:	b21a      	sxth	r2, r3
 800c094:	4294      	cmp	r4, r2
 800c096:	bfb8      	it	lt
 800c098:	8043      	strhlt	r3, [r0, #2]
 800c09a:	888b      	ldrh	r3, [r1, #4]
 800c09c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800c0a0:	b21a      	sxth	r2, r3
 800c0a2:	4294      	cmp	r4, r2
 800c0a4:	bfc8      	it	gt
 800c0a6:	8083      	strhgt	r3, [r0, #4]
 800c0a8:	88cb      	ldrh	r3, [r1, #6]
 800c0aa:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800c0ae:	b21a      	sxth	r2, r3
 800c0b0:	4291      	cmp	r1, r2
 800c0b2:	bfc8      	it	gt
 800c0b4:	80c3      	strhgt	r3, [r0, #6]
 800c0b6:	bd10      	pop	{r4, pc}

0800c0b8 <_GetTwinArcPara>:
 800c0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0bc:	fb01 f901 	mul.w	r9, r1, r1
 800c0c0:	1e47      	subs	r7, r0, #1
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	4340      	muls	r0, r0
 800c0c6:	ebc9 0000 	rsb	r0, r9, r0
 800c0ca:	460d      	mov	r5, r1
 800c0cc:	4692      	mov	sl, r2
 800c0ce:	4698      	mov	r8, r3
 800c0d0:	9e08      	ldr	r6, [sp, #32]
 800c0d2:	f005 feb3 	bl	8011e3c <GUI__sqrt32>
 800c0d6:	42bd      	cmp	r5, r7
 800c0d8:	f8ca 0000 	str.w	r0, [sl]
 800c0dc:	da10      	bge.n	800c100 <_GetTwinArcPara+0x48>
 800c0de:	fb07 f007 	mul.w	r0, r7, r7
 800c0e2:	ebc9 0000 	rsb	r0, r9, r0
 800c0e6:	f005 fea9 	bl	8011e3c <GUI__sqrt32>
 800c0ea:	3c02      	subs	r4, #2
 800c0ec:	42a5      	cmp	r5, r4
 800c0ee:	f8c8 0000 	str.w	r0, [r8]
 800c0f2:	da03      	bge.n	800c0fc <_GetTwinArcPara+0x44>
 800c0f4:	3801      	subs	r0, #1
 800c0f6:	6030      	str	r0, [r6, #0]
 800c0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	e002      	b.n	800c106 <_GetTwinArcPara+0x4e>
 800c100:	2300      	movs	r3, #0
 800c102:	f8c8 3000 	str.w	r3, [r8]
 800c106:	6033      	str	r3, [r6, #0]
 800c108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c10c <GUI__DrawTwinArc2>:
 800c10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c110:	b08b      	sub	sp, #44	; 0x2c
 800c112:	4606      	mov	r6, r0
 800c114:	461c      	mov	r4, r3
 800c116:	4688      	mov	r8, r1
 800c118:	4615      	mov	r5, r2
 800c11a:	f000 fc49 	bl	800c9b0 <GUI_Lock>
 800c11e:	4b57      	ldr	r3, [pc, #348]	; (800c27c <GUI__DrawTwinArc2+0x170>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 800c124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c126:	441d      	add	r5, r3
 800c128:	1e63      	subs	r3, r4, #1
 800c12a:	443e      	add	r6, r7
 800c12c:	442b      	add	r3, r5
 800c12e:	4447      	add	r7, r8
 800c130:	a808      	add	r0, sp, #32
 800c132:	f8ad 6020 	strh.w	r6, [sp, #32]
 800c136:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800c13a:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 800c13e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800c142:	f7fc fa4f 	bl	80085e4 <WM__InitIVRSearch>
 800c146:	b920      	cbnz	r0, 800c152 <GUI__DrawTwinArc2+0x46>
 800c148:	f000 fc28 	bl	800c99c <GUI_Unlock>
 800c14c:	b00b      	add	sp, #44	; 0x2c
 800c14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c152:	2c00      	cmp	r4, #0
 800c154:	dc02      	bgt.n	800c15c <GUI__DrawTwinArc2+0x50>
 800c156:	f7fc f983 	bl	8008460 <WM__GetNextIVR>
 800c15a:	e7f4      	b.n	800c146 <GUI__DrawTwinArc2+0x3a>
 800c15c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c15e:	f000 fd24 	bl	800cbaa <GUI_SetColor>
 800c162:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
 800c166:	4641      	mov	r1, r8
 800c168:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
 800c16c:	d324      	bcc.n	800c1b8 <GUI__DrawTwinArc2+0xac>
 800c16e:	ab07      	add	r3, sp, #28
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	4620      	mov	r0, r4
 800c174:	aa05      	add	r2, sp, #20
 800c176:	ab06      	add	r3, sp, #24
 800c178:	f7ff ff9e 	bl	800c0b8 <_GetTwinArcPara>
 800c17c:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800c180:	f8dd a018 	ldr.w	sl, [sp, #24]
 800c184:	9905      	ldr	r1, [sp, #20]
 800c186:	1930      	adds	r0, r6, r4
 800c188:	44a9      	add	r9, r5
 800c18a:	ebc8 0909 	rsb	r9, r8, r9
 800c18e:	ebc4 0b07 	rsb	fp, r4, r7
 800c192:	ebca 0200 	rsb	r2, sl, r0
 800c196:	eb0b 0301 	add.w	r3, fp, r1
 800c19a:	1a40      	subs	r0, r0, r1
 800c19c:	3a01      	subs	r2, #1
 800c19e:	4649      	mov	r1, r9
 800c1a0:	9302      	str	r3, [sp, #8]
 800c1a2:	f7ff fb25 	bl	800b7f0 <LCD_DrawHLine>
 800c1a6:	9b02      	ldr	r3, [sp, #8]
 800c1a8:	eb0b 000a 	add.w	r0, fp, sl
 800c1ac:	3001      	adds	r0, #1
 800c1ae:	4649      	mov	r1, r9
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	f7ff fb1d 	bl	800b7f0 <LCD_DrawHLine>
 800c1b6:	e7d6      	b.n	800c166 <GUI__DrawTwinArc2+0x5a>
 800c1b8:	2c01      	cmp	r4, #1
 800c1ba:	d0cc      	beq.n	800c156 <GUI__DrawTwinArc2+0x4a>
 800c1bc:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c1be:	f000 fcf4 	bl	800cbaa <GUI_SetColor>
 800c1c2:	f1a4 0902 	sub.w	r9, r4, #2
 800c1c6:	eb05 0b04 	add.w	fp, r5, r4
 800c1ca:	f105 0802 	add.w	r8, r5, #2
 800c1ce:	f1b9 0f00 	cmp.w	r9, #0
 800c1d2:	d027      	beq.n	800c224 <GUI__DrawTwinArc2+0x118>
 800c1d4:	ab07      	add	r3, sp, #28
 800c1d6:	4649      	mov	r1, r9
 800c1d8:	9300      	str	r3, [sp, #0]
 800c1da:	4620      	mov	r0, r4
 800c1dc:	aa05      	add	r2, sp, #20
 800c1de:	ab06      	add	r3, sp, #24
 800c1e0:	f7ff ff6a 	bl	800c0b8 <_GetTwinArcPara>
 800c1e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c1e8:	9906      	ldr	r1, [sp, #24]
 800c1ea:	1930      	adds	r0, r6, r4
 800c1ec:	1b3b      	subs	r3, r7, r4
 800c1ee:	ebca 0200 	rsb	r2, sl, r0
 800c1f2:	eb03 0c01 	add.w	ip, r3, r1
 800c1f6:	1a40      	subs	r0, r0, r1
 800c1f8:	3a01      	subs	r2, #1
 800c1fa:	4641      	mov	r1, r8
 800c1fc:	9302      	str	r3, [sp, #8]
 800c1fe:	f8cd c00c 	str.w	ip, [sp, #12]
 800c202:	f7ff faf5 	bl	800b7f0 <LCD_DrawHLine>
 800c206:	9b02      	ldr	r3, [sp, #8]
 800c208:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800c20c:	eb03 000a 	add.w	r0, r3, sl
 800c210:	4641      	mov	r1, r8
 800c212:	3001      	adds	r0, #1
 800c214:	4662      	mov	r2, ip
 800c216:	f7ff faeb 	bl	800b7f0 <LCD_DrawHLine>
 800c21a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c21e:	f108 0801 	add.w	r8, r8, #1
 800c222:	e7d4      	b.n	800c1ce <GUI__DrawTwinArc2+0xc2>
 800c224:	2c02      	cmp	r4, #2
 800c226:	d096      	beq.n	800c156 <GUI__DrawTwinArc2+0x4a>
 800c228:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c22a:	f000 fcbe 	bl	800cbaa <GUI_SetColor>
 800c22e:	f1c4 0303 	rsb	r3, r4, #3
 800c232:	f1a4 0803 	sub.w	r8, r4, #3
 800c236:	449b      	add	fp, r3
 800c238:	f1b8 0f00 	cmp.w	r8, #0
 800c23c:	d08b      	beq.n	800c156 <GUI__DrawTwinArc2+0x4a>
 800c23e:	ab07      	add	r3, sp, #28
 800c240:	4641      	mov	r1, r8
 800c242:	9300      	str	r3, [sp, #0]
 800c244:	4620      	mov	r0, r4
 800c246:	ab06      	add	r3, sp, #24
 800c248:	aa05      	add	r2, sp, #20
 800c24a:	f7ff ff35 	bl	800c0b8 <_GetTwinArcPara>
 800c24e:	9807      	ldr	r0, [sp, #28]
 800c250:	1932      	adds	r2, r6, r4
 800c252:	ebc4 0907 	rsb	r9, r4, r7
 800c256:	4659      	mov	r1, fp
 800c258:	eb09 0a00 	add.w	sl, r9, r0
 800c25c:	1a10      	subs	r0, r2, r0
 800c25e:	3a01      	subs	r2, #1
 800c260:	f7ff fac6 	bl	800b7f0 <LCD_DrawHLine>
 800c264:	4659      	mov	r1, fp
 800c266:	f109 0001 	add.w	r0, r9, #1
 800c26a:	4652      	mov	r2, sl
 800c26c:	f7ff fac0 	bl	800b7f0 <LCD_DrawHLine>
 800c270:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c274:	f10b 0b01 	add.w	fp, fp, #1
 800c278:	e7de      	b.n	800c238 <GUI__DrawTwinArc2+0x12c>
 800c27a:	bf00      	nop
 800c27c:	200002c4 	.word	0x200002c4

0800c280 <GUI__DrawTwinArc4>:
 800c280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c284:	b08f      	sub	sp, #60	; 0x3c
 800c286:	4682      	mov	sl, r0
 800c288:	461f      	mov	r7, r3
 800c28a:	4688      	mov	r8, r1
 800c28c:	4691      	mov	r9, r2
 800c28e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800c290:	f000 fb8e 	bl	800c9b0 <GUI_Lock>
 800c294:	4b76      	ldr	r3, [pc, #472]	; (800c470 <GUI__DrawTwinArc4+0x1f0>)
 800c296:	681e      	ldr	r6, [r3, #0]
 800c298:	6d30      	ldr	r0, [r6, #80]	; 0x50
 800c29a:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
 800c29c:	4480      	add	r8, r0
 800c29e:	44aa      	add	sl, r5
 800c2a0:	4407      	add	r7, r0
 800c2a2:	eb09 0605 	add.w	r6, r9, r5
 800c2a6:	a80c      	add	r0, sp, #48	; 0x30
 800c2a8:	f8cd a014 	str.w	sl, [sp, #20]
 800c2ac:	f8cd 8018 	str.w	r8, [sp, #24]
 800c2b0:	f8ad a030 	strh.w	sl, [sp, #48]	; 0x30
 800c2b4:	f8ad 8032 	strh.w	r8, [sp, #50]	; 0x32
 800c2b8:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
 800c2bc:	f8ad 7036 	strh.w	r7, [sp, #54]	; 0x36
 800c2c0:	f7fc f990 	bl	80085e4 <WM__InitIVRSearch>
 800c2c4:	b920      	cbnz	r0, 800c2d0 <GUI__DrawTwinArc4+0x50>
 800c2c6:	f000 fb69 	bl	800c99c <GUI_Unlock>
 800c2ca:	b00f      	add	sp, #60	; 0x3c
 800c2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d0:	2c00      	cmp	r4, #0
 800c2d2:	dc02      	bgt.n	800c2da <GUI__DrawTwinArc4+0x5a>
 800c2d4:	f7fc f8c4 	bl	8008460 <WM__GetNextIVR>
 800c2d8:	e7f4      	b.n	800c2c4 <GUI__DrawTwinArc4+0x44>
 800c2da:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c2dc:	f000 fc65 	bl	800cbaa <GUI_SetColor>
 800c2e0:	9b06      	ldr	r3, [sp, #24]
 800c2e2:	4423      	add	r3, r4
 800c2e4:	9307      	str	r3, [sp, #28]
 800c2e6:	9b06      	ldr	r3, [sp, #24]
 800c2e8:	1e65      	subs	r5, r4, #1
 800c2ea:	f103 0801 	add.w	r8, r3, #1
 800c2ee:	2d00      	cmp	r5, #0
 800c2f0:	d037      	beq.n	800c362 <GUI__DrawTwinArc4+0xe2>
 800c2f2:	ab0b      	add	r3, sp, #44	; 0x2c
 800c2f4:	4629      	mov	r1, r5
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	aa09      	add	r2, sp, #36	; 0x24
 800c2fc:	ab0a      	add	r3, sp, #40	; 0x28
 800c2fe:	f7ff fedb 	bl	800c0b8 <_GetTwinArcPara>
 800c302:	9b05      	ldr	r3, [sp, #20]
 800c304:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c306:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c308:	4423      	add	r3, r4
 800c30a:	ebc1 0c03 	rsb	ip, r1, r3
 800c30e:	ebc4 0b06 	rsb	fp, r4, r6
 800c312:	1a9b      	subs	r3, r3, r2
 800c314:	3b01      	subs	r3, #1
 800c316:	eb0b 0901 	add.w	r9, fp, r1
 800c31a:	4493      	add	fp, r2
 800c31c:	4660      	mov	r0, ip
 800c31e:	461a      	mov	r2, r3
 800c320:	4641      	mov	r1, r8
 800c322:	f10b 0b01 	add.w	fp, fp, #1
 800c326:	9303      	str	r3, [sp, #12]
 800c328:	f8cd c010 	str.w	ip, [sp, #16]
 800c32c:	f7ff fa60 	bl	800b7f0 <LCD_DrawHLine>
 800c330:	4641      	mov	r1, r8
 800c332:	4658      	mov	r0, fp
 800c334:	464a      	mov	r2, r9
 800c336:	f7ff fa5b 	bl	800b7f0 <LCD_DrawHLine>
 800c33a:	ebc4 0a07 	rsb	sl, r4, r7
 800c33e:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c342:	9b03      	ldr	r3, [sp, #12]
 800c344:	44aa      	add	sl, r5
 800c346:	4660      	mov	r0, ip
 800c348:	461a      	mov	r2, r3
 800c34a:	4651      	mov	r1, sl
 800c34c:	f7ff fa50 	bl	800b7f0 <LCD_DrawHLine>
 800c350:	4658      	mov	r0, fp
 800c352:	4651      	mov	r1, sl
 800c354:	464a      	mov	r2, r9
 800c356:	f7ff fa4b 	bl	800b7f0 <LCD_DrawHLine>
 800c35a:	3d01      	subs	r5, #1
 800c35c:	f108 0801 	add.w	r8, r8, #1
 800c360:	e7c5      	b.n	800c2ee <GUI__DrawTwinArc4+0x6e>
 800c362:	2c01      	cmp	r4, #1
 800c364:	d0b6      	beq.n	800c2d4 <GUI__DrawTwinArc4+0x54>
 800c366:	981a      	ldr	r0, [sp, #104]	; 0x68
 800c368:	f000 fc1f 	bl	800cbaa <GUI_SetColor>
 800c36c:	9b07      	ldr	r3, [sp, #28]
 800c36e:	f1c4 0802 	rsb	r8, r4, #2
 800c372:	1ea5      	subs	r5, r4, #2
 800c374:	4498      	add	r8, r3
 800c376:	2d00      	cmp	r5, #0
 800c378:	d037      	beq.n	800c3ea <GUI__DrawTwinArc4+0x16a>
 800c37a:	ab0b      	add	r3, sp, #44	; 0x2c
 800c37c:	4629      	mov	r1, r5
 800c37e:	9300      	str	r3, [sp, #0]
 800c380:	4620      	mov	r0, r4
 800c382:	aa09      	add	r2, sp, #36	; 0x24
 800c384:	ab0a      	add	r3, sp, #40	; 0x28
 800c386:	f7ff fe97 	bl	800c0b8 <_GetTwinArcPara>
 800c38a:	9b05      	ldr	r3, [sp, #20]
 800c38c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c38e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c390:	4423      	add	r3, r4
 800c392:	ebc1 0c03 	rsb	ip, r1, r3
 800c396:	ebc4 0b06 	rsb	fp, r4, r6
 800c39a:	1a9b      	subs	r3, r3, r2
 800c39c:	3b01      	subs	r3, #1
 800c39e:	eb0b 0901 	add.w	r9, fp, r1
 800c3a2:	4493      	add	fp, r2
 800c3a4:	4660      	mov	r0, ip
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	4641      	mov	r1, r8
 800c3aa:	f10b 0b01 	add.w	fp, fp, #1
 800c3ae:	9303      	str	r3, [sp, #12]
 800c3b0:	f8cd c010 	str.w	ip, [sp, #16]
 800c3b4:	f7ff fa1c 	bl	800b7f0 <LCD_DrawHLine>
 800c3b8:	4641      	mov	r1, r8
 800c3ba:	4658      	mov	r0, fp
 800c3bc:	464a      	mov	r2, r9
 800c3be:	f7ff fa17 	bl	800b7f0 <LCD_DrawHLine>
 800c3c2:	ebc4 0a07 	rsb	sl, r4, r7
 800c3c6:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c3ca:	9b03      	ldr	r3, [sp, #12]
 800c3cc:	44aa      	add	sl, r5
 800c3ce:	4660      	mov	r0, ip
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	4651      	mov	r1, sl
 800c3d4:	f7ff fa0c 	bl	800b7f0 <LCD_DrawHLine>
 800c3d8:	4658      	mov	r0, fp
 800c3da:	4651      	mov	r1, sl
 800c3dc:	464a      	mov	r2, r9
 800c3de:	f7ff fa07 	bl	800b7f0 <LCD_DrawHLine>
 800c3e2:	3d01      	subs	r5, #1
 800c3e4:	f108 0801 	add.w	r8, r8, #1
 800c3e8:	e7c5      	b.n	800c376 <GUI__DrawTwinArc4+0xf6>
 800c3ea:	2c02      	cmp	r4, #2
 800c3ec:	f43f af72 	beq.w	800c2d4 <GUI__DrawTwinArc4+0x54>
 800c3f0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c3f2:	f000 fbda 	bl	800cbaa <GUI_SetColor>
 800c3f6:	9b07      	ldr	r3, [sp, #28]
 800c3f8:	f1c4 0803 	rsb	r8, r4, #3
 800c3fc:	1ee5      	subs	r5, r4, #3
 800c3fe:	4498      	add	r8, r3
 800c400:	2d00      	cmp	r5, #0
 800c402:	f43f af67 	beq.w	800c2d4 <GUI__DrawTwinArc4+0x54>
 800c406:	ab0b      	add	r3, sp, #44	; 0x2c
 800c408:	4629      	mov	r1, r5
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	4620      	mov	r0, r4
 800c40e:	aa09      	add	r2, sp, #36	; 0x24
 800c410:	ab0a      	add	r3, sp, #40	; 0x28
 800c412:	f7ff fe51 	bl	800c0b8 <_GetTwinArcPara>
 800c416:	9b05      	ldr	r3, [sp, #20]
 800c418:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c41a:	4423      	add	r3, r4
 800c41c:	ebc2 0c03 	rsb	ip, r2, r3
 800c420:	ebc4 0b06 	rsb	fp, r4, r6
 800c424:	3b01      	subs	r3, #1
 800c426:	eb0b 0902 	add.w	r9, fp, r2
 800c42a:	4660      	mov	r0, ip
 800c42c:	461a      	mov	r2, r3
 800c42e:	4641      	mov	r1, r8
 800c430:	f10b 0b01 	add.w	fp, fp, #1
 800c434:	9303      	str	r3, [sp, #12]
 800c436:	f8cd c010 	str.w	ip, [sp, #16]
 800c43a:	f7ff f9d9 	bl	800b7f0 <LCD_DrawHLine>
 800c43e:	4641      	mov	r1, r8
 800c440:	4658      	mov	r0, fp
 800c442:	464a      	mov	r2, r9
 800c444:	f7ff f9d4 	bl	800b7f0 <LCD_DrawHLine>
 800c448:	ebc4 0a07 	rsb	sl, r4, r7
 800c44c:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c450:	9b03      	ldr	r3, [sp, #12]
 800c452:	44aa      	add	sl, r5
 800c454:	4660      	mov	r0, ip
 800c456:	461a      	mov	r2, r3
 800c458:	4651      	mov	r1, sl
 800c45a:	f7ff f9c9 	bl	800b7f0 <LCD_DrawHLine>
 800c45e:	4658      	mov	r0, fp
 800c460:	4651      	mov	r1, sl
 800c462:	464a      	mov	r2, r9
 800c464:	f7ff f9c4 	bl	800b7f0 <LCD_DrawHLine>
 800c468:	3d01      	subs	r5, #1
 800c46a:	f108 0801 	add.w	r8, r8, #1
 800c46e:	e7c7      	b.n	800c400 <GUI__DrawTwinArc4+0x180>
 800c470:	200002c4 	.word	0x200002c4

0800c474 <GUI__DivideRound32>:
 800c474:	b149      	cbz	r1, 800c48a <GUI__DivideRound32+0x16>
 800c476:	2800      	cmp	r0, #0
 800c478:	ea4f 0361 	mov.w	r3, r1, asr #1
 800c47c:	bfb4      	ite	lt
 800c47e:	ebc3 0000 	rsblt	r0, r3, r0
 800c482:	18c0      	addge	r0, r0, r3
 800c484:	fb90 f0f1 	sdiv	r0, r0, r1
 800c488:	4770      	bx	lr
 800c48a:	4608      	mov	r0, r1
 800c48c:	4770      	bx	lr

0800c48e <GUI__MixColors>:
 800c48e:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 800c492:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800c496:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c498:	d027      	beq.n	800c4ea <GUI__MixColors+0x5c>
 800c49a:	43d3      	mvns	r3, r2
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	b2cd      	uxtb	r5, r1
 800c4a0:	b2c6      	uxtb	r6, r0
 800c4a2:	435d      	muls	r5, r3
 800c4a4:	fb02 5506 	mla	r5, r2, r6, r5
 800c4a8:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 800c4ac:	f400 447f 	and.w	r4, r0, #65280	; 0xff00
 800c4b0:	435e      	muls	r6, r3
 800c4b2:	fb02 6604 	mla	r6, r2, r4, r6
 800c4b6:	f401 047f 	and.w	r4, r1, #16711680	; 0xff0000
 800c4ba:	f400 077f 	and.w	r7, r0, #16711680	; 0xff0000
 800c4be:	435c      	muls	r4, r3
 800c4c0:	0e09      	lsrs	r1, r1, #24
 800c4c2:	0e00      	lsrs	r0, r0, #24
 800c4c4:	fb02 4407 	mla	r4, r2, r7, r4
 800c4c8:	434b      	muls	r3, r1
 800c4ca:	0a36      	lsrs	r6, r6, #8
 800c4cc:	fb02 3200 	mla	r2, r2, r0, r3
 800c4d0:	0a24      	lsrs	r4, r4, #8
 800c4d2:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800c4d6:	f406 407f 	and.w	r0, r6, #65280	; 0xff00
 800c4da:	4318      	orrs	r0, r3
 800c4dc:	0412      	lsls	r2, r2, #16
 800c4de:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 800c4e2:	4318      	orrs	r0, r3
 800c4e4:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800c4e8:	4310      	orrs	r0, r2
 800c4ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c4ec <_OnExit>:
 800c4ec:	b570      	push	{r4, r5, r6, lr}
 800c4ee:	4c0a      	ldr	r4, [pc, #40]	; (800c518 <_OnExit+0x2c>)
 800c4f0:	4d0a      	ldr	r5, [pc, #40]	; (800c51c <_OnExit+0x30>)
 800c4f2:	6820      	ldr	r0, [r4, #0]
 800c4f4:	4e0a      	ldr	r6, [pc, #40]	; (800c520 <_OnExit+0x34>)
 800c4f6:	f001 ff2b 	bl	800e350 <GUI_ALLOC_FreeFixedBlock>
 800c4fa:	6828      	ldr	r0, [r5, #0]
 800c4fc:	f001 ff28 	bl	800e350 <GUI_ALLOC_FreeFixedBlock>
 800c500:	6830      	ldr	r0, [r6, #0]
 800c502:	f001 ff25 	bl	800e350 <GUI_ALLOC_FreeFixedBlock>
 800c506:	4a07      	ldr	r2, [pc, #28]	; (800c524 <_OnExit+0x38>)
 800c508:	2300      	movs	r3, #0
 800c50a:	6013      	str	r3, [r2, #0]
 800c50c:	4a06      	ldr	r2, [pc, #24]	; (800c528 <_OnExit+0x3c>)
 800c50e:	6033      	str	r3, [r6, #0]
 800c510:	602b      	str	r3, [r5, #0]
 800c512:	6023      	str	r3, [r4, #0]
 800c514:	6013      	str	r3, [r2, #0]
 800c516:	bd70      	pop	{r4, r5, r6, pc}
 800c518:	20008464 	.word	0x20008464
 800c51c:	20008460 	.word	0x20008460
 800c520:	20008468 	.word	0x20008468
 800c524:	2000846c 	.word	0x2000846c
 800c528:	2000847c 	.word	0x2000847c

0800c52c <GUI__GetAlphaBuffer>:
 800c52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c530:	461c      	mov	r4, r3
 800c532:	4b28      	ldr	r3, [pc, #160]	; (800c5d4 <GUI__GetAlphaBuffer+0xa8>)
 800c534:	4617      	mov	r7, r2
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	4606      	mov	r6, r0
 800c53a:	4688      	mov	r8, r1
 800c53c:	b932      	cbnz	r2, 800c54c <GUI__GetAlphaBuffer+0x20>
 800c53e:	2201      	movs	r2, #1
 800c540:	4825      	ldr	r0, [pc, #148]	; (800c5d8 <GUI__GetAlphaBuffer+0xac>)
 800c542:	601a      	str	r2, [r3, #0]
 800c544:	4b25      	ldr	r3, [pc, #148]	; (800c5dc <GUI__GetAlphaBuffer+0xb0>)
 800c546:	6003      	str	r3, [r0, #0]
 800c548:	f001 fb76 	bl	800dc38 <GUI__RegisterExit>
 800c54c:	4d24      	ldr	r5, [pc, #144]	; (800c5e0 <GUI__GetAlphaBuffer+0xb4>)
 800c54e:	682b      	ldr	r3, [r5, #0]
 800c550:	b933      	cbnz	r3, 800c560 <GUI__GetAlphaBuffer+0x34>
 800c552:	4b24      	ldr	r3, [pc, #144]	; (800c5e4 <GUI__GetAlphaBuffer+0xb8>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	602b      	str	r3, [r5, #0]
 800c558:	b913      	cbnz	r3, 800c560 <GUI__GetAlphaBuffer+0x34>
 800c55a:	f7ff f8a7 	bl	800b6ac <LCD_GetVXSizeMax>
 800c55e:	6028      	str	r0, [r5, #0]
 800c560:	b10c      	cbz	r4, 800c566 <GUI__GetAlphaBuffer+0x3a>
 800c562:	682b      	ldr	r3, [r5, #0]
 800c564:	6023      	str	r3, [r4, #0]
 800c566:	b196      	cbz	r6, 800c58e <GUI__GetAlphaBuffer+0x62>
 800c568:	4b1f      	ldr	r3, [pc, #124]	; (800c5e8 <GUI__GetAlphaBuffer+0xbc>)
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	4699      	mov	r9, r3
 800c56e:	2400      	movs	r4, #0
 800c570:	b94a      	cbnz	r2, 800c586 <GUI__GetAlphaBuffer+0x5a>
 800c572:	6828      	ldr	r0, [r5, #0]
 800c574:	0080      	lsls	r0, r0, #2
 800c576:	f002 f85b 	bl	800e630 <GUI_ALLOC_GetFixedBlock>
 800c57a:	f1d0 0401 	rsbs	r4, r0, #1
 800c57e:	f8c9 0000 	str.w	r0, [r9]
 800c582:	bf38      	it	cc
 800c584:	2400      	movcc	r4, #0
 800c586:	f8d9 3000 	ldr.w	r3, [r9]
 800c58a:	6033      	str	r3, [r6, #0]
 800c58c:	e000      	b.n	800c590 <GUI__GetAlphaBuffer+0x64>
 800c58e:	4634      	mov	r4, r6
 800c590:	f1b8 0f00 	cmp.w	r8, #0
 800c594:	d00d      	beq.n	800c5b2 <GUI__GetAlphaBuffer+0x86>
 800c596:	4e15      	ldr	r6, [pc, #84]	; (800c5ec <GUI__GetAlphaBuffer+0xc0>)
 800c598:	6833      	ldr	r3, [r6, #0]
 800c59a:	b93b      	cbnz	r3, 800c5ac <GUI__GetAlphaBuffer+0x80>
 800c59c:	6828      	ldr	r0, [r5, #0]
 800c59e:	0080      	lsls	r0, r0, #2
 800c5a0:	f002 f846 	bl	800e630 <GUI_ALLOC_GetFixedBlock>
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	6030      	str	r0, [r6, #0]
 800c5a8:	bf08      	it	eq
 800c5aa:	2401      	moveq	r4, #1
 800c5ac:	6833      	ldr	r3, [r6, #0]
 800c5ae:	f8c8 3000 	str.w	r3, [r8]
 800c5b2:	b167      	cbz	r7, 800c5ce <GUI__GetAlphaBuffer+0xa2>
 800c5b4:	4e0e      	ldr	r6, [pc, #56]	; (800c5f0 <GUI__GetAlphaBuffer+0xc4>)
 800c5b6:	6833      	ldr	r3, [r6, #0]
 800c5b8:	b93b      	cbnz	r3, 800c5ca <GUI__GetAlphaBuffer+0x9e>
 800c5ba:	6828      	ldr	r0, [r5, #0]
 800c5bc:	0080      	lsls	r0, r0, #2
 800c5be:	f002 f837 	bl	800e630 <GUI_ALLOC_GetFixedBlock>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	6030      	str	r0, [r6, #0]
 800c5c6:	bf08      	it	eq
 800c5c8:	2401      	moveq	r4, #1
 800c5ca:	6833      	ldr	r3, [r6, #0]
 800c5cc:	603b      	str	r3, [r7, #0]
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5d4:	2000847c 	.word	0x2000847c
 800c5d8:	20008474 	.word	0x20008474
 800c5dc:	0800c4ed 	.word	0x0800c4ed
 800c5e0:	2000846c 	.word	0x2000846c
 800c5e4:	2002883c 	.word	0x2002883c
 800c5e8:	20008464 	.word	0x20008464
 800c5ec:	20008460 	.word	0x20008460
 800c5f0:	20008468 	.word	0x20008468

0800c5f4 <GUI__DoAlphaBlending>:
 800c5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f8:	b093      	sub	sp, #76	; 0x4c
 800c5fa:	2400      	movs	r4, #0
 800c5fc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c5fe:	900b      	str	r0, [sp, #44]	; 0x2c
 800c600:	910c      	str	r1, [sp, #48]	; 0x30
 800c602:	4690      	mov	r8, r2
 800c604:	461f      	mov	r7, r3
 800c606:	6034      	str	r4, [r6, #0]
 800c608:	a80f      	add	r0, sp, #60	; 0x3c
 800c60a:	a910      	add	r1, sp, #64	; 0x40
 800c60c:	4622      	mov	r2, r4
 800c60e:	ab11      	add	r3, sp, #68	; 0x44
 800c610:	f7ff ff8c 	bl	800c52c <GUI__GetAlphaBuffer>
 800c614:	4605      	mov	r5, r0
 800c616:	2800      	cmp	r0, #0
 800c618:	f040 80c3 	bne.w	800c7a2 <GUI__DoAlphaBlending+0x1ae>
 800c61c:	4c63      	ldr	r4, [pc, #396]	; (800c7ac <GUI__DoAlphaBlending+0x1b8>)
 800c61e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c620:	6823      	ldr	r3, [r4, #0]
 800c622:	7c58      	ldrb	r0, [r3, #17]
 800c624:	4b62      	ldr	r3, [pc, #392]	; (800c7b0 <GUI__DoAlphaBlending+0x1bc>)
 800c626:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c62a:	9307      	str	r3, [sp, #28]
 800c62c:	4297      	cmp	r7, r2
 800c62e:	bfa8      	it	ge
 800c630:	4617      	movge	r7, r2
 800c632:	691a      	ldr	r2, [r3, #16]
 800c634:	920d      	str	r2, [sp, #52]	; 0x34
 800c636:	970a      	str	r7, [sp, #40]	; 0x28
 800c638:	f7ff f80a 	bl	800b650 <GUI_GetBitsPerPixelEx>
 800c63c:	6823      	ldr	r3, [r4, #0]
 800c63e:	9008      	str	r0, [sp, #32]
 800c640:	7c58      	ldrb	r0, [r3, #17]
 800c642:	f7ff f823 	bl	800b68c <GUI_GetpfIndex2ColorEx>
 800c646:	4b5b      	ldr	r3, [pc, #364]	; (800c7b4 <GUI__DoAlphaBlending+0x1c0>)
 800c648:	9004      	str	r0, [sp, #16]
 800c64a:	4298      	cmp	r0, r3
 800c64c:	d005      	beq.n	800c65a <GUI__DoAlphaBlending+0x66>
 800c64e:	4b5a      	ldr	r3, [pc, #360]	; (800c7b8 <GUI__DoAlphaBlending+0x1c4>)
 800c650:	1ac3      	subs	r3, r0, r3
 800c652:	bf18      	it	ne
 800c654:	2301      	movne	r3, #1
 800c656:	9306      	str	r3, [sp, #24]
 800c658:	e000      	b.n	800c65c <GUI__DoAlphaBlending+0x68>
 800c65a:	9506      	str	r5, [sp, #24]
 800c65c:	2500      	movs	r5, #0
 800c65e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c660:	46ab      	mov	fp, r5
 800c662:	4643      	mov	r3, r8
 800c664:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c666:	f853 0b04 	ldr.w	r0, [r3], #4
 800c66a:	9305      	str	r3, [sp, #20]
 800c66c:	4790      	blx	r2
 800c66e:	0e03      	lsrs	r3, r0, #24
 800c670:	4681      	mov	r9, r0
 800c672:	9309      	str	r3, [sp, #36]	; 0x24
 800c674:	f000 8085 	beq.w	800c782 <GUI__DoAlphaBlending+0x18e>
 800c678:	f1bb 0f00 	cmp.w	fp, #0
 800c67c:	d13f      	bne.n	800c6fe <GUI__DoAlphaBlending+0x10a>
 800c67e:	4b4b      	ldr	r3, [pc, #300]	; (800c7ac <GUI__DoAlphaBlending+0x1b8>)
 800c680:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c686:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c68a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800c68e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c690:	442f      	add	r7, r5
 800c692:	42bb      	cmp	r3, r7
 800c694:	bfc8      	it	gt
 800c696:	ebc7 0b03 	rsbgt	fp, r7, r3
 800c69a:	eb0b 0a05 	add.w	sl, fp, r5
 800c69e:	bfc8      	it	gt
 800c6a0:	461f      	movgt	r7, r3
 800c6a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6a4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800c6a8:	4453      	add	r3, sl
 800c6aa:	4494      	add	ip, r2
 800c6ac:	9300      	str	r3, [sp, #0]
 800c6ae:	9b07      	ldr	r3, [sp, #28]
 800c6b0:	9301      	str	r3, [sp, #4]
 800c6b2:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800c6b6:	4638      	mov	r0, r7
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	f8cd c00c 	str.w	ip, [sp, #12]
 800c6be:	f005 fa5d 	bl	8011b7c <GUI_ReadRectEx>
 800c6c2:	9a08      	ldr	r2, [sp, #32]
 800c6c4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c6c6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800c6ca:	2a17      	cmp	r2, #23
 800c6cc:	dc06      	bgt.n	800c6dc <GUI__DoAlphaBlending+0xe8>
 800c6ce:	4450      	add	r0, sl
 800c6d0:	ebcb 0104 	rsb	r1, fp, r4
 800c6d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6d6:	f005 fbfe 	bl	8011ed6 <GUI__ExpandPixelIndicesEx>
 800c6da:	e001      	b.n	800c6e0 <GUI__DoAlphaBlending+0xec>
 800c6dc:	9b06      	ldr	r3, [sp, #24]
 800c6de:	b913      	cbnz	r3, 800c6e6 <GUI__DoAlphaBlending+0xf2>
 800c6e0:	f04f 0b01 	mov.w	fp, #1
 800c6e4:	e00b      	b.n	800c6fe <GUI__DoAlphaBlending+0x10a>
 800c6e6:	ebc7 070c 	rsb	r7, r7, ip
 800c6ea:	4482      	add	sl, r0
 800c6ec:	f8da 0000 	ldr.w	r0, [sl]
 800c6f0:	9a04      	ldr	r2, [sp, #16]
 800c6f2:	4790      	blx	r2
 800c6f4:	3f01      	subs	r7, #1
 800c6f6:	f84a 0b04 	str.w	r0, [sl], #4
 800c6fa:	d1f7      	bne.n	800c6ec <GUI__DoAlphaBlending+0xf8>
 800c6fc:	e7f0      	b.n	800c6e0 <GUI__DoAlphaBlending+0xec>
 800c6fe:	4b2f      	ldr	r3, [pc, #188]	; (800c7bc <GUI__DoAlphaBlending+0x1c8>)
 800c700:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c702:	f8d3 c000 	ldr.w	ip, [r3]
 800c706:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800c708:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800c70c:	f1bc 0f00 	cmp.w	ip, #0
 800c710:	d024      	beq.n	800c75c <GUI__DoAlphaBlending+0x168>
 800c712:	eb07 020a 	add.w	r2, r7, sl
 800c716:	4451      	add	r1, sl
 800c718:	9210      	str	r2, [sp, #64]	; 0x40
 800c71a:	4623      	mov	r3, r4
 800c71c:	910f      	str	r1, [sp, #60]	; 0x3c
 800c71e:	4640      	mov	r0, r8
 800c720:	47e0      	blx	ip
 800c722:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c724:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c726:	2300      	movs	r3, #0
 800c728:	f858 1003 	ldr.w	r1, [r8, r3]
 800c72c:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 800c730:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800c734:	58e8      	ldr	r0, [r5, r3]
 800c736:	d101      	bne.n	800c73c <GUI__DoAlphaBlending+0x148>
 800c738:	50d0      	str	r0, [r2, r3]
 800c73a:	e005      	b.n	800c748 <GUI__DoAlphaBlending+0x154>
 800c73c:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 800c740:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800c744:	bf08      	it	eq
 800c746:	50d1      	streq	r1, [r2, r3]
 800c748:	3c01      	subs	r4, #1
 800c74a:	f103 0304 	add.w	r3, r3, #4
 800c74e:	d1eb      	bne.n	800c728 <GUI__DoAlphaBlending+0x134>
 800c750:	6833      	ldr	r3, [r6, #0]
 800c752:	9710      	str	r7, [sp, #64]	; 0x40
 800c754:	f043 0301 	orr.w	r3, r3, #1
 800c758:	6033      	str	r3, [r6, #0]
 800c75a:	e020      	b.n	800c79e <GUI__DoAlphaBlending+0x1aa>
 800c75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c75e:	2bff      	cmp	r3, #255	; 0xff
 800c760:	d104      	bne.n	800c76c <GUI__DoAlphaBlending+0x178>
 800c762:	f851 300a 	ldr.w	r3, [r1, sl]
 800c766:	f847 300a 	str.w	r3, [r7, sl]
 800c76a:	e011      	b.n	800c790 <GUI__DoAlphaBlending+0x19c>
 800c76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c76e:	f851 100a 	ldr.w	r1, [r1, sl]
 800c772:	43da      	mvns	r2, r3
 800c774:	4648      	mov	r0, r9
 800c776:	b2d2      	uxtb	r2, r2
 800c778:	f7ff fe89 	bl	800c48e <GUI__MixColors>
 800c77c:	f847 000a 	str.w	r0, [r7, sl]
 800c780:	e002      	b.n	800c788 <GUI__DoAlphaBlending+0x194>
 800c782:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c784:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800c788:	6833      	ldr	r3, [r6, #0]
 800c78a:	f043 0301 	orr.w	r3, r3, #1
 800c78e:	6033      	str	r3, [r6, #0]
 800c790:	3c01      	subs	r4, #1
 800c792:	f105 0501 	add.w	r5, r5, #1
 800c796:	d002      	beq.n	800c79e <GUI__DoAlphaBlending+0x1aa>
 800c798:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c79c:	e761      	b.n	800c662 <GUI__DoAlphaBlending+0x6e>
 800c79e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c7a0:	e000      	b.n	800c7a4 <GUI__DoAlphaBlending+0x1b0>
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	b013      	add	sp, #76	; 0x4c
 800c7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7aa:	bf00      	nop
 800c7ac:	200002c4 	.word	0x200002c4
 800c7b0:	20028844 	.word	0x20028844
 800c7b4:	0800e94b 	.word	0x0800e94b
 800c7b8:	0800e949 	.word	0x0800e949
 800c7bc:	20008470 	.word	0x20008470

0800c7c0 <GUI__AllocAlphaBuffer>:
 800c7c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7c2:	b108      	cbz	r0, 800c7c8 <GUI__AllocAlphaBuffer+0x8>
 800c7c4:	aa03      	add	r2, sp, #12
 800c7c6:	e000      	b.n	800c7ca <GUI__AllocAlphaBuffer+0xa>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	a801      	add	r0, sp, #4
 800c7cc:	a902      	add	r1, sp, #8
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	f7ff feac 	bl	800c52c <GUI__GetAlphaBuffer>
 800c7d4:	b005      	add	sp, #20
 800c7d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c7dc <GUI_SignalEvent>:
 800c7dc:	b508      	push	{r3, lr}
 800c7de:	4b02      	ldr	r3, [pc, #8]	; (800c7e8 <GUI_SignalEvent+0xc>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	b103      	cbz	r3, 800c7e6 <GUI_SignalEvent+0xa>
 800c7e4:	4798      	blx	r3
 800c7e6:	bd08      	pop	{r3, pc}
 800c7e8:	20008480 	.word	0x20008480

0800c7ec <_Unlink>:
 800c7ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	b1f0      	cbz	r0, 800c830 <_Unlink+0x44>
 800c7f2:	f001 fdc1 	bl	800e378 <GUI_ALLOC_LockH>
 800c7f6:	4b0f      	ldr	r3, [pc, #60]	; (800c834 <_Unlink+0x48>)
 800c7f8:	9000      	str	r0, [sp, #0]
 800c7fa:	681c      	ldr	r4, [r3, #0]
 800c7fc:	42ac      	cmp	r4, r5
 800c7fe:	d104      	bne.n	800c80a <_Unlink+0x1e>
 800c800:	6842      	ldr	r2, [r0, #4]
 800c802:	601a      	str	r2, [r3, #0]
 800c804:	e011      	b.n	800c82a <_Unlink+0x3e>
 800c806:	f001 fdc5 	bl	800e394 <GUI_ALLOC_UnlockH>
 800c80a:	b174      	cbz	r4, 800c82a <_Unlink+0x3e>
 800c80c:	4620      	mov	r0, r4
 800c80e:	f001 fdb3 	bl	800e378 <GUI_ALLOC_LockH>
 800c812:	4603      	mov	r3, r0
 800c814:	a802      	add	r0, sp, #8
 800c816:	685c      	ldr	r4, [r3, #4]
 800c818:	f840 3d04 	str.w	r3, [r0, #-4]!
 800c81c:	42ac      	cmp	r4, r5
 800c81e:	d1f2      	bne.n	800c806 <_Unlink+0x1a>
 800c820:	9a00      	ldr	r2, [sp, #0]
 800c822:	6852      	ldr	r2, [r2, #4]
 800c824:	605a      	str	r2, [r3, #4]
 800c826:	f001 fdb5 	bl	800e394 <GUI_ALLOC_UnlockH>
 800c82a:	4668      	mov	r0, sp
 800c82c:	f001 fdb2 	bl	800e394 <GUI_ALLOC_UnlockH>
 800c830:	b003      	add	sp, #12
 800c832:	bd30      	pop	{r4, r5, pc}
 800c834:	20008488 	.word	0x20008488

0800c838 <GUI_TIMER__GetFirstTimer>:
 800c838:	2300      	movs	r3, #0
 800c83a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c83c:	6003      	str	r3, [r0, #0]
 800c83e:	4b09      	ldr	r3, [pc, #36]	; (800c864 <GUI_TIMER__GetFirstTimer+0x2c>)
 800c840:	681c      	ldr	r4, [r3, #0]
 800c842:	4605      	mov	r5, r0
 800c844:	b154      	cbz	r4, 800c85c <GUI_TIMER__GetFirstTimer+0x24>
 800c846:	4620      	mov	r0, r4
 800c848:	f001 fd96 	bl	800e378 <GUI_ALLOC_LockH>
 800c84c:	ab02      	add	r3, sp, #8
 800c84e:	6902      	ldr	r2, [r0, #16]
 800c850:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c854:	602a      	str	r2, [r5, #0]
 800c856:	4618      	mov	r0, r3
 800c858:	f001 fd9c 	bl	800e394 <GUI_ALLOC_UnlockH>
 800c85c:	4620      	mov	r0, r4
 800c85e:	b003      	add	sp, #12
 800c860:	bd30      	pop	{r4, r5, pc}
 800c862:	bf00      	nop
 800c864:	20008484 	.word	0x20008484

0800c868 <GUI_TIMER__GetNextTimerLin>:
 800c868:	2300      	movs	r3, #0
 800c86a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c86c:	600b      	str	r3, [r1, #0]
 800c86e:	460e      	mov	r6, r1
 800c870:	4604      	mov	r4, r0
 800c872:	b190      	cbz	r0, 800c89a <GUI_TIMER__GetNextTimerLin+0x32>
 800c874:	f001 fd80 	bl	800e378 <GUI_ALLOC_LockH>
 800c878:	ad02      	add	r5, sp, #8
 800c87a:	6884      	ldr	r4, [r0, #8]
 800c87c:	f845 0d04 	str.w	r0, [r5, #-4]!
 800c880:	b144      	cbz	r4, 800c894 <GUI_TIMER__GetNextTimerLin+0x2c>
 800c882:	4628      	mov	r0, r5
 800c884:	f001 fd86 	bl	800e394 <GUI_ALLOC_UnlockH>
 800c888:	4620      	mov	r0, r4
 800c88a:	f001 fd75 	bl	800e378 <GUI_ALLOC_LockH>
 800c88e:	6903      	ldr	r3, [r0, #16]
 800c890:	9001      	str	r0, [sp, #4]
 800c892:	6033      	str	r3, [r6, #0]
 800c894:	4628      	mov	r0, r5
 800c896:	f001 fd7d 	bl	800e394 <GUI_ALLOC_UnlockH>
 800c89a:	4620      	mov	r0, r4
 800c89c:	b002      	add	sp, #8
 800c89e:	bd70      	pop	{r4, r5, r6, pc}

0800c8a0 <GUI_TIMER_Delete>:
 800c8a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d030      	beq.n	800c90a <GUI_TIMER_Delete+0x6a>
 800c8a8:	4d19      	ldr	r5, [pc, #100]	; (800c910 <GUI_TIMER_Delete+0x70>)
 800c8aa:	f000 f881 	bl	800c9b0 <GUI_Lock>
 800c8ae:	682e      	ldr	r6, [r5, #0]
 800c8b0:	42a6      	cmp	r6, r4
 800c8b2:	d10c      	bne.n	800c8ce <GUI_TIMER_Delete+0x2e>
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	f001 fd5f 	bl	800e378 <GUI_ALLOC_LockH>
 800c8ba:	ab02      	add	r3, sp, #8
 800c8bc:	6882      	ldr	r2, [r0, #8]
 800c8be:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c8c2:	602a      	str	r2, [r5, #0]
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	e016      	b.n	800c8f6 <GUI_TIMER_Delete+0x56>
 800c8c8:	4668      	mov	r0, sp
 800c8ca:	f001 fd63 	bl	800e394 <GUI_ALLOC_UnlockH>
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f001 fd52 	bl	800e378 <GUI_ALLOC_LockH>
 800c8d4:	6886      	ldr	r6, [r0, #8]
 800c8d6:	ad02      	add	r5, sp, #8
 800c8d8:	42a6      	cmp	r6, r4
 800c8da:	f845 0d08 	str.w	r0, [r5, #-8]!
 800c8de:	d1f3      	bne.n	800c8c8 <GUI_TIMER_Delete+0x28>
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f001 fd49 	bl	800e378 <GUI_ALLOC_LockH>
 800c8e6:	9b00      	ldr	r3, [sp, #0]
 800c8e8:	6882      	ldr	r2, [r0, #8]
 800c8ea:	9001      	str	r0, [sp, #4]
 800c8ec:	609a      	str	r2, [r3, #8]
 800c8ee:	a801      	add	r0, sp, #4
 800c8f0:	f001 fd50 	bl	800e394 <GUI_ALLOC_UnlockH>
 800c8f4:	4668      	mov	r0, sp
 800c8f6:	f001 fd4d 	bl	800e394 <GUI_ALLOC_UnlockH>
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	f7ff ff76 	bl	800c7ec <_Unlink>
 800c900:	4620      	mov	r0, r4
 800c902:	f001 fd73 	bl	800e3ec <GUI_ALLOC_Free>
 800c906:	f000 f849 	bl	800c99c <GUI_Unlock>
 800c90a:	b002      	add	sp, #8
 800c90c:	bd70      	pop	{r4, r5, r6, pc}
 800c90e:	bf00      	nop
 800c910:	20008484 	.word	0x20008484

0800c914 <GUI_TIMER_GetFlag>:
 800c914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c916:	460d      	mov	r5, r1
 800c918:	4604      	mov	r4, r0
 800c91a:	b190      	cbz	r0, 800c942 <GUI_TIMER_GetFlag+0x2e>
 800c91c:	f000 f848 	bl	800c9b0 <GUI_Lock>
 800c920:	4620      	mov	r0, r4
 800c922:	f001 fd29 	bl	800e378 <GUI_ALLOC_LockH>
 800c926:	ab02      	add	r3, sp, #8
 800c928:	8982      	ldrh	r2, [r0, #12]
 800c92a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c92e:	4215      	tst	r5, r2
 800c930:	4618      	mov	r0, r3
 800c932:	bf0c      	ite	eq
 800c934:	2400      	moveq	r4, #0
 800c936:	2401      	movne	r4, #1
 800c938:	f001 fd2c 	bl	800e394 <GUI_ALLOC_UnlockH>
 800c93c:	f000 f82e 	bl	800c99c <GUI_Unlock>
 800c940:	e000      	b.n	800c944 <GUI_TIMER_GetFlag+0x30>
 800c942:	2401      	movs	r4, #1
 800c944:	4620      	mov	r0, r4
 800c946:	b003      	add	sp, #12
 800c948:	bd30      	pop	{r4, r5, pc}
	...

0800c94c <_GetTaskNo>:
 800c94c:	b510      	push	{r4, lr}
 800c94e:	2400      	movs	r4, #0
 800c950:	4b0b      	ldr	r3, [pc, #44]	; (800c980 <_GetTaskNo+0x34>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	429c      	cmp	r4, r3
 800c956:	da0e      	bge.n	800c976 <_GetTaskNo+0x2a>
 800c958:	f7f3 ff88 	bl	800086c <GUI_X_GetTaskId>
 800c95c:	4a09      	ldr	r2, [pc, #36]	; (800c984 <_GetTaskNo+0x38>)
 800c95e:	2378      	movs	r3, #120	; 0x78
 800c960:	4363      	muls	r3, r4
 800c962:	6812      	ldr	r2, [r2, #0]
 800c964:	18d1      	adds	r1, r2, r3
 800c966:	58d3      	ldr	r3, [r2, r3]
 800c968:	4283      	cmp	r3, r0
 800c96a:	d006      	beq.n	800c97a <_GetTaskNo+0x2e>
 800c96c:	b90b      	cbnz	r3, 800c972 <_GetTaskNo+0x26>
 800c96e:	6008      	str	r0, [r1, #0]
 800c970:	e003      	b.n	800c97a <_GetTaskNo+0x2e>
 800c972:	3401      	adds	r4, #1
 800c974:	e7ec      	b.n	800c950 <_GetTaskNo+0x4>
 800c976:	2000      	movs	r0, #0
 800c978:	bd10      	pop	{r4, pc}
 800c97a:	4620      	mov	r0, r4
 800c97c:	bd10      	pop	{r4, pc}
 800c97e:	bf00      	nop
 800c980:	200002ac 	.word	0x200002ac
 800c984:	2000848c 	.word	0x2000848c

0800c988 <_OnExit>:
 800c988:	b510      	push	{r4, lr}
 800c98a:	4c03      	ldr	r4, [pc, #12]	; (800c998 <_OnExit+0x10>)
 800c98c:	6820      	ldr	r0, [r4, #0]
 800c98e:	f001 fcdf 	bl	800e350 <GUI_ALLOC_FreeFixedBlock>
 800c992:	2300      	movs	r3, #0
 800c994:	6023      	str	r3, [r4, #0]
 800c996:	bd10      	pop	{r4, pc}
 800c998:	2000848c 	.word	0x2000848c

0800c99c <GUI_Unlock>:
 800c99c:	4a03      	ldr	r2, [pc, #12]	; (800c9ac <GUI_Unlock+0x10>)
 800c99e:	6813      	ldr	r3, [r2, #0]
 800c9a0:	3b01      	subs	r3, #1
 800c9a2:	6013      	str	r3, [r2, #0]
 800c9a4:	b90b      	cbnz	r3, 800c9aa <GUI_Unlock+0xe>
 800c9a6:	f7f3 bf53 	b.w	8000850 <GUI_X_Unlock>
 800c9aa:	4770      	bx	lr
 800c9ac:	20008490 	.word	0x20008490

0800c9b0 <GUI_Lock>:
 800c9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b4:	4d18      	ldr	r5, [pc, #96]	; (800ca18 <GUI_Lock+0x68>)
 800c9b6:	4c19      	ldr	r4, [pc, #100]	; (800ca1c <GUI_Lock+0x6c>)
 800c9b8:	682b      	ldr	r3, [r5, #0]
 800c9ba:	b123      	cbz	r3, 800c9c6 <GUI_Lock+0x16>
 800c9bc:	6826      	ldr	r6, [r4, #0]
 800c9be:	f7f3 ff55 	bl	800086c <GUI_X_GetTaskId>
 800c9c2:	4286      	cmp	r6, r0
 800c9c4:	d004      	beq.n	800c9d0 <GUI_Lock+0x20>
 800c9c6:	f7f3 ff49 	bl	800085c <GUI_X_Lock>
 800c9ca:	f7f3 ff4f 	bl	800086c <GUI_X_GetTaskId>
 800c9ce:	6020      	str	r0, [r4, #0]
 800c9d0:	682b      	ldr	r3, [r5, #0]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	602b      	str	r3, [r5, #0]
 800c9d8:	d11c      	bne.n	800ca14 <GUI_Lock+0x64>
 800c9da:	f7ff ffb7 	bl	800c94c <_GetTaskNo>
 800c9de:	4a10      	ldr	r2, [pc, #64]	; (800ca20 <GUI_Lock+0x70>)
 800c9e0:	6813      	ldr	r3, [r2, #0]
 800c9e2:	4298      	cmp	r0, r3
 800c9e4:	4604      	mov	r4, r0
 800c9e6:	4617      	mov	r7, r2
 800c9e8:	d014      	beq.n	800ca14 <GUI_Lock+0x64>
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	db11      	blt.n	800ca12 <GUI_Lock+0x62>
 800c9ee:	4e0d      	ldr	r6, [pc, #52]	; (800ca24 <GUI_Lock+0x74>)
 800c9f0:	6831      	ldr	r1, [r6, #0]
 800c9f2:	2578      	movs	r5, #120	; 0x78
 800c9f4:	fb05 1803 	mla	r8, r5, r3, r1
 800c9f8:	f001 f820 	bl	800da3c <GUI_DEVICE_UnlinkTaskDevices>
 800c9fc:	6833      	ldr	r3, [r6, #0]
 800c9fe:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
 800ca02:	fb05 3504 	mla	r5, r5, r4, r3
 800ca06:	4b08      	ldr	r3, [pc, #32]	; (800ca28 <GUI_Lock+0x78>)
 800ca08:	6f68      	ldr	r0, [r5, #116]	; 0x74
 800ca0a:	1d2a      	adds	r2, r5, #4
 800ca0c:	601a      	str	r2, [r3, #0]
 800ca0e:	f001 f831 	bl	800da74 <GUI_DEVICE_LinkDevices>
 800ca12:	603c      	str	r4, [r7, #0]
 800ca14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca18:	20008490 	.word	0x20008490
 800ca1c:	20008494 	.word	0x20008494
 800ca20:	200002a8 	.word	0x200002a8
 800ca24:	2000848c 	.word	0x2000848c
 800ca28:	200002c4 	.word	0x200002c4

0800ca2c <GUITASK_Init>:
 800ca2c:	480e      	ldr	r0, [pc, #56]	; (800ca68 <GUITASK_Init+0x3c>)
 800ca2e:	4b0f      	ldr	r3, [pc, #60]	; (800ca6c <GUITASK_Init+0x40>)
 800ca30:	b510      	push	{r4, lr}
 800ca32:	6003      	str	r3, [r0, #0]
 800ca34:	f001 f900 	bl	800dc38 <GUI__RegisterExit>
 800ca38:	4b0d      	ldr	r3, [pc, #52]	; (800ca70 <GUITASK_Init+0x44>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2478      	movs	r4, #120	; 0x78
 800ca3e:	435c      	muls	r4, r3
 800ca40:	4620      	mov	r0, r4
 800ca42:	f001 fdf5 	bl	800e630 <GUI_ALLOC_GetFixedBlock>
 800ca46:	4b0b      	ldr	r3, [pc, #44]	; (800ca74 <GUITASK_Init+0x48>)
 800ca48:	4622      	mov	r2, r4
 800ca4a:	2100      	movs	r1, #0
 800ca4c:	6018      	str	r0, [r3, #0]
 800ca4e:	f7ff f9fc 	bl	800be4a <GUI__memset>
 800ca52:	4b09      	ldr	r3, [pc, #36]	; (800ca78 <GUITASK_Init+0x4c>)
 800ca54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca58:	601a      	str	r2, [r3, #0]
 800ca5a:	f7f3 fee1 	bl	8000820 <GUI_X_InitOS>
 800ca5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca62:	f7ff bf73 	b.w	800c94c <_GetTaskNo>
 800ca66:	bf00      	nop
 800ca68:	20008498 	.word	0x20008498
 800ca6c:	0800c989 	.word	0x0800c989
 800ca70:	200002ac 	.word	0x200002ac
 800ca74:	2000848c 	.word	0x2000848c
 800ca78:	200002a8 	.word	0x200002a8

0800ca7c <GUITASK_CopyContext>:
 800ca7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca7e:	2500      	movs	r5, #0
 800ca80:	4b11      	ldr	r3, [pc, #68]	; (800cac8 <GUITASK_CopyContext+0x4c>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	429d      	cmp	r5, r3
 800ca86:	da17      	bge.n	800cab8 <GUITASK_CopyContext+0x3c>
 800ca88:	4b10      	ldr	r3, [pc, #64]	; (800cacc <GUITASK_CopyContext+0x50>)
 800ca8a:	4a11      	ldr	r2, [pc, #68]	; (800cad0 <GUITASK_CopyContext+0x54>)
 800ca8c:	681f      	ldr	r7, [r3, #0]
 800ca8e:	6811      	ldr	r1, [r2, #0]
 800ca90:	2678      	movs	r6, #120	; 0x78
 800ca92:	436e      	muls	r6, r5
 800ca94:	19bc      	adds	r4, r7, r6
 800ca96:	1d23      	adds	r3, r4, #4
 800ca98:	2270      	movs	r2, #112	; 0x70
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7f3 fbe6 	bl	800026c <memcpy>
 800caa0:	2200      	movs	r2, #0
 800caa2:	51ba      	str	r2, [r7, r6]
 800caa4:	f104 020c 	add.w	r2, r4, #12
 800caa8:	61a2      	str	r2, [r4, #24]
 800caaa:	f104 0208 	add.w	r2, r4, #8
 800caae:	63e0      	str	r0, [r4, #60]	; 0x3c
 800cab0:	6422      	str	r2, [r4, #64]	; 0x40
 800cab2:	6460      	str	r0, [r4, #68]	; 0x44
 800cab4:	3501      	adds	r5, #1
 800cab6:	e7e3      	b.n	800ca80 <GUITASK_CopyContext+0x4>
 800cab8:	f7ff ff7a 	bl	800c9b0 <GUI_Lock>
 800cabc:	b003      	add	sp, #12
 800cabe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cac2:	f7ff bf6b 	b.w	800c99c <GUI_Unlock>
 800cac6:	bf00      	nop
 800cac8:	200002ac 	.word	0x200002ac
 800cacc:	2000848c 	.word	0x2000848c
 800cad0:	200002c4 	.word	0x200002c4

0800cad4 <GUI_TOUCH_StoreStateEx>:
 800cad4:	b538      	push	{r3, r4, r5, lr}
 800cad6:	4d08      	ldr	r5, [pc, #32]	; (800caf8 <GUI_TOUCH_StoreStateEx+0x24>)
 800cad8:	220c      	movs	r2, #12
 800cada:	4629      	mov	r1, r5
 800cadc:	4604      	mov	r4, r0
 800cade:	f006 fb87 	bl	80131f0 <memcmp>
 800cae2:	b140      	cbz	r0, 800caf6 <GUI_TOUCH_StoreStateEx+0x22>
 800cae4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800cae8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800caec:	4620      	mov	r0, r4
 800caee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caf2:	f000 b943 	b.w	800cd7c <GUI_PID_StoreState>
 800caf6:	bd38      	pop	{r3, r4, r5, pc}
 800caf8:	200084a0 	.word	0x200084a0

0800cafc <GUI_SetTextMode>:
 800cafc:	b538      	push	{r3, r4, r5, lr}
 800cafe:	4605      	mov	r5, r0
 800cb00:	f7ff ff56 	bl	800c9b0 <GUI_Lock>
 800cb04:	4b04      	ldr	r3, [pc, #16]	; (800cb18 <GUI_SetTextMode+0x1c>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	; 0x2a
 800cb0c:	855d      	strh	r5, [r3, #42]	; 0x2a
 800cb0e:	f7ff ff45 	bl	800c99c <GUI_Unlock>
 800cb12:	4620      	mov	r0, r4
 800cb14:	bd38      	pop	{r3, r4, r5, pc}
 800cb16:	bf00      	nop
 800cb18:	200002c4 	.word	0x200002c4

0800cb1c <GUI_SetFont>:
 800cb1c:	b538      	push	{r3, r4, r5, lr}
 800cb1e:	4604      	mov	r4, r0
 800cb20:	f7ff ff46 	bl	800c9b0 <GUI_Lock>
 800cb24:	4b04      	ldr	r3, [pc, #16]	; (800cb38 <GUI_SetFont+0x1c>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	69dd      	ldr	r5, [r3, #28]
 800cb2a:	b104      	cbz	r4, 800cb2e <GUI_SetFont+0x12>
 800cb2c:	61dc      	str	r4, [r3, #28]
 800cb2e:	f7ff ff35 	bl	800c99c <GUI_Unlock>
 800cb32:	4628      	mov	r0, r5
 800cb34:	bd38      	pop	{r3, r4, r5, pc}
 800cb36:	bf00      	nop
 800cb38:	200002c4 	.word	0x200002c4

0800cb3c <GUI_SetDrawMode>:
 800cb3c:	b510      	push	{r4, lr}
 800cb3e:	4604      	mov	r4, r0
 800cb40:	f7ff ff36 	bl	800c9b0 <GUI_Lock>
 800cb44:	4620      	mov	r0, r4
 800cb46:	f7fe fe1d 	bl	800b784 <LCD_SetDrawMode>
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	f7ff ff26 	bl	800c99c <GUI_Unlock>
 800cb50:	4620      	mov	r0, r4
 800cb52:	bd10      	pop	{r4, pc}

0800cb54 <GL_SetDefault>:
 800cb54:	b508      	push	{r3, lr}
 800cb56:	2000      	movs	r0, #0
 800cb58:	f000 f81c 	bl	800cb94 <GUI_SetBkColor>
 800cb5c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800cb60:	f000 f823 	bl	800cbaa <GUI_SetColor>
 800cb64:	2001      	movs	r0, #1
 800cb66:	f000 f8d1 	bl	800cd0c <GUI_SetPenSize>
 800cb6a:	2000      	movs	r0, #0
 800cb6c:	f005 fc2e 	bl	80123cc <GUI_SetTextAlign>
 800cb70:	2000      	movs	r0, #0
 800cb72:	f7ff ffc3 	bl	800cafc <GUI_SetTextMode>
 800cb76:	2000      	movs	r0, #0
 800cb78:	f7ff ffe0 	bl	800cb3c <GUI_SetDrawMode>
 800cb7c:	4b04      	ldr	r3, [pc, #16]	; (800cb90 <GL_SetDefault+0x3c>)
 800cb7e:	6818      	ldr	r0, [r3, #0]
 800cb80:	f7ff ffcc 	bl	800cb1c <GUI_SetFont>
 800cb84:	2000      	movs	r0, #0
 800cb86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cb8a:	f005 bc4f 	b.w	801242c <GUI_SetLineStyle>
 800cb8e:	bf00      	nop
 800cb90:	200002c8 	.word	0x200002c8

0800cb94 <GUI_SetBkColor>:
 800cb94:	b510      	push	{r4, lr}
 800cb96:	4604      	mov	r4, r0
 800cb98:	f7ff ff0a 	bl	800c9b0 <GUI_Lock>
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	f7ff f93b 	bl	800be18 <LCD_SetBkColor>
 800cba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cba6:	f7ff bef9 	b.w	800c99c <GUI_Unlock>

0800cbaa <GUI_SetColor>:
 800cbaa:	b510      	push	{r4, lr}
 800cbac:	4604      	mov	r4, r0
 800cbae:	f7ff feff 	bl	800c9b0 <GUI_Lock>
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	f7ff f938 	bl	800be28 <LCD_SetColor>
 800cbb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbbc:	f7ff beee 	b.w	800c99c <GUI_Unlock>

0800cbc0 <GUI__AlphaSuppressMixing>:
 800cbc0:	4b07      	ldr	r3, [pc, #28]	; (800cbe0 <GUI__AlphaSuppressMixing+0x20>)
 800cbc2:	b510      	push	{r4, lr}
 800cbc4:	681c      	ldr	r4, [r3, #0]
 800cbc6:	b120      	cbz	r0, 800cbd2 <GUI__AlphaSuppressMixing+0x12>
 800cbc8:	2201      	movs	r2, #1
 800cbca:	601a      	str	r2, [r3, #0]
 800cbcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbd0:	e002      	b.n	800cbd8 <GUI__AlphaSuppressMixing+0x18>
 800cbd2:	6018      	str	r0, [r3, #0]
 800cbd4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800cbd8:	f005 f894 	bl	8011d04 <LCD_AA_SetAndMask>
 800cbdc:	4620      	mov	r0, r4
 800cbde:	bd10      	pop	{r4, pc}
 800cbe0:	200084ac 	.word	0x200084ac

0800cbe4 <GUI_GetCursorLayer>:
 800cbe4:	2801      	cmp	r0, #1
 800cbe6:	bf9a      	itte	ls
 800cbe8:	4b02      	ldrls	r3, [pc, #8]	; (800cbf4 <GUI_GetCursorLayer+0x10>)
 800cbea:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800cbee:	2000      	movhi	r0, #0
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop
 800cbf4:	200084b0 	.word	0x200084b0

0800cbf8 <GUI_GetLayerPosEx>:
 800cbf8:	b570      	push	{r4, r5, r6, lr}
 800cbfa:	4606      	mov	r6, r0
 800cbfc:	460d      	mov	r5, r1
 800cbfe:	4614      	mov	r4, r2
 800cc00:	f7ff fed6 	bl	800c9b0 <GUI_Lock>
 800cc04:	4630      	mov	r0, r6
 800cc06:	4629      	mov	r1, r5
 800cc08:	4622      	mov	r2, r4
 800cc0a:	f7fe fc9d 	bl	800b548 <LCD_GetPosEx>
 800cc0e:	b110      	cbz	r0, 800cc16 <GUI_GetLayerPosEx+0x1e>
 800cc10:	2300      	movs	r3, #0
 800cc12:	602b      	str	r3, [r5, #0]
 800cc14:	6023      	str	r3, [r4, #0]
 800cc16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc1a:	f7ff bebf 	b.w	800c99c <GUI_Unlock>
	...

0800cc20 <GUI_SelectLayer>:
 800cc20:	b570      	push	{r4, r5, r6, lr}
 800cc22:	4d09      	ldr	r5, [pc, #36]	; (800cc48 <GUI_SelectLayer+0x28>)
 800cc24:	682b      	ldr	r3, [r5, #0]
 800cc26:	4604      	mov	r4, r0
 800cc28:	7c5e      	ldrb	r6, [r3, #17]
 800cc2a:	f7ff fec1 	bl	800c9b0 <GUI_Lock>
 800cc2e:	2c01      	cmp	r4, #1
 800cc30:	d803      	bhi.n	800cc3a <GUI_SelectLayer+0x1a>
 800cc32:	682b      	ldr	r3, [r5, #0]
 800cc34:	745c      	strb	r4, [r3, #17]
 800cc36:	f000 f829 	bl	800cc8c <GUI_SelectLCD>
 800cc3a:	4b04      	ldr	r3, [pc, #16]	; (800cc4c <GUI_SelectLayer+0x2c>)
 800cc3c:	601c      	str	r4, [r3, #0]
 800cc3e:	f7ff fead 	bl	800c99c <GUI_Unlock>
 800cc42:	4630      	mov	r0, r6
 800cc44:	bd70      	pop	{r4, r5, r6, pc}
 800cc46:	bf00      	nop
 800cc48:	200002c4 	.word	0x200002c4
 800cc4c:	200287e4 	.word	0x200287e4

0800cc50 <GUI_SetLayerPosEx>:
 800cc50:	b570      	push	{r4, r5, r6, lr}
 800cc52:	4606      	mov	r6, r0
 800cc54:	460d      	mov	r5, r1
 800cc56:	4614      	mov	r4, r2
 800cc58:	f7ff feaa 	bl	800c9b0 <GUI_Lock>
 800cc5c:	4622      	mov	r2, r4
 800cc5e:	4629      	mov	r1, r5
 800cc60:	4630      	mov	r0, r6
 800cc62:	f7fe fc41 	bl	800b4e8 <LCD_SetPosEx>
 800cc66:	4604      	mov	r4, r0
 800cc68:	f7ff fe98 	bl	800c99c <GUI_Unlock>
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	bd70      	pop	{r4, r5, r6, pc}

0800cc70 <GUI_SetLayerVisEx>:
 800cc70:	b538      	push	{r3, r4, r5, lr}
 800cc72:	4605      	mov	r5, r0
 800cc74:	460c      	mov	r4, r1
 800cc76:	f7ff fe9b 	bl	800c9b0 <GUI_Lock>
 800cc7a:	4621      	mov	r1, r4
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	f7fe fc1d 	bl	800b4bc <LCD_SetVisEx>
 800cc82:	4604      	mov	r4, r0
 800cc84:	f7ff fe8a 	bl	800c99c <GUI_Unlock>
 800cc88:	4620      	mov	r0, r4
 800cc8a:	bd38      	pop	{r3, r4, r5, pc}

0800cc8c <GUI_SelectLCD>:
 800cc8c:	b508      	push	{r3, lr}
 800cc8e:	f7ff fe8f 	bl	800c9b0 <GUI_Lock>
 800cc92:	f004 fe5f 	bl	8011954 <LCD_SelectLCD>
 800cc96:	f7fe fba1 	bl	800b3dc <LCD_UpdateColorIndices>
 800cc9a:	f7fb fe87 	bl	80089ac <WM_Activate>
 800cc9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cca2:	f7ff be7b 	b.w	800c99c <GUI_Unlock>
	...

0800cca8 <GUI_SaveContext_W>:
 800cca8:	b508      	push	{r3, lr}
 800ccaa:	4b03      	ldr	r3, [pc, #12]	; (800ccb8 <GUI_SaveContext_W+0x10>)
 800ccac:	2270      	movs	r2, #112	; 0x70
 800ccae:	6819      	ldr	r1, [r3, #0]
 800ccb0:	f7f3 fadc 	bl	800026c <memcpy>
 800ccb4:	bd08      	pop	{r3, pc}
 800ccb6:	bf00      	nop
 800ccb8:	200002c4 	.word	0x200002c4

0800ccbc <GUI_RestoreContext>:
 800ccbc:	b508      	push	{r3, lr}
 800ccbe:	4b03      	ldr	r3, [pc, #12]	; (800cccc <GUI_RestoreContext+0x10>)
 800ccc0:	4601      	mov	r1, r0
 800ccc2:	2270      	movs	r2, #112	; 0x70
 800ccc4:	6818      	ldr	r0, [r3, #0]
 800ccc6:	f7f3 fad1 	bl	800026c <memcpy>
 800ccca:	bd08      	pop	{r3, pc}
 800cccc:	200002c4 	.word	0x200002c4

0800ccd0 <GUI_RectsIntersect>:
 800ccd0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ccd4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	dc14      	bgt.n	800cd06 <GUI_RectsIntersect+0x36>
 800ccdc:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800cce0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	dc0e      	bgt.n	800cd06 <GUI_RectsIntersect+0x36>
 800cce8:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ccec:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	dc08      	bgt.n	800cd06 <GUI_RectsIntersect+0x36>
 800ccf4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ccf8:	f9b1 2000 	ldrsh.w	r2, [r1]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	bfcc      	ite	gt
 800cd00:	2000      	movgt	r0, #0
 800cd02:	2001      	movle	r0, #1
 800cd04:	4770      	bx	lr
 800cd06:	2000      	movs	r0, #0
 800cd08:	4770      	bx	lr
	...

0800cd0c <GUI_SetPenSize>:
 800cd0c:	b538      	push	{r3, r4, r5, lr}
 800cd0e:	4605      	mov	r5, r0
 800cd10:	f7ff fe4e 	bl	800c9b0 <GUI_Lock>
 800cd14:	4b03      	ldr	r3, [pc, #12]	; (800cd24 <GUI_SetPenSize+0x18>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	7e1c      	ldrb	r4, [r3, #24]
 800cd1a:	761d      	strb	r5, [r3, #24]
 800cd1c:	f7ff fe3e 	bl	800c99c <GUI_Unlock>
 800cd20:	4620      	mov	r0, r4
 800cd22:	bd38      	pop	{r3, r4, r5, pc}
 800cd24:	200002c4 	.word	0x200002c4

0800cd28 <GUI_PID_GetState>:
 800cd28:	4a11      	ldr	r2, [pc, #68]	; (800cd70 <GUI_PID_GetState+0x48>)
 800cd2a:	4912      	ldr	r1, [pc, #72]	; (800cd74 <GUI_PID_GetState+0x4c>)
 800cd2c:	6813      	ldr	r3, [r2, #0]
 800cd2e:	6809      	ldr	r1, [r1, #0]
 800cd30:	428b      	cmp	r3, r1
 800cd32:	b570      	push	{r4, r5, r6, lr}
 800cd34:	4604      	mov	r4, r0
 800cd36:	4616      	mov	r6, r2
 800cd38:	4d0f      	ldr	r5, [pc, #60]	; (800cd78 <GUI_PID_GetState+0x50>)
 800cd3a:	d109      	bne.n	800cd50 <GUI_PID_GetState+0x28>
 800cd3c:	42ab      	cmp	r3, r5
 800cd3e:	bf06      	itte	eq
 800cd40:	333c      	addeq	r3, #60	; 0x3c
 800cd42:	e893 0007 	ldmiaeq.w	r3, {r0, r1, r2}
 800cd46:	e913 0007 	ldmdbne	r3, {r0, r1, r2}
 800cd4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cd4e:	e00a      	b.n	800cd66 <GUI_PID_GetState+0x3e>
 800cd50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cd54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cd58:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	bf18      	it	ne
 800cd60:	f103 050c 	addne.w	r5, r3, #12
 800cd64:	6035      	str	r5, [r6, #0]
 800cd66:	7a20      	ldrb	r0, [r4, #8]
 800cd68:	3000      	adds	r0, #0
 800cd6a:	bf18      	it	ne
 800cd6c:	2001      	movne	r0, #1
 800cd6e:	bd70      	pop	{r4, r5, r6, pc}
 800cd70:	200002b4 	.word	0x200002b4
 800cd74:	200002b0 	.word	0x200002b0
 800cd78:	200084bc 	.word	0x200084bc

0800cd7c <GUI_PID_StoreState>:
 800cd7c:	4a21      	ldr	r2, [pc, #132]	; (800ce04 <GUI_PID_StoreState+0x88>)
 800cd7e:	4922      	ldr	r1, [pc, #136]	; (800ce08 <GUI_PID_StoreState+0x8c>)
 800cd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd84:	6011      	str	r1, [r2, #0]
 800cd86:	4f21      	ldr	r7, [pc, #132]	; (800ce0c <GUI_PID_StoreState+0x90>)
 800cd88:	4921      	ldr	r1, [pc, #132]	; (800ce10 <GUI_PID_StoreState+0x94>)
 800cd8a:	683a      	ldr	r2, [r7, #0]
 800cd8c:	680c      	ldr	r4, [r1, #0]
 800cd8e:	4603      	mov	r3, r0
 800cd90:	4820      	ldr	r0, [pc, #128]	; (800ce14 <GUI_PID_StoreState+0x98>)
 800cd92:	4294      	cmp	r4, r2
 800cd94:	468c      	mov	ip, r1
 800cd96:	f100 063c 	add.w	r6, r0, #60	; 0x3c
 800cd9a:	d017      	beq.n	800cdcc <GUI_PID_StoreState+0x50>
 800cd9c:	4282      	cmp	r2, r0
 800cd9e:	bf14      	ite	ne
 800cda0:	f1a2 010c 	subne.w	r1, r2, #12
 800cda4:	4631      	moveq	r1, r6
 800cda6:	7a1d      	ldrb	r5, [r3, #8]
 800cda8:	f891 8008 	ldrb.w	r8, [r1, #8]
 800cdac:	45a8      	cmp	r8, r5
 800cdae:	d10d      	bne.n	800cdcc <GUI_PID_StoreState+0x50>
 800cdb0:	428c      	cmp	r4, r1
 800cdb2:	d00b      	beq.n	800cdcc <GUI_PID_StoreState+0x50>
 800cdb4:	4281      	cmp	r1, r0
 800cdb6:	bf14      	ite	ne
 800cdb8:	390c      	subne	r1, #12
 800cdba:	4917      	ldreq	r1, [pc, #92]	; (800ce18 <GUI_PID_StoreState+0x9c>)
 800cdbc:	7a09      	ldrb	r1, [r1, #8]
 800cdbe:	42a9      	cmp	r1, r5
 800cdc0:	d104      	bne.n	800cdcc <GUI_PID_StoreState+0x50>
 800cdc2:	4282      	cmp	r2, r0
 800cdc4:	bf14      	ite	ne
 800cdc6:	3a0c      	subne	r2, #12
 800cdc8:	4a13      	ldreq	r2, [pc, #76]	; (800ce18 <GUI_PID_StoreState+0x9c>)
 800cdca:	603a      	str	r2, [r7, #0]
 800cdcc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cdd0:	683d      	ldr	r5, [r7, #0]
 800cdd2:	42b5      	cmp	r5, r6
 800cdd4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800cdd8:	bf0c      	ite	eq
 800cdda:	4d0e      	ldreq	r5, [pc, #56]	; (800ce14 <GUI_PID_StoreState+0x98>)
 800cddc:	350c      	addne	r5, #12
 800cdde:	42ac      	cmp	r4, r5
 800cde0:	603d      	str	r5, [r7, #0]
 800cde2:	d105      	bne.n	800cdf0 <GUI_PID_StoreState+0x74>
 800cde4:	42b4      	cmp	r4, r6
 800cde6:	bf14      	ite	ne
 800cde8:	340c      	addne	r4, #12
 800cdea:	4c0a      	ldreq	r4, [pc, #40]	; (800ce14 <GUI_PID_StoreState+0x98>)
 800cdec:	f8cc 4000 	str.w	r4, [ip]
 800cdf0:	4a0a      	ldr	r2, [pc, #40]	; (800ce1c <GUI_PID_StoreState+0xa0>)
 800cdf2:	6812      	ldr	r2, [r2, #0]
 800cdf4:	b10a      	cbz	r2, 800cdfa <GUI_PID_StoreState+0x7e>
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	4790      	blx	r2
 800cdfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdfe:	f7ff bced 	b.w	800c7dc <GUI_SignalEvent>
 800ce02:	bf00      	nop
 800ce04:	20028830 	.word	0x20028830
 800ce08:	0800fd8d 	.word	0x0800fd8d
 800ce0c:	200002b0 	.word	0x200002b0
 800ce10:	200002b4 	.word	0x200002b4
 800ce14:	200084bc 	.word	0x200084bc
 800ce18:	200084f8 	.word	0x200084f8
 800ce1c:	200084b8 	.word	0x200084b8

0800ce20 <GUI_PID_IsEmpty>:
 800ce20:	4b03      	ldr	r3, [pc, #12]	; (800ce30 <GUI_PID_IsEmpty+0x10>)
 800ce22:	6818      	ldr	r0, [r3, #0]
 800ce24:	4b03      	ldr	r3, [pc, #12]	; (800ce34 <GUI_PID_IsEmpty+0x14>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	1ac3      	subs	r3, r0, r3
 800ce2a:	4258      	negs	r0, r3
 800ce2c:	4158      	adcs	r0, r3
 800ce2e:	4770      	bx	lr
 800ce30:	200002b4 	.word	0x200002b4
 800ce34:	200002b0 	.word	0x200002b0

0800ce38 <GUI_StoreKey>:
 800ce38:	4b02      	ldr	r3, [pc, #8]	; (800ce44 <GUI_StoreKey+0xc>)
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	b902      	cbnz	r2, 800ce40 <GUI_StoreKey+0x8>
 800ce3e:	6018      	str	r0, [r3, #0]
 800ce40:	f7ff bccc 	b.w	800c7dc <GUI_SignalEvent>
 800ce44:	20008504 	.word	0x20008504

0800ce48 <GUI_PollKeyMsg>:
 800ce48:	b510      	push	{r4, lr}
 800ce4a:	f7ff fdb1 	bl	800c9b0 <GUI_Lock>
 800ce4e:	4a0b      	ldr	r2, [pc, #44]	; (800ce7c <GUI_PollKeyMsg+0x34>)
 800ce50:	490b      	ldr	r1, [pc, #44]	; (800ce80 <GUI_PollKeyMsg+0x38>)
 800ce52:	6813      	ldr	r3, [r2, #0]
 800ce54:	6809      	ldr	r1, [r1, #0]
 800ce56:	428b      	cmp	r3, r1
 800ce58:	d00b      	beq.n	800ce72 <GUI_PollKeyMsg+0x2a>
 800ce5a:	4c0a      	ldr	r4, [pc, #40]	; (800ce84 <GUI_PollKeyMsg+0x3c>)
 800ce5c:	42a3      	cmp	r3, r4
 800ce5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ce62:	bf14      	ite	ne
 800ce64:	3308      	addne	r3, #8
 800ce66:	3b50      	subeq	r3, #80	; 0x50
 800ce68:	6013      	str	r3, [r2, #0]
 800ce6a:	2401      	movs	r4, #1
 800ce6c:	f003 f9c6 	bl	80101fc <WM_OnKey>
 800ce70:	e000      	b.n	800ce74 <GUI_PollKeyMsg+0x2c>
 800ce72:	2400      	movs	r4, #0
 800ce74:	f7ff fd92 	bl	800c99c <GUI_Unlock>
 800ce78:	4620      	mov	r0, r4
 800ce7a:	bd10      	pop	{r4, pc}
 800ce7c:	200002bc 	.word	0x200002bc
 800ce80:	200002b8 	.word	0x200002b8
 800ce84:	20008558 	.word	0x20008558

0800ce88 <GUI_MoveRect>:
 800ce88:	b168      	cbz	r0, 800cea6 <GUI_MoveRect+0x1e>
 800ce8a:	8803      	ldrh	r3, [r0, #0]
 800ce8c:	b289      	uxth	r1, r1
 800ce8e:	440b      	add	r3, r1
 800ce90:	8003      	strh	r3, [r0, #0]
 800ce92:	8883      	ldrh	r3, [r0, #4]
 800ce94:	4419      	add	r1, r3
 800ce96:	8843      	ldrh	r3, [r0, #2]
 800ce98:	8081      	strh	r1, [r0, #4]
 800ce9a:	b292      	uxth	r2, r2
 800ce9c:	4413      	add	r3, r2
 800ce9e:	8043      	strh	r3, [r0, #2]
 800cea0:	88c3      	ldrh	r3, [r0, #6]
 800cea2:	441a      	add	r2, r3
 800cea4:	80c2      	strh	r2, [r0, #6]
 800cea6:	4770      	bx	lr

0800cea8 <GUI_MergeRect>:
 800cea8:	b510      	push	{r4, lr}
 800ceaa:	b338      	cbz	r0, 800cefc <GUI_MergeRect+0x54>
 800ceac:	b309      	cbz	r1, 800cef2 <GUI_MergeRect+0x4a>
 800ceae:	b30a      	cbz	r2, 800cef4 <GUI_MergeRect+0x4c>
 800ceb0:	f9b1 4000 	ldrsh.w	r4, [r1]
 800ceb4:	f9b2 3000 	ldrsh.w	r3, [r2]
 800ceb8:	429c      	cmp	r4, r3
 800ceba:	bfb8      	it	lt
 800cebc:	4623      	movlt	r3, r4
 800cebe:	8003      	strh	r3, [r0, #0]
 800cec0:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800cec4:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800cec8:	429c      	cmp	r4, r3
 800ceca:	bfb8      	it	lt
 800cecc:	4623      	movlt	r3, r4
 800cece:	8043      	strh	r3, [r0, #2]
 800ced0:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800ced4:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800ced8:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800cedc:	429c      	cmp	r4, r3
 800cede:	bfa8      	it	ge
 800cee0:	4623      	movge	r3, r4
 800cee2:	8083      	strh	r3, [r0, #4]
 800cee4:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800cee8:	4299      	cmp	r1, r3
 800ceea:	bfa8      	it	ge
 800ceec:	460b      	movge	r3, r1
 800ceee:	80c3      	strh	r3, [r0, #6]
 800cef0:	bd10      	pop	{r4, pc}
 800cef2:	4611      	mov	r1, r2
 800cef4:	680b      	ldr	r3, [r1, #0]
 800cef6:	6003      	str	r3, [r0, #0]
 800cef8:	684b      	ldr	r3, [r1, #4]
 800cefa:	6043      	str	r3, [r0, #4]
 800cefc:	bd10      	pop	{r4, pc}
	...

0800cf00 <GUI_MULTIBUF_BeginEx>:
 800cf00:	4b1a      	ldr	r3, [pc, #104]	; (800cf6c <GUI_MULTIBUF_BeginEx+0x6c>)
 800cf02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4a1a      	ldr	r2, [pc, #104]	; (800cf70 <GUI_MULTIBUF_BeginEx+0x70>)
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	bf0c      	ite	eq
 800cf0c:	4603      	moveq	r3, r0
 800cf0e:	2300      	movne	r3, #0
 800cf10:	56d2      	ldrsb	r2, [r2, r3]
 800cf12:	2a01      	cmp	r2, #1
 800cf14:	dd28      	ble.n	800cf68 <GUI_MULTIBUF_BeginEx+0x68>
 800cf16:	4c17      	ldr	r4, [pc, #92]	; (800cf74 <GUI_MULTIBUF_BeginEx+0x74>)
 800cf18:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800cf1c:	1c4d      	adds	r5, r1, #1
 800cf1e:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800cf22:	bb09      	cbnz	r1, 800cf68 <GUI_MULTIBUF_BeginEx+0x68>
 800cf24:	4d14      	ldr	r5, [pc, #80]	; (800cf78 <GUI_MULTIBUF_BeginEx+0x78>)
 800cf26:	4915      	ldr	r1, [pc, #84]	; (800cf7c <GUI_MULTIBUF_BeginEx+0x7c>)
 800cf28:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
 800cf2c:	f851 7023 	ldr.w	r7, [r1, r3, lsl #2]
 800cf30:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800cf34:	4910      	ldr	r1, [pc, #64]	; (800cf78 <GUI_MULTIBUF_BeginEx+0x78>)
 800cf36:	3401      	adds	r4, #1
 800cf38:	4294      	cmp	r4, r2
 800cf3a:	bf08      	it	eq
 800cf3c:	2400      	moveq	r4, #0
 800cf3e:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 800cf42:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800cf46:	42bc      	cmp	r4, r7
 800cf48:	d0f2      	beq.n	800cf30 <GUI_MULTIBUF_BeginEx+0x30>
 800cf4a:	f000 fcef 	bl	800d92c <GUI_DEVICE__GetpDriver>
 800cf4e:	9001      	str	r0, [sp, #4]
 800cf50:	b150      	cbz	r0, 800cf68 <GUI_MULTIBUF_BeginEx+0x68>
 800cf52:	68c3      	ldr	r3, [r0, #12]
 800cf54:	2121      	movs	r1, #33	; 0x21
 800cf56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf58:	a801      	add	r0, sp, #4
 800cf5a:	4798      	blx	r3
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	b118      	cbz	r0, 800cf68 <GUI_MULTIBUF_BeginEx+0x68>
 800cf60:	9801      	ldr	r0, [sp, #4]
 800cf62:	4631      	mov	r1, r6
 800cf64:	4622      	mov	r2, r4
 800cf66:	4798      	blx	r3
 800cf68:	b003      	add	sp, #12
 800cf6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf6c:	20008580 	.word	0x20008580
 800cf70:	20028856 	.word	0x20028856
 800cf74:	20008578 	.word	0x20008578
 800cf78:	20008570 	.word	0x20008570
 800cf7c:	20008560 	.word	0x20008560

0800cf80 <GUI_MULTIBUF_Begin>:
 800cf80:	4b02      	ldr	r3, [pc, #8]	; (800cf8c <GUI_MULTIBUF_Begin+0xc>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	7c58      	ldrb	r0, [r3, #17]
 800cf86:	f7ff bfbb 	b.w	800cf00 <GUI_MULTIBUF_BeginEx>
 800cf8a:	bf00      	nop
 800cf8c:	200002c4 	.word	0x200002c4

0800cf90 <GUI_MULTIBUF_EndEx>:
 800cf90:	4b13      	ldr	r3, [pc, #76]	; (800cfe0 <GUI_MULTIBUF_EndEx+0x50>)
 800cf92:	4a14      	ldr	r2, [pc, #80]	; (800cfe4 <GUI_MULTIBUF_EndEx+0x54>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	b513      	push	{r0, r1, r4, lr}
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	bf0c      	ite	eq
 800cf9c:	4603      	moveq	r3, r0
 800cf9e:	2300      	movne	r3, #0
 800cfa0:	56d2      	ldrsb	r2, [r2, r3]
 800cfa2:	2a01      	cmp	r2, #1
 800cfa4:	dd1a      	ble.n	800cfdc <GUI_MULTIBUF_EndEx+0x4c>
 800cfa6:	4910      	ldr	r1, [pc, #64]	; (800cfe8 <GUI_MULTIBUF_EndEx+0x58>)
 800cfa8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800cfac:	3a01      	subs	r2, #1
 800cfae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cfb2:	b99a      	cbnz	r2, 800cfdc <GUI_MULTIBUF_EndEx+0x4c>
 800cfb4:	4a0d      	ldr	r2, [pc, #52]	; (800cfec <GUI_MULTIBUF_EndEx+0x5c>)
 800cfb6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cfba:	4a0d      	ldr	r2, [pc, #52]	; (800cff0 <GUI_MULTIBUF_EndEx+0x60>)
 800cfbc:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800cfc0:	f000 fcb4 	bl	800d92c <GUI_DEVICE__GetpDriver>
 800cfc4:	9001      	str	r0, [sp, #4]
 800cfc6:	b148      	cbz	r0, 800cfdc <GUI_MULTIBUF_EndEx+0x4c>
 800cfc8:	68c3      	ldr	r3, [r0, #12]
 800cfca:	2122      	movs	r1, #34	; 0x22
 800cfcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfce:	a801      	add	r0, sp, #4
 800cfd0:	4798      	blx	r3
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	b110      	cbz	r0, 800cfdc <GUI_MULTIBUF_EndEx+0x4c>
 800cfd6:	9801      	ldr	r0, [sp, #4]
 800cfd8:	4621      	mov	r1, r4
 800cfda:	4798      	blx	r3
 800cfdc:	b002      	add	sp, #8
 800cfde:	bd10      	pop	{r4, pc}
 800cfe0:	20008580 	.word	0x20008580
 800cfe4:	20028856 	.word	0x20028856
 800cfe8:	20008578 	.word	0x20008578
 800cfec:	20008570 	.word	0x20008570
 800cff0:	20008568 	.word	0x20008568

0800cff4 <GUI_MULTIBUF_End>:
 800cff4:	4b02      	ldr	r3, [pc, #8]	; (800d000 <GUI_MULTIBUF_End+0xc>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	7c58      	ldrb	r0, [r3, #17]
 800cffa:	f7ff bfc9 	b.w	800cf90 <GUI_MULTIBUF_EndEx>
 800cffe:	bf00      	nop
 800d000:	200002c4 	.word	0x200002c4

0800d004 <GUI_MULTIBUF_ConfirmEx>:
 800d004:	4b08      	ldr	r3, [pc, #32]	; (800d028 <GUI_MULTIBUF_ConfirmEx+0x24>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	bf18      	it	ne
 800d00c:	2000      	movne	r0, #0
 800d00e:	4b07      	ldr	r3, [pc, #28]	; (800d02c <GUI_MULTIBUF_ConfirmEx+0x28>)
 800d010:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800d014:	2a00      	cmp	r2, #0
 800d016:	db06      	blt.n	800d026 <GUI_MULTIBUF_ConfirmEx+0x22>
 800d018:	4a05      	ldr	r2, [pc, #20]	; (800d030 <GUI_MULTIBUF_ConfirmEx+0x2c>)
 800d01a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 800d01e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d022:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 800d026:	4770      	bx	lr
 800d028:	20008580 	.word	0x20008580
 800d02c:	20008568 	.word	0x20008568
 800d030:	20008560 	.word	0x20008560

0800d034 <GUI_MULTIBUF_ConfigEx>:
 800d034:	4b05      	ldr	r3, [pc, #20]	; (800d04c <GUI_MULTIBUF_ConfigEx+0x18>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	bf18      	it	ne
 800d03c:	2000      	movne	r0, #0
 800d03e:	4b04      	ldr	r3, [pc, #16]	; (800d050 <GUI_MULTIBUF_ConfigEx+0x1c>)
 800d040:	2901      	cmp	r1, #1
 800d042:	bfb8      	it	lt
 800d044:	2101      	movlt	r1, #1
 800d046:	5419      	strb	r1, [r3, r0]
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	20008580 	.word	0x20008580
 800d050:	20028856 	.word	0x20028856

0800d054 <GUI_GotoXY>:
 800d054:	b538      	push	{r3, r4, r5, lr}
 800d056:	4604      	mov	r4, r0
 800d058:	460d      	mov	r5, r1
 800d05a:	f7ff fca9 	bl	800c9b0 <GUI_Lock>
 800d05e:	4b04      	ldr	r3, [pc, #16]	; (800d070 <GUI_GotoXY+0x1c>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	845c      	strh	r4, [r3, #34]	; 0x22
 800d064:	849d      	strh	r5, [r3, #36]	; 0x24
 800d066:	f7ff fc99 	bl	800c99c <GUI_Unlock>
 800d06a:	2000      	movs	r0, #0
 800d06c:	bd38      	pop	{r3, r4, r5, pc}
 800d06e:	bf00      	nop
 800d070:	200002c4 	.word	0x200002c4

0800d074 <GUI_GetOrg>:
 800d074:	b538      	push	{r3, r4, r5, lr}
 800d076:	4604      	mov	r4, r0
 800d078:	460d      	mov	r5, r1
 800d07a:	f7ff fc99 	bl	800c9b0 <GUI_Lock>
 800d07e:	4b06      	ldr	r3, [pc, #24]	; (800d098 <GUI_GetOrg+0x24>)
 800d080:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d084:	6023      	str	r3, [r4, #0]
 800d086:	4b05      	ldr	r3, [pc, #20]	; (800d09c <GUI_GetOrg+0x28>)
 800d088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d08c:	602b      	str	r3, [r5, #0]
 800d08e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d092:	f7ff bc83 	b.w	800c99c <GUI_Unlock>
 800d096:	bf00      	nop
 800d098:	2002882c 	.word	0x2002882c
 800d09c:	20028854 	.word	0x20028854

0800d0a0 <GUI_GetDrawMode>:
 800d0a0:	b510      	push	{r4, lr}
 800d0a2:	f7ff fc85 	bl	800c9b0 <GUI_Lock>
 800d0a6:	4b03      	ldr	r3, [pc, #12]	; (800d0b4 <GUI_GetDrawMode+0x14>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	7c1c      	ldrb	r4, [r3, #16]
 800d0ac:	f7ff fc76 	bl	800c99c <GUI_Unlock>
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	bd10      	pop	{r4, pc}
 800d0b4:	200002c4 	.word	0x200002c4

0800d0b8 <GUI_GetClientRect>:
 800d0b8:	b108      	cbz	r0, 800d0be <GUI_GetClientRect+0x6>
 800d0ba:	f7fa bb49 	b.w	8007750 <WM_GetClientRect>
 800d0be:	4770      	bx	lr

0800d0c0 <GUI_FillRectEx>:
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	f9b0 0000 	ldrsh.w	r0, [r0]
 800d0c6:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800d0ca:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800d0ce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d0d2:	f000 b801 	b.w	800d0d8 <GUI_FillRect>
	...

0800d0d8 <GUI_FillRect>:
 800d0d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0dc:	4607      	mov	r7, r0
 800d0de:	4699      	mov	r9, r3
 800d0e0:	460e      	mov	r6, r1
 800d0e2:	4690      	mov	r8, r2
 800d0e4:	f7ff fc64 	bl	800c9b0 <GUI_Lock>
 800d0e8:	4b11      	ldr	r3, [pc, #68]	; (800d130 <GUI_FillRect+0x58>)
 800d0ea:	681c      	ldr	r4, [r3, #0]
 800d0ec:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800d0ee:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d0f0:	442f      	add	r7, r5
 800d0f2:	4406      	add	r6, r0
 800d0f4:	eb09 0400 	add.w	r4, r9, r0
 800d0f8:	4445      	add	r5, r8
 800d0fa:	4668      	mov	r0, sp
 800d0fc:	f8ad 7000 	strh.w	r7, [sp]
 800d100:	f8ad 5004 	strh.w	r5, [sp, #4]
 800d104:	f8ad 6002 	strh.w	r6, [sp, #2]
 800d108:	f8ad 4006 	strh.w	r4, [sp, #6]
 800d10c:	f7fb fa6a 	bl	80085e4 <WM__InitIVRSearch>
 800d110:	b920      	cbnz	r0, 800d11c <GUI_FillRect+0x44>
 800d112:	f7ff fc43 	bl	800c99c <GUI_Unlock>
 800d116:	b003      	add	sp, #12
 800d118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d11c:	4638      	mov	r0, r7
 800d11e:	4631      	mov	r1, r6
 800d120:	462a      	mov	r2, r5
 800d122:	4623      	mov	r3, r4
 800d124:	f7fe fbb0 	bl	800b888 <LCD_FillRect>
 800d128:	f7fb f99a 	bl	8008460 <WM__GetNextIVR>
 800d12c:	e7f0      	b.n	800d110 <GUI_FillRect+0x38>
 800d12e:	bf00      	nop
 800d130:	200002c4 	.word	0x200002c4

0800d134 <GUI_Exec1>:
 800d134:	4b0a      	ldr	r3, [pc, #40]	; (800d160 <GUI_Exec1+0x2c>)
 800d136:	b510      	push	{r4, lr}
 800d138:	681c      	ldr	r4, [r3, #0]
 800d13a:	b11c      	cbz	r4, 800d144 <GUI_Exec1+0x10>
 800d13c:	47a0      	blx	r4
 800d13e:	1c04      	adds	r4, r0, #0
 800d140:	bf18      	it	ne
 800d142:	2401      	movne	r4, #1
 800d144:	f7fb fb74 	bl	8008830 <WM_Exec>
 800d148:	4b06      	ldr	r3, [pc, #24]	; (800d164 <GUI_Exec1+0x30>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2800      	cmp	r0, #0
 800d14e:	bf18      	it	ne
 800d150:	2401      	movne	r4, #1
 800d152:	b11b      	cbz	r3, 800d15c <GUI_Exec1+0x28>
 800d154:	4798      	blx	r3
 800d156:	2800      	cmp	r0, #0
 800d158:	bf18      	it	ne
 800d15a:	2401      	movne	r4, #1
 800d15c:	4620      	mov	r0, r4
 800d15e:	bd10      	pop	{r4, pc}
 800d160:	2002884c 	.word	0x2002884c
 800d164:	20028834 	.word	0x20028834

0800d168 <GUI_Exec>:
 800d168:	b510      	push	{r4, lr}
 800d16a:	2400      	movs	r4, #0
 800d16c:	f7ff ffe2 	bl	800d134 <GUI_Exec1>
 800d170:	b108      	cbz	r0, 800d176 <GUI_Exec+0xe>
 800d172:	2401      	movs	r4, #1
 800d174:	e7fa      	b.n	800d16c <GUI_Exec+0x4>
 800d176:	4620      	mov	r0, r4
 800d178:	bd10      	pop	{r4, pc}
	...

0800d17c <GUIPROP_EXT__DispLine>:
 800d17c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d17e:	4e0d      	ldr	r6, [pc, #52]	; (800d1b4 <GUIPROP_EXT__DispLine+0x38>)
 800d180:	9001      	str	r0, [sp, #4]
 800d182:	6833      	ldr	r3, [r6, #0]
 800d184:	8d5d      	ldrh	r5, [r3, #42]	; 0x2a
 800d186:	07ab      	lsls	r3, r5, #30
 800d188:	460c      	mov	r4, r1
 800d18a:	d102      	bne.n	800d192 <GUIPROP_EXT__DispLine+0x16>
 800d18c:	4b0a      	ldr	r3, [pc, #40]	; (800d1b8 <GUIPROP_EXT__DispLine+0x3c>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4798      	blx	r3
 800d192:	3c01      	subs	r4, #1
 800d194:	d407      	bmi.n	800d1a6 <GUIPROP_EXT__DispLine+0x2a>
 800d196:	a801      	add	r0, sp, #4
 800d198:	f005 f8f2 	bl	8012380 <GUI_UC__GetCharCodeInc>
 800d19c:	6833      	ldr	r3, [r6, #0]
 800d19e:	69db      	ldr	r3, [r3, #28]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4798      	blx	r3
 800d1a4:	e7f5      	b.n	800d192 <GUIPROP_EXT__DispLine+0x16>
 800d1a6:	4b05      	ldr	r3, [pc, #20]	; (800d1bc <GUIPROP_EXT__DispLine+0x40>)
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	701a      	strb	r2, [r3, #0]
 800d1ac:	6833      	ldr	r3, [r6, #0]
 800d1ae:	855d      	strh	r5, [r3, #42]	; 0x2a
 800d1b0:	b002      	add	sp, #8
 800d1b2:	bd70      	pop	{r4, r5, r6, pc}
 800d1b4:	200002c4 	.word	0x200002c4
 800d1b8:	200002c0 	.word	0x200002c0
 800d1bc:	20028820 	.word	0x20028820

0800d1c0 <GUIPROP_EXT__ClearLine>:
 800d1c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d1c4:	4e34      	ldr	r6, [pc, #208]	; (800d298 <GUIPROP_EXT__ClearLine+0xd8>)
 800d1c6:	9001      	str	r0, [sp, #4]
 800d1c8:	6833      	ldr	r3, [r6, #0]
 800d1ca:	69da      	ldr	r2, [r3, #28]
 800d1cc:	f892 8019 	ldrb.w	r8, [r2, #25]
 800d1d0:	7ed3      	ldrb	r3, [r2, #27]
 800d1d2:	2400      	movs	r4, #0
 800d1d4:	460f      	mov	r7, r1
 800d1d6:	fb18 f803 	smulbb	r8, r8, r3
 800d1da:	4625      	mov	r5, r4
 800d1dc:	3f01      	subs	r7, #1
 800d1de:	d41e      	bmi.n	800d21e <GUIPROP_EXT__ClearLine+0x5e>
 800d1e0:	a801      	add	r0, sp, #4
 800d1e2:	f005 f8cd 	bl	8012380 <GUI_UC__GetCharCodeInc>
 800d1e6:	6833      	ldr	r3, [r6, #0]
 800d1e8:	69db      	ldr	r3, [r3, #28]
 800d1ea:	4605      	mov	r5, r0
 800d1ec:	4629      	mov	r1, r5
 800d1ee:	69d8      	ldr	r0, [r3, #28]
 800d1f0:	f000 fd8c 	bl	800dd0c <GUIPROP_EXT__FindChar>
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	d0f1      	beq.n	800d1dc <GUIPROP_EXT__ClearLine+0x1c>
 800d1f8:	8802      	ldrh	r2, [r0, #0]
 800d1fa:	6843      	ldr	r3, [r0, #4]
 800d1fc:	210c      	movs	r1, #12
 800d1fe:	1aaa      	subs	r2, r5, r2
 800d200:	fb01 3202 	mla	r2, r1, r2, r3
 800d204:	f992 1002 	ldrsb.w	r1, [r2, #2]
 800d208:	7913      	ldrb	r3, [r2, #4]
 800d20a:	4a23      	ldr	r2, [pc, #140]	; (800d298 <GUIPROP_EXT__ClearLine+0xd8>)
 800d20c:	6812      	ldr	r2, [r2, #0]
 800d20e:	69d2      	ldr	r2, [r2, #28]
 800d210:	7e92      	ldrb	r2, [r2, #26]
 800d212:	440b      	add	r3, r1
 800d214:	4353      	muls	r3, r2
 800d216:	2b00      	cmp	r3, #0
 800d218:	bfc8      	it	gt
 800d21a:	18e4      	addgt	r4, r4, r3
 800d21c:	e7de      	b.n	800d1dc <GUIPROP_EXT__ClearLine+0x1c>
 800d21e:	b11d      	cbz	r5, 800d228 <GUIPROP_EXT__ClearLine+0x68>
 800d220:	4628      	mov	r0, r5
 800d222:	f000 fec9 	bl	800dfb8 <GUI__GetOverlap>
 800d226:	4404      	add	r4, r0
 800d228:	6833      	ldr	r3, [r6, #0]
 800d22a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800d22c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d22e:	f8ad 300a 	strh.w	r3, [sp, #10]
 800d232:	3b01      	subs	r3, #1
 800d234:	4498      	add	r8, r3
 800d236:	4b19      	ldr	r3, [pc, #100]	; (800d29c <GUIPROP_EXT__ClearLine+0xdc>)
 800d238:	f8ad 2008 	strh.w	r2, [sp, #8]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f8ad 800e 	strh.w	r8, [sp, #14]
 800d242:	3a01      	subs	r2, #1
 800d244:	4414      	add	r4, r2
 800d246:	f8ad 400c 	strh.w	r4, [sp, #12]
 800d24a:	b11b      	cbz	r3, 800d254 <GUIPROP_EXT__ClearLine+0x94>
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	b10b      	cbz	r3, 800d254 <GUIPROP_EXT__ClearLine+0x94>
 800d250:	a802      	add	r0, sp, #8
 800d252:	4798      	blx	r3
 800d254:	f005 fce6 	bl	8012c24 <GUI_GetColor>
 800d258:	6833      	ldr	r3, [r6, #0]
 800d25a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d25c:	075b      	lsls	r3, r3, #29
 800d25e:	4604      	mov	r4, r0
 800d260:	d502      	bpl.n	800d268 <GUIPROP_EXT__ClearLine+0xa8>
 800d262:	f005 fcdf 	bl	8012c24 <GUI_GetColor>
 800d266:	e001      	b.n	800d26c <GUIPROP_EXT__ClearLine+0xac>
 800d268:	f005 fcd0 	bl	8012c0c <GUI_GetBkColor>
 800d26c:	f7ff fc9d 	bl	800cbaa <GUI_SetColor>
 800d270:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800d274:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800d278:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 800d27c:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 800d280:	f7fe fb02 	bl	800b888 <LCD_FillRect>
 800d284:	4620      	mov	r0, r4
 800d286:	f7ff fc90 	bl	800cbaa <GUI_SetColor>
 800d28a:	4b05      	ldr	r3, [pc, #20]	; (800d2a0 <GUIPROP_EXT__ClearLine+0xe0>)
 800d28c:	2201      	movs	r2, #1
 800d28e:	701a      	strb	r2, [r3, #0]
 800d290:	b004      	add	sp, #16
 800d292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d296:	bf00      	nop
 800d298:	200002c4 	.word	0x200002c4
 800d29c:	20028850 	.word	0x20028850
 800d2a0:	20028820 	.word	0x20028820

0800d2a4 <GUI_DrawVLine>:
 800d2a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2a6:	4607      	mov	r7, r0
 800d2a8:	460d      	mov	r5, r1
 800d2aa:	4614      	mov	r4, r2
 800d2ac:	f7ff fb80 	bl	800c9b0 <GUI_Lock>
 800d2b0:	4b0f      	ldr	r3, [pc, #60]	; (800d2f0 <GUI_DrawVLine+0x4c>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 800d2b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2b8:	443e      	add	r6, r7
 800d2ba:	441d      	add	r5, r3
 800d2bc:	441c      	add	r4, r3
 800d2be:	4668      	mov	r0, sp
 800d2c0:	b2b3      	uxth	r3, r6
 800d2c2:	f8ad 3000 	strh.w	r3, [sp]
 800d2c6:	f8ad 3004 	strh.w	r3, [sp, #4]
 800d2ca:	f8ad 5002 	strh.w	r5, [sp, #2]
 800d2ce:	f8ad 4006 	strh.w	r4, [sp, #6]
 800d2d2:	f7fb f987 	bl	80085e4 <WM__InitIVRSearch>
 800d2d6:	b918      	cbnz	r0, 800d2e0 <GUI_DrawVLine+0x3c>
 800d2d8:	f7ff fb60 	bl	800c99c <GUI_Unlock>
 800d2dc:	b003      	add	sp, #12
 800d2de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	4629      	mov	r1, r5
 800d2e4:	4622      	mov	r2, r4
 800d2e6:	f7fe faa9 	bl	800b83c <LCD_DrawVLine>
 800d2ea:	f7fb f8b9 	bl	8008460 <WM__GetNextIVR>
 800d2ee:	e7f2      	b.n	800d2d6 <GUI_DrawVLine+0x32>
 800d2f0:	200002c4 	.word	0x200002c4

0800d2f4 <GUI_DrawRectEx>:
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	f9b0 0000 	ldrsh.w	r0, [r0]
 800d2fa:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800d2fe:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800d302:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d306:	f001 bad9 	b.w	800e8bc <GUI_DrawRect>
	...

0800d30c <GUI_DrawHLine>:
 800d30c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d310:	4f14      	ldr	r7, [pc, #80]	; (800d364 <GUI_DrawHLine+0x58>)
 800d312:	4605      	mov	r5, r0
 800d314:	4690      	mov	r8, r2
 800d316:	460e      	mov	r6, r1
 800d318:	f7ff fb4a 	bl	800c9b0 <GUI_Lock>
 800d31c:	683c      	ldr	r4, [r7, #0]
 800d31e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d320:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d322:	4415      	add	r5, r2
 800d324:	441e      	add	r6, r3
 800d326:	eb08 0403 	add.w	r4, r8, r3
 800d32a:	4668      	mov	r0, sp
 800d32c:	b2ab      	uxth	r3, r5
 800d32e:	f8ad 6000 	strh.w	r6, [sp]
 800d332:	f8ad 4004 	strh.w	r4, [sp, #4]
 800d336:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d33a:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d33e:	f7fb f951 	bl	80085e4 <WM__InitIVRSearch>
 800d342:	b920      	cbnz	r0, 800d34e <GUI_DrawHLine+0x42>
 800d344:	f7ff fb2a 	bl	800c99c <GUI_Unlock>
 800d348:	b002      	add	sp, #8
 800d34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d352:	4630      	mov	r0, r6
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4629      	mov	r1, r5
 800d358:	4622      	mov	r2, r4
 800d35a:	4798      	blx	r3
 800d35c:	f7fb f880 	bl	8008460 <WM__GetNextIVR>
 800d360:	e7ef      	b.n	800d342 <GUI_DrawHLine+0x36>
 800d362:	bf00      	nop
 800d364:	200002c4 	.word	0x200002c4

0800d368 <_DrawGradient>:
 800d368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d36c:	b091      	sub	sp, #68	; 0x44
 800d36e:	4605      	mov	r5, r0
 800d370:	4689      	mov	r9, r1
 800d372:	981c      	ldr	r0, [sp, #112]	; 0x70
 800d374:	991d      	ldr	r1, [sp, #116]	; 0x74
 800d376:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 800d37a:	9002      	str	r0, [sp, #8]
 800d37c:	4614      	mov	r4, r2
 800d37e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d380:	9200      	str	r2, [sp, #0]
 800d382:	461e      	mov	r6, r3
 800d384:	9101      	str	r1, [sp, #4]
 800d386:	f005 fc4d 	bl	8012c24 <GUI_GetColor>
 800d38a:	9a00      	ldr	r2, [sp, #0]
 800d38c:	900b      	str	r0, [sp, #44]	; 0x2c
 800d38e:	4542      	cmp	r2, r8
 800d390:	d109      	bne.n	800d3a6 <_DrawGradient+0x3e>
 800d392:	4610      	mov	r0, r2
 800d394:	f7fe fd48 	bl	800be28 <LCD_SetColor>
 800d398:	9a01      	ldr	r2, [sp, #4]
 800d39a:	b112      	cbz	r2, 800d3a2 <_DrawGradient+0x3a>
 800d39c:	4628      	mov	r0, r5
 800d39e:	4649      	mov	r1, r9
 800d3a0:	e0b5      	b.n	800d50e <_DrawGradient+0x1a6>
 800d3a2:	4648      	mov	r0, r9
 800d3a4:	e0b9      	b.n	800d51a <_DrawGradient+0x1b2>
 800d3a6:	fa5f fc82 	uxtb.w	ip, r2
 800d3aa:	f8cd c018 	str.w	ip, [sp, #24]
 800d3ae:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 800d3b2:	f8cd c01c 	str.w	ip, [sp, #28]
 800d3b6:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d3ba:	f8cd c020 	str.w	ip, [sp, #32]
 800d3be:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 800d3c2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d3c6:	f8dd c018 	ldr.w	ip, [sp, #24]
 800d3ca:	fa5f f388 	uxtb.w	r3, r8
 800d3ce:	ebcc 0303 	rsb	r3, ip, r3
 800d3d2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800d3d6:	930d      	str	r3, [sp, #52]	; 0x34
 800d3d8:	f3c8 2307 	ubfx	r3, r8, #8, #8
 800d3dc:	ebcc 0303 	rsb	r3, ip, r3
 800d3e0:	f8dd c020 	ldr.w	ip, [sp, #32]
 800d3e4:	930c      	str	r3, [sp, #48]	; 0x30
 800d3e6:	f3c8 4307 	ubfx	r3, r8, #16, #8
 800d3ea:	ebcc 0303 	rsb	r3, ip, r3
 800d3ee:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800d3f2:	930e      	str	r3, [sp, #56]	; 0x38
 800d3f4:	ebcc 6818 	rsb	r8, ip, r8, lsr #24
 800d3f8:	ebb6 0709 	subs.w	r7, r6, r9
 800d3fc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800d400:	f04f 0800 	mov.w	r8, #0
 800d404:	bf08      	it	eq
 800d406:	2701      	moveq	r7, #1
 800d408:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800d40c:	f8cd 8010 	str.w	r8, [sp, #16]
 800d410:	f8cd 800c 	str.w	r8, [sp, #12]
 800d414:	f8cd 8014 	str.w	r8, [sp, #20]
 800d418:	f04f 0a01 	mov.w	sl, #1
 800d41c:	f103 0b01 	add.w	fp, r3, #1
 800d420:	45b3      	cmp	fp, r6
 800d422:	dc68      	bgt.n	800d4f6 <_DrawGradient+0x18e>
 800d424:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800d428:	fb98 f1f7 	sdiv	r1, r8, r7
 800d42c:	4461      	add	r1, ip
 800d42e:	f8dd c010 	ldr.w	ip, [sp, #16]
 800d432:	fb9c f0f7 	sdiv	r0, ip, r7
 800d436:	f8dd c020 	ldr.w	ip, [sp, #32]
 800d43a:	4460      	add	r0, ip
 800d43c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d440:	fb9c fef7 	sdiv	lr, ip, r7
 800d444:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800d448:	b2c0      	uxtb	r0, r0
 800d44a:	44e6      	add	lr, ip
 800d44c:	f8dd c014 	ldr.w	ip, [sp, #20]
 800d450:	0400      	lsls	r0, r0, #16
 800d452:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 800d456:	fb9c f1f7 	sdiv	r1, ip, r7
 800d45a:	f8dd c018 	ldr.w	ip, [sp, #24]
 800d45e:	4461      	add	r1, ip
 800d460:	fa5f fe8e 	uxtb.w	lr, lr
 800d464:	b2c9      	uxtb	r1, r1
 800d466:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 800d46a:	4301      	orrs	r1, r0
 800d46c:	45cb      	cmp	fp, r9
 800d46e:	910a      	str	r1, [sp, #40]	; 0x28
 800d470:	dd26      	ble.n	800d4c0 <_DrawGradient+0x158>
 800d472:	4291      	cmp	r1, r2
 800d474:	d102      	bne.n	800d47c <_DrawGradient+0x114>
 800d476:	f10a 0a01 	add.w	sl, sl, #1
 800d47a:	e021      	b.n	800d4c0 <_DrawGradient+0x158>
 800d47c:	4610      	mov	r0, r2
 800d47e:	9300      	str	r3, [sp, #0]
 800d480:	f7fe fcd2 	bl	800be28 <LCD_SetColor>
 800d484:	f1ba 0f01 	cmp.w	sl, #1
 800d488:	9b00      	ldr	r3, [sp, #0]
 800d48a:	d00f      	beq.n	800d4ac <_DrawGradient+0x144>
 800d48c:	9801      	ldr	r0, [sp, #4]
 800d48e:	ebca 010b 	rsb	r1, sl, fp
 800d492:	b110      	cbz	r0, 800d49a <_DrawGradient+0x132>
 800d494:	4628      	mov	r0, r5
 800d496:	4622      	mov	r2, r4
 800d498:	e003      	b.n	800d4a2 <_DrawGradient+0x13a>
 800d49a:	4608      	mov	r0, r1
 800d49c:	461a      	mov	r2, r3
 800d49e:	4629      	mov	r1, r5
 800d4a0:	4623      	mov	r3, r4
 800d4a2:	f7fe f9f1 	bl	800b888 <LCD_FillRect>
 800d4a6:	f04f 0a01 	mov.w	sl, #1
 800d4aa:	e009      	b.n	800d4c0 <_DrawGradient+0x158>
 800d4ac:	9901      	ldr	r1, [sp, #4]
 800d4ae:	b111      	cbz	r1, 800d4b6 <_DrawGradient+0x14e>
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	e001      	b.n	800d4ba <_DrawGradient+0x152>
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	4629      	mov	r1, r5
 800d4ba:	4622      	mov	r2, r4
 800d4bc:	9b02      	ldr	r3, [sp, #8]
 800d4be:	4798      	blx	r3
 800d4c0:	f8dd c014 	ldr.w	ip, [sp, #20]
 800d4c4:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 800d4c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4ca:	44f4      	add	ip, lr
 800d4cc:	f8cd c014 	str.w	ip, [sp, #20]
 800d4d0:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800d4d4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d4d8:	44f4      	add	ip, lr
 800d4da:	f8cd c00c 	str.w	ip, [sp, #12]
 800d4de:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 800d4e2:	f8dd c010 	ldr.w	ip, [sp, #16]
 800d4e6:	44f4      	add	ip, lr
 800d4e8:	f8cd c010 	str.w	ip, [sp, #16]
 800d4ec:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800d4f0:	465b      	mov	r3, fp
 800d4f2:	44e0      	add	r8, ip
 800d4f4:	e792      	b.n	800d41c <_DrawGradient+0xb4>
 800d4f6:	4610      	mov	r0, r2
 800d4f8:	f7fe fc96 	bl	800be28 <LCD_SetColor>
 800d4fc:	f1ba 0f01 	cmp.w	sl, #1
 800d500:	d00f      	beq.n	800d522 <_DrawGradient+0x1ba>
 800d502:	9801      	ldr	r0, [sp, #4]
 800d504:	ebca 0106 	rsb	r1, sl, r6
 800d508:	b130      	cbz	r0, 800d518 <_DrawGradient+0x1b0>
 800d50a:	4628      	mov	r0, r5
 800d50c:	3101      	adds	r1, #1
 800d50e:	4622      	mov	r2, r4
 800d510:	4633      	mov	r3, r6
 800d512:	f7fe f9b9 	bl	800b888 <LCD_FillRect>
 800d516:	e00e      	b.n	800d536 <_DrawGradient+0x1ce>
 800d518:	1c48      	adds	r0, r1, #1
 800d51a:	4629      	mov	r1, r5
 800d51c:	4632      	mov	r2, r6
 800d51e:	4623      	mov	r3, r4
 800d520:	e7f7      	b.n	800d512 <_DrawGradient+0x1aa>
 800d522:	9901      	ldr	r1, [sp, #4]
 800d524:	b111      	cbz	r1, 800d52c <_DrawGradient+0x1c4>
 800d526:	4628      	mov	r0, r5
 800d528:	4631      	mov	r1, r6
 800d52a:	e001      	b.n	800d530 <_DrawGradient+0x1c8>
 800d52c:	4630      	mov	r0, r6
 800d52e:	4629      	mov	r1, r5
 800d530:	4622      	mov	r2, r4
 800d532:	9b02      	ldr	r3, [sp, #8]
 800d534:	4798      	blx	r3
 800d536:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d538:	b011      	add	sp, #68	; 0x44
 800d53a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d53e:	f7fe bc73 	b.w	800be28 <LCD_SetColor>
	...

0800d544 <GUI_DrawGradientV>:
 800d544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d548:	b087      	sub	sp, #28
 800d54a:	4681      	mov	r9, r0
 800d54c:	469b      	mov	fp, r3
 800d54e:	4688      	mov	r8, r1
 800d550:	4692      	mov	sl, r2
 800d552:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800d554:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d556:	f7ff fa2b 	bl	800c9b0 <GUI_Lock>
 800d55a:	4b14      	ldr	r3, [pc, #80]	; (800d5ac <GUI_DrawGradientV+0x68>)
 800d55c:	681c      	ldr	r4, [r3, #0]
 800d55e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800d560:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d562:	44a9      	add	r9, r5
 800d564:	4480      	add	r8, r0
 800d566:	eb0b 0400 	add.w	r4, fp, r0
 800d56a:	4455      	add	r5, sl
 800d56c:	a804      	add	r0, sp, #16
 800d56e:	f8ad 9010 	strh.w	r9, [sp, #16]
 800d572:	f8ad 5014 	strh.w	r5, [sp, #20]
 800d576:	f8ad 8012 	strh.w	r8, [sp, #18]
 800d57a:	f8ad 4016 	strh.w	r4, [sp, #22]
 800d57e:	f7fb f831 	bl	80085e4 <WM__InitIVRSearch>
 800d582:	b920      	cbnz	r0, 800d58e <GUI_DrawGradientV+0x4a>
 800d584:	f7ff fa0a 	bl	800c99c <GUI_Unlock>
 800d588:	b007      	add	sp, #28
 800d58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d58e:	4b08      	ldr	r3, [pc, #32]	; (800d5b0 <GUI_DrawGradientV+0x6c>)
 800d590:	9302      	str	r3, [sp, #8]
 800d592:	2301      	movs	r3, #1
 800d594:	9303      	str	r3, [sp, #12]
 800d596:	4648      	mov	r0, r9
 800d598:	4641      	mov	r1, r8
 800d59a:	462a      	mov	r2, r5
 800d59c:	4623      	mov	r3, r4
 800d59e:	9700      	str	r7, [sp, #0]
 800d5a0:	9601      	str	r6, [sp, #4]
 800d5a2:	f7ff fee1 	bl	800d368 <_DrawGradient>
 800d5a6:	f7fa ff5b 	bl	8008460 <WM__GetNextIVR>
 800d5aa:	e7ea      	b.n	800d582 <GUI_DrawGradientV+0x3e>
 800d5ac:	200002c4 	.word	0x200002c4
 800d5b0:	0800b7f1 	.word	0x0800b7f1

0800d5b4 <GUI_DrawGradientH>:
 800d5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b8:	b087      	sub	sp, #28
 800d5ba:	4680      	mov	r8, r0
 800d5bc:	469b      	mov	fp, r3
 800d5be:	4689      	mov	r9, r1
 800d5c0:	4692      	mov	sl, r2
 800d5c2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800d5c4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d5c6:	f7ff f9f3 	bl	800c9b0 <GUI_Lock>
 800d5ca:	4b14      	ldr	r3, [pc, #80]	; (800d61c <GUI_DrawGradientH+0x68>)
 800d5cc:	681d      	ldr	r5, [r3, #0]
 800d5ce:	6cec      	ldr	r4, [r5, #76]	; 0x4c
 800d5d0:	6d28      	ldr	r0, [r5, #80]	; 0x50
 800d5d2:	44a0      	add	r8, r4
 800d5d4:	4481      	add	r9, r0
 800d5d6:	eb0b 0500 	add.w	r5, fp, r0
 800d5da:	4454      	add	r4, sl
 800d5dc:	a804      	add	r0, sp, #16
 800d5de:	f8ad 8010 	strh.w	r8, [sp, #16]
 800d5e2:	f8ad 4014 	strh.w	r4, [sp, #20]
 800d5e6:	f8ad 9012 	strh.w	r9, [sp, #18]
 800d5ea:	f8ad 5016 	strh.w	r5, [sp, #22]
 800d5ee:	f7fa fff9 	bl	80085e4 <WM__InitIVRSearch>
 800d5f2:	b920      	cbnz	r0, 800d5fe <GUI_DrawGradientH+0x4a>
 800d5f4:	f7ff f9d2 	bl	800c99c <GUI_Unlock>
 800d5f8:	b007      	add	sp, #28
 800d5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5fe:	4b08      	ldr	r3, [pc, #32]	; (800d620 <GUI_DrawGradientH+0x6c>)
 800d600:	9302      	str	r3, [sp, #8]
 800d602:	2300      	movs	r3, #0
 800d604:	9303      	str	r3, [sp, #12]
 800d606:	4648      	mov	r0, r9
 800d608:	4641      	mov	r1, r8
 800d60a:	462a      	mov	r2, r5
 800d60c:	4623      	mov	r3, r4
 800d60e:	9700      	str	r7, [sp, #0]
 800d610:	9601      	str	r6, [sp, #4]
 800d612:	f7ff fea9 	bl	800d368 <_DrawGradient>
 800d616:	f7fa ff23 	bl	8008460 <WM__GetNextIVR>
 800d61a:	e7ea      	b.n	800d5f2 <GUI_DrawGradientH+0x3e>
 800d61c:	200002c4 	.word	0x200002c4
 800d620:	0800b83d 	.word	0x0800b83d

0800d624 <GUI__DispStringInRect>:
 800d624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d628:	b087      	sub	sp, #28
 800d62a:	460c      	mov	r4, r1
 800d62c:	9001      	str	r0, [sp, #4]
 800d62e:	4691      	mov	r9, r2
 800d630:	461d      	mov	r5, r3
 800d632:	f000 fd73 	bl	800e11c <GUI_GetFontDistY>
 800d636:	9f01      	ldr	r7, [sp, #4]
 800d638:	4680      	mov	r8, r0
 800d63a:	b124      	cbz	r4, 800d646 <GUI__DispStringInRect+0x22>
 800d63c:	6820      	ldr	r0, [r4, #0]
 800d63e:	6861      	ldr	r1, [r4, #4]
 800d640:	ab04      	add	r3, sp, #16
 800d642:	c303      	stmia	r3!, {r0, r1}
 800d644:	e002      	b.n	800d64c <GUI__DispStringInRect+0x28>
 800d646:	a804      	add	r0, sp, #16
 800d648:	f7ff fd36 	bl	800d0b8 <GUI_GetClientRect>
 800d64c:	f019 0a0c 	ands.w	sl, r9, #12
 800d650:	d002      	beq.n	800d658 <GUI__DispStringInRect+0x34>
 800d652:	462c      	mov	r4, r5
 800d654:	2600      	movs	r6, #0
 800d656:	e016      	b.n	800d686 <GUI__DispStringInRect+0x62>
 800d658:	f9bd 4012 	ldrsh.w	r4, [sp, #18]
 800d65c:	e032      	b.n	800d6c4 <GUI__DispStringInRect+0xa0>
 800d65e:	4621      	mov	r1, r4
 800d660:	9801      	ldr	r0, [sp, #4]
 800d662:	f000 fc8b 	bl	800df7c <GUI__GetLineNumChars>
 800d666:	f8dd b004 	ldr.w	fp, [sp, #4]
 800d66a:	4601      	mov	r1, r0
 800d66c:	1a24      	subs	r4, r4, r0
 800d66e:	4658      	mov	r0, fp
 800d670:	f004 fe9a 	bl	80123a8 <GUI_UC__NumChars2NumBytes>
 800d674:	eb0b 0300 	add.w	r3, fp, r0
 800d678:	a806      	add	r0, sp, #24
 800d67a:	3601      	adds	r6, #1
 800d67c:	f840 3d14 	str.w	r3, [r0, #-20]!
 800d680:	f004 fc1d 	bl	8011ebe <GUI__HandleEOLine>
 800d684:	b908      	cbnz	r0, 800d68a <GUI__DispStringInRect+0x66>
 800d686:	2c00      	cmp	r4, #0
 800d688:	d1e9      	bne.n	800d65e <GUI__DispStringInRect+0x3a>
 800d68a:	f1ba 0f08 	cmp.w	sl, #8
 800d68e:	d005      	beq.n	800d69c <GUI__DispStringInRect+0x78>
 800d690:	f1ba 0f0c 	cmp.w	sl, #12
 800d694:	d008      	beq.n	800d6a8 <GUI__DispStringInRect+0x84>
 800d696:	f1ba 0f04 	cmp.w	sl, #4
 800d69a:	d112      	bne.n	800d6c2 <GUI__DispStringInRect+0x9e>
 800d69c:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 800d6a0:	fb08 4416 	mls	r4, r8, r6, r4
 800d6a4:	3401      	adds	r4, #1
 800d6a6:	e00d      	b.n	800d6c4 <GUI__DispStringInRect+0xa0>
 800d6a8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800d6ac:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 800d6b0:	1ae4      	subs	r4, r4, r3
 800d6b2:	3401      	adds	r4, #1
 800d6b4:	fb08 4416 	mls	r4, r8, r6, r4
 800d6b8:	2202      	movs	r2, #2
 800d6ba:	fb94 f4f2 	sdiv	r4, r4, r2
 800d6be:	441c      	add	r4, r3
 800d6c0:	e000      	b.n	800d6c4 <GUI__DispStringInRect+0xa0>
 800d6c2:	2400      	movs	r4, #0
 800d6c4:	9701      	str	r7, [sp, #4]
 800d6c6:	2600      	movs	r6, #0
 800d6c8:	2d00      	cmp	r5, #0
 800d6ca:	d04b      	beq.n	800d764 <GUI__DispStringInRect+0x140>
 800d6cc:	4629      	mov	r1, r5
 800d6ce:	9801      	ldr	r0, [sp, #4]
 800d6d0:	f000 fc54 	bl	800df7c <GUI__GetLineNumChars>
 800d6d4:	4607      	mov	r7, r0
 800d6d6:	1a2d      	subs	r5, r5, r0
 800d6d8:	4639      	mov	r1, r7
 800d6da:	9801      	ldr	r0, [sp, #4]
 800d6dc:	f000 fc7c 	bl	800dfd8 <GUI__GetLineDistX>
 800d6e0:	f009 0303 	and.w	r3, r9, #3
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d00f      	beq.n	800d708 <GUI__DispStringInRect+0xe4>
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	d003      	beq.n	800d6f4 <GUI__DispStringInRect+0xd0>
 800d6ec:	b983      	cbnz	r3, 800d710 <GUI__DispStringInRect+0xec>
 800d6ee:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 800d6f2:	e00d      	b.n	800d710 <GUI__DispStringInRect+0xec>
 800d6f4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800d6f8:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800d6fc:	1ab6      	subs	r6, r6, r2
 800d6fe:	1a36      	subs	r6, r6, r0
 800d700:	fb96 f6f3 	sdiv	r6, r6, r3
 800d704:	4416      	add	r6, r2
 800d706:	e003      	b.n	800d710 <GUI__DispStringInRect+0xec>
 800d708:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800d70c:	1a36      	subs	r6, r6, r0
 800d70e:	3601      	adds	r6, #1
 800d710:	4b16      	ldr	r3, [pc, #88]	; (800d76c <GUI__DispStringInRect+0x148>)
 800d712:	6819      	ldr	r1, [r3, #0]
 800d714:	3801      	subs	r0, #1
 800d716:	b2a3      	uxth	r3, r4
 800d718:	b2b2      	uxth	r2, r6
 800d71a:	848b      	strh	r3, [r1, #36]	; 0x24
 800d71c:	4430      	add	r0, r6
 800d71e:	f8ad 300a 	strh.w	r3, [sp, #10]
 800d722:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800d726:	4423      	add	r3, r4
 800d728:	844a      	strh	r2, [r1, #34]	; 0x22
 800d72a:	f8ad 2008 	strh.w	r2, [sp, #8]
 800d72e:	4639      	mov	r1, r7
 800d730:	aa02      	add	r2, sp, #8
 800d732:	f8ad 000c 	strh.w	r0, [sp, #12]
 800d736:	9801      	ldr	r0, [sp, #4]
 800d738:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d73c:	f000 fc7c 	bl	800e038 <GUI__DispLine>
 800d740:	f8dd a004 	ldr.w	sl, [sp, #4]
 800d744:	4639      	mov	r1, r7
 800d746:	4650      	mov	r0, sl
 800d748:	f004 fe2e 	bl	80123a8 <GUI_UC__NumChars2NumBytes>
 800d74c:	af06      	add	r7, sp, #24
 800d74e:	4450      	add	r0, sl
 800d750:	f847 0d14 	str.w	r0, [r7, #-20]!
 800d754:	f000 fce2 	bl	800e11c <GUI_GetFontDistY>
 800d758:	4404      	add	r4, r0
 800d75a:	4638      	mov	r0, r7
 800d75c:	f004 fbaf 	bl	8011ebe <GUI__HandleEOLine>
 800d760:	2800      	cmp	r0, #0
 800d762:	d0b1      	beq.n	800d6c8 <GUI__DispStringInRect+0xa4>
 800d764:	b007      	add	sp, #28
 800d766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d76a:	bf00      	nop
 800d76c:	200002c4 	.word	0x200002c4

0800d770 <GUI_DispStringInRectMax>:
 800d770:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d774:	460c      	mov	r4, r1
 800d776:	4690      	mov	r8, r2
 800d778:	461f      	mov	r7, r3
 800d77a:	4606      	mov	r6, r0
 800d77c:	b1e0      	cbz	r0, 800d7b8 <GUI_DispStringInRectMax+0x48>
 800d77e:	f7ff f917 	bl	800c9b0 <GUI_Lock>
 800d782:	b16c      	cbz	r4, 800d7a0 <GUI_DispStringInRectMax+0x30>
 800d784:	4620      	mov	r0, r4
 800d786:	f7f9 fc03 	bl	8006f90 <WM_SetUserClipRect>
 800d78a:	4605      	mov	r5, r0
 800d78c:	b148      	cbz	r0, 800d7a2 <GUI_DispStringInRectMax+0x32>
 800d78e:	4668      	mov	r0, sp
 800d790:	4621      	mov	r1, r4
 800d792:	462a      	mov	r2, r5
 800d794:	f7fe fc40 	bl	800c018 <GUI__IntersectRects>
 800d798:	4668      	mov	r0, sp
 800d79a:	f7f9 fbf9 	bl	8006f90 <WM_SetUserClipRect>
 800d79e:	e000      	b.n	800d7a2 <GUI_DispStringInRectMax+0x32>
 800d7a0:	4625      	mov	r5, r4
 800d7a2:	4630      	mov	r0, r6
 800d7a4:	4621      	mov	r1, r4
 800d7a6:	4642      	mov	r2, r8
 800d7a8:	463b      	mov	r3, r7
 800d7aa:	f7ff ff3b 	bl	800d624 <GUI__DispStringInRect>
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	f7f9 fbee 	bl	8006f90 <WM_SetUserClipRect>
 800d7b4:	f7ff f8f2 	bl	800c99c <GUI_Unlock>
 800d7b8:	b002      	add	sp, #8
 800d7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d7be <GUI_DispStringInRect>:
 800d7be:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800d7c2:	f7ff bfd5 	b.w	800d770 <GUI_DispStringInRectMax>
	...

0800d7c8 <GUI_DispStringAt>:
 800d7c8:	b570      	push	{r4, r5, r6, lr}
 800d7ca:	460d      	mov	r5, r1
 800d7cc:	4616      	mov	r6, r2
 800d7ce:	4604      	mov	r4, r0
 800d7d0:	f7ff f8ee 	bl	800c9b0 <GUI_Lock>
 800d7d4:	4b05      	ldr	r3, [pc, #20]	; (800d7ec <GUI_DispStringAt+0x24>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4620      	mov	r0, r4
 800d7da:	845d      	strh	r5, [r3, #34]	; 0x22
 800d7dc:	849e      	strh	r6, [r3, #36]	; 0x24
 800d7de:	f000 f807 	bl	800d7f0 <GUI_DispString>
 800d7e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d7e6:	f7ff b8d9 	b.w	800c99c <GUI_Unlock>
 800d7ea:	bf00      	nop
 800d7ec:	200002c4 	.word	0x200002c4

0800d7f0 <GUI_DispString>:
 800d7f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	d07d      	beq.n	800d8f6 <GUI_DispString+0x106>
 800d7fa:	4d40      	ldr	r5, [pc, #256]	; (800d8fc <GUI_DispString+0x10c>)
 800d7fc:	f7ff f8d8 	bl	800c9b0 <GUI_Lock>
 800d800:	f000 fc8c 	bl	800e11c <GUI_GetFontDistY>
 800d804:	682b      	ldr	r3, [r5, #0]
 800d806:	4680      	mov	r8, r0
 800d808:	f8b3 9022 	ldrh.w	r9, [r3, #34]	; 0x22
 800d80c:	f000 fc68 	bl	800e0e0 <GUI_GetYAdjust>
 800d810:	682b      	ldr	r3, [r5, #0]
 800d812:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800d814:	b287      	uxth	r7, r0
 800d816:	1bd2      	subs	r2, r2, r7
 800d818:	849a      	strh	r2, [r3, #36]	; 0x24
 800d81a:	7823      	ldrb	r3, [r4, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d05d      	beq.n	800d8dc <GUI_DispString+0xec>
 800d820:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800d824:	4620      	mov	r0, r4
 800d826:	f000 fba9 	bl	800df7c <GUI__GetLineNumChars>
 800d82a:	4606      	mov	r6, r0
 800d82c:	4631      	mov	r1, r6
 800d82e:	4620      	mov	r0, r4
 800d830:	f000 fbd2 	bl	800dfd8 <GUI__GetLineDistX>
 800d834:	682b      	ldr	r3, [r5, #0]
 800d836:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d838:	f002 0203 	and.w	r2, r2, #3
 800d83c:	2a01      	cmp	r2, #1
 800d83e:	d005      	beq.n	800d84c <GUI_DispString+0x5c>
 800d840:	2a02      	cmp	r2, #2
 800d842:	bf14      	ite	ne
 800d844:	2200      	movne	r2, #0
 800d846:	fb90 f2f2 	sdiveq	r2, r0, r2
 800d84a:	e000      	b.n	800d84e <GUI_DispString+0x5e>
 800d84c:	4602      	mov	r2, r0
 800d84e:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800d850:	1a8a      	subs	r2, r1, r2
 800d852:	b292      	uxth	r2, r2
 800d854:	b291      	uxth	r1, r2
 800d856:	8459      	strh	r1, [r3, #34]	; 0x22
 800d858:	fa1f fa80 	uxth.w	sl, r0
 800d85c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d85e:	f8ad 1000 	strh.w	r1, [sp]
 800d862:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 800d866:	440a      	add	r2, r1
 800d868:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d86c:	fa1f fb88 	uxth.w	fp, r8
 800d870:	3b01      	subs	r3, #1
 800d872:	445b      	add	r3, fp
 800d874:	f8ad 2004 	strh.w	r2, [sp, #4]
 800d878:	4620      	mov	r0, r4
 800d87a:	4631      	mov	r1, r6
 800d87c:	466a      	mov	r2, sp
 800d87e:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d882:	f000 fbd9 	bl	800e038 <GUI__DispLine>
 800d886:	682b      	ldr	r3, [r5, #0]
 800d888:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d88c:	849a      	strh	r2, [r3, #36]	; 0x24
 800d88e:	4620      	mov	r0, r4
 800d890:	4631      	mov	r1, r6
 800d892:	f004 fd89 	bl	80123a8 <GUI_UC__NumChars2NumBytes>
 800d896:	5c23      	ldrb	r3, [r4, r0]
 800d898:	2b0a      	cmp	r3, #10
 800d89a:	eb04 0200 	add.w	r2, r4, r0
 800d89e:	d001      	beq.n	800d8a4 <GUI_DispString+0xb4>
 800d8a0:	2b0d      	cmp	r3, #13
 800d8a2:	d112      	bne.n	800d8ca <GUI_DispString+0xda>
 800d8a4:	682b      	ldr	r3, [r5, #0]
 800d8a6:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 800d8a8:	f001 0103 	and.w	r1, r1, #3
 800d8ac:	3901      	subs	r1, #1
 800d8ae:	2901      	cmp	r1, #1
 800d8b0:	bf8a      	itet	hi
 800d8b2:	8c19      	ldrhhi	r1, [r3, #32]
 800d8b4:	f8a3 9022 	strhls.w	r9, [r3, #34]	; 0x22
 800d8b8:	8459      	strhhi	r1, [r3, #34]	; 0x22
 800d8ba:	7811      	ldrb	r1, [r2, #0]
 800d8bc:	290a      	cmp	r1, #10
 800d8be:	d10b      	bne.n	800d8d8 <GUI_DispString+0xe8>
 800d8c0:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800d8c2:	448b      	add	fp, r1
 800d8c4:	f8a3 b024 	strh.w	fp, [r3, #36]	; 0x24
 800d8c8:	e006      	b.n	800d8d8 <GUI_DispString+0xe8>
 800d8ca:	4b0c      	ldr	r3, [pc, #48]	; (800d8fc <GUI_DispString+0x10c>)
 800d8cc:	f8bd 0000 	ldrh.w	r0, [sp]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4482      	add	sl, r0
 800d8d4:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
 800d8d8:	7813      	ldrb	r3, [r2, #0]
 800d8da:	b953      	cbnz	r3, 800d8f2 <GUI_DispString+0x102>
 800d8dc:	682b      	ldr	r3, [r5, #0]
 800d8de:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800d8e0:	4417      	add	r7, r2
 800d8e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d8e4:	849f      	strh	r7, [r3, #36]	; 0x24
 800d8e6:	f022 0203 	bic.w	r2, r2, #3
 800d8ea:	859a      	strh	r2, [r3, #44]	; 0x2c
 800d8ec:	f7ff f856 	bl	800c99c <GUI_Unlock>
 800d8f0:	e001      	b.n	800d8f6 <GUI_DispString+0x106>
 800d8f2:	1c54      	adds	r4, r2, #1
 800d8f4:	e791      	b.n	800d81a <GUI_DispString+0x2a>
 800d8f6:	b003      	add	sp, #12
 800d8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8fc:	200002c4 	.word	0x200002c4

0800d900 <_UnlinkDevice>:
 800d900:	4b09      	ldr	r3, [pc, #36]	; (800d928 <_UnlinkDevice+0x28>)
 800d902:	6982      	ldr	r2, [r0, #24]
 800d904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d908:	4281      	cmp	r1, r0
 800d90a:	bf04      	itt	eq
 800d90c:	6801      	ldreq	r1, [r0, #0]
 800d90e:	f843 1022 	streq.w	r1, [r3, r2, lsl #2]
 800d912:	6843      	ldr	r3, [r0, #4]
 800d914:	b10b      	cbz	r3, 800d91a <_UnlinkDevice+0x1a>
 800d916:	6802      	ldr	r2, [r0, #0]
 800d918:	601a      	str	r2, [r3, #0]
 800d91a:	6802      	ldr	r2, [r0, #0]
 800d91c:	b102      	cbz	r2, 800d920 <_UnlinkDevice+0x20>
 800d91e:	6053      	str	r3, [r2, #4]
 800d920:	2300      	movs	r3, #0
 800d922:	6003      	str	r3, [r0, #0]
 800d924:	6043      	str	r3, [r0, #4]
 800d926:	4770      	bx	lr
 800d928:	20028844 	.word	0x20028844

0800d92c <GUI_DEVICE__GetpDriver>:
 800d92c:	2801      	cmp	r0, #1
 800d92e:	dc09      	bgt.n	800d944 <GUI_DEVICE__GetpDriver+0x18>
 800d930:	4b05      	ldr	r3, [pc, #20]	; (800d948 <GUI_DEVICE__GetpDriver+0x1c>)
 800d932:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800d936:	b120      	cbz	r0, 800d942 <GUI_DEVICE__GetpDriver+0x16>
 800d938:	68c3      	ldr	r3, [r0, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	b11b      	cbz	r3, 800d946 <GUI_DEVICE__GetpDriver+0x1a>
 800d93e:	6800      	ldr	r0, [r0, #0]
 800d940:	e7f9      	b.n	800d936 <GUI_DEVICE__GetpDriver+0xa>
 800d942:	4770      	bx	lr
 800d944:	2000      	movs	r0, #0
 800d946:	4770      	bx	lr
 800d948:	20028844 	.word	0x20028844

0800d94c <GUI_DEVICE_Delete>:
 800d94c:	f000 bd00 	b.w	800e350 <GUI_ALLOC_FreeFixedBlock>

0800d950 <GUI_DEVICE_Create>:
 800d950:	2b01      	cmp	r3, #1
 800d952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d954:	4606      	mov	r6, r0
 800d956:	460d      	mov	r5, r1
 800d958:	4617      	mov	r7, r2
 800d95a:	461c      	mov	r4, r3
 800d95c:	dd01      	ble.n	800d962 <GUI_DEVICE_Create+0x12>
 800d95e:	2000      	movs	r0, #0
 800d960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d962:	201c      	movs	r0, #28
 800d964:	f000 fe64 	bl	800e630 <GUI_ALLOC_GetFixedBlock>
 800d968:	2800      	cmp	r0, #0
 800d96a:	d0f8      	beq.n	800d95e <GUI_DEVICE_Create+0xe>
 800d96c:	b10d      	cbz	r5, 800d972 <GUI_DEVICE_Create+0x22>
 800d96e:	6105      	str	r5, [r0, #16]
 800d970:	e009      	b.n	800d986 <GUI_DEVICE_Create+0x36>
 800d972:	4b09      	ldr	r3, [pc, #36]	; (800d998 <GUI_DEVICE_Create+0x48>)
 800d974:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800d978:	b129      	cbz	r1, 800d986 <GUI_DEVICE_Create+0x36>
 800d97a:	680b      	ldr	r3, [r1, #0]
 800d97c:	b10b      	cbz	r3, 800d982 <GUI_DEVICE_Create+0x32>
 800d97e:	4619      	mov	r1, r3
 800d980:	e7fb      	b.n	800d97a <GUI_DEVICE_Create+0x2a>
 800d982:	690b      	ldr	r3, [r1, #16]
 800d984:	6103      	str	r3, [r0, #16]
 800d986:	2300      	movs	r3, #0
 800d988:	6083      	str	r3, [r0, #8]
 800d98a:	6184      	str	r4, [r0, #24]
 800d98c:	8287      	strh	r7, [r0, #20]
 800d98e:	60c6      	str	r6, [r0, #12]
 800d990:	6003      	str	r3, [r0, #0]
 800d992:	6043      	str	r3, [r0, #4]
 800d994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d996:	bf00      	nop
 800d998:	20028844 	.word	0x20028844

0800d99c <GUI_DEVICE_Unlink>:
 800d99c:	f7ff bfb0 	b.w	800d900 <_UnlinkDevice>

0800d9a0 <GUI_DEVICE_Link>:
 800d9a0:	b570      	push	{r4, r5, r6, lr}
 800d9a2:	b338      	cbz	r0, 800d9f4 <GUI_DEVICE_Link+0x54>
 800d9a4:	6982      	ldr	r2, [r0, #24]
 800d9a6:	2a01      	cmp	r2, #1
 800d9a8:	dc24      	bgt.n	800d9f4 <GUI_DEVICE_Link+0x54>
 800d9aa:	4919      	ldr	r1, [pc, #100]	; (800da10 <GUI_DEVICE_Link+0x70>)
 800d9ac:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800d9b0:	460d      	mov	r5, r1
 800d9b2:	b913      	cbnz	r3, 800d9ba <GUI_DEVICE_Link+0x1a>
 800d9b4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800d9b8:	e01a      	b.n	800d9f0 <GUI_DEVICE_Link+0x50>
 800d9ba:	6859      	ldr	r1, [r3, #4]
 800d9bc:	b109      	cbz	r1, 800d9c2 <GUI_DEVICE_Link+0x22>
 800d9be:	460b      	mov	r3, r1
 800d9c0:	e7fb      	b.n	800d9ba <GUI_DEVICE_Link+0x1a>
 800d9c2:	68c1      	ldr	r1, [r0, #12]
 800d9c4:	680e      	ldr	r6, [r1, #0]
 800d9c6:	68d9      	ldr	r1, [r3, #12]
 800d9c8:	680c      	ldr	r4, [r1, #0]
 800d9ca:	42b4      	cmp	r4, r6
 800d9cc:	dd03      	ble.n	800d9d6 <GUI_DEVICE_Link+0x36>
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d1f8      	bne.n	800d9c6 <GUI_DEVICE_Link+0x26>
 800d9d4:	e00e      	b.n	800d9f4 <GUI_DEVICE_Link+0x54>
 800d9d6:	d102      	bne.n	800d9de <GUI_DEVICE_Link+0x3e>
 800d9d8:	8a81      	ldrh	r1, [r0, #20]
 800d9da:	2901      	cmp	r1, #1
 800d9dc:	d011      	beq.n	800da02 <GUI_DEVICE_Link+0x62>
 800d9de:	6859      	ldr	r1, [r3, #4]
 800d9e0:	b199      	cbz	r1, 800da0a <GUI_DEVICE_Link+0x6a>
 800d9e2:	6008      	str	r0, [r1, #0]
 800d9e4:	6041      	str	r1, [r0, #4]
 800d9e6:	6058      	str	r0, [r3, #4]
 800d9e8:	4298      	cmp	r0, r3
 800d9ea:	bf08      	it	eq
 800d9ec:	2300      	moveq	r3, #0
 800d9ee:	6003      	str	r3, [r0, #0]
 800d9f0:	2000      	movs	r0, #0
 800d9f2:	bd70      	pop	{r4, r5, r6, pc}
 800d9f4:	2001      	movs	r0, #1
 800d9f6:	bd70      	pop	{r4, r5, r6, pc}
 800d9f8:	68cb      	ldr	r3, [r1, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	42a3      	cmp	r3, r4
 800d9fe:	460b      	mov	r3, r1
 800da00:	dbed      	blt.n	800d9de <GUI_DEVICE_Link+0x3e>
 800da02:	6819      	ldr	r1, [r3, #0]
 800da04:	2900      	cmp	r1, #0
 800da06:	d1f7      	bne.n	800d9f8 <GUI_DEVICE_Link+0x58>
 800da08:	e7e9      	b.n	800d9de <GUI_DEVICE_Link+0x3e>
 800da0a:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 800da0e:	e7ea      	b.n	800d9e6 <GUI_DEVICE_Link+0x46>
 800da10:	20028844 	.word	0x20028844

0800da14 <GUI_DEVICE_CreateAndLink>:
 800da14:	b538      	push	{r3, r4, r5, lr}
 800da16:	461d      	mov	r5, r3
 800da18:	f7ff ff9a 	bl	800d950 <GUI_DEVICE_Create>
 800da1c:	4604      	mov	r4, r0
 800da1e:	b148      	cbz	r0, 800da34 <GUI_DEVICE_CreateAndLink+0x20>
 800da20:	f7ff ffbe 	bl	800d9a0 <GUI_DEVICE_Link>
 800da24:	68e3      	ldr	r3, [r4, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	b923      	cbnz	r3, 800da34 <GUI_DEVICE_CreateAndLink+0x20>
 800da2a:	4b03      	ldr	r3, [pc, #12]	; (800da38 <GUI_DEVICE_CreateAndLink+0x24>)
 800da2c:	3516      	adds	r5, #22
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 800da34:	4620      	mov	r0, r4
 800da36:	bd38      	pop	{r3, r4, r5, pc}
 800da38:	200002c4 	.word	0x200002c4

0800da3c <GUI_DEVICE_UnlinkTaskDevices>:
 800da3c:	b570      	push	{r4, r5, r6, lr}
 800da3e:	2500      	movs	r5, #0
 800da40:	462e      	mov	r6, r5
 800da42:	4b0a      	ldr	r3, [pc, #40]	; (800da6c <GUI_DEVICE_UnlinkTaskDevices+0x30>)
 800da44:	58ec      	ldr	r4, [r5, r3]
 800da46:	b15c      	cbz	r4, 800da60 <GUI_DEVICE_UnlinkTaskDevices+0x24>
 800da48:	68e3      	ldr	r3, [r4, #12]
 800da4a:	4a09      	ldr	r2, [pc, #36]	; (800da70 <GUI_DEVICE_UnlinkTaskDevices+0x34>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	5cd3      	ldrb	r3, [r2, r3]
 800da50:	b123      	cbz	r3, 800da5c <GUI_DEVICE_UnlinkTaskDevices+0x20>
 800da52:	4620      	mov	r0, r4
 800da54:	f7ff ff54 	bl	800d900 <_UnlinkDevice>
 800da58:	6026      	str	r6, [r4, #0]
 800da5a:	4626      	mov	r6, r4
 800da5c:	6824      	ldr	r4, [r4, #0]
 800da5e:	e7f2      	b.n	800da46 <GUI_DEVICE_UnlinkTaskDevices+0xa>
 800da60:	3504      	adds	r5, #4
 800da62:	2d08      	cmp	r5, #8
 800da64:	d1ed      	bne.n	800da42 <GUI_DEVICE_UnlinkTaskDevices+0x6>
 800da66:	4630      	mov	r0, r6
 800da68:	bd70      	pop	{r4, r5, r6, pc}
 800da6a:	bf00      	nop
 800da6c:	20028844 	.word	0x20028844
 800da70:	08067048 	.word	0x08067048

0800da74 <GUI_DEVICE_LinkDevices>:
 800da74:	b510      	push	{r4, lr}
 800da76:	b120      	cbz	r0, 800da82 <GUI_DEVICE_LinkDevices+0xe>
 800da78:	6804      	ldr	r4, [r0, #0]
 800da7a:	f7ff ff91 	bl	800d9a0 <GUI_DEVICE_Link>
 800da7e:	4620      	mov	r0, r4
 800da80:	e7f9      	b.n	800da76 <GUI_DEVICE_LinkDevices+0x2>
 800da82:	bd10      	pop	{r4, pc}

0800da84 <GUI_CURSOR_SetPositionEx>:
 800da84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da86:	4614      	mov	r4, r2
 800da88:	4606      	mov	r6, r0
 800da8a:	460d      	mov	r5, r1
 800da8c:	f7fe ff90 	bl	800c9b0 <GUI_Lock>
 800da90:	4620      	mov	r0, r4
 800da92:	f7ff f8a7 	bl	800cbe4 <GUI_GetCursorLayer>
 800da96:	4f16      	ldr	r7, [pc, #88]	; (800daf0 <GUI_CURSOR_SetPositionEx+0x6c>)
 800da98:	2314      	movs	r3, #20
 800da9a:	b140      	cbz	r0, 800daae <GUI_CURSOR_SetPositionEx+0x2a>
 800da9c:	435c      	muls	r4, r3
 800da9e:	593b      	ldr	r3, [r7, r4]
 800daa0:	6859      	ldr	r1, [r3, #4]
 800daa2:	689a      	ldr	r2, [r3, #8]
 800daa4:	1a71      	subs	r1, r6, r1
 800daa6:	1aaa      	subs	r2, r5, r2
 800daa8:	f7ff f8d2 	bl	800cc50 <GUI_SetLayerPosEx>
 800daac:	e01b      	b.n	800dae6 <GUI_CURSOR_SetPositionEx+0x62>
 800daae:	fb03 7304 	mla	r3, r3, r4, r7
 800dab2:	f103 0208 	add.w	r2, r3, #8
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	42b3      	cmp	r3, r6
 800daba:	d102      	bne.n	800dac2 <GUI_CURSOR_SetPositionEx+0x3e>
 800dabc:	6853      	ldr	r3, [r2, #4]
 800dabe:	42ab      	cmp	r3, r5
 800dac0:	d011      	beq.n	800dae6 <GUI_CURSOR_SetPositionEx+0x62>
 800dac2:	2314      	movs	r3, #20
 800dac4:	4363      	muls	r3, r4
 800dac6:	18fa      	adds	r2, r7, r3
 800dac8:	6910      	ldr	r0, [r2, #16]
 800daca:	b138      	cbz	r0, 800dadc <GUI_CURSOR_SetPositionEx+0x58>
 800dacc:	4a08      	ldr	r2, [pc, #32]	; (800daf0 <GUI_CURSOR_SetPositionEx+0x6c>)
 800dace:	58d3      	ldr	r3, [r2, r3]
 800dad0:	6859      	ldr	r1, [r3, #4]
 800dad2:	689a      	ldr	r2, [r3, #8]
 800dad4:	1a71      	subs	r1, r6, r1
 800dad6:	1aaa      	subs	r2, r5, r2
 800dad8:	f004 fe0e 	bl	80126f8 <GUI_SPRITE_SetPosition>
 800dadc:	2314      	movs	r3, #20
 800dade:	fb03 7404 	mla	r4, r3, r4, r7
 800dae2:	60a6      	str	r6, [r4, #8]
 800dae4:	60e5      	str	r5, [r4, #12]
 800dae6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800daea:	f7fe bf57 	b.w	800c99c <GUI_Unlock>
 800daee:	bf00      	nop
 800daf0:	20008584 	.word	0x20008584

0800daf4 <_OnExit>:
 800daf4:	b510      	push	{r4, lr}
 800daf6:	4b07      	ldr	r3, [pc, #28]	; (800db14 <_OnExit+0x20>)
 800daf8:	4807      	ldr	r0, [pc, #28]	; (800db18 <_OnExit+0x24>)
 800dafa:	2400      	movs	r4, #0
 800dafc:	4621      	mov	r1, r4
 800dafe:	2270      	movs	r2, #112	; 0x70
 800db00:	601c      	str	r4, [r3, #0]
 800db02:	f7fe f9a2 	bl	800be4a <GUI__memset>
 800db06:	4621      	mov	r1, r4
 800db08:	4804      	ldr	r0, [pc, #16]	; (800db1c <_OnExit+0x28>)
 800db0a:	2208      	movs	r2, #8
 800db0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db10:	f7fe b99b 	b.w	800be4a <GUI__memset>
 800db14:	20008628 	.word	0x20008628
 800db18:	200085b0 	.word	0x200085b0
 800db1c:	20028844 	.word	0x20028844

0800db20 <_InitContext>:
 800db20:	b538      	push	{r3, r4, r5, lr}
 800db22:	4d19      	ldr	r5, [pc, #100]	; (800db88 <_InitContext+0x68>)
 800db24:	682b      	ldr	r3, [r5, #0]
 800db26:	1d1a      	adds	r2, r3, #4
 800db28:	63da      	str	r2, [r3, #60]	; 0x3c
 800db2a:	f103 0208 	add.w	r2, r3, #8
 800db2e:	639b      	str	r3, [r3, #56]	; 0x38
 800db30:	641b      	str	r3, [r3, #64]	; 0x40
 800db32:	6142      	str	r2, [r0, #20]
 800db34:	7c5a      	ldrb	r2, [r3, #17]
 800db36:	4b15      	ldr	r3, [pc, #84]	; (800db8c <_InitContext+0x6c>)
 800db38:	4604      	mov	r4, r0
 800db3a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800db3e:	68c3      	ldr	r3, [r0, #12]
 800db40:	f104 0108 	add.w	r1, r4, #8
 800db44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db46:	4798      	blx	r3
 800db48:	4b11      	ldr	r3, [pc, #68]	; (800db90 <_InitContext+0x70>)
 800db4a:	6663      	str	r3, [r4, #100]	; 0x64
 800db4c:	4b11      	ldr	r3, [pc, #68]	; (800db94 <_InitContext+0x74>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	61e3      	str	r3, [r4, #28]
 800db52:	682b      	ldr	r3, [r5, #0]
 800db54:	3308      	adds	r3, #8
 800db56:	6163      	str	r3, [r4, #20]
 800db58:	2301      	movs	r3, #1
 800db5a:	7623      	strb	r3, [r4, #24]
 800db5c:	f7f9 fdc0 	bl	80076e0 <WM_GetDesktopWindow>
 800db60:	2303      	movs	r3, #3
 800db62:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800db66:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800db6a:	6323      	str	r3, [r4, #48]	; 0x30
 800db6c:	6363      	str	r3, [r4, #52]	; 0x34
 800db6e:	64a0      	str	r0, [r4, #72]	; 0x48
 800db70:	2000      	movs	r0, #0
 800db72:	f7fe f951 	bl	800be18 <LCD_SetBkColor>
 800db76:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800db7a:	f7fe f955 	bl	800be28 <LCD_SetColor>
 800db7e:	4b06      	ldr	r3, [pc, #24]	; (800db98 <_InitContext+0x78>)
 800db80:	4a06      	ldr	r2, [pc, #24]	; (800db9c <_InitContext+0x7c>)
 800db82:	601a      	str	r2, [r3, #0]
 800db84:	bd38      	pop	{r3, r4, r5, pc}
 800db86:	bf00      	nop
 800db88:	200002c4 	.word	0x200002c4
 800db8c:	20028844 	.word	0x20028844
 800db90:	08067050 	.word	0x08067050
 800db94:	200002c8 	.word	0x200002c8
 800db98:	20028858 	.word	0x20028858
 800db9c:	08068c00 	.word	0x08068c00

0800dba0 <GUI_SetDefaultFont>:
 800dba0:	4b01      	ldr	r3, [pc, #4]	; (800dba8 <GUI_SetDefaultFont+0x8>)
 800dba2:	6018      	str	r0, [r3, #0]
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop
 800dba8:	200002c8 	.word	0x200002c8

0800dbac <GUI_ClearRect>:
 800dbac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800dbb0:	469a      	mov	sl, r3
 800dbb2:	4607      	mov	r7, r0
 800dbb4:	460e      	mov	r6, r1
 800dbb6:	4691      	mov	r9, r2
 800dbb8:	f7fe fefa 	bl	800c9b0 <GUI_Lock>
 800dbbc:	2004      	movs	r0, #4
 800dbbe:	f7fd fde1 	bl	800b784 <LCD_SetDrawMode>
 800dbc2:	4b14      	ldr	r3, [pc, #80]	; (800dc14 <GUI_ClearRect+0x68>)
 800dbc4:	681c      	ldr	r4, [r3, #0]
 800dbc6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800dbc8:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800dbca:	442f      	add	r7, r5
 800dbcc:	4426      	add	r6, r4
 800dbce:	4680      	mov	r8, r0
 800dbd0:	444d      	add	r5, r9
 800dbd2:	4454      	add	r4, sl
 800dbd4:	4668      	mov	r0, sp
 800dbd6:	f8ad 7000 	strh.w	r7, [sp]
 800dbda:	f8ad 5004 	strh.w	r5, [sp, #4]
 800dbde:	f8ad 6002 	strh.w	r6, [sp, #2]
 800dbe2:	f8ad 4006 	strh.w	r4, [sp, #6]
 800dbe6:	f7fa fcfd 	bl	80085e4 <WM__InitIVRSearch>
 800dbea:	b938      	cbnz	r0, 800dbfc <GUI_ClearRect+0x50>
 800dbec:	4640      	mov	r0, r8
 800dbee:	f7fd fdc9 	bl	800b784 <LCD_SetDrawMode>
 800dbf2:	f7fe fed3 	bl	800c99c <GUI_Unlock>
 800dbf6:	b002      	add	sp, #8
 800dbf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbfc:	4638      	mov	r0, r7
 800dbfe:	4631      	mov	r1, r6
 800dc00:	462a      	mov	r2, r5
 800dc02:	4623      	mov	r3, r4
 800dc04:	f7fd fe40 	bl	800b888 <LCD_FillRect>
 800dc08:	f7fa fc2a 	bl	8008460 <WM__GetNextIVR>
 800dc0c:	2800      	cmp	r0, #0
 800dc0e:	d1f5      	bne.n	800dbfc <GUI_ClearRect+0x50>
 800dc10:	e7ec      	b.n	800dbec <GUI_ClearRect+0x40>
 800dc12:	bf00      	nop
 800dc14:	200002c4 	.word	0x200002c4

0800dc18 <GUI_Clear>:
 800dc18:	b510      	push	{r4, lr}
 800dc1a:	2000      	movs	r0, #0
 800dc1c:	4601      	mov	r1, r0
 800dc1e:	f7ff fa19 	bl	800d054 <GUI_GotoXY>
 800dc22:	4804      	ldr	r0, [pc, #16]	; (800dc34 <GUI_Clear+0x1c>)
 800dc24:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800dc28:	4601      	mov	r1, r0
 800dc2a:	4613      	mov	r3, r2
 800dc2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc30:	f7ff bfbc 	b.w	800dbac <GUI_ClearRect>
 800dc34:	ffffc001 	.word	0xffffc001

0800dc38 <GUI__RegisterExit>:
 800dc38:	b480      	push	{r7}
 800dc3a:	b083      	sub	sp, #12
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	4b05      	ldr	r3, [pc, #20]	; (800dc58 <GUI__RegisterExit+0x20>)
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	605a      	str	r2, [r3, #4]
 800dc48:	4b03      	ldr	r3, [pc, #12]	; (800dc58 <GUI__RegisterExit+0x20>)
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	601a      	str	r2, [r3, #0]
 800dc4e:	370c      	adds	r7, #12
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr
 800dc58:	200085ac 	.word	0x200085ac

0800dc5c <GUI__Config>:
 800dc5c:	b508      	push	{r3, lr}
 800dc5e:	4b09      	ldr	r3, [pc, #36]	; (800dc84 <GUI__Config+0x28>)
 800dc60:	681a      	ldr	r2, [r3, #0]
 800dc62:	b972      	cbnz	r2, 800dc82 <GUI__Config+0x26>
 800dc64:	2201      	movs	r2, #1
 800dc66:	601a      	str	r2, [r3, #0]
 800dc68:	f7f2 fc6a 	bl	8000540 <GUI_X_Config>
 800dc6c:	f7fe fede 	bl	800ca2c <GUITASK_Init>
 800dc70:	f7f2 ffe2 	bl	8000c38 <LCD_X_Config>
 800dc74:	4804      	ldr	r0, [pc, #16]	; (800dc88 <GUI__Config+0x2c>)
 800dc76:	4b05      	ldr	r3, [pc, #20]	; (800dc8c <GUI__Config+0x30>)
 800dc78:	6003      	str	r3, [r0, #0]
 800dc7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800dc7e:	f7ff bfdb 	b.w	800dc38 <GUI__RegisterExit>
 800dc82:	bd08      	pop	{r3, pc}
 800dc84:	20008628 	.word	0x20008628
 800dc88:	20008620 	.word	0x20008620
 800dc8c:	0800daf5 	.word	0x0800daf5

0800dc90 <GUI_Init>:
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	4b16      	ldr	r3, [pc, #88]	; (800dcf0 <GUI_Init+0x60>)
 800dc98:	4a15      	ldr	r2, [pc, #84]	; (800dcf0 <GUI_Init+0x60>)
 800dc9a:	6812      	ldr	r2, [r2, #0]
 800dc9c:	f022 0201 	bic.w	r2, r2, #1
 800dca0:	601a      	str	r2, [r3, #0]
 800dca2:	4b14      	ldr	r3, [pc, #80]	; (800dcf4 <GUI_Init+0x64>)
 800dca4:	2201      	movs	r2, #1
 800dca6:	601a      	str	r2, [r3, #0]
 800dca8:	4b13      	ldr	r3, [pc, #76]	; (800dcf8 <GUI_Init+0x68>)
 800dcaa:	4a14      	ldr	r2, [pc, #80]	; (800dcfc <GUI_Init+0x6c>)
 800dcac:	601a      	str	r2, [r3, #0]
 800dcae:	4b12      	ldr	r3, [pc, #72]	; (800dcf8 <GUI_Init+0x68>)
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	4b13      	ldr	r3, [pc, #76]	; (800dd00 <GUI_Init+0x70>)
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d000      	beq.n	800dcba <GUI_Init+0x2a>
 800dcb8:	e7fe      	b.n	800dcb8 <GUI_Init+0x28>
 800dcba:	f7ff ffcf 	bl	800dc5c <GUI__Config>
 800dcbe:	4b11      	ldr	r3, [pc, #68]	; (800dd04 <GUI_Init+0x74>)
 800dcc0:	222e      	movs	r2, #46	; 0x2e
 800dcc2:	701a      	strb	r2, [r3, #0]
 800dcc4:	f7f2 fdaa 	bl	800081c <GUI_X_Init>
 800dcc8:	480f      	ldr	r0, [pc, #60]	; (800dd08 <GUI_Init+0x78>)
 800dcca:	f7ff ff29 	bl	800db20 <_InitContext>
 800dcce:	f7fe f801 	bl	800bcd4 <emWin_LCD_Init>
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	2000      	movs	r0, #0
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	f004 fb88 	bl	80123ec <GUI_SetOrg>
 800dcdc:	f7fa fed6 	bl	8008a8c <WM_Init>
 800dce0:	f7fe fecc 	bl	800ca7c <GUITASK_CopyContext>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	4618      	mov	r0, r3
 800dce8:	3708      	adds	r7, #8
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	e0002000 	.word	0xe0002000
 800dcf4:	40023008 	.word	0x40023008
 800dcf8:	40023000 	.word	0x40023000
 800dcfc:	f407a5c2 	.word	0xf407a5c2
 800dd00:	b5e8b5cd 	.word	0xb5e8b5cd
 800dd04:	20028840 	.word	0x20028840
 800dd08:	200085b0 	.word	0x200085b0

0800dd0c <GUIPROP_EXT__FindChar>:
 800dd0c:	b138      	cbz	r0, 800dd1e <GUIPROP_EXT__FindChar+0x12>
 800dd0e:	8803      	ldrh	r3, [r0, #0]
 800dd10:	428b      	cmp	r3, r1
 800dd12:	d802      	bhi.n	800dd1a <GUIPROP_EXT__FindChar+0xe>
 800dd14:	8843      	ldrh	r3, [r0, #2]
 800dd16:	428b      	cmp	r3, r1
 800dd18:	d201      	bcs.n	800dd1e <GUIPROP_EXT__FindChar+0x12>
 800dd1a:	6880      	ldr	r0, [r0, #8]
 800dd1c:	e7f6      	b.n	800dd0c <GUIPROP_EXT__FindChar>
 800dd1e:	4770      	bx	lr

0800dd20 <GUIPROP_EXT_GetCharDistX>:
 800dd20:	4b0d      	ldr	r3, [pc, #52]	; (800dd58 <GUIPROP_EXT_GetCharDistX+0x38>)
 800dd22:	b570      	push	{r4, r5, r6, lr}
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	69dd      	ldr	r5, [r3, #28]
 800dd28:	4606      	mov	r6, r0
 800dd2a:	460c      	mov	r4, r1
 800dd2c:	69e8      	ldr	r0, [r5, #28]
 800dd2e:	4631      	mov	r1, r6
 800dd30:	f7ff ffec 	bl	800dd0c <GUIPROP_EXT__FindChar>
 800dd34:	b170      	cbz	r0, 800dd54 <GUIPROP_EXT_GetCharDistX+0x34>
 800dd36:	8803      	ldrh	r3, [r0, #0]
 800dd38:	6842      	ldr	r2, [r0, #4]
 800dd3a:	1af6      	subs	r6, r6, r3
 800dd3c:	230c      	movs	r3, #12
 800dd3e:	435e      	muls	r6, r3
 800dd40:	1993      	adds	r3, r2, r6
 800dd42:	7918      	ldrb	r0, [r3, #4]
 800dd44:	7eab      	ldrb	r3, [r5, #26]
 800dd46:	fb10 f003 	smulbb	r0, r0, r3
 800dd4a:	b11c      	cbz	r4, 800dd54 <GUIPROP_EXT_GetCharDistX+0x34>
 800dd4c:	5d92      	ldrb	r2, [r2, r6]
 800dd4e:	fb12 f303 	smulbb	r3, r2, r3
 800dd52:	6023      	str	r3, [r4, #0]
 800dd54:	bd70      	pop	{r4, r5, r6, pc}
 800dd56:	bf00      	nop
 800dd58:	200002c4 	.word	0x200002c4

0800dd5c <GUIPROP_EXT_GetFontInfo>:
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	800b      	strh	r3, [r1, #0]
 800dd60:	4770      	bx	lr

0800dd62 <GUIPROP_EXT_IsInFont>:
 800dd62:	b508      	push	{r3, lr}
 800dd64:	69c0      	ldr	r0, [r0, #28]
 800dd66:	f7ff ffd1 	bl	800dd0c <GUIPROP_EXT__FindChar>
 800dd6a:	3000      	adds	r0, #0
 800dd6c:	bf18      	it	ne
 800dd6e:	2001      	movne	r0, #1
 800dd70:	bd08      	pop	{r3, pc}
	...

0800dd74 <GUIPROP_EXT_GetCharInfo>:
 800dd74:	b538      	push	{r3, r4, r5, lr}
 800dd76:	4b0c      	ldr	r3, [pc, #48]	; (800dda8 <GUIPROP_EXT_GetCharInfo+0x34>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	69db      	ldr	r3, [r3, #28]
 800dd7c:	4605      	mov	r5, r0
 800dd7e:	460c      	mov	r4, r1
 800dd80:	69d8      	ldr	r0, [r3, #28]
 800dd82:	4629      	mov	r1, r5
 800dd84:	f7ff ffc2 	bl	800dd0c <GUIPROP_EXT__FindChar>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	b150      	cbz	r0, 800dda2 <GUIPROP_EXT_GetCharInfo+0x2e>
 800dd8c:	8800      	ldrh	r0, [r0, #0]
 800dd8e:	685b      	ldr	r3, [r3, #4]
 800dd90:	1a2d      	subs	r5, r5, r0
 800dd92:	200c      	movs	r0, #12
 800dd94:	fb00 3005 	mla	r0, r0, r5, r3
 800dd98:	c807      	ldmia	r0, {r0, r1, r2}
 800dd9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dd9e:	2000      	movs	r0, #0
 800dda0:	bd38      	pop	{r3, r4, r5, pc}
 800dda2:	2001      	movs	r0, #1
 800dda4:	bd38      	pop	{r3, r4, r5, pc}
 800dda6:	bf00      	nop
 800dda8:	200002c4 	.word	0x200002c4

0800ddac <GUIPROP__FindChar>:
 800ddac:	b138      	cbz	r0, 800ddbe <GUIPROP__FindChar+0x12>
 800ddae:	8803      	ldrh	r3, [r0, #0]
 800ddb0:	428b      	cmp	r3, r1
 800ddb2:	d802      	bhi.n	800ddba <GUIPROP__FindChar+0xe>
 800ddb4:	8843      	ldrh	r3, [r0, #2]
 800ddb6:	428b      	cmp	r3, r1
 800ddb8:	d201      	bcs.n	800ddbe <GUIPROP__FindChar+0x12>
 800ddba:	6880      	ldr	r0, [r0, #8]
 800ddbc:	e7f6      	b.n	800ddac <GUIPROP__FindChar>
 800ddbe:	4770      	bx	lr

0800ddc0 <GUIPROP_DispChar>:
 800ddc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc4:	4c38      	ldr	r4, [pc, #224]	; (800dea8 <GUIPROP_DispChar+0xe8>)
 800ddc6:	6823      	ldr	r3, [r4, #0]
 800ddc8:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 800ddcc:	69db      	ldr	r3, [r3, #28]
 800ddce:	4605      	mov	r5, r0
 800ddd0:	b089      	sub	sp, #36	; 0x24
 800ddd2:	69d8      	ldr	r0, [r3, #28]
 800ddd4:	4629      	mov	r1, r5
 800ddd6:	f7ff ffe9 	bl	800ddac <GUIPROP__FindChar>
 800ddda:	2800      	cmp	r0, #0
 800dddc:	d061      	beq.n	800dea2 <GUIPROP_DispChar+0xe2>
 800ddde:	f8b0 8000 	ldrh.w	r8, [r0]
 800dde2:	6847      	ldr	r7, [r0, #4]
 800dde4:	ebc8 0805 	rsb	r8, r8, r5
 800dde8:	eb07 06c8 	add.w	r6, r7, r8, lsl #3
 800ddec:	4648      	mov	r0, r9
 800ddee:	f896 b002 	ldrb.w	fp, [r6, #2]
 800ddf2:	f7fd fcc7 	bl	800b784 <LCD_SetDrawMode>
 800ddf6:	6825      	ldr	r5, [r4, #0]
 800ddf8:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 800ddfc:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 800de00:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 800de04:	f89e c01a 	ldrb.w	ip, [lr, #26]
 800de08:	f89e 3018 	ldrb.w	r3, [lr, #24]
 800de0c:	9306      	str	r3, [sp, #24]
 800de0e:	4682      	mov	sl, r0
 800de10:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 800de14:	f8cd c000 	str.w	ip, [sp]
 800de18:	f89e e01b 	ldrb.w	lr, [lr, #27]
 800de1c:	f8cd e004 	str.w	lr, [sp, #4]
 800de20:	f04f 0e01 	mov.w	lr, #1
 800de24:	f8cd b00c 	str.w	fp, [sp, #12]
 800de28:	f8cd e008 	str.w	lr, [sp, #8]
 800de2c:	6873      	ldr	r3, [r6, #4]
 800de2e:	9304      	str	r3, [sp, #16]
 800de30:	6bad      	ldr	r5, [r5, #56]	; 0x38
 800de32:	9b06      	ldr	r3, [sp, #24]
 800de34:	9505      	str	r5, [sp, #20]
 800de36:	f7fd fe33 	bl	800baa0 <LCD_DrawBitmap>
 800de3a:	6823      	ldr	r3, [r4, #0]
 800de3c:	69da      	ldr	r2, [r3, #28]
 800de3e:	f892 b019 	ldrb.w	fp, [r2, #25]
 800de42:	7e11      	ldrb	r1, [r2, #24]
 800de44:	458b      	cmp	fp, r1
 800de46:	d920      	bls.n	800de8a <GUIPROP_DispChar+0xca>
 800de48:	f1b9 0f02 	cmp.w	r9, #2
 800de4c:	7ed5      	ldrb	r5, [r2, #27]
 800de4e:	d01c      	beq.n	800de8a <GUIPROP_DispChar+0xca>
 800de50:	9107      	str	r1, [sp, #28]
 800de52:	f004 fee7 	bl	8012c24 <GUI_GetColor>
 800de56:	4681      	mov	r9, r0
 800de58:	f004 fed8 	bl	8012c0c <GUI_GetBkColor>
 800de5c:	f7fe fea5 	bl	800cbaa <GUI_SetColor>
 800de60:	6824      	ldr	r4, [r4, #0]
 800de62:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 800de66:	69e2      	ldr	r2, [r4, #28]
 800de68:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800de6c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800de70:	7ed2      	ldrb	r2, [r2, #27]
 800de72:	9907      	ldr	r1, [sp, #28]
 800de74:	fb07 0202 	mla	r2, r7, r2, r0
 800de78:	fb01 3105 	mla	r1, r1, r5, r3
 800de7c:	fb0b 3305 	mla	r3, fp, r5, r3
 800de80:	f7fd fd02 	bl	800b888 <LCD_FillRect>
 800de84:	4648      	mov	r0, r9
 800de86:	f7fe fe90 	bl	800cbaa <GUI_SetColor>
 800de8a:	4650      	mov	r0, sl
 800de8c:	f7fd fc7a 	bl	800b784 <LCD_SetDrawMode>
 800de90:	4b05      	ldr	r3, [pc, #20]	; (800dea8 <GUIPROP_DispChar+0xe8>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	69da      	ldr	r2, [r3, #28]
 800de96:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800de98:	7e90      	ldrb	r0, [r2, #26]
 800de9a:	7872      	ldrb	r2, [r6, #1]
 800de9c:	fb00 1202 	mla	r2, r0, r2, r1
 800dea0:	845a      	strh	r2, [r3, #34]	; 0x22
 800dea2:	b009      	add	sp, #36	; 0x24
 800dea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea8:	200002c4 	.word	0x200002c4

0800deac <GUIPROP_GetCharDistX>:
 800deac:	4b0d      	ldr	r3, [pc, #52]	; (800dee4 <GUIPROP_GetCharDistX+0x38>)
 800deae:	b570      	push	{r4, r5, r6, lr}
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	69dd      	ldr	r5, [r3, #28]
 800deb4:	4606      	mov	r6, r0
 800deb6:	460c      	mov	r4, r1
 800deb8:	69e8      	ldr	r0, [r5, #28]
 800deba:	4631      	mov	r1, r6
 800debc:	f7ff ff76 	bl	800ddac <GUIPROP__FindChar>
 800dec0:	b170      	cbz	r0, 800dee0 <GUIPROP_GetCharDistX+0x34>
 800dec2:	8803      	ldrh	r3, [r0, #0]
 800dec4:	6842      	ldr	r2, [r0, #4]
 800dec6:	1af6      	subs	r6, r6, r3
 800dec8:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 800decc:	7858      	ldrb	r0, [r3, #1]
 800dece:	7eab      	ldrb	r3, [r5, #26]
 800ded0:	fb10 f003 	smulbb	r0, r0, r3
 800ded4:	b124      	cbz	r4, 800dee0 <GUIPROP_GetCharDistX+0x34>
 800ded6:	f812 2036 	ldrb.w	r2, [r2, r6, lsl #3]
 800deda:	fb12 f303 	smulbb	r3, r2, r3
 800dede:	6023      	str	r3, [r4, #0]
 800dee0:	bd70      	pop	{r4, r5, r6, pc}
 800dee2:	bf00      	nop
 800dee4:	200002c4 	.word	0x200002c4

0800dee8 <GUIPROP_GetFontInfo>:
 800dee8:	2301      	movs	r3, #1
 800deea:	800b      	strh	r3, [r1, #0]
 800deec:	4770      	bx	lr

0800deee <GUIPROP_IsInFont>:
 800deee:	b508      	push	{r3, lr}
 800def0:	69c0      	ldr	r0, [r0, #28]
 800def2:	f7ff ff5b 	bl	800ddac <GUIPROP__FindChar>
 800def6:	3000      	adds	r0, #0
 800def8:	bf18      	it	ne
 800defa:	2001      	movne	r0, #1
 800defc:	bd08      	pop	{r3, pc}

0800defe <_Log2VisBuffered>:
 800defe:	4770      	bx	lr

0800df00 <_DispLine>:
 800df00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df02:	4615      	mov	r5, r2
 800df04:	ab02      	add	r3, sp, #8
 800df06:	4a1a      	ldr	r2, [pc, #104]	; (800df70 <_DispLine+0x70>)
 800df08:	f843 1d08 	str.w	r1, [r3, #-8]!
 800df0c:	9001      	str	r0, [sp, #4]
 800df0e:	6812      	ldr	r2, [r2, #0]
 800df10:	4c18      	ldr	r4, [pc, #96]	; (800df74 <_DispLine+0x74>)
 800df12:	4669      	mov	r1, sp
 800df14:	4790      	blx	r2
 800df16:	6823      	ldr	r3, [r4, #0]
 800df18:	9001      	str	r0, [sp, #4]
 800df1a:	6958      	ldr	r0, [r3, #20]
 800df1c:	b958      	cbnz	r0, 800df36 <_DispLine+0x36>
 800df1e:	2001      	movs	r0, #1
 800df20:	f7fe f872 	bl	800c008 <GUI__ManageCache>
 800df24:	6823      	ldr	r3, [r4, #0]
 800df26:	69db      	ldr	r3, [r3, #28]
 800df28:	695b      	ldr	r3, [r3, #20]
 800df2a:	b1bb      	cbz	r3, 800df5c <_DispLine+0x5c>
 800df2c:	689b      	ldr	r3, [r3, #8]
 800df2e:	9801      	ldr	r0, [sp, #4]
 800df30:	9900      	ldr	r1, [sp, #0]
 800df32:	4798      	blx	r3
 800df34:	e017      	b.n	800df66 <_DispLine+0x66>
 800df36:	4629      	mov	r1, r5
 800df38:	f7fe feca 	bl	800ccd0 <GUI_RectsIntersect>
 800df3c:	2800      	cmp	r0, #0
 800df3e:	d1ee      	bne.n	800df1e <_DispLine+0x1e>
 800df40:	e014      	b.n	800df6c <_DispLine+0x6c>
 800df42:	a801      	add	r0, sp, #4
 800df44:	f004 fa1c 	bl	8012380 <GUI_UC__GetCharCodeInc>
 800df48:	6823      	ldr	r3, [r4, #0]
 800df4a:	69db      	ldr	r3, [r3, #28]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	4605      	mov	r5, r0
 800df50:	4798      	blx	r3
 800df52:	4b09      	ldr	r3, [pc, #36]	; (800df78 <_DispLine+0x78>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	b10b      	cbz	r3, 800df5c <_DispLine+0x5c>
 800df58:	4628      	mov	r0, r5
 800df5a:	4798      	blx	r3
 800df5c:	9b00      	ldr	r3, [sp, #0]
 800df5e:	3b01      	subs	r3, #1
 800df60:	2b00      	cmp	r3, #0
 800df62:	9300      	str	r3, [sp, #0]
 800df64:	daed      	bge.n	800df42 <_DispLine+0x42>
 800df66:	2000      	movs	r0, #0
 800df68:	f7fe f84e 	bl	800c008 <GUI__ManageCache>
 800df6c:	b003      	add	sp, #12
 800df6e:	bd30      	pop	{r4, r5, pc}
 800df70:	200002d0 	.word	0x200002d0
 800df74:	200002c4 	.word	0x200002c4
 800df78:	2002885c 	.word	0x2002885c

0800df7c <GUI__GetLineNumChars>:
 800df7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df7e:	460d      	mov	r5, r1
 800df80:	9001      	str	r0, [sp, #4]
 800df82:	4604      	mov	r4, r0
 800df84:	b198      	cbz	r0, 800dfae <GUI__GetLineNumChars+0x32>
 800df86:	4b0b      	ldr	r3, [pc, #44]	; (800dfb4 <GUI__GetLineNumChars+0x38>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	69db      	ldr	r3, [r3, #28]
 800df8c:	695b      	ldr	r3, [r3, #20]
 800df8e:	b10b      	cbz	r3, 800df94 <GUI__GetLineNumChars+0x18>
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	b90b      	cbnz	r3, 800df98 <GUI__GetLineNumChars+0x1c>
 800df94:	2400      	movs	r4, #0
 800df96:	e008      	b.n	800dfaa <GUI__GetLineNumChars+0x2e>
 800df98:	4798      	blx	r3
 800df9a:	e009      	b.n	800dfb0 <GUI__GetLineNumChars+0x34>
 800df9c:	a801      	add	r0, sp, #4
 800df9e:	f004 f9ef 	bl	8012380 <GUI_UC__GetCharCodeInc>
 800dfa2:	b120      	cbz	r0, 800dfae <GUI__GetLineNumChars+0x32>
 800dfa4:	280a      	cmp	r0, #10
 800dfa6:	d002      	beq.n	800dfae <GUI__GetLineNumChars+0x32>
 800dfa8:	3401      	adds	r4, #1
 800dfaa:	42ac      	cmp	r4, r5
 800dfac:	dbf6      	blt.n	800df9c <GUI__GetLineNumChars+0x20>
 800dfae:	4620      	mov	r0, r4
 800dfb0:	b003      	add	sp, #12
 800dfb2:	bd30      	pop	{r4, r5, pc}
 800dfb4:	200002c4 	.word	0x200002c4

0800dfb8 <GUI__GetOverlap>:
 800dfb8:	b513      	push	{r0, r1, r4, lr}
 800dfba:	a902      	add	r1, sp, #8
 800dfbc:	2400      	movs	r4, #0
 800dfbe:	f841 4d04 	str.w	r4, [r1, #-4]!
 800dfc2:	f000 f8cb 	bl	800e15c <GUI_GetCharDistXEx>
 800dfc6:	9b01      	ldr	r3, [sp, #4]
 800dfc8:	4283      	cmp	r3, r0
 800dfca:	bfcc      	ite	gt
 800dfcc:	ebc0 0003 	rsbgt	r0, r0, r3
 800dfd0:	4620      	movle	r0, r4
 800dfd2:	b002      	add	sp, #8
 800dfd4:	bd10      	pop	{r4, pc}
	...

0800dfd8 <GUI__GetLineDistX>:
 800dfd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfda:	4a15      	ldr	r2, [pc, #84]	; (800e030 <GUI__GetLineDistX+0x58>)
 800dfdc:	9001      	str	r0, [sp, #4]
 800dfde:	ab02      	add	r3, sp, #8
 800dfe0:	6812      	ldr	r2, [r2, #0]
 800dfe2:	f843 1d08 	str.w	r1, [r3, #-8]!
 800dfe6:	4669      	mov	r1, sp
 800dfe8:	4790      	blx	r2
 800dfea:	9001      	str	r0, [sp, #4]
 800dfec:	b1f0      	cbz	r0, 800e02c <GUI__GetLineDistX+0x54>
 800dfee:	4b11      	ldr	r3, [pc, #68]	; (800e034 <GUI__GetLineDistX+0x5c>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	69db      	ldr	r3, [r3, #28]
 800dff4:	695b      	ldr	r3, [r3, #20]
 800dff6:	b10b      	cbz	r3, 800dffc <GUI__GetLineDistX+0x24>
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	b913      	cbnz	r3, 800e002 <GUI__GetLineDistX+0x2a>
 800dffc:	2500      	movs	r5, #0
 800dffe:	462c      	mov	r4, r5
 800e000:	e002      	b.n	800e008 <GUI__GetLineDistX+0x30>
 800e002:	9900      	ldr	r1, [sp, #0]
 800e004:	4798      	blx	r3
 800e006:	e011      	b.n	800e02c <GUI__GetLineDistX+0x54>
 800e008:	9b00      	ldr	r3, [sp, #0]
 800e00a:	3b01      	subs	r3, #1
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	9300      	str	r3, [sp, #0]
 800e010:	db07      	blt.n	800e022 <GUI__GetLineDistX+0x4a>
 800e012:	a801      	add	r0, sp, #4
 800e014:	f004 f9b4 	bl	8012380 <GUI_UC__GetCharCodeInc>
 800e018:	4605      	mov	r5, r0
 800e01a:	f000 f88d 	bl	800e138 <GUI_GetCharDistX>
 800e01e:	4404      	add	r4, r0
 800e020:	e7f2      	b.n	800e008 <GUI__GetLineDistX+0x30>
 800e022:	4628      	mov	r0, r5
 800e024:	f7ff ffc8 	bl	800dfb8 <GUI__GetOverlap>
 800e028:	4420      	add	r0, r4
 800e02a:	e7ff      	b.n	800e02c <GUI__GetLineDistX+0x54>
 800e02c:	b003      	add	sp, #12
 800e02e:	bd30      	pop	{r4, r5, pc}
 800e030:	200002d0 	.word	0x200002d0
 800e034:	200002c4 	.word	0x200002c4

0800e038 <GUI__DispLine>:
 800e038:	4b27      	ldr	r3, [pc, #156]	; (800e0d8 <GUI__DispLine+0xa0>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e03e:	4605      	mov	r5, r0
 800e040:	460c      	mov	r4, r1
 800e042:	b163      	cbz	r3, 800e05e <GUI__DispLine+0x26>
 800e044:	2000      	movs	r0, #0
 800e046:	f7fa facd 	bl	80085e4 <WM__InitIVRSearch>
 800e04a:	2800      	cmp	r0, #0
 800e04c:	d041      	beq.n	800e0d2 <GUI__DispLine+0x9a>
 800e04e:	4628      	mov	r0, r5
 800e050:	4621      	mov	r1, r4
 800e052:	466a      	mov	r2, sp
 800e054:	f7ff ff54 	bl	800df00 <_DispLine>
 800e058:	f7fa fa02 	bl	8008460 <WM__GetNextIVR>
 800e05c:	e7f5      	b.n	800e04a <GUI__DispLine+0x12>
 800e05e:	6810      	ldr	r0, [r2, #0]
 800e060:	6851      	ldr	r1, [r2, #4]
 800e062:	4e1e      	ldr	r6, [pc, #120]	; (800e0dc <GUI__DispLine+0xa4>)
 800e064:	466b      	mov	r3, sp
 800e066:	c303      	stmia	r3!, {r0, r1}
 800e068:	6833      	ldr	r3, [r6, #0]
 800e06a:	f8bd 1000 	ldrh.w	r1, [sp]
 800e06e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800e072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e076:	4411      	add	r1, r2
 800e078:	f8ad 1000 	strh.w	r1, [sp]
 800e07c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800e080:	4419      	add	r1, r3
 800e082:	f8ad 1002 	strh.w	r1, [sp, #2]
 800e086:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800e08a:	440a      	add	r2, r1
 800e08c:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e090:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e094:	4668      	mov	r0, sp
 800e096:	4413      	add	r3, r2
 800e098:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e09c:	f7fa faa2 	bl	80085e4 <WM__InitIVRSearch>
 800e0a0:	6833      	ldr	r3, [r6, #0]
 800e0a2:	b940      	cbnz	r0, 800e0b6 <GUI__DispLine+0x7e>
 800e0a4:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800e0a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e0a8:	1a8a      	subs	r2, r1, r2
 800e0aa:	845a      	strh	r2, [r3, #34]	; 0x22
 800e0ac:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800e0ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0b0:	1a8a      	subs	r2, r1, r2
 800e0b2:	849a      	strh	r2, [r3, #36]	; 0x24
 800e0b4:	e00d      	b.n	800e0d2 <GUI__DispLine+0x9a>
 800e0b6:	f8bd 2000 	ldrh.w	r2, [sp]
 800e0ba:	845a      	strh	r2, [r3, #34]	; 0x22
 800e0bc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e0c0:	849a      	strh	r2, [r3, #36]	; 0x24
 800e0c2:	4628      	mov	r0, r5
 800e0c4:	4621      	mov	r1, r4
 800e0c6:	466a      	mov	r2, sp
 800e0c8:	f7ff ff1a 	bl	800df00 <_DispLine>
 800e0cc:	f7fa f9c8 	bl	8008460 <WM__GetNextIVR>
 800e0d0:	e7e6      	b.n	800e0a0 <GUI__DispLine+0x68>
 800e0d2:	b002      	add	sp, #8
 800e0d4:	bd70      	pop	{r4, r5, r6, pc}
 800e0d6:	bf00      	nop
 800e0d8:	20028850 	.word	0x20028850
 800e0dc:	200002c4 	.word	0x200002c4

0800e0e0 <GUI_GetYAdjust>:
 800e0e0:	b510      	push	{r4, lr}
 800e0e2:	f7fe fc65 	bl	800c9b0 <GUI_Lock>
 800e0e6:	4b0c      	ldr	r3, [pc, #48]	; (800e118 <GUI_GetYAdjust+0x38>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e0ec:	f002 020c 	and.w	r2, r2, #12
 800e0f0:	2a08      	cmp	r2, #8
 800e0f2:	d007      	beq.n	800e104 <GUI_GetYAdjust+0x24>
 800e0f4:	2a0c      	cmp	r2, #12
 800e0f6:	d005      	beq.n	800e104 <GUI_GetYAdjust+0x24>
 800e0f8:	2a04      	cmp	r2, #4
 800e0fa:	d107      	bne.n	800e10c <GUI_GetYAdjust+0x2c>
 800e0fc:	69db      	ldr	r3, [r3, #28]
 800e0fe:	7e1c      	ldrb	r4, [r3, #24]
 800e100:	3c01      	subs	r4, #1
 800e102:	e004      	b.n	800e10e <GUI_GetYAdjust+0x2e>
 800e104:	69db      	ldr	r3, [r3, #28]
 800e106:	7e1c      	ldrb	r4, [r3, #24]
 800e108:	0864      	lsrs	r4, r4, #1
 800e10a:	e000      	b.n	800e10e <GUI_GetYAdjust+0x2e>
 800e10c:	2400      	movs	r4, #0
 800e10e:	f7fe fc45 	bl	800c99c <GUI_Unlock>
 800e112:	4620      	mov	r0, r4
 800e114:	bd10      	pop	{r4, pc}
 800e116:	bf00      	nop
 800e118:	200002c4 	.word	0x200002c4

0800e11c <GUI_GetFontDistY>:
 800e11c:	b510      	push	{r4, lr}
 800e11e:	f7fe fc47 	bl	800c9b0 <GUI_Lock>
 800e122:	4b04      	ldr	r3, [pc, #16]	; (800e134 <GUI_GetFontDistY+0x18>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	69db      	ldr	r3, [r3, #28]
 800e128:	7e5c      	ldrb	r4, [r3, #25]
 800e12a:	f7fe fc37 	bl	800c99c <GUI_Unlock>
 800e12e:	4620      	mov	r0, r4
 800e130:	bd10      	pop	{r4, pc}
 800e132:	bf00      	nop
 800e134:	200002c4 	.word	0x200002c4

0800e138 <GUI_GetCharDistX>:
 800e138:	b510      	push	{r4, lr}
 800e13a:	4604      	mov	r4, r0
 800e13c:	f7fe fc38 	bl	800c9b0 <GUI_Lock>
 800e140:	4b05      	ldr	r3, [pc, #20]	; (800e158 <GUI_GetCharDistX+0x20>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	69db      	ldr	r3, [r3, #28]
 800e146:	2100      	movs	r1, #0
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	4620      	mov	r0, r4
 800e14c:	4798      	blx	r3
 800e14e:	4604      	mov	r4, r0
 800e150:	f7fe fc24 	bl	800c99c <GUI_Unlock>
 800e154:	4620      	mov	r0, r4
 800e156:	bd10      	pop	{r4, pc}
 800e158:	200002c4 	.word	0x200002c4

0800e15c <GUI_GetCharDistXEx>:
 800e15c:	b538      	push	{r3, r4, r5, lr}
 800e15e:	4605      	mov	r5, r0
 800e160:	460c      	mov	r4, r1
 800e162:	f7fe fc25 	bl	800c9b0 <GUI_Lock>
 800e166:	4b06      	ldr	r3, [pc, #24]	; (800e180 <GUI_GetCharDistXEx+0x24>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	69db      	ldr	r3, [r3, #28]
 800e16c:	4621      	mov	r1, r4
 800e16e:	685b      	ldr	r3, [r3, #4]
 800e170:	4628      	mov	r0, r5
 800e172:	4798      	blx	r3
 800e174:	4604      	mov	r4, r0
 800e176:	f7fe fc11 	bl	800c99c <GUI_Unlock>
 800e17a:	4620      	mov	r0, r4
 800e17c:	bd38      	pop	{r3, r4, r5, pc}
 800e17e:	bf00      	nop
 800e180:	200002c4 	.word	0x200002c4

0800e184 <_PushFreeBlock>:
 800e184:	4b07      	ldr	r3, [pc, #28]	; (800e1a4 <_PushFreeBlock+0x20>)
 800e186:	685a      	ldr	r2, [r3, #4]
 800e188:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e18a:	3201      	adds	r2, #1
 800e18c:	b510      	push	{r4, lr}
 800e18e:	605a      	str	r2, [r3, #4]
 800e190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e192:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 800e196:	6061      	str	r1, [r4, #4]
 800e198:	2100      	movs	r1, #0
 800e19a:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 800e19e:	6258      	str	r0, [r3, #36]	; 0x24
 800e1a0:	bd10      	pop	{r4, pc}
 800e1a2:	bf00      	nop
 800e1a4:	20028860 	.word	0x20028860

0800e1a8 <_OnExit>:
 800e1a8:	b538      	push	{r3, r4, r5, lr}
 800e1aa:	4d0b      	ldr	r5, [pc, #44]	; (800e1d8 <_OnExit+0x30>)
 800e1ac:	2400      	movs	r4, #0
 800e1ae:	f105 0040 	add.w	r0, r5, #64	; 0x40
 800e1b2:	4621      	mov	r1, r4
 800e1b4:	2280      	movs	r2, #128	; 0x80
 800e1b6:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
 800e1ba:	f7fd fe46 	bl	800be4a <GUI__memset>
 800e1be:	4628      	mov	r0, r5
 800e1c0:	4621      	mov	r1, r4
 800e1c2:	22c0      	movs	r2, #192	; 0xc0
 800e1c4:	f7fd fe41 	bl	800be4a <GUI__memset>
 800e1c8:	4621      	mov	r1, r4
 800e1ca:	4804      	ldr	r0, [pc, #16]	; (800e1dc <_OnExit+0x34>)
 800e1cc:	220c      	movs	r2, #12
 800e1ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1d2:	f7fd be3a 	b.w	800be4a <GUI__memset>
 800e1d6:	bf00      	nop
 800e1d8:	20028860 	.word	0x20028860
 800e1dc:	2000862c 	.word	0x2000862c

0800e1e0 <_RemoveFreeBlock>:
 800e1e0:	b510      	push	{r4, lr}
 800e1e2:	6842      	ldr	r2, [r0, #4]
 800e1e4:	230f      	movs	r3, #15
 800e1e6:	490b      	ldr	r1, [pc, #44]	; (800e214 <_RemoveFreeBlock+0x34>)
 800e1e8:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 800e1ec:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800e1ee:	42a2      	cmp	r2, r4
 800e1f0:	d202      	bcs.n	800e1f8 <_RemoveFreeBlock+0x18>
 800e1f2:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e1f6:	d2f6      	bcs.n	800e1e6 <_RemoveFreeBlock+0x6>
 800e1f8:	680c      	ldr	r4, [r1, #0]
 800e1fa:	1aa2      	subs	r2, r4, r2
 800e1fc:	600a      	str	r2, [r1, #0]
 800e1fe:	6882      	ldr	r2, [r0, #8]
 800e200:	68c0      	ldr	r0, [r0, #12]
 800e202:	b102      	cbz	r2, 800e206 <_RemoveFreeBlock+0x26>
 800e204:	6050      	str	r0, [r2, #4]
 800e206:	b108      	cbz	r0, 800e20c <_RemoveFreeBlock+0x2c>
 800e208:	6002      	str	r2, [r0, #0]
 800e20a:	bd10      	pop	{r4, pc}
 800e20c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800e210:	645a      	str	r2, [r3, #68]	; 0x44
 800e212:	bd10      	pop	{r4, pc}
 800e214:	20028860 	.word	0x20028860

0800e218 <_AddFreeMemory>:
 800e218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e21a:	4e25      	ldr	r6, [pc, #148]	; (800e2b0 <_AddFreeMemory+0x98>)
 800e21c:	68f3      	ldr	r3, [r6, #12]
 800e21e:	1e5a      	subs	r2, r3, #1
 800e220:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800e222:	4605      	mov	r5, r0
 800e224:	4413      	add	r3, r2
 800e226:	1808      	adds	r0, r1, r0
 800e228:	4298      	cmp	r0, r3
 800e22a:	460c      	mov	r4, r1
 800e22c:	d805      	bhi.n	800e23a <_AddFreeMemory+0x22>
 800e22e:	594b      	ldr	r3, [r1, r5]
 800e230:	b91b      	cbnz	r3, 800e23a <_AddFreeMemory+0x22>
 800e232:	6843      	ldr	r3, [r0, #4]
 800e234:	441d      	add	r5, r3
 800e236:	f7ff ffd3 	bl	800e1e0 <_RemoveFreeBlock>
 800e23a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800e23c:	429c      	cmp	r4, r3
 800e23e:	d90a      	bls.n	800e256 <_AddFreeMemory+0x3e>
 800e240:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800e244:	1be7      	subs	r7, r4, r7
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	b92b      	cbnz	r3, 800e256 <_AddFreeMemory+0x3e>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	4638      	mov	r0, r7
 800e24e:	441d      	add	r5, r3
 800e250:	f7ff ffc6 	bl	800e1e0 <_RemoveFreeBlock>
 800e254:	463c      	mov	r4, r7
 800e256:	230f      	movs	r3, #15
 800e258:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800e25c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e25e:	4295      	cmp	r5, r2
 800e260:	d202      	bcs.n	800e268 <_AddFreeMemory+0x50>
 800e262:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e266:	d2f7      	bcs.n	800e258 <_AddFreeMemory+0x40>
 800e268:	3308      	adds	r3, #8
 800e26a:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800e26e:	1961      	adds	r1, r4, r5
 800e270:	6852      	ldr	r2, [r2, #4]
 800e272:	60a2      	str	r2, [r4, #8]
 800e274:	2000      	movs	r0, #0
 800e276:	e884 0021 	stmia.w	r4, {r0, r5}
 800e27a:	6124      	str	r4, [r4, #16]
 800e27c:	f841 5c04 	str.w	r5, [r1, #-4]
 800e280:	f104 0108 	add.w	r1, r4, #8
 800e284:	b102      	cbz	r2, 800e288 <_AddFreeMemory+0x70>
 800e286:	6051      	str	r1, [r2, #4]
 800e288:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800e28c:	60e0      	str	r0, [r4, #12]
 800e28e:	6059      	str	r1, [r3, #4]
 800e290:	6833      	ldr	r3, [r6, #0]
 800e292:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 800e296:	4a06      	ldr	r2, [pc, #24]	; (800e2b0 <_AddFreeMemory+0x98>)
 800e298:	442b      	add	r3, r5
 800e29a:	6033      	str	r3, [r6, #0]
 800e29c:	b929      	cbnz	r1, 800e2aa <_AddFreeMemory+0x92>
 800e29e:	68d1      	ldr	r1, [r2, #12]
 800e2a0:	1acb      	subs	r3, r1, r3
 800e2a2:	6891      	ldr	r1, [r2, #8]
 800e2a4:	4299      	cmp	r1, r3
 800e2a6:	bf38      	it	cc
 800e2a8:	6093      	strcc	r3, [r2, #8]
 800e2aa:	4628      	mov	r0, r5
 800e2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2ae:	bf00      	nop
 800e2b0:	20028860 	.word	0x20028860

0800e2b4 <_RemoveHoles>:
 800e2b4:	4b25      	ldr	r3, [pc, #148]	; (800e34c <_RemoveHoles+0x98>)
 800e2b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ba:	68da      	ldr	r2, [r3, #12]
 800e2bc:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800e2be:	3a01      	subs	r2, #1
 800e2c0:	4682      	mov	sl, r0
 800e2c2:	eb02 0904 	add.w	r9, r2, r4
 800e2c6:	469b      	mov	fp, r3
 800e2c8:	e894 0028 	ldmia.w	r4, {r3, r5}
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d133      	bne.n	800e338 <_RemoveHoles+0x84>
 800e2d0:	eb04 0805 	add.w	r8, r4, r5
 800e2d4:	45c8      	cmp	r8, r9
 800e2d6:	d22f      	bcs.n	800e338 <_RemoveHoles+0x84>
 800e2d8:	f854 c005 	ldr.w	ip, [r4, r5]
 800e2dc:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800e2e0:	f1bc 0f00 	cmp.w	ip, #0
 800e2e4:	d028      	beq.n	800e338 <_RemoveHoles+0x84>
 800e2e6:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800e2ea:	4f18      	ldr	r7, [pc, #96]	; (800e34c <_RemoveHoles+0x98>)
 800e2ec:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d121      	bne.n	800e338 <_RemoveHoles+0x84>
 800e2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	e88d 1008 	stmia.w	sp, {r3, ip}
 800e2fc:	f7ff ff70 	bl	800e1e0 <_RemoveFreeBlock>
 800e300:	f8d8 1000 	ldr.w	r1, [r8]
 800e304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e306:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e30a:	4620      	mov	r0, r4
 800e30c:	6054      	str	r4, [r2, #4]
 800e30e:	4641      	mov	r1, r8
 800e310:	4632      	mov	r2, r6
 800e312:	f004 ff9f 	bl	8013254 <memmove>
 800e316:	e89d 1008 	ldmia.w	sp, {r3, ip}
 800e31a:	459c      	cmp	ip, r3
 800e31c:	d102      	bne.n	800e324 <_RemoveHoles+0x70>
 800e31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e320:	1b5b      	subs	r3, r3, r5
 800e322:	637b      	str	r3, [r7, #52]	; 0x34
 800e324:	4628      	mov	r0, r5
 800e326:	19a1      	adds	r1, r4, r6
 800e328:	f7ff ff76 	bl	800e218 <_AddFreeMemory>
 800e32c:	f1ba 0f00 	cmp.w	sl, #0
 800e330:	d001      	beq.n	800e336 <_RemoveHoles+0x82>
 800e332:	4582      	cmp	sl, r0
 800e334:	d905      	bls.n	800e342 <_RemoveHoles+0x8e>
 800e336:	4635      	mov	r5, r6
 800e338:	442c      	add	r4, r5
 800e33a:	454c      	cmp	r4, r9
 800e33c:	d3c4      	bcc.n	800e2c8 <_RemoveHoles+0x14>
 800e33e:	2001      	movs	r0, #1
 800e340:	e000      	b.n	800e344 <_RemoveHoles+0x90>
 800e342:	2000      	movs	r0, #0
 800e344:	b003      	add	sp, #12
 800e346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e34a:	bf00      	nop
 800e34c:	20028860 	.word	0x20028860

0800e350 <GUI_ALLOC_FreeFixedBlock>:
 800e350:	b128      	cbz	r0, 800e35e <GUI_ALLOC_FreeFixedBlock+0xe>
 800e352:	4a03      	ldr	r2, [pc, #12]	; (800e360 <GUI_ALLOC_FreeFixedBlock+0x10>)
 800e354:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800e356:	6003      	str	r3, [r0, #0]
 800e358:	b103      	cbz	r3, 800e35c <GUI_ALLOC_FreeFixedBlock+0xc>
 800e35a:	6058      	str	r0, [r3, #4]
 800e35c:	63d0      	str	r0, [r2, #60]	; 0x3c
 800e35e:	4770      	bx	lr
 800e360:	20028860 	.word	0x20028860

0800e364 <GUI_ALLOC_h2p>:
 800e364:	b128      	cbz	r0, 800e372 <GUI_ALLOC_h2p+0xe>
 800e366:	4b03      	ldr	r3, [pc, #12]	; (800e374 <GUI_ALLOC_h2p+0x10>)
 800e368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e36a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800e36e:	6840      	ldr	r0, [r0, #4]
 800e370:	3008      	adds	r0, #8
 800e372:	4770      	bx	lr
 800e374:	20028860 	.word	0x20028860

0800e378 <GUI_ALLOC_LockH>:
 800e378:	4b05      	ldr	r3, [pc, #20]	; (800e390 <GUI_ALLOC_LockH+0x18>)
 800e37a:	69d9      	ldr	r1, [r3, #28]
 800e37c:	3101      	adds	r1, #1
 800e37e:	61d9      	str	r1, [r3, #28]
 800e380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e382:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 800e386:	3101      	adds	r1, #1
 800e388:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 800e38c:	f7ff bfea 	b.w	800e364 <GUI_ALLOC_h2p>
 800e390:	20028860 	.word	0x20028860

0800e394 <GUI_ALLOC_UnlockH>:
 800e394:	b530      	push	{r4, r5, lr}
 800e396:	6802      	ldr	r2, [r0, #0]
 800e398:	4b09      	ldr	r3, [pc, #36]	; (800e3c0 <GUI_ALLOC_UnlockH+0x2c>)
 800e39a:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800e39e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3a0:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 800e3a4:	2c01      	cmp	r4, #1
 800e3a6:	d903      	bls.n	800e3b0 <GUI_ALLOC_UnlockH+0x1c>
 800e3a8:	69dd      	ldr	r5, [r3, #28]
 800e3aa:	b10d      	cbz	r5, 800e3b0 <GUI_ALLOC_UnlockH+0x1c>
 800e3ac:	3d01      	subs	r5, #1
 800e3ae:	61dd      	str	r5, [r3, #28]
 800e3b0:	3c01      	subs	r4, #1
 800e3b2:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	6003      	str	r3, [r0, #0]
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	bd30      	pop	{r4, r5, pc}
 800e3be:	bf00      	nop
 800e3c0:	20028860 	.word	0x20028860

0800e3c4 <GUI_ALLOC_AssignMemory>:
 800e3c4:	4b02      	ldr	r3, [pc, #8]	; (800e3d0 <GUI_ALLOC_AssignMemory+0xc>)
 800e3c6:	f021 0103 	bic.w	r1, r1, #3
 800e3ca:	6018      	str	r0, [r3, #0]
 800e3cc:	6059      	str	r1, [r3, #4]
 800e3ce:	4770      	bx	lr
 800e3d0:	2000862c 	.word	0x2000862c

0800e3d4 <GUI_ALLOC_GetSize>:
 800e3d4:	b130      	cbz	r0, 800e3e4 <GUI_ALLOC_GetSize+0x10>
 800e3d6:	4b04      	ldr	r3, [pc, #16]	; (800e3e8 <GUI_ALLOC_GetSize+0x14>)
 800e3d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3da:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800e3de:	6843      	ldr	r3, [r0, #4]
 800e3e0:	6858      	ldr	r0, [r3, #4]
 800e3e2:	380c      	subs	r0, #12
 800e3e4:	4770      	bx	lr
 800e3e6:	bf00      	nop
 800e3e8:	20028860 	.word	0x20028860

0800e3ec <GUI_ALLOC_Free>:
 800e3ec:	b510      	push	{r4, lr}
 800e3ee:	4604      	mov	r4, r0
 800e3f0:	b1a0      	cbz	r0, 800e41c <GUI_ALLOC_Free+0x30>
 800e3f2:	f7fe fadd 	bl	800c9b0 <GUI_Lock>
 800e3f6:	4b0a      	ldr	r3, [pc, #40]	; (800e420 <GUI_ALLOC_Free+0x34>)
 800e3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3fa:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800e3fe:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
 800e402:	2b01      	cmp	r3, #1
 800e404:	d106      	bne.n	800e414 <GUI_ALLOC_Free+0x28>
 800e406:	6851      	ldr	r1, [r2, #4]
 800e408:	6848      	ldr	r0, [r1, #4]
 800e40a:	f7ff ff05 	bl	800e218 <_AddFreeMemory>
 800e40e:	4620      	mov	r0, r4
 800e410:	f7ff feb8 	bl	800e184 <_PushFreeBlock>
 800e414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e418:	f7fe bac0 	b.w	800c99c <GUI_Unlock>
 800e41c:	bd10      	pop	{r4, pc}
 800e41e:	bf00      	nop
 800e420:	20028860 	.word	0x20028860

0800e424 <_EnlargeBlocks>:
 800e424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e428:	4c22      	ldr	r4, [pc, #136]	; (800e4b4 <_EnlargeBlocks+0x90>)
 800e42a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e42c:	b93b      	cbnz	r3, 800e43e <_EnlargeBlocks+0x1a>
 800e42e:	4b22      	ldr	r3, [pc, #136]	; (800e4b8 <_EnlargeBlocks+0x94>)
 800e430:	689d      	ldr	r5, [r3, #8]
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	3508      	adds	r5, #8
 800e436:	fbb3 f5f5 	udiv	r5, r3, r5
 800e43a:	3502      	adds	r5, #2
 800e43c:	e003      	b.n	800e446 <_EnlargeBlocks+0x22>
 800e43e:	6923      	ldr	r3, [r4, #16]
 800e440:	1d1d      	adds	r5, r3, #4
 800e442:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800e446:	00e8      	lsls	r0, r5, #3
 800e448:	f000 f97c 	bl	800e744 <_Alloc>
 800e44c:	4680      	mov	r8, r0
 800e44e:	b360      	cbz	r0, 800e4aa <_EnlargeBlocks+0x86>
 800e450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e452:	6922      	ldr	r2, [r4, #16]
 800e454:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800e456:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 800e45a:	00d2      	lsls	r2, r2, #3
 800e45c:	685e      	ldr	r6, [r3, #4]
 800e45e:	3608      	adds	r6, #8
 800e460:	4630      	mov	r0, r6
 800e462:	f7f1 ff03 	bl	800026c <memcpy>
 800e466:	6922      	ldr	r2, [r4, #16]
 800e468:	6366      	str	r6, [r4, #52]	; 0x34
 800e46a:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 800e46e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800e472:	3104      	adds	r1, #4
 800e474:	4613      	mov	r3, r2
 800e476:	1e68      	subs	r0, r5, #1
 800e478:	4283      	cmp	r3, r0
 800e47a:	f101 0108 	add.w	r1, r1, #8
 800e47e:	d203      	bcs.n	800e488 <_EnlargeBlocks+0x64>
 800e480:	3301      	adds	r3, #1
 800e482:	f841 3c08 	str.w	r3, [r1, #-8]
 800e486:	e7f6      	b.n	800e476 <_EnlargeBlocks+0x52>
 800e488:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800e48c:	2600      	movs	r6, #0
 800e48e:	605e      	str	r6, [r3, #4]
 800e490:	6863      	ldr	r3, [r4, #4]
 800e492:	6262      	str	r2, [r4, #36]	; 0x24
 800e494:	1a9b      	subs	r3, r3, r2
 800e496:	442b      	add	r3, r5
 800e498:	6063      	str	r3, [r4, #4]
 800e49a:	6125      	str	r5, [r4, #16]
 800e49c:	4638      	mov	r0, r7
 800e49e:	b13f      	cbz	r7, 800e4b0 <_EnlargeBlocks+0x8c>
 800e4a0:	f7ff ffa4 	bl	800e3ec <GUI_ALLOC_Free>
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4aa:	2001      	movs	r0, #1
 800e4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4b4:	20028860 	.word	0x20028860
 800e4b8:	2000862c 	.word	0x2000862c

0800e4bc <_InitOnce>:
 800e4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4be:	4e58      	ldr	r6, [pc, #352]	; (800e620 <_InitOnce+0x164>)
 800e4c0:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800e4c4:	2900      	cmp	r1, #0
 800e4c6:	f040 80aa 	bne.w	800e61e <_InitOnce+0x162>
 800e4ca:	4d56      	ldr	r5, [pc, #344]	; (800e624 <_InitOnce+0x168>)
 800e4cc:	686a      	ldr	r2, [r5, #4]
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 800e4d4:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800e4d8:	bf28      	it	cs
 800e4da:	f44f 5220 	movcs.w	r2, #10240	; 0x2800
 800e4de:	682b      	ldr	r3, [r5, #0]
 800e4e0:	0894      	lsrs	r4, r2, #2
 800e4e2:	2000      	movs	r0, #0
 800e4e4:	42a0      	cmp	r0, r4
 800e4e6:	d00c      	beq.n	800e502 <_InitOnce+0x46>
 800e4e8:	1847      	adds	r7, r0, r1
 800e4ea:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800e4ee:	fbb7 fefe 	udiv	lr, r7, lr
 800e4f2:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800e4f6:	ebce 0707 	rsb	r7, lr, r7
 800e4fa:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 800e4fe:	3001      	adds	r0, #1
 800e500:	e7f0      	b.n	800e4e4 <_InitOnce+0x28>
 800e502:	2000      	movs	r0, #0
 800e504:	42a0      	cmp	r0, r4
 800e506:	d016      	beq.n	800e536 <_InitOnce+0x7a>
 800e508:	1847      	adds	r7, r0, r1
 800e50a:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800e50e:	fbb7 fefe 	udiv	lr, r7, lr
 800e512:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800e516:	ebce 0e07 	rsb	lr, lr, r7
 800e51a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800e51e:	4577      	cmp	r7, lr
 800e520:	d007      	beq.n	800e532 <_InitOnce+0x76>
 800e522:	68aa      	ldr	r2, [r5, #8]
 800e524:	4b3f      	ldr	r3, [pc, #252]	; (800e624 <_InitOnce+0x168>)
 800e526:	2a00      	cmp	r2, #0
 800e528:	d155      	bne.n	800e5d6 <_InitOnce+0x11a>
 800e52a:	685a      	ldr	r2, [r3, #4]
 800e52c:	0892      	lsrs	r2, r2, #2
 800e52e:	609a      	str	r2, [r3, #8]
 800e530:	e051      	b.n	800e5d6 <_InitOnce+0x11a>
 800e532:	3001      	adds	r0, #1
 800e534:	e7e6      	b.n	800e504 <_InitOnce+0x48>
 800e536:	3101      	adds	r1, #1
 800e538:	2902      	cmp	r1, #2
 800e53a:	d1d2      	bne.n	800e4e2 <_InitOnce+0x26>
 800e53c:	0854      	lsrs	r4, r2, #1
 800e53e:	2100      	movs	r1, #0
 800e540:	2000      	movs	r0, #0
 800e542:	42a0      	cmp	r0, r4
 800e544:	d00c      	beq.n	800e560 <_InitOnce+0xa4>
 800e546:	1847      	adds	r7, r0, r1
 800e548:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800e54c:	fbb7 fefe 	udiv	lr, r7, lr
 800e550:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800e554:	ebce 0707 	rsb	r7, lr, r7
 800e558:	f823 7010 	strh.w	r7, [r3, r0, lsl #1]
 800e55c:	3001      	adds	r0, #1
 800e55e:	e7f0      	b.n	800e542 <_InitOnce+0x86>
 800e560:	2000      	movs	r0, #0
 800e562:	42a0      	cmp	r0, r4
 800e564:	d00f      	beq.n	800e586 <_InitOnce+0xca>
 800e566:	1847      	adds	r7, r0, r1
 800e568:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800e56c:	fbb7 fefe 	udiv	lr, r7, lr
 800e570:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800e574:	ebce 0707 	rsb	r7, lr, r7
 800e578:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
 800e57c:	b2bf      	uxth	r7, r7
 800e57e:	45bc      	cmp	ip, r7
 800e580:	d1cf      	bne.n	800e522 <_InitOnce+0x66>
 800e582:	3001      	adds	r0, #1
 800e584:	e7ed      	b.n	800e562 <_InitOnce+0xa6>
 800e586:	3101      	adds	r1, #1
 800e588:	2902      	cmp	r1, #2
 800e58a:	d1d9      	bne.n	800e540 <_InitOnce+0x84>
 800e58c:	2100      	movs	r1, #0
 800e58e:	2000      	movs	r0, #0
 800e590:	4290      	cmp	r0, r2
 800e592:	d007      	beq.n	800e5a4 <_InitOnce+0xe8>
 800e594:	1844      	adds	r4, r0, r1
 800e596:	27ff      	movs	r7, #255	; 0xff
 800e598:	fbb4 f7f7 	udiv	r7, r4, r7
 800e59c:	443c      	add	r4, r7
 800e59e:	541c      	strb	r4, [r3, r0]
 800e5a0:	3001      	adds	r0, #1
 800e5a2:	e7f5      	b.n	800e590 <_InitOnce+0xd4>
 800e5a4:	2000      	movs	r0, #0
 800e5a6:	4290      	cmp	r0, r2
 800e5a8:	d00b      	beq.n	800e5c2 <_InitOnce+0x106>
 800e5aa:	1844      	adds	r4, r0, r1
 800e5ac:	27ff      	movs	r7, #255	; 0xff
 800e5ae:	fbb4 f7f7 	udiv	r7, r4, r7
 800e5b2:	443c      	add	r4, r7
 800e5b4:	5c1f      	ldrb	r7, [r3, r0]
 800e5b6:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 800e5ba:	42a7      	cmp	r7, r4
 800e5bc:	d1b1      	bne.n	800e522 <_InitOnce+0x66>
 800e5be:	3001      	adds	r0, #1
 800e5c0:	e7f1      	b.n	800e5a6 <_InitOnce+0xea>
 800e5c2:	3101      	adds	r1, #1
 800e5c4:	2902      	cmp	r1, #2
 800e5c6:	d1e2      	bne.n	800e58e <_InitOnce+0xd2>
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	4291      	cmp	r1, r2
 800e5cc:	d0a9      	beq.n	800e522 <_InitOnce+0x66>
 800e5ce:	2000      	movs	r0, #0
 800e5d0:	5458      	strb	r0, [r3, r1]
 800e5d2:	3101      	adds	r1, #1
 800e5d4:	e7f9      	b.n	800e5ca <_InitOnce+0x10e>
 800e5d6:	4814      	ldr	r0, [pc, #80]	; (800e628 <_InitOnce+0x16c>)
 800e5d8:	4b14      	ldr	r3, [pc, #80]	; (800e62c <_InitOnce+0x170>)
 800e5da:	6003      	str	r3, [r0, #0]
 800e5dc:	f7ff fb2c 	bl	800dc38 <GUI__RegisterExit>
 800e5e0:	235a      	movs	r3, #90	; 0x5a
 800e5e2:	6233      	str	r3, [r6, #32]
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	2110      	movs	r1, #16
 800e5e8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800e5ec:	4099      	lsls	r1, r3
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	2b10      	cmp	r3, #16
 800e5f2:	4c0b      	ldr	r4, [pc, #44]	; (800e620 <_InitOnce+0x164>)
 800e5f4:	6411      	str	r1, [r2, #64]	; 0x40
 800e5f6:	d1f6      	bne.n	800e5e6 <_InitOnce+0x12a>
 800e5f8:	6868      	ldr	r0, [r5, #4]
 800e5fa:	6829      	ldr	r1, [r5, #0]
 800e5fc:	63a1      	str	r1, [r4, #56]	; 0x38
 800e5fe:	2302      	movs	r3, #2
 800e600:	6123      	str	r3, [r4, #16]
 800e602:	f1a0 0314 	sub.w	r3, r0, #20
 800e606:	440b      	add	r3, r1
 800e608:	2501      	movs	r5, #1
 800e60a:	6363      	str	r3, [r4, #52]	; 0x34
 800e60c:	60e0      	str	r0, [r4, #12]
 800e60e:	605d      	str	r5, [r3, #4]
 800e610:	6265      	str	r5, [r4, #36]	; 0x24
 800e612:	6065      	str	r5, [r4, #4]
 800e614:	f7ff fe00 	bl	800e218 <_AddFreeMemory>
 800e618:	f7ff ff04 	bl	800e424 <_EnlargeBlocks>
 800e61c:	6325      	str	r5, [r4, #48]	; 0x30
 800e61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e620:	20028860 	.word	0x20028860
 800e624:	2000862c 	.word	0x2000862c
 800e628:	20008638 	.word	0x20008638
 800e62c:	0800e1a9 	.word	0x0800e1a9

0800e630 <GUI_ALLOC_GetFixedBlock>:
 800e630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e634:	4605      	mov	r5, r0
 800e636:	4e26      	ldr	r6, [pc, #152]	; (800e6d0 <GUI_ALLOC_GetFixedBlock+0xa0>)
 800e638:	3503      	adds	r5, #3
 800e63a:	f7ff ff3f 	bl	800e4bc <_InitOnce>
 800e63e:	f025 0503 	bic.w	r5, r5, #3
 800e642:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800e644:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800e646:	3504      	adds	r5, #4
 800e648:	429d      	cmp	r5, r3
 800e64a:	bf38      	it	cc
 800e64c:	461d      	movcc	r5, r3
 800e64e:	4614      	mov	r4, r2
 800e650:	b12c      	cbz	r4, 800e65e <GUI_ALLOC_GetFixedBlock+0x2e>
 800e652:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e656:	42ab      	cmp	r3, r5
 800e658:	d02c      	beq.n	800e6b4 <GUI_ALLOC_GetFixedBlock+0x84>
 800e65a:	6824      	ldr	r4, [r4, #0]
 800e65c:	e7f8      	b.n	800e650 <GUI_ALLOC_GetFixedBlock+0x20>
 800e65e:	68f3      	ldr	r3, [r6, #12]
 800e660:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800e662:	eb02 0803 	add.w	r8, r2, r3
 800e666:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800e66a:	ebc7 0708 	rsb	r7, r7, r8
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	b133      	cbz	r3, 800e680 <GUI_ALLOC_GetFixedBlock+0x50>
 800e672:	4620      	mov	r0, r4
 800e674:	f7ff fe1e 	bl	800e2b4 <_RemoveHoles>
 800e678:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800e67c:	ebc7 0708 	rsb	r7, r7, r8
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	bb13      	cbnz	r3, 800e6ca <GUI_ALLOC_GetFixedBlock+0x9a>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	42ab      	cmp	r3, r5
 800e688:	db1f      	blt.n	800e6ca <GUI_ALLOC_GetFixedBlock+0x9a>
 800e68a:	4638      	mov	r0, r7
 800e68c:	1d1c      	adds	r4, r3, #4
 800e68e:	f7ff fda7 	bl	800e1e0 <_RemoveFreeBlock>
 800e692:	68f3      	ldr	r3, [r6, #12]
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	1b5b      	subs	r3, r3, r5
 800e698:	60f3      	str	r3, [r6, #12]
 800e69a:	6973      	ldr	r3, [r6, #20]
 800e69c:	1b64      	subs	r4, r4, r5
 800e69e:	442b      	add	r3, r5
 800e6a0:	1b40      	subs	r0, r0, r5
 800e6a2:	443c      	add	r4, r7
 800e6a4:	6173      	str	r3, [r6, #20]
 800e6a6:	d002      	beq.n	800e6ae <GUI_ALLOC_GetFixedBlock+0x7e>
 800e6a8:	4639      	mov	r1, r7
 800e6aa:	f7ff fdb5 	bl	800e218 <_AddFreeMemory>
 800e6ae:	f844 5c04 	str.w	r5, [r4, #-4]
 800e6b2:	e00a      	b.n	800e6ca <GUI_ALLOC_GetFixedBlock+0x9a>
 800e6b4:	6823      	ldr	r3, [r4, #0]
 800e6b6:	b10b      	cbz	r3, 800e6bc <GUI_ALLOC_GetFixedBlock+0x8c>
 800e6b8:	6861      	ldr	r1, [r4, #4]
 800e6ba:	6059      	str	r1, [r3, #4]
 800e6bc:	6861      	ldr	r1, [r4, #4]
 800e6be:	b101      	cbz	r1, 800e6c2 <GUI_ALLOC_GetFixedBlock+0x92>
 800e6c0:	600b      	str	r3, [r1, #0]
 800e6c2:	42a2      	cmp	r2, r4
 800e6c4:	d101      	bne.n	800e6ca <GUI_ALLOC_GetFixedBlock+0x9a>
 800e6c6:	6823      	ldr	r3, [r4, #0]
 800e6c8:	63f3      	str	r3, [r6, #60]	; 0x3c
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6d0:	20028860 	.word	0x20028860

0800e6d4 <GUI_ALLOC_GetMaxSize>:
 800e6d4:	b508      	push	{r3, lr}
 800e6d6:	f7ff fef1 	bl	800e4bc <_InitOnce>
 800e6da:	2200      	movs	r2, #0
 800e6dc:	4b0b      	ldr	r3, [pc, #44]	; (800e70c <GUI_ALLOC_GetMaxSize+0x38>)
 800e6de:	4413      	add	r3, r2
 800e6e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e6e4:	b113      	cbz	r3, 800e6ec <GUI_ALLOC_GetMaxSize+0x18>
 800e6e6:	689b      	ldr	r3, [r3, #8]
 800e6e8:	2000      	movs	r0, #0
 800e6ea:	e00b      	b.n	800e704 <GUI_ALLOC_GetMaxSize+0x30>
 800e6ec:	3a08      	subs	r2, #8
 800e6ee:	f112 0f80 	cmn.w	r2, #128	; 0x80
 800e6f2:	d1f3      	bne.n	800e6dc <GUI_ALLOC_GetMaxSize+0x8>
 800e6f4:	e7f8      	b.n	800e6e8 <GUI_ALLOC_GetMaxSize+0x14>
 800e6f6:	685a      	ldr	r2, [r3, #4]
 800e6f8:	689b      	ldr	r3, [r3, #8]
 800e6fa:	4290      	cmp	r0, r2
 800e6fc:	bf38      	it	cc
 800e6fe:	4610      	movcc	r0, r2
 800e700:	b113      	cbz	r3, 800e708 <GUI_ALLOC_GetMaxSize+0x34>
 800e702:	689b      	ldr	r3, [r3, #8]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d1f6      	bne.n	800e6f6 <GUI_ALLOC_GetMaxSize+0x22>
 800e708:	380c      	subs	r0, #12
 800e70a:	bd08      	pop	{r3, pc}
 800e70c:	20028860 	.word	0x20028860

0800e710 <GUI_ALLOC_RequestSize>:
 800e710:	b510      	push	{r4, lr}
 800e712:	f7fe f94d 	bl	800c9b0 <GUI_Lock>
 800e716:	f7ff ffdd 	bl	800e6d4 <GUI_ALLOC_GetMaxSize>
 800e71a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800e71e:	f04f 0364 	mov.w	r3, #100	; 0x64
 800e722:	4a07      	ldr	r2, [pc, #28]	; (800e740 <GUI_ALLOC_RequestSize+0x30>)
 800e724:	d904      	bls.n	800e730 <GUI_ALLOC_RequestSize+0x20>
 800e726:	6a14      	ldr	r4, [r2, #32]
 800e728:	fb90 f0f3 	sdiv	r0, r0, r3
 800e72c:	4344      	muls	r4, r0
 800e72e:	e003      	b.n	800e738 <GUI_ALLOC_RequestSize+0x28>
 800e730:	6a14      	ldr	r4, [r2, #32]
 800e732:	4360      	muls	r0, r4
 800e734:	fbb0 f4f3 	udiv	r4, r0, r3
 800e738:	f7fe f930 	bl	800c99c <GUI_Unlock>
 800e73c:	4620      	mov	r0, r4
 800e73e:	bd10      	pop	{r4, pc}
 800e740:	20028860 	.word	0x20028860

0800e744 <_Alloc>:
 800e744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e748:	4d3a      	ldr	r5, [pc, #232]	; (800e834 <_Alloc+0xf0>)
 800e74a:	4604      	mov	r4, r0
 800e74c:	f7ff feb6 	bl	800e4bc <_InitOnce>
 800e750:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 800e752:	682b      	ldr	r3, [r5, #0]
 800e754:	42bc      	cmp	r4, r7
 800e756:	bf24      	itt	cs
 800e758:	1ce7      	addcs	r7, r4, #3
 800e75a:	f027 0703 	biccs.w	r7, r7, #3
 800e75e:	370c      	adds	r7, #12
 800e760:	429f      	cmp	r7, r3
 800e762:	4c34      	ldr	r4, [pc, #208]	; (800e834 <_Alloc+0xf0>)
 800e764:	d842      	bhi.n	800e7ec <_Alloc+0xa8>
 800e766:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e768:	6862      	ldr	r2, [r4, #4]
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d90f      	bls.n	800e78e <_Alloc+0x4a>
 800e76e:	686b      	ldr	r3, [r5, #4]
 800e770:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800e772:	3b01      	subs	r3, #1
 800e774:	606b      	str	r3, [r5, #4]
 800e776:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800e778:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800e77c:	eb03 0209 	add.w	r2, r3, r9
 800e780:	6852      	ldr	r2, [r2, #4]
 800e782:	626a      	str	r2, [r5, #36]	; 0x24
 800e784:	2201      	movs	r2, #1
 800e786:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 800e78a:	b956      	cbnz	r6, 800e7a2 <_Alloc+0x5e>
 800e78c:	e02e      	b.n	800e7ec <_Alloc+0xa8>
 800e78e:	3b01      	subs	r3, #1
 800e790:	6323      	str	r3, [r4, #48]	; 0x30
 800e792:	f7ff fe47 	bl	800e424 <_EnlargeBlocks>
 800e796:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e798:	3301      	adds	r3, #1
 800e79a:	6323      	str	r3, [r4, #48]	; 0x30
 800e79c:	2800      	cmp	r0, #0
 800e79e:	d0e6      	beq.n	800e76e <_Alloc+0x2a>
 800e7a0:	e024      	b.n	800e7ec <_Alloc+0xa8>
 800e7a2:	230f      	movs	r3, #15
 800e7a4:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800e7a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e7aa:	4297      	cmp	r7, r2
 800e7ac:	d208      	bcs.n	800e7c0 <_Alloc+0x7c>
 800e7ae:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e7b2:	d2f7      	bcs.n	800e7a4 <_Alloc+0x60>
 800e7b4:	e004      	b.n	800e7c0 <_Alloc+0x7c>
 800e7b6:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800e7ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800e7bc:	b91a      	cbnz	r2, 800e7c6 <_Alloc+0x82>
 800e7be:	3301      	adds	r3, #1
 800e7c0:	2b0f      	cmp	r3, #15
 800e7c2:	d9f8      	bls.n	800e7b6 <_Alloc+0x72>
 800e7c4:	e00a      	b.n	800e7dc <_Alloc+0x98>
 800e7c6:	6894      	ldr	r4, [r2, #8]
 800e7c8:	2c00      	cmp	r4, #0
 800e7ca:	d0f8      	beq.n	800e7be <_Alloc+0x7a>
 800e7cc:	6862      	ldr	r2, [r4, #4]
 800e7ce:	4297      	cmp	r7, r2
 800e7d0:	d90f      	bls.n	800e7f2 <_Alloc+0xae>
 800e7d2:	68a2      	ldr	r2, [r4, #8]
 800e7d4:	2a00      	cmp	r2, #0
 800e7d6:	d0f2      	beq.n	800e7be <_Alloc+0x7a>
 800e7d8:	6894      	ldr	r4, [r2, #8]
 800e7da:	e7f7      	b.n	800e7cc <_Alloc+0x88>
 800e7dc:	4638      	mov	r0, r7
 800e7de:	f7ff fd69 	bl	800e2b4 <_RemoveHoles>
 800e7e2:	2800      	cmp	r0, #0
 800e7e4:	d0dd      	beq.n	800e7a2 <_Alloc+0x5e>
 800e7e6:	4630      	mov	r0, r6
 800e7e8:	f7ff fccc 	bl	800e184 <_PushFreeBlock>
 800e7ec:	2000      	movs	r0, #0
 800e7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7f2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e7f6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800e7f8:	ebc7 0208 	rsb	r2, r7, r8
 800e7fc:	330c      	adds	r3, #12
 800e7fe:	4620      	mov	r0, r4
 800e800:	429a      	cmp	r2, r3
 800e802:	bf38      	it	cc
 800e804:	4647      	movcc	r7, r8
 800e806:	f7ff fceb 	bl	800e1e0 <_RemoveFreeBlock>
 800e80a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800e80c:	444b      	add	r3, r9
 800e80e:	19e1      	adds	r1, r4, r7
 800e810:	605c      	str	r4, [r3, #4]
 800e812:	45b8      	cmp	r8, r7
 800e814:	f04f 0300 	mov.w	r3, #0
 800e818:	e884 00c0 	stmia.w	r4, {r6, r7}
 800e81c:	60a3      	str	r3, [r4, #8]
 800e81e:	6124      	str	r4, [r4, #16]
 800e820:	f841 7c04 	str.w	r7, [r1, #-4]
 800e824:	dd03      	ble.n	800e82e <_Alloc+0xea>
 800e826:	ebc7 0008 	rsb	r0, r7, r8
 800e82a:	f7ff fcf5 	bl	800e218 <_AddFreeMemory>
 800e82e:	4630      	mov	r0, r6
 800e830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e834:	20028860 	.word	0x20028860

0800e838 <GUI_ALLOC_AllocNoInit>:
 800e838:	b510      	push	{r4, lr}
 800e83a:	4604      	mov	r4, r0
 800e83c:	b138      	cbz	r0, 800e84e <GUI_ALLOC_AllocNoInit+0x16>
 800e83e:	f7fe f8b7 	bl	800c9b0 <GUI_Lock>
 800e842:	4620      	mov	r0, r4
 800e844:	f7ff ff7e 	bl	800e744 <_Alloc>
 800e848:	4604      	mov	r4, r0
 800e84a:	f7fe f8a7 	bl	800c99c <GUI_Unlock>
 800e84e:	4620      	mov	r0, r4
 800e850:	bd10      	pop	{r4, pc}

0800e852 <GUI_ALLOC_FreePtr>:
 800e852:	b510      	push	{r4, lr}
 800e854:	4604      	mov	r4, r0
 800e856:	f7fe f8ab 	bl	800c9b0 <GUI_Lock>
 800e85a:	6820      	ldr	r0, [r4, #0]
 800e85c:	f7ff fdc6 	bl	800e3ec <GUI_ALLOC_Free>
 800e860:	2300      	movs	r3, #0
 800e862:	6023      	str	r3, [r4, #0]
 800e864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e868:	f7fe b898 	b.w	800c99c <GUI_Unlock>

0800e86c <GUI_ALLOC_FreePtrArray>:
 800e86c:	b570      	push	{r4, r5, r6, lr}
 800e86e:	4605      	mov	r5, r0
 800e870:	460e      	mov	r6, r1
 800e872:	2400      	movs	r4, #0
 800e874:	42b4      	cmp	r4, r6
 800e876:	da05      	bge.n	800e884 <GUI_ALLOC_FreePtrArray+0x18>
 800e878:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 800e87c:	f7ff ffe9 	bl	800e852 <GUI_ALLOC_FreePtr>
 800e880:	3401      	adds	r4, #1
 800e882:	e7f7      	b.n	800e874 <GUI_ALLOC_FreePtrArray+0x8>
 800e884:	bd70      	pop	{r4, r5, r6, pc}

0800e886 <GUI_ALLOC_AllocZero>:
 800e886:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e888:	4605      	mov	r5, r0
 800e88a:	f7fe f891 	bl	800c9b0 <GUI_Lock>
 800e88e:	4628      	mov	r0, r5
 800e890:	f7ff ffd2 	bl	800e838 <GUI_ALLOC_AllocNoInit>
 800e894:	4606      	mov	r6, r0
 800e896:	b158      	cbz	r0, 800e8b0 <GUI_ALLOC_AllocZero+0x2a>
 800e898:	f7ff fd6e 	bl	800e378 <GUI_ALLOC_LockH>
 800e89c:	ac02      	add	r4, sp, #8
 800e89e:	2100      	movs	r1, #0
 800e8a0:	f844 0d04 	str.w	r0, [r4, #-4]!
 800e8a4:	462a      	mov	r2, r5
 800e8a6:	f7fd fad0 	bl	800be4a <GUI__memset>
 800e8aa:	4620      	mov	r0, r4
 800e8ac:	f7ff fd72 	bl	800e394 <GUI_ALLOC_UnlockH>
 800e8b0:	f7fe f874 	bl	800c99c <GUI_Unlock>
 800e8b4:	4630      	mov	r0, r6
 800e8b6:	b002      	add	sp, #8
 800e8b8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e8bc <GUI_DrawRect>:
 800e8bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e8c0:	4605      	mov	r5, r0
 800e8c2:	4690      	mov	r8, r2
 800e8c4:	461e      	mov	r6, r3
 800e8c6:	460f      	mov	r7, r1
 800e8c8:	f7fe f872 	bl	800c9b0 <GUI_Lock>
 800e8cc:	4b1d      	ldr	r3, [pc, #116]	; (800e944 <GUI_DrawRect+0x88>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	7e1a      	ldrb	r2, [r3, #24]
 800e8d2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e8d4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e8d6:	3a01      	subs	r2, #1
 800e8d8:	b292      	uxth	r2, r2
 800e8da:	4425      	add	r5, r4
 800e8dc:	1aab      	subs	r3, r5, r2
 800e8de:	4444      	add	r4, r8
 800e8e0:	4407      	add	r7, r0
 800e8e2:	4406      	add	r6, r0
 800e8e4:	f8ad 3000 	strh.w	r3, [sp]
 800e8e8:	1913      	adds	r3, r2, r4
 800e8ea:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e8ee:	4668      	mov	r0, sp
 800e8f0:	1abb      	subs	r3, r7, r2
 800e8f2:	4432      	add	r2, r6
 800e8f4:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e8f8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e8fc:	f7f9 fe72 	bl	80085e4 <WM__InitIVRSearch>
 800e900:	b920      	cbnz	r0, 800e90c <GUI_DrawRect+0x50>
 800e902:	f7fe f84b 	bl	800c99c <GUI_Unlock>
 800e906:	b003      	add	sp, #12
 800e908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e90c:	4628      	mov	r0, r5
 800e90e:	4639      	mov	r1, r7
 800e910:	4622      	mov	r2, r4
 800e912:	f7fc ff6d 	bl	800b7f0 <LCD_DrawHLine>
 800e916:	f107 0901 	add.w	r9, r7, #1
 800e91a:	4628      	mov	r0, r5
 800e91c:	4631      	mov	r1, r6
 800e91e:	4622      	mov	r2, r4
 800e920:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800e924:	f7fc ff64 	bl	800b7f0 <LCD_DrawHLine>
 800e928:	4628      	mov	r0, r5
 800e92a:	4649      	mov	r1, r9
 800e92c:	4642      	mov	r2, r8
 800e92e:	f7fc ff85 	bl	800b83c <LCD_DrawVLine>
 800e932:	4620      	mov	r0, r4
 800e934:	4649      	mov	r1, r9
 800e936:	4642      	mov	r2, r8
 800e938:	f7fc ff80 	bl	800b83c <LCD_DrawVLine>
 800e93c:	f7f9 fd90 	bl	8008460 <WM__GetNextIVR>
 800e940:	e7de      	b.n	800e900 <GUI_DrawRect+0x44>
 800e942:	bf00      	nop
 800e944:	200002c4 	.word	0x200002c4

0800e948 <LCD_Index2Color_888>:
 800e948:	4770      	bx	lr

0800e94a <LCD_Index2Color_8888>:
 800e94a:	4770      	bx	lr

0800e94c <_Color2Index_8888>:
 800e94c:	4770      	bx	lr

0800e94e <_GetIndexMask_8888>:
 800e94e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e952:	4770      	bx	lr

0800e954 <_Color2IndexBulk>:
 800e954:	b510      	push	{r4, lr}
 800e956:	f850 4b04 	ldr.w	r4, [r0], #4
 800e95a:	600c      	str	r4, [r1, #0]
 800e95c:	3a01      	subs	r2, #1
 800e95e:	4419      	add	r1, r3
 800e960:	d1f9      	bne.n	800e956 <_Color2IndexBulk+0x2>
 800e962:	bd10      	pop	{r4, pc}

0800e964 <_Index2ColorBulk>:
 800e964:	b510      	push	{r4, lr}
 800e966:	6804      	ldr	r4, [r0, #0]
 800e968:	f841 4b04 	str.w	r4, [r1], #4
 800e96c:	3a01      	subs	r2, #1
 800e96e:	4418      	add	r0, r3
 800e970:	d1f9      	bne.n	800e966 <_Index2ColorBulk+0x2>
 800e972:	bd10      	pop	{r4, pc}

0800e974 <_Color2Index_M8888I>:
 800e974:	43c3      	mvns	r3, r0
 800e976:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800e97a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e97e:	4313      	orrs	r3, r2
 800e980:	b2c2      	uxtb	r2, r0
 800e982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e986:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800e98a:	4318      	orrs	r0, r3
 800e98c:	4770      	bx	lr

0800e98e <_Index2Color_M8888I>:
 800e98e:	43c3      	mvns	r3, r0
 800e990:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800e994:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e998:	4313      	orrs	r3, r2
 800e99a:	b2c2      	uxtb	r2, r0
 800e99c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9a0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800e9a4:	4318      	orrs	r0, r3
 800e9a6:	4770      	bx	lr

0800e9a8 <_GetIndexMask_M8888I>:
 800e9a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9ac:	4770      	bx	lr
	...

0800e9b0 <_Color2IndexBulk_M8888I>:
 800e9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9b2:	4c0e      	ldr	r4, [pc, #56]	; (800e9ec <_Color2IndexBulk_M8888I+0x3c>)
 800e9b4:	6824      	ldr	r4, [r4, #0]
 800e9b6:	4607      	mov	r7, r0
 800e9b8:	460e      	mov	r6, r1
 800e9ba:	4615      	mov	r5, r2
 800e9bc:	469c      	mov	ip, r3
 800e9be:	b10c      	cbz	r4, 800e9c4 <_Color2IndexBulk_M8888I+0x14>
 800e9c0:	47a0      	blx	r4
 800e9c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9c4:	f857 4b04 	ldr.w	r4, [r7], #4
 800e9c8:	43e3      	mvns	r3, r4
 800e9ca:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800e9ce:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e9d2:	4313      	orrs	r3, r2
 800e9d4:	b2e2      	uxtb	r2, r4
 800e9d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9da:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 800e9de:	431c      	orrs	r4, r3
 800e9e0:	3d01      	subs	r5, #1
 800e9e2:	6034      	str	r4, [r6, #0]
 800e9e4:	4466      	add	r6, ip
 800e9e6:	d1ed      	bne.n	800e9c4 <_Color2IndexBulk_M8888I+0x14>
 800e9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	20008644 	.word	0x20008644

0800e9f0 <_Index2ColorBulk_M8888I>:
 800e9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9f2:	4c0e      	ldr	r4, [pc, #56]	; (800ea2c <_Index2ColorBulk_M8888I+0x3c>)
 800e9f4:	6824      	ldr	r4, [r4, #0]
 800e9f6:	4606      	mov	r6, r0
 800e9f8:	460f      	mov	r7, r1
 800e9fa:	4615      	mov	r5, r2
 800e9fc:	469c      	mov	ip, r3
 800e9fe:	b10c      	cbz	r4, 800ea04 <_Index2ColorBulk_M8888I+0x14>
 800ea00:	47a0      	blx	r4
 800ea02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea04:	6834      	ldr	r4, [r6, #0]
 800ea06:	43e3      	mvns	r3, r4
 800ea08:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800ea0c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ea10:	4313      	orrs	r3, r2
 800ea12:	b2e2      	uxtb	r2, r4
 800ea14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea18:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 800ea1c:	431c      	orrs	r4, r3
 800ea1e:	3d01      	subs	r5, #1
 800ea20:	f847 4b04 	str.w	r4, [r7], #4
 800ea24:	4466      	add	r6, ip
 800ea26:	d1ed      	bne.n	800ea04 <_Index2ColorBulk_M8888I+0x14>
 800ea28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	20008640 	.word	0x20008640

0800ea30 <_Color2Index_M1555I>:
 800ea30:	4b08      	ldr	r3, [pc, #32]	; (800ea54 <_Color2Index_M1555I+0x24>)
 800ea32:	b2c2      	uxtb	r2, r0
 800ea34:	5c99      	ldrb	r1, [r3, r2]
 800ea36:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800ea3a:	5c9a      	ldrb	r2, [r3, r2]
 800ea3c:	eb02 2281 	add.w	r2, r2, r1, lsl #10
 800ea40:	43c1      	mvns	r1, r0
 800ea42:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800ea46:	0fc9      	lsrs	r1, r1, #31
 800ea48:	5c18      	ldrb	r0, [r3, r0]
 800ea4a:	eb02 32c1 	add.w	r2, r2, r1, lsl #15
 800ea4e:	eb02 1040 	add.w	r0, r2, r0, lsl #5
 800ea52:	4770      	bx	lr
 800ea54:	08068afe 	.word	0x08068afe

0800ea58 <_Index2Color_M1555I>:
 800ea58:	4b0b      	ldr	r3, [pc, #44]	; (800ea88 <_Index2Color_M1555I+0x30>)
 800ea5a:	f000 021f 	and.w	r2, r0, #31
 800ea5e:	b510      	push	{r4, lr}
 800ea60:	5c99      	ldrb	r1, [r3, r2]
 800ea62:	f3c0 2484 	ubfx	r4, r0, #10, #5
 800ea66:	f3c0 1244 	ubfx	r2, r0, #5, #5
 800ea6a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800ea6e:	5c9a      	ldrb	r2, [r3, r2]
 800ea70:	5d1b      	ldrb	r3, [r3, r4]
 800ea72:	eb03 4001 	add.w	r0, r3, r1, lsl #16
 800ea76:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 800ea7a:	bf0c      	ite	eq
 800ea7c:	f04f 437f 	moveq.w	r3, #4278190080	; 0xff000000
 800ea80:	2300      	movne	r3, #0
 800ea82:	4418      	add	r0, r3
 800ea84:	bd10      	pop	{r4, pc}
 800ea86:	bf00      	nop
 800ea88:	08068ade 	.word	0x08068ade

0800ea8c <_GetIndexMask_M1555I>:
 800ea8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ea90:	4770      	bx	lr
	...

0800ea94 <_Color2IndexBulk_M1555I>:
 800ea94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea96:	4c11      	ldr	r4, [pc, #68]	; (800eadc <_Color2IndexBulk_M1555I+0x48>)
 800ea98:	6824      	ldr	r4, [r4, #0]
 800ea9a:	4607      	mov	r7, r0
 800ea9c:	460e      	mov	r6, r1
 800ea9e:	4615      	mov	r5, r2
 800eaa0:	469c      	mov	ip, r3
 800eaa2:	b10c      	cbz	r4, 800eaa8 <_Color2IndexBulk_M1555I+0x14>
 800eaa4:	47a0      	blx	r4
 800eaa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaa8:	f857 4b04 	ldr.w	r4, [r7], #4
 800eaac:	4a0c      	ldr	r2, [pc, #48]	; (800eae0 <_Color2IndexBulk_M1555I+0x4c>)
 800eaae:	b2e3      	uxtb	r3, r4
 800eab0:	3d01      	subs	r5, #1
 800eab2:	5cd1      	ldrb	r1, [r2, r3]
 800eab4:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800eab8:	5cd3      	ldrb	r3, [r2, r3]
 800eaba:	eb03 2381 	add.w	r3, r3, r1, lsl #10
 800eabe:	ea6f 0104 	mvn.w	r1, r4
 800eac2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800eac6:	ea4f 71d1 	mov.w	r1, r1, lsr #31
 800eaca:	5d12      	ldrb	r2, [r2, r4]
 800eacc:	eb03 33c1 	add.w	r3, r3, r1, lsl #15
 800ead0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800ead4:	8033      	strh	r3, [r6, #0]
 800ead6:	4466      	add	r6, ip
 800ead8:	d1e6      	bne.n	800eaa8 <_Color2IndexBulk_M1555I+0x14>
 800eada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eadc:	2000864c 	.word	0x2000864c
 800eae0:	08068afe 	.word	0x08068afe

0800eae4 <_Index2ColorBulk_M1555I>:
 800eae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eae6:	4d17      	ldr	r5, [pc, #92]	; (800eb44 <_Index2ColorBulk_M1555I+0x60>)
 800eae8:	682d      	ldr	r5, [r5, #0]
 800eaea:	4684      	mov	ip, r0
 800eaec:	4614      	mov	r4, r2
 800eaee:	461e      	mov	r6, r3
 800eaf0:	b10d      	cbz	r5, 800eaf6 <_Index2ColorBulk_M1555I+0x12>
 800eaf2:	47a8      	blx	r5
 800eaf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaf6:	1e50      	subs	r0, r2, #1
 800eaf8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800eafc:	3a01      	subs	r2, #1
 800eafe:	fb03 c000 	mla	r0, r3, r0, ip
 800eb02:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eb06:	8802      	ldrh	r2, [r0, #0]
 800eb08:	4d0f      	ldr	r5, [pc, #60]	; (800eb48 <_Index2ColorBulk_M1555I+0x64>)
 800eb0a:	f002 031f 	and.w	r3, r2, #31
 800eb0e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800eb12:	f815 c003 	ldrb.w	ip, [r5, r3]
 800eb16:	f3c2 1344 	ubfx	r3, r2, #5, #5
 800eb1a:	ebc6 0000 	rsb	r0, r6, r0
 800eb1e:	5cef      	ldrb	r7, [r5, r3]
 800eb20:	f3c2 2384 	ubfx	r3, r2, #10, #5
 800eb24:	bf0c      	ite	eq
 800eb26:	f04f 427f 	moveq.w	r2, #4278190080	; 0xff000000
 800eb2a:	2200      	movne	r2, #0
 800eb2c:	5ceb      	ldrb	r3, [r5, r3]
 800eb2e:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 800eb32:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800eb36:	4413      	add	r3, r2
 800eb38:	3c01      	subs	r4, #1
 800eb3a:	f841 3904 	str.w	r3, [r1], #-4
 800eb3e:	d1e2      	bne.n	800eb06 <_Index2ColorBulk_M1555I+0x22>
 800eb40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb42:	bf00      	nop
 800eb44:	20008648 	.word	0x20008648
 800eb48:	08068ade 	.word	0x08068ade

0800eb4c <GUIPROP_AA4_EXT_DispChar>:
 800eb4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb50:	4d2a      	ldr	r5, [pc, #168]	; (800ebfc <GUIPROP_AA4_EXT_DispChar+0xb0>)
 800eb52:	682b      	ldr	r3, [r5, #0]
 800eb54:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 800eb58:	69db      	ldr	r3, [r3, #28]
 800eb5a:	4604      	mov	r4, r0
 800eb5c:	b087      	sub	sp, #28
 800eb5e:	69d8      	ldr	r0, [r3, #28]
 800eb60:	4621      	mov	r1, r4
 800eb62:	f7ff f8d3 	bl	800dd0c <GUIPROP_EXT__FindChar>
 800eb66:	2800      	cmp	r0, #0
 800eb68:	d045      	beq.n	800ebf6 <GUIPROP_AA4_EXT_DispChar+0xaa>
 800eb6a:	8806      	ldrh	r6, [r0, #0]
 800eb6c:	6847      	ldr	r7, [r0, #4]
 800eb6e:	1ba4      	subs	r4, r4, r6
 800eb70:	260c      	movs	r6, #12
 800eb72:	4366      	muls	r6, r4
 800eb74:	4648      	mov	r0, r9
 800eb76:	f817 8006 	ldrb.w	r8, [r7, r6]
 800eb7a:	f7fc fe03 	bl	800b784 <LCD_SetDrawMode>
 800eb7e:	4b20      	ldr	r3, [pc, #128]	; (800ec00 <GUIPROP_AA4_EXT_DispChar+0xb4>)
 800eb80:	5dba      	ldrb	r2, [r7, r6]
 800eb82:	f8d3 e000 	ldr.w	lr, [r3]
 800eb86:	19bc      	adds	r4, r7, r6
 800eb88:	f108 0801 	add.w	r8, r8, #1
 800eb8c:	4681      	mov	r9, r0
 800eb8e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800eb92:	f994 0002 	ldrsb.w	r0, [r4, #2]
 800eb96:	f994 1003 	ldrsb.w	r1, [r4, #3]
 800eb9a:	7863      	ldrb	r3, [r4, #1]
 800eb9c:	682e      	ldr	r6, [r5, #0]
 800eb9e:	f1be 0f00 	cmp.w	lr, #0
 800eba2:	d014      	beq.n	800ebce <GUIPROP_AA4_EXT_DispChar+0x82>
 800eba4:	f9b6 c022 	ldrsh.w	ip, [r6, #34]	; 0x22
 800eba8:	f9b6 7024 	ldrsh.w	r7, [r6, #36]	; 0x24
 800ebac:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebb0:	2601      	movs	r6, #1
 800ebb2:	9600      	str	r6, [sp, #0]
 800ebb4:	9601      	str	r6, [sp, #4]
 800ebb6:	2604      	movs	r6, #4
 800ebb8:	9602      	str	r6, [sp, #8]
 800ebba:	68a6      	ldr	r6, [r4, #8]
 800ebbc:	9604      	str	r6, [sp, #16]
 800ebbe:	2600      	movs	r6, #0
 800ebc0:	9605      	str	r6, [sp, #20]
 800ebc2:	f8de 6000 	ldr.w	r6, [lr]
 800ebc6:	4460      	add	r0, ip
 800ebc8:	4439      	add	r1, r7
 800ebca:	47b0      	blx	r6
 800ebcc:	e00b      	b.n	800ebe6 <GUIPROP_AA4_EXT_DispChar+0x9a>
 800ebce:	f9b6 e022 	ldrsh.w	lr, [r6, #34]	; 0x22
 800ebd2:	f9b6 7024 	ldrsh.w	r7, [r6, #36]	; 0x24
 800ebd6:	f8cd 8000 	str.w	r8, [sp]
 800ebda:	68a6      	ldr	r6, [r4, #8]
 800ebdc:	9601      	str	r6, [sp, #4]
 800ebde:	4470      	add	r0, lr
 800ebe0:	4439      	add	r1, r7
 800ebe2:	f000 f847 	bl	800ec74 <GUI_AA__DrawCharAA4>
 800ebe6:	4648      	mov	r0, r9
 800ebe8:	f7fc fdcc 	bl	800b784 <LCD_SetDrawMode>
 800ebec:	682b      	ldr	r3, [r5, #0]
 800ebee:	7921      	ldrb	r1, [r4, #4]
 800ebf0:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800ebf2:	440a      	add	r2, r1
 800ebf4:	845a      	strh	r2, [r3, #34]	; 0x22
 800ebf6:	b007      	add	sp, #28
 800ebf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebfc:	200002c4 	.word	0x200002c4
 800ec00:	20028850 	.word	0x20028850

0800ec04 <_DrawCharAA4_Trans>:
 800ec04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec08:	4680      	mov	r8, r0
 800ec0a:	468a      	mov	sl, r1
 800ec0c:	4693      	mov	fp, r2
 800ec0e:	461f      	mov	r7, r3
 800ec10:	2500      	movs	r5, #0
 800ec12:	42bd      	cmp	r5, r7
 800ec14:	da2b      	bge.n	800ec6e <_DrawCharAA4_Trans+0x6a>
 800ec16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec18:	eb05 090a 	add.w	r9, r5, sl
 800ec1c:	4644      	mov	r4, r8
 800ec1e:	465e      	mov	r6, fp
 800ec20:	2e01      	cmp	r6, #1
 800ec22:	ebc8 0004 	rsb	r0, r8, r4
 800ec26:	dd15      	ble.n	800ec54 <_DrawCharAA4_Trans+0x50>
 800ec28:	f813 cb01 	ldrb.w	ip, [r3], #1
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	ea4f 121c 	mov.w	r2, ip, lsr #4
 800ec32:	4649      	mov	r1, r9
 800ec34:	e88d 1008 	stmia.w	sp, {r3, ip}
 800ec38:	f003 f888 	bl	8011d4c <LCD_SetPixelAA4_Trans>
 800ec3c:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ec40:	1c60      	adds	r0, r4, #1
 800ec42:	4649      	mov	r1, r9
 800ec44:	f00c 020f 	and.w	r2, ip, #15
 800ec48:	f003 f880 	bl	8011d4c <LCD_SetPixelAA4_Trans>
 800ec4c:	3e02      	subs	r6, #2
 800ec4e:	3402      	adds	r4, #2
 800ec50:	9b00      	ldr	r3, [sp, #0]
 800ec52:	e7e5      	b.n	800ec20 <_DrawCharAA4_Trans+0x1c>
 800ec54:	b12e      	cbz	r6, 800ec62 <_DrawCharAA4_Trans+0x5e>
 800ec56:	781a      	ldrb	r2, [r3, #0]
 800ec58:	4440      	add	r0, r8
 800ec5a:	4649      	mov	r1, r9
 800ec5c:	0912      	lsrs	r2, r2, #4
 800ec5e:	f003 f875 	bl	8011d4c <LCD_SetPixelAA4_Trans>
 800ec62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec66:	4413      	add	r3, r2
 800ec68:	930d      	str	r3, [sp, #52]	; 0x34
 800ec6a:	3501      	adds	r5, #1
 800ec6c:	e7d1      	b.n	800ec12 <_DrawCharAA4_Trans+0xe>
 800ec6e:	b003      	add	sp, #12
 800ec70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec74 <GUI_AA__DrawCharAA4>:
 800ec74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec78:	4c2b      	ldr	r4, [pc, #172]	; (800ed28 <GUI_AA__DrawCharAA4+0xb4>)
 800ec7a:	6825      	ldr	r5, [r4, #0]
 800ec7c:	7c2c      	ldrb	r4, [r5, #16]
 800ec7e:	b087      	sub	sp, #28
 800ec80:	07a4      	lsls	r4, r4, #30
 800ec82:	4682      	mov	sl, r0
 800ec84:	4689      	mov	r9, r1
 800ec86:	4693      	mov	fp, r2
 800ec88:	9305      	str	r3, [sp, #20]
 800ec8a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800ec8c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800ec8e:	d443      	bmi.n	800ed18 <GUI_AA__DrawCharAA4+0xa4>
 800ec90:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ec92:	681c      	ldr	r4, [r3, #0]
 800ec94:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800ec96:	681d      	ldr	r5, [r3, #0]
 800ec98:	4b24      	ldr	r3, [pc, #144]	; (800ed2c <GUI_AA__DrawCharAA4+0xb8>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	42ab      	cmp	r3, r5
 800ec9e:	d103      	bne.n	800eca8 <GUI_AA__DrawCharAA4+0x34>
 800eca0:	4b23      	ldr	r3, [pc, #140]	; (800ed30 <GUI_AA__DrawCharAA4+0xbc>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	42a3      	cmp	r3, r4
 800eca6:	d025      	beq.n	800ecf4 <GUI_AA__DrawCharAA4+0x80>
 800eca8:	4620      	mov	r0, r4
 800ecaa:	f7fd f86d 	bl	800bd88 <LCD_Index2Color>
 800ecae:	4680      	mov	r8, r0
 800ecb0:	4628      	mov	r0, r5
 800ecb2:	f7fd f869 	bl	800bd88 <LCD_Index2Color>
 800ecb6:	4b1f      	ldr	r3, [pc, #124]	; (800ed34 <GUI_AA__DrawCharAA4+0xc0>)
 800ecb8:	4684      	mov	ip, r0
 800ecba:	f8c3 8000 	str.w	r8, [r3]
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	b2da      	uxtb	r2, r3
 800ecc2:	4660      	mov	r0, ip
 800ecc4:	4641      	mov	r1, r8
 800ecc6:	9303      	str	r3, [sp, #12]
 800ecc8:	f8cd c010 	str.w	ip, [sp, #16]
 800eccc:	f003 f822 	bl	8011d14 <LCD_AA_MixColors16>
 800ecd0:	9b03      	ldr	r3, [sp, #12]
 800ecd2:	4a18      	ldr	r2, [pc, #96]	; (800ed34 <GUI_AA__DrawCharAA4+0xc0>)
 800ecd4:	f8dd c010 	ldr.w	ip, [sp, #16]
 800ecd8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800ecdc:	3301      	adds	r3, #1
 800ecde:	2b0f      	cmp	r3, #15
 800ece0:	d1ee      	bne.n	800ecc0 <GUI_AA__DrawCharAA4+0x4c>
 800ece2:	4815      	ldr	r0, [pc, #84]	; (800ed38 <GUI_AA__DrawCharAA4+0xc4>)
 800ece4:	f8c2 c03c 	str.w	ip, [r2, #60]	; 0x3c
 800ece8:	f002 ff9e 	bl	8011c28 <LCD_GetpPalConvTableUncached>
 800ecec:	4b0f      	ldr	r3, [pc, #60]	; (800ed2c <GUI_AA__DrawCharAA4+0xb8>)
 800ecee:	601d      	str	r5, [r3, #0]
 800ecf0:	4b0f      	ldr	r3, [pc, #60]	; (800ed30 <GUI_AA__DrawCharAA4+0xbc>)
 800ecf2:	601c      	str	r4, [r3, #0]
 800ecf4:	4811      	ldr	r0, [pc, #68]	; (800ed3c <GUI_AA__DrawCharAA4+0xc8>)
 800ecf6:	9b05      	ldr	r3, [sp, #20]
 800ecf8:	8043      	strh	r3, [r0, #2]
 800ecfa:	4b11      	ldr	r3, [pc, #68]	; (800ed40 <GUI_AA__DrawCharAA4+0xcc>)
 800ecfc:	f8a0 b000 	strh.w	fp, [r0]
 800ed00:	781a      	ldrb	r2, [r3, #0]
 800ed02:	4b0d      	ldr	r3, [pc, #52]	; (800ed38 <GUI_AA__DrawCharAA4+0xc4>)
 800ed04:	8087      	strh	r7, [r0, #4]
 800ed06:	711a      	strb	r2, [r3, #4]
 800ed08:	4651      	mov	r1, sl
 800ed0a:	464a      	mov	r2, r9
 800ed0c:	6086      	str	r6, [r0, #8]
 800ed0e:	b007      	add	sp, #28
 800ed10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed14:	f004 b80a 	b.w	8012d2c <GL_DrawBitmap>
 800ed18:	4c0a      	ldr	r4, [pc, #40]	; (800ed44 <GUI_AA__DrawCharAA4+0xd0>)
 800ed1a:	9700      	str	r7, [sp, #0]
 800ed1c:	9601      	str	r6, [sp, #4]
 800ed1e:	6824      	ldr	r4, [r4, #0]
 800ed20:	47a0      	blx	r4
 800ed22:	b007      	add	sp, #28
 800ed24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed28:	200002c4 	.word	0x200002c4
 800ed2c:	20008690 	.word	0x20008690
 800ed30:	20008694 	.word	0x20008694
 800ed34:	20008650 	.word	0x20008650
 800ed38:	200002d4 	.word	0x200002d4
 800ed3c:	200002e4 	.word	0x200002e4
 800ed40:	20028820 	.word	0x20028820
 800ed44:	200002e0 	.word	0x200002e0

0800ed48 <_DrawDownRect>:
 800ed48:	b510      	push	{r4, lr}
 800ed4a:	b09c      	sub	sp, #112	; 0x70
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	4668      	mov	r0, sp
 800ed50:	f7fd ffaa 	bl	800cca8 <GUI_SaveContext_W>
 800ed54:	4b09      	ldr	r3, [pc, #36]	; (800ed7c <_DrawDownRect+0x34>)
 800ed56:	6818      	ldr	r0, [r3, #0]
 800ed58:	f7fd f866 	bl	800be28 <LCD_SetColor>
 800ed5c:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ed60:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ed64:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800ed68:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800ed6c:	f7ff fda6 	bl	800e8bc <GUI_DrawRect>
 800ed70:	4668      	mov	r0, sp
 800ed72:	f7fd ffa3 	bl	800ccbc <GUI_RestoreContext>
 800ed76:	b01c      	add	sp, #112	; 0x70
 800ed78:	bd10      	pop	{r4, pc}
 800ed7a:	bf00      	nop
 800ed7c:	20008698 	.word	0x20008698

0800ed80 <_DrawUpRect>:
 800ed80:	b510      	push	{r4, lr}
 800ed82:	b09c      	sub	sp, #112	; 0x70
 800ed84:	4604      	mov	r4, r0
 800ed86:	4668      	mov	r0, sp
 800ed88:	f7fd ff8e 	bl	800cca8 <GUI_SaveContext_W>
 800ed8c:	4b09      	ldr	r3, [pc, #36]	; (800edb4 <_DrawUpRect+0x34>)
 800ed8e:	6818      	ldr	r0, [r3, #0]
 800ed90:	f7fd f84a 	bl	800be28 <LCD_SetColor>
 800ed94:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ed98:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ed9c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800eda0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800eda4:	f7ff fd8a 	bl	800e8bc <GUI_DrawRect>
 800eda8:	4668      	mov	r0, sp
 800edaa:	f7fd ff87 	bl	800ccbc <GUI_RestoreContext>
 800edae:	b01c      	add	sp, #112	; 0x70
 800edb0:	bd10      	pop	{r4, pc}
 800edb2:	bf00      	nop
 800edb4:	20008698 	.word	0x20008698

0800edb8 <_DrawDown>:
 800edb8:	b507      	push	{r0, r1, r2, lr}
 800edba:	4668      	mov	r0, sp
 800edbc:	f7f8 fcc8 	bl	8007750 <WM_GetClientRect>
 800edc0:	4668      	mov	r0, sp
 800edc2:	f7ff ffc1 	bl	800ed48 <_DrawDownRect>
 800edc6:	b003      	add	sp, #12
 800edc8:	f85d fb04 	ldr.w	pc, [sp], #4

0800edcc <_DrawUp>:
 800edcc:	b507      	push	{r0, r1, r2, lr}
 800edce:	4668      	mov	r0, sp
 800edd0:	f7f8 fcbe 	bl	8007750 <WM_GetClientRect>
 800edd4:	4668      	mov	r0, sp
 800edd6:	f7ff ffd3 	bl	800ed80 <_DrawUpRect>
 800edda:	b003      	add	sp, #12
 800eddc:	f85d fb04 	ldr.w	pc, [sp], #4

0800ede0 <_GetArrowPara>:
 800ede0:	b510      	push	{r4, lr}
 800ede2:	b121      	cbz	r1, 800edee <_GetArrowPara+0xe>
 800ede4:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800ede8:	f9b0 1000 	ldrsh.w	r1, [r0]
 800edec:	e003      	b.n	800edf6 <_GetArrowPara+0x16>
 800edee:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800edf2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800edf6:	1a61      	subs	r1, r4, r1
 800edf8:	3101      	adds	r1, #1
 800edfa:	1f0c      	subs	r4, r1, #4
 800edfc:	2003      	movs	r0, #3
 800edfe:	fb94 f0f0 	sdiv	r0, r4, r0
 800ee02:	6010      	str	r0, [r2, #0]
 800ee04:	1a08      	subs	r0, r1, r0
 800ee06:	eba1 0160 	sub.w	r1, r1, r0, asr #1
 800ee0a:	3901      	subs	r1, #1
 800ee0c:	6019      	str	r1, [r3, #0]
 800ee0e:	bd10      	pop	{r4, pc}

0800ee10 <_DrawGraspH>:
 800ee10:	b570      	push	{r4, r5, r6, lr}
 800ee12:	f9b0 3000 	ldrsh.w	r3, [r0]
 800ee16:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 800ee1a:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 800ee1e:	441e      	add	r6, r3
 800ee20:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800ee24:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800ee26:	1b5c      	subs	r4, r3, r5
 800ee28:	3403      	adds	r4, #3
 800ee2a:	10a4      	asrs	r4, r4, #2
 800ee2c:	4425      	add	r5, r4
 800ee2e:	1076      	asrs	r6, r6, #1
 800ee30:	1b1c      	subs	r4, r3, r4
 800ee32:	f7fd feba 	bl	800cbaa <GUI_SetColor>
 800ee36:	4630      	mov	r0, r6
 800ee38:	4629      	mov	r1, r5
 800ee3a:	4622      	mov	r2, r4
 800ee3c:	f7fe fa32 	bl	800d2a4 <GUI_DrawVLine>
 800ee40:	1cb0      	adds	r0, r6, #2
 800ee42:	4629      	mov	r1, r5
 800ee44:	4622      	mov	r2, r4
 800ee46:	f7fe fa2d 	bl	800d2a4 <GUI_DrawVLine>
 800ee4a:	1d30      	adds	r0, r6, #4
 800ee4c:	4629      	mov	r1, r5
 800ee4e:	4622      	mov	r2, r4
 800ee50:	f7fe fa28 	bl	800d2a4 <GUI_DrawVLine>
 800ee54:	1eb0      	subs	r0, r6, #2
 800ee56:	4629      	mov	r1, r5
 800ee58:	4622      	mov	r2, r4
 800ee5a:	f7fe fa23 	bl	800d2a4 <GUI_DrawVLine>
 800ee5e:	1f30      	subs	r0, r6, #4
 800ee60:	4629      	mov	r1, r5
 800ee62:	4622      	mov	r2, r4
 800ee64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee68:	f7fe ba1c 	b.w	800d2a4 <GUI_DrawVLine>

0800ee6c <_DrawGraspV>:
 800ee6c:	b570      	push	{r4, r5, r6, lr}
 800ee6e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800ee72:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
 800ee76:	f9b0 5000 	ldrsh.w	r5, [r0]
 800ee7a:	441e      	add	r6, r3
 800ee7c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ee80:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800ee82:	1b5c      	subs	r4, r3, r5
 800ee84:	3403      	adds	r4, #3
 800ee86:	10a4      	asrs	r4, r4, #2
 800ee88:	4425      	add	r5, r4
 800ee8a:	1076      	asrs	r6, r6, #1
 800ee8c:	1b1c      	subs	r4, r3, r4
 800ee8e:	f7fd fe8c 	bl	800cbaa <GUI_SetColor>
 800ee92:	4630      	mov	r0, r6
 800ee94:	4629      	mov	r1, r5
 800ee96:	4622      	mov	r2, r4
 800ee98:	f7fe fa38 	bl	800d30c <GUI_DrawHLine>
 800ee9c:	1cb0      	adds	r0, r6, #2
 800ee9e:	4629      	mov	r1, r5
 800eea0:	4622      	mov	r2, r4
 800eea2:	f7fe fa33 	bl	800d30c <GUI_DrawHLine>
 800eea6:	1d30      	adds	r0, r6, #4
 800eea8:	4629      	mov	r1, r5
 800eeaa:	4622      	mov	r2, r4
 800eeac:	f7fe fa2e 	bl	800d30c <GUI_DrawHLine>
 800eeb0:	1eb0      	subs	r0, r6, #2
 800eeb2:	4629      	mov	r1, r5
 800eeb4:	4622      	mov	r2, r4
 800eeb6:	f7fe fa29 	bl	800d30c <GUI_DrawHLine>
 800eeba:	1f30      	subs	r0, r6, #4
 800eebc:	4629      	mov	r1, r5
 800eebe:	4622      	mov	r2, r4
 800eec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eec4:	f7fe ba22 	b.w	800d30c <GUI_DrawHLine>

0800eec8 <_DrawFrame>:
 800eec8:	b538      	push	{r3, r4, r5, lr}
 800eeca:	4604      	mov	r4, r0
 800eecc:	6808      	ldr	r0, [r1, #0]
 800eece:	460d      	mov	r5, r1
 800eed0:	f7fd fe6b 	bl	800cbaa <GUI_SetColor>
 800eed4:	f9b4 1000 	ldrsh.w	r1, [r4]
 800eed8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800eedc:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 800eee0:	3101      	adds	r1, #1
 800eee2:	3a01      	subs	r2, #1
 800eee4:	f7fe fa12 	bl	800d30c <GUI_DrawHLine>
 800eee8:	f9b4 1000 	ldrsh.w	r1, [r4]
 800eeec:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800eef0:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 800eef4:	3101      	adds	r1, #1
 800eef6:	3a01      	subs	r2, #1
 800eef8:	f7fe fa08 	bl	800d30c <GUI_DrawHLine>
 800eefc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ef00:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ef04:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ef08:	3101      	adds	r1, #1
 800ef0a:	3a01      	subs	r2, #1
 800ef0c:	f7fe f9ca 	bl	800d2a4 <GUI_DrawVLine>
 800ef10:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ef14:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ef18:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800ef1c:	3101      	adds	r1, #1
 800ef1e:	3a01      	subs	r2, #1
 800ef20:	f7fe f9c0 	bl	800d2a4 <GUI_DrawVLine>
 800ef24:	6868      	ldr	r0, [r5, #4]
 800ef26:	f7fd fe40 	bl	800cbaa <GUI_SetColor>
 800ef2a:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 800ef2e:	f9b4 1000 	ldrsh.w	r1, [r4]
 800ef32:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800ef36:	3001      	adds	r0, #1
 800ef38:	3101      	adds	r1, #1
 800ef3a:	3a01      	subs	r2, #1
 800ef3c:	f7fe f9e6 	bl	800d30c <GUI_DrawHLine>
 800ef40:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 800ef44:	f9b4 1000 	ldrsh.w	r1, [r4]
 800ef48:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800ef4c:	3801      	subs	r0, #1
 800ef4e:	3101      	adds	r1, #1
 800ef50:	3a01      	subs	r2, #1
 800ef52:	f7fe f9db 	bl	800d30c <GUI_DrawHLine>
 800ef56:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ef5a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ef5e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ef62:	3001      	adds	r0, #1
 800ef64:	3102      	adds	r1, #2
 800ef66:	3a02      	subs	r2, #2
 800ef68:	f7fe f99c 	bl	800d2a4 <GUI_DrawVLine>
 800ef6c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800ef70:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ef74:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ef78:	3102      	adds	r1, #2
 800ef7a:	3a02      	subs	r2, #2
 800ef7c:	3801      	subs	r0, #1
 800ef7e:	f7fe f991 	bl	800d2a4 <GUI_DrawVLine>
 800ef82:	68a8      	ldr	r0, [r5, #8]
 800ef84:	f7fd fe11 	bl	800cbaa <GUI_SetColor>
 800ef88:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ef8c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ef90:	f003 fea4 	bl	8012cdc <GUI_DrawPixel>
 800ef94:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ef98:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800ef9c:	f003 fe9e 	bl	8012cdc <GUI_DrawPixel>
 800efa0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800efa4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800efa8:	f003 fe98 	bl	8012cdc <GUI_DrawPixel>
 800efac:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800efb0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800efb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efb8:	f003 be90 	b.w	8012cdc <GUI_DrawPixel>

0800efbc <_DrawBackgroundH>:
 800efbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800efbe:	4604      	mov	r4, r0
 800efc0:	460d      	mov	r5, r1
 800efc2:	f7ff ff81 	bl	800eec8 <_DrawFrame>
 800efc6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800efca:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800efce:	f9b4 0000 	ldrsh.w	r0, [r4]
 800efd2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800efd6:	68ee      	ldr	r6, [r5, #12]
 800efd8:	9600      	str	r6, [sp, #0]
 800efda:	440b      	add	r3, r1
 800efdc:	692e      	ldr	r6, [r5, #16]
 800efde:	9601      	str	r6, [sp, #4]
 800efe0:	3002      	adds	r0, #2
 800efe2:	3102      	adds	r1, #2
 800efe4:	3a02      	subs	r2, #2
 800efe6:	105b      	asrs	r3, r3, #1
 800efe8:	f7fe faac 	bl	800d544 <GUI_DrawGradientV>
 800efec:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800eff0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800eff4:	f9b4 0000 	ldrsh.w	r0, [r4]
 800eff8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800effc:	696c      	ldr	r4, [r5, #20]
 800effe:	9400      	str	r4, [sp, #0]
 800f000:	4419      	add	r1, r3
 800f002:	69ac      	ldr	r4, [r5, #24]
 800f004:	9401      	str	r4, [sp, #4]
 800f006:	1049      	asrs	r1, r1, #1
 800f008:	3002      	adds	r0, #2
 800f00a:	3101      	adds	r1, #1
 800f00c:	3a02      	subs	r2, #2
 800f00e:	3b02      	subs	r3, #2
 800f010:	f7fe fa98 	bl	800d544 <GUI_DrawGradientV>
 800f014:	b002      	add	sp, #8
 800f016:	bd70      	pop	{r4, r5, r6, pc}

0800f018 <_DrawBackgroundV>:
 800f018:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f01a:	4604      	mov	r4, r0
 800f01c:	460d      	mov	r5, r1
 800f01e:	f7ff ff53 	bl	800eec8 <_DrawFrame>
 800f022:	f9b4 0000 	ldrsh.w	r0, [r4]
 800f026:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800f02a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800f02e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800f032:	68ee      	ldr	r6, [r5, #12]
 800f034:	9600      	str	r6, [sp, #0]
 800f036:	4402      	add	r2, r0
 800f038:	692e      	ldr	r6, [r5, #16]
 800f03a:	9601      	str	r6, [sp, #4]
 800f03c:	3002      	adds	r0, #2
 800f03e:	3102      	adds	r1, #2
 800f040:	1052      	asrs	r2, r2, #1
 800f042:	3b02      	subs	r3, #2
 800f044:	f7fe fab6 	bl	800d5b4 <GUI_DrawGradientH>
 800f048:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800f04c:	f9b4 0000 	ldrsh.w	r0, [r4]
 800f050:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800f054:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800f058:	696c      	ldr	r4, [r5, #20]
 800f05a:	9400      	str	r4, [sp, #0]
 800f05c:	4410      	add	r0, r2
 800f05e:	69ac      	ldr	r4, [r5, #24]
 800f060:	9401      	str	r4, [sp, #4]
 800f062:	1040      	asrs	r0, r0, #1
 800f064:	3001      	adds	r0, #1
 800f066:	3102      	adds	r1, #2
 800f068:	3a02      	subs	r2, #2
 800f06a:	3b02      	subs	r3, #2
 800f06c:	f7fe faa2 	bl	800d5b4 <GUI_DrawGradientH>
 800f070:	b002      	add	sp, #8
 800f072:	bd70      	pop	{r4, r5, r6, pc}

0800f074 <SCROLLBAR_DrawSkinFlex>:
 800f074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f078:	4604      	mov	r4, r0
 800f07a:	b08b      	sub	sp, #44	; 0x2c
 800f07c:	6800      	ldr	r0, [r0, #0]
 800f07e:	f7ff f97b 	bl	800e378 <GUI_ALLOC_LockH>
 800f082:	4607      	mov	r7, r0
 800f084:	a80a      	add	r0, sp, #40	; 0x28
 800f086:	ae06      	add	r6, sp, #24
 800f088:	f840 7d1c 	str.w	r7, [r0, #-28]!
 800f08c:	f7ff f982 	bl	800e394 <GUI_ALLOC_UnlockH>
 800f090:	6923      	ldr	r3, [r4, #16]
 800f092:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f096:	6963      	ldr	r3, [r4, #20]
 800f098:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f09c:	69a3      	ldr	r3, [r4, #24]
 800f09e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f0a2:	69e3      	ldr	r3, [r4, #28]
 800f0a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f0a8:	6a25      	ldr	r5, [r4, #32]
 800f0aa:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f0ae:	682b      	ldr	r3, [r5, #0]
 800f0b0:	f10d 0820 	add.w	r8, sp, #32
 800f0b4:	e888 0003 	stmia.w	r8, {r0, r1}
 800f0b8:	b153      	cbz	r3, 800f0d0 <SCROLLBAR_DrawSkinFlex+0x5c>
 800f0ba:	4638      	mov	r0, r7
 800f0bc:	4631      	mov	r1, r6
 800f0be:	4632      	mov	r2, r6
 800f0c0:	f7f6 fe95 	bl	8005dee <WIDGET__RotateRect90>
 800f0c4:	f8df 913c 	ldr.w	r9, [pc, #316]	; 800f204 <SCROLLBAR_DrawSkinFlex+0x190>
 800f0c8:	f8df c13c 	ldr.w	ip, [pc, #316]	; 800f208 <SCROLLBAR_DrawSkinFlex+0x194>
 800f0cc:	4b49      	ldr	r3, [pc, #292]	; (800f1f4 <SCROLLBAR_DrawSkinFlex+0x180>)
 800f0ce:	e004      	b.n	800f0da <SCROLLBAR_DrawSkinFlex+0x66>
 800f0d0:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800f20c <SCROLLBAR_DrawSkinFlex+0x198>
 800f0d4:	f8df c138 	ldr.w	ip, [pc, #312]	; 800f210 <SCROLLBAR_DrawSkinFlex+0x19c>
 800f0d8:	4b47      	ldr	r3, [pc, #284]	; (800f1f8 <SCROLLBAR_DrawSkinFlex+0x184>)
 800f0da:	6862      	ldr	r2, [r4, #4]
 800f0dc:	3a08      	subs	r2, #8
 800f0de:	2a11      	cmp	r2, #17
 800f0e0:	f200 8083 	bhi.w	800f1ea <SCROLLBAR_DrawSkinFlex+0x176>
 800f0e4:	e8df f002 	tbb	[pc, r2]
 800f0e8:	81815f13 	.word	0x81815f13
 800f0ec:	81818134 	.word	0x81818134
 800f0f0:	43813434 	.word	0x43813434
 800f0f4:	81818181 	.word	0x81818181
 800f0f8:	0981      	.short	0x0981
 800f0fa:	682b      	ldr	r3, [r5, #0]
 800f0fc:	b113      	cbz	r3, 800f104 <SCROLLBAR_DrawSkinFlex+0x90>
 800f0fe:	69a0      	ldr	r0, [r4, #24]
 800f100:	6923      	ldr	r3, [r4, #16]
 800f102:	e001      	b.n	800f108 <SCROLLBAR_DrawSkinFlex+0x94>
 800f104:	69e0      	ldr	r0, [r4, #28]
 800f106:	6963      	ldr	r3, [r4, #20]
 800f108:	1ac0      	subs	r0, r0, r3
 800f10a:	3001      	adds	r0, #1
 800f10c:	e06e      	b.n	800f1ec <SCROLLBAR_DrawSkinFlex+0x178>
 800f10e:	686a      	ldr	r2, [r5, #4]
 800f110:	493a      	ldr	r1, [pc, #232]	; (800f1fc <SCROLLBAR_DrawSkinFlex+0x188>)
 800f112:	4c3b      	ldr	r4, [pc, #236]	; (800f200 <SCROLLBAR_DrawSkinFlex+0x18c>)
 800f114:	2a02      	cmp	r2, #2
 800f116:	bf08      	it	eq
 800f118:	460c      	moveq	r4, r1
 800f11a:	4630      	mov	r0, r6
 800f11c:	4621      	mov	r1, r4
 800f11e:	4798      	blx	r3
 800f120:	6829      	ldr	r1, [r5, #0]
 800f122:	aa04      	add	r2, sp, #16
 800f124:	ab05      	add	r3, sp, #20
 800f126:	4640      	mov	r0, r8
 800f128:	f7ff fe5a 	bl	800ede0 <_GetArrowPara>
 800f12c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f12e:	f7fd fd3c 	bl	800cbaa <GUI_SetColor>
 800f132:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800f136:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 800f13a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 800f13e:	1ad2      	subs	r2, r2, r3
 800f140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f144:	9300      	str	r3, [sp, #0]
 800f146:	9b05      	ldr	r3, [sp, #20]
 800f148:	3201      	adds	r2, #1
 800f14a:	4638      	mov	r0, r7
 800f14c:	4419      	add	r1, r3
 800f14e:	e048      	b.n	800f1e2 <SCROLLBAR_DrawSkinFlex+0x16e>
 800f150:	4c2b      	ldr	r4, [pc, #172]	; (800f200 <SCROLLBAR_DrawSkinFlex+0x18c>)
 800f152:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 800f156:	69e5      	ldr	r5, [r4, #28]
 800f158:	9500      	str	r5, [sp, #0]
 800f15a:	6a24      	ldr	r4, [r4, #32]
 800f15c:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 800f160:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 800f164:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800f168:	9401      	str	r4, [sp, #4]
 800f16a:	47e0      	blx	ip
 800f16c:	e03d      	b.n	800f1ea <SCROLLBAR_DrawSkinFlex+0x176>
 800f16e:	686a      	ldr	r2, [r5, #4]
 800f170:	4922      	ldr	r1, [pc, #136]	; (800f1fc <SCROLLBAR_DrawSkinFlex+0x188>)
 800f172:	4c23      	ldr	r4, [pc, #140]	; (800f200 <SCROLLBAR_DrawSkinFlex+0x18c>)
 800f174:	2a03      	cmp	r2, #3
 800f176:	bf08      	it	eq
 800f178:	460c      	moveq	r4, r1
 800f17a:	4630      	mov	r0, r6
 800f17c:	4621      	mov	r1, r4
 800f17e:	4798      	blx	r3
 800f180:	682b      	ldr	r3, [r5, #0]
 800f182:	b123      	cbz	r3, 800f18e <SCROLLBAR_DrawSkinFlex+0x11a>
 800f184:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 800f188:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800f18c:	e003      	b.n	800f196 <SCROLLBAR_DrawSkinFlex+0x122>
 800f18e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 800f192:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800f196:	1ad3      	subs	r3, r2, r3
 800f198:	3301      	adds	r3, #1
 800f19a:	2b0e      	cmp	r3, #14
 800f19c:	dd25      	ble.n	800f1ea <SCROLLBAR_DrawSkinFlex+0x176>
 800f19e:	4630      	mov	r0, r6
 800f1a0:	4621      	mov	r1, r4
 800f1a2:	47c8      	blx	r9
 800f1a4:	e021      	b.n	800f1ea <SCROLLBAR_DrawSkinFlex+0x176>
 800f1a6:	686a      	ldr	r2, [r5, #4]
 800f1a8:	4914      	ldr	r1, [pc, #80]	; (800f1fc <SCROLLBAR_DrawSkinFlex+0x188>)
 800f1aa:	4c15      	ldr	r4, [pc, #84]	; (800f200 <SCROLLBAR_DrawSkinFlex+0x18c>)
 800f1ac:	2a01      	cmp	r2, #1
 800f1ae:	bf08      	it	eq
 800f1b0:	460c      	moveq	r4, r1
 800f1b2:	4630      	mov	r0, r6
 800f1b4:	4621      	mov	r1, r4
 800f1b6:	4798      	blx	r3
 800f1b8:	6829      	ldr	r1, [r5, #0]
 800f1ba:	aa04      	add	r2, sp, #16
 800f1bc:	ab05      	add	r3, sp, #20
 800f1be:	4640      	mov	r0, r8
 800f1c0:	f7ff fe0e 	bl	800ede0 <_GetArrowPara>
 800f1c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f1c6:	f7fd fcf0 	bl	800cbaa <GUI_SetColor>
 800f1ca:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800f1ce:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 800f1d2:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 800f1d6:	1ad2      	subs	r2, r2, r3
 800f1d8:	2301      	movs	r3, #1
 800f1da:	9300      	str	r3, [sp, #0]
 800f1dc:	9b05      	ldr	r3, [sp, #20]
 800f1de:	4638      	mov	r0, r7
 800f1e0:	1ac9      	subs	r1, r1, r3
 800f1e2:	1052      	asrs	r2, r2, #1
 800f1e4:	9b04      	ldr	r3, [sp, #16]
 800f1e6:	f7f6 ff7d 	bl	80060e4 <WIDGET__DrawTriangle>
 800f1ea:	2000      	movs	r0, #0
 800f1ec:	b00b      	add	sp, #44	; 0x2c
 800f1ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1f2:	bf00      	nop
 800f1f4:	0800f019 	.word	0x0800f019
 800f1f8:	0800efbd 	.word	0x0800efbd
 800f1fc:	200002f8 	.word	0x200002f8
 800f200:	20000324 	.word	0x20000324
 800f204:	0800ee6d 	.word	0x0800ee6d
 800f208:	0800d5b5 	.word	0x0800d5b5
 800f20c:	0800ee11 	.word	0x0800ee11
 800f210:	0800d545 	.word	0x0800d545

0800f214 <_Create>:
 800f214:	b530      	push	{r4, r5, lr}
 800f216:	b08d      	sub	sp, #52	; 0x34
 800f218:	4605      	mov	r5, r0
 800f21a:	f7ff f8ad 	bl	800e378 <GUI_ALLOC_LockH>
 800f21e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800f220:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800f222:	9000      	str	r0, [sp, #0]
 800f224:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f228:	9301      	str	r3, [sp, #4]
 800f22a:	4b07      	ldr	r3, [pc, #28]	; (800f248 <_Create+0x34>)
 800f22c:	6483      	str	r3, [r0, #72]	; 0x48
 800f22e:	4668      	mov	r0, sp
 800f230:	f7ff f8b0 	bl	800e394 <GUI_ALLOC_UnlockH>
 800f234:	2300      	movs	r3, #0
 800f236:	9304      	str	r3, [sp, #16]
 800f238:	ab01      	add	r3, sp, #4
 800f23a:	9503      	str	r5, [sp, #12]
 800f23c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f23e:	a803      	add	r0, sp, #12
 800f240:	47a0      	blx	r4
 800f242:	b00d      	add	sp, #52	; 0x34
 800f244:	bd30      	pop	{r4, r5, pc}
 800f246:	bf00      	nop
 800f248:	0800f24d 	.word	0x0800f24d

0800f24c <_CalcPositions>:
 800f24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f250:	b090      	sub	sp, #64	; 0x40
 800f252:	4605      	mov	r5, r0
 800f254:	460c      	mov	r4, r1
 800f256:	f7ff f88f 	bl	800e378 <GUI_ALLOC_LockH>
 800f25a:	4603      	mov	r3, r0
 800f25c:	9000      	str	r0, [sp, #0]
 800f25e:	c803      	ldmia	r0, {r0, r1}
 800f260:	ae03      	add	r6, sp, #12
 800f262:	e886 0003 	stmia.w	r6, {r0, r1}
 800f266:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800f268:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800f26c:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 800f270:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 800f274:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 800f278:	920e      	str	r2, [sp, #56]	; 0x38
 800f27a:	f000 0008 	and.w	r0, r0, #8
 800f27e:	2800      	cmp	r0, #0
 800f280:	bf0c      	ite	eq
 800f282:	4608      	moveq	r0, r1
 800f284:	4610      	movne	r0, r2
 800f286:	61a0      	str	r0, [r4, #24]
 800f288:	bf0c      	ite	eq
 800f28a:	2000      	moveq	r0, #0
 800f28c:	2001      	movne	r0, #1
 800f28e:	aa01      	add	r2, sp, #4
 800f290:	9001      	str	r0, [sp, #4]
 800f292:	2019      	movs	r0, #25
 800f294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f296:	9008      	str	r0, [sp, #32]
 800f298:	9507      	str	r5, [sp, #28]
 800f29a:	920f      	str	r2, [sp, #60]	; 0x3c
 800f29c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800f2a0:	970c      	str	r7, [sp, #48]	; 0x30
 800f2a2:	910d      	str	r1, [sp, #52]	; 0x34
 800f2a4:	a807      	add	r0, sp, #28
 800f2a6:	4798      	blx	r3
 800f2a8:	9b00      	ldr	r3, [sp, #0]
 800f2aa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f2ae:	2aff      	cmp	r2, #255	; 0xff
 800f2b0:	4605      	mov	r5, r0
 800f2b2:	d111      	bne.n	800f2d8 <_CalcPositions+0x8c>
 800f2b4:	6998      	ldr	r0, [r3, #24]
 800f2b6:	f7f8 f9bc 	bl	8007632 <WM_GetScrollbarV>
 800f2ba:	b168      	cbz	r0, 800f2d8 <_CalcPositions+0x8c>
 800f2bc:	a905      	add	r1, sp, #20
 800f2be:	f7f8 f975 	bl	80075ac <WM_GetWindowRectEx>
 800f2c2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800f2c6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d104      	bne.n	800f2d8 <_CalcPositions+0x8c>
 800f2ce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800f2d2:	3b01      	subs	r3, #1
 800f2d4:	f8ad 3010 	strh.w	r3, [sp, #16]
 800f2d8:	9b00      	ldr	r3, [sp, #0]
 800f2da:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f2de:	2afe      	cmp	r2, #254	; 0xfe
 800f2e0:	d111      	bne.n	800f306 <_CalcPositions+0xba>
 800f2e2:	6998      	ldr	r0, [r3, #24]
 800f2e4:	f7f8 f997 	bl	8007616 <WM_GetScrollbarH>
 800f2e8:	b168      	cbz	r0, 800f306 <_CalcPositions+0xba>
 800f2ea:	a905      	add	r1, sp, #20
 800f2ec:	f7f8 f95e 	bl	80075ac <WM_GetWindowRectEx>
 800f2f0:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800f2f4:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d104      	bne.n	800f306 <_CalcPositions+0xba>
 800f2fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800f300:	3b01      	subs	r3, #1
 800f302:	f8ad 3012 	strh.w	r3, [sp, #18]
 800f306:	427a      	negs	r2, r7
 800f308:	4630      	mov	r0, r6
 800f30a:	f1c8 0100 	rsb	r1, r8, #0
 800f30e:	f7fd fdbb 	bl	800ce88 <GUI_MoveRect>
 800f312:	9800      	ldr	r0, [sp, #0]
 800f314:	4631      	mov	r1, r6
 800f316:	f7f6 ff23 	bl	8006160 <SCROLLBAR__Rect2VRect>
 800f31a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800f31e:	f9bd a010 	ldrsh.w	sl, [sp, #16]
 800f322:	9b00      	ldr	r3, [sp, #0]
 800f324:	ebc2 0a0a 	rsb	sl, r2, sl
 800f328:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
 800f32c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800f32e:	f10a 0601 	add.w	r6, sl, #1
 800f332:	eba6 0645 	sub.w	r6, r6, r5, lsl #1
 800f336:	4649      	mov	r1, r9
 800f338:	4370      	muls	r0, r6
 800f33a:	f7fd f89b 	bl	800c474 <GUI__DivideRound32>
 800f33e:	4b17      	ldr	r3, [pc, #92]	; (800f39c <_CalcPositions+0x150>)
 800f340:	f8c4 a014 	str.w	sl, [r4, #20]
 800f344:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f348:	1c5a      	adds	r2, r3, #1
 800f34a:	4282      	cmp	r2, r0
 800f34c:	bfa8      	it	ge
 800f34e:	1c98      	addge	r0, r3, #2
 800f350:	42b0      	cmp	r0, r6
 800f352:	bfb4      	ite	lt
 800f354:	4607      	movlt	r7, r0
 800f356:	4637      	movge	r7, r6
 800f358:	ebc7 0806 	rsb	r8, r7, r6
 800f35c:	442e      	add	r6, r5
 800f35e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800f362:	6126      	str	r6, [r4, #16]
 800f364:	ae10      	add	r6, sp, #64	; 0x40
 800f366:	6023      	str	r3, [r4, #0]
 800f368:	1e6b      	subs	r3, r5, #1
 800f36a:	6063      	str	r3, [r4, #4]
 800f36c:	f856 3d40 	ldr.w	r3, [r6, #-64]!
 800f370:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f372:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f374:	fb00 f008 	mul.w	r0, r0, r8
 800f378:	ebc1 0109 	rsb	r1, r1, r9
 800f37c:	f7fd f87a 	bl	800c474 <GUI__DivideRound32>
 800f380:	4428      	add	r0, r5
 800f382:	19c5      	adds	r5, r0, r7
 800f384:	3d01      	subs	r5, #1
 800f386:	60a0      	str	r0, [r4, #8]
 800f388:	60e5      	str	r5, [r4, #12]
 800f38a:	f8c4 801c 	str.w	r8, [r4, #28]
 800f38e:	6227      	str	r7, [r4, #32]
 800f390:	4668      	mov	r0, sp
 800f392:	f7fe ffff 	bl	800e394 <GUI_ALLOC_UnlockH>
 800f396:	b010      	add	sp, #64	; 0x40
 800f398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f39c:	20000066 	.word	0x20000066

0800f3a0 <_Paint>:
 800f3a0:	b570      	push	{r4, r5, r6, lr}
 800f3a2:	b098      	sub	sp, #96	; 0x60
 800f3a4:	4606      	mov	r6, r0
 800f3a6:	f7fe ffe7 	bl	800e378 <GUI_ALLOC_LockH>
 800f3aa:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800f3ac:	9305      	str	r3, [sp, #20]
 800f3ae:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800f3b0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800f3b2:	9001      	str	r0, [sp, #4]
 800f3b4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f3b8:	a906      	add	r1, sp, #24
 800f3ba:	4605      	mov	r5, r0
 800f3bc:	4630      	mov	r0, r6
 800f3be:	9304      	str	r3, [sp, #16]
 800f3c0:	f7ff ff44 	bl	800f24c <_CalcPositions>
 800f3c4:	a801      	add	r0, sp, #4
 800f3c6:	f7fe ffe5 	bl	800e394 <GUI_ALLOC_UnlockH>
 800f3ca:	a902      	add	r1, sp, #8
 800f3cc:	4628      	mov	r0, r5
 800f3ce:	f7f6 fd20 	bl	8005e12 <WIDGET__GetClientRect>
 800f3d2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800f3d6:	9314      	str	r3, [sp, #80]	; 0x50
 800f3d8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f3dc:	9316      	str	r3, [sp, #88]	; 0x58
 800f3de:	ab04      	add	r3, sp, #16
 800f3e0:	9317      	str	r3, [sp, #92]	; 0x5c
 800f3e2:	2308      	movs	r3, #8
 800f3e4:	9310      	str	r3, [sp, #64]	; 0x40
 800f3e6:	9b06      	ldr	r3, [sp, #24]
 800f3e8:	9313      	str	r3, [sp, #76]	; 0x4c
 800f3ea:	9b07      	ldr	r3, [sp, #28]
 800f3ec:	9315      	str	r3, [sp, #84]	; 0x54
 800f3ee:	960f      	str	r6, [sp, #60]	; 0x3c
 800f3f0:	a80f      	add	r0, sp, #60	; 0x3c
 800f3f2:	47a0      	blx	r4
 800f3f4:	2310      	movs	r3, #16
 800f3f6:	9310      	str	r3, [sp, #64]	; 0x40
 800f3f8:	9b07      	ldr	r3, [sp, #28]
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	9313      	str	r3, [sp, #76]	; 0x4c
 800f3fe:	9b08      	ldr	r3, [sp, #32]
 800f400:	3b01      	subs	r3, #1
 800f402:	9315      	str	r3, [sp, #84]	; 0x54
 800f404:	a80f      	add	r0, sp, #60	; 0x3c
 800f406:	47a0      	blx	r4
 800f408:	2311      	movs	r3, #17
 800f40a:	9310      	str	r3, [sp, #64]	; 0x40
 800f40c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f40e:	3301      	adds	r3, #1
 800f410:	9313      	str	r3, [sp, #76]	; 0x4c
 800f412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f414:	3b01      	subs	r3, #1
 800f416:	9315      	str	r3, [sp, #84]	; 0x54
 800f418:	a80f      	add	r0, sp, #60	; 0x3c
 800f41a:	47a0      	blx	r4
 800f41c:	2313      	movs	r3, #19
 800f41e:	9310      	str	r3, [sp, #64]	; 0x40
 800f420:	9b08      	ldr	r3, [sp, #32]
 800f422:	9313      	str	r3, [sp, #76]	; 0x4c
 800f424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f426:	9315      	str	r3, [sp, #84]	; 0x54
 800f428:	a80f      	add	r0, sp, #60	; 0x3c
 800f42a:	47a0      	blx	r4
 800f42c:	2309      	movs	r3, #9
 800f42e:	9310      	str	r3, [sp, #64]	; 0x40
 800f430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f432:	9313      	str	r3, [sp, #76]	; 0x4c
 800f434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f436:	9315      	str	r3, [sp, #84]	; 0x54
 800f438:	a80f      	add	r0, sp, #60	; 0x3c
 800f43a:	47a0      	blx	r4
 800f43c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f43e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f440:	429a      	cmp	r2, r3
 800f442:	d006      	beq.n	800f452 <_Paint+0xb2>
 800f444:	210c      	movs	r1, #12
 800f446:	3201      	adds	r2, #1
 800f448:	9110      	str	r1, [sp, #64]	; 0x40
 800f44a:	9213      	str	r2, [sp, #76]	; 0x4c
 800f44c:	9315      	str	r3, [sp, #84]	; 0x54
 800f44e:	a80f      	add	r0, sp, #60	; 0x3c
 800f450:	47a0      	blx	r4
 800f452:	b018      	add	sp, #96	; 0x60
 800f454:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f458 <HEADER_DrawSkinFlex>:
 800f458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f45c:	6843      	ldr	r3, [r0, #4]
 800f45e:	2b06      	cmp	r3, #6
 800f460:	b086      	sub	sp, #24
 800f462:	4604      	mov	r4, r0
 800f464:	d03f      	beq.n	800f4e6 <HEADER_DrawSkinFlex+0x8e>
 800f466:	dc38      	bgt.n	800f4da <HEADER_DrawSkinFlex+0x82>
 800f468:	2b02      	cmp	r3, #2
 800f46a:	f000 80d8 	beq.w	800f61e <HEADER_DrawSkinFlex+0x1c6>
 800f46e:	2b05      	cmp	r3, #5
 800f470:	f040 8135 	bne.w	800f6de <HEADER_DrawSkinFlex+0x286>
 800f474:	4d9c      	ldr	r5, [pc, #624]	; (800f6e8 <HEADER_DrawSkinFlex+0x290>)
 800f476:	6943      	ldr	r3, [r0, #20]
 800f478:	69c6      	ldr	r6, [r0, #28]
 800f47a:	6828      	ldr	r0, [r5, #0]
 800f47c:	441e      	add	r6, r3
 800f47e:	f7fd fb94 	bl	800cbaa <GUI_SetColor>
 800f482:	69e2      	ldr	r2, [r4, #28]
 800f484:	69a0      	ldr	r0, [r4, #24]
 800f486:	6961      	ldr	r1, [r4, #20]
 800f488:	3a01      	subs	r2, #1
 800f48a:	f7fd ff0b 	bl	800d2a4 <GUI_DrawVLine>
 800f48e:	6921      	ldr	r1, [r4, #16]
 800f490:	69a2      	ldr	r2, [r4, #24]
 800f492:	69e0      	ldr	r0, [r4, #28]
 800f494:	f7fd ff3a 	bl	800d30c <GUI_DrawHLine>
 800f498:	6868      	ldr	r0, [r5, #4]
 800f49a:	f7fd fb86 	bl	800cbaa <GUI_SetColor>
 800f49e:	69e2      	ldr	r2, [r4, #28]
 800f4a0:	6920      	ldr	r0, [r4, #16]
 800f4a2:	6961      	ldr	r1, [r4, #20]
 800f4a4:	3a01      	subs	r2, #1
 800f4a6:	f7fd fefd 	bl	800d2a4 <GUI_DrawVLine>
 800f4aa:	68ab      	ldr	r3, [r5, #8]
 800f4ac:	6920      	ldr	r0, [r4, #16]
 800f4ae:	69a2      	ldr	r2, [r4, #24]
 800f4b0:	9300      	str	r3, [sp, #0]
 800f4b2:	68eb      	ldr	r3, [r5, #12]
 800f4b4:	9301      	str	r3, [sp, #4]
 800f4b6:	1076      	asrs	r6, r6, #1
 800f4b8:	3001      	adds	r0, #1
 800f4ba:	6961      	ldr	r1, [r4, #20]
 800f4bc:	3a01      	subs	r2, #1
 800f4be:	1e73      	subs	r3, r6, #1
 800f4c0:	f7fe f840 	bl	800d544 <GUI_DrawGradientV>
 800f4c4:	6929      	ldr	r1, [r5, #16]
 800f4c6:	6920      	ldr	r0, [r4, #16]
 800f4c8:	69a2      	ldr	r2, [r4, #24]
 800f4ca:	69e3      	ldr	r3, [r4, #28]
 800f4cc:	9100      	str	r1, [sp, #0]
 800f4ce:	6969      	ldr	r1, [r5, #20]
 800f4d0:	9101      	str	r1, [sp, #4]
 800f4d2:	3001      	adds	r0, #1
 800f4d4:	4631      	mov	r1, r6
 800f4d6:	3a01      	subs	r2, #1
 800f4d8:	e0fe      	b.n	800f6d8 <HEADER_DrawSkinFlex+0x280>
 800f4da:	2b0c      	cmp	r3, #12
 800f4dc:	f000 80d2 	beq.w	800f684 <HEADER_DrawSkinFlex+0x22c>
 800f4e0:	2b12      	cmp	r3, #18
 800f4e2:	d04b      	beq.n	800f57c <HEADER_DrawSkinFlex+0x124>
 800f4e4:	e0fb      	b.n	800f6de <HEADER_DrawSkinFlex+0x286>
 800f4e6:	6800      	ldr	r0, [r0, #0]
 800f4e8:	f7fe ff46 	bl	800e378 <GUI_ALLOC_LockH>
 800f4ec:	ab06      	add	r3, sp, #24
 800f4ee:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800f4f0:	f843 0d0c 	str.w	r0, [r3, #-12]!
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f7fe ff4d 	bl	800e394 <GUI_ALLOC_UnlockH>
 800f4fa:	68a1      	ldr	r1, [r4, #8]
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	f7f6 fef3 	bl	80062e8 <GUI_ARRAY_GetpItemLocked>
 800f502:	4603      	mov	r3, r0
 800f504:	a806      	add	r0, sp, #24
 800f506:	689d      	ldr	r5, [r3, #8]
 800f508:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f50c:	889e      	ldrh	r6, [r3, #4]
 800f50e:	f8d3 8000 	ldr.w	r8, [r3]
 800f512:	f7fe ff3f 	bl	800e394 <GUI_ALLOC_UnlockH>
 800f516:	4628      	mov	r0, r5
 800f518:	f7f6 fe7f 	bl	800621a <GUI_DRAW__GetXSize>
 800f51c:	4607      	mov	r7, r0
 800f51e:	4628      	mov	r0, r5
 800f520:	f7f6 fe8d 	bl	800623e <GUI_DRAW__GetYSize>
 800f524:	f006 0103 	and.w	r1, r6, #3
 800f528:	2901      	cmp	r1, #1
 800f52a:	d006      	beq.n	800f53a <HEADER_DrawSkinFlex+0xe2>
 800f52c:	2902      	cmp	r1, #2
 800f52e:	d107      	bne.n	800f540 <HEADER_DrawSkinFlex+0xe8>
 800f530:	ebc7 0208 	rsb	r2, r7, r8
 800f534:	fb92 f2f1 	sdiv	r2, r2, r1
 800f538:	e003      	b.n	800f542 <HEADER_DrawSkinFlex+0xea>
 800f53a:	ebc7 0208 	rsb	r2, r7, r8
 800f53e:	e000      	b.n	800f542 <HEADER_DrawSkinFlex+0xea>
 800f540:	2200      	movs	r2, #0
 800f542:	f006 030c 	and.w	r3, r6, #12
 800f546:	2b04      	cmp	r3, #4
 800f548:	6966      	ldr	r6, [r4, #20]
 800f54a:	d009      	beq.n	800f560 <HEADER_DrawSkinFlex+0x108>
 800f54c:	2b0c      	cmp	r3, #12
 800f54e:	d10c      	bne.n	800f56a <HEADER_DrawSkinFlex+0x112>
 800f550:	69e3      	ldr	r3, [r4, #28]
 800f552:	1b9b      	subs	r3, r3, r6
 800f554:	3301      	adds	r3, #1
 800f556:	1a1b      	subs	r3, r3, r0
 800f558:	2102      	movs	r1, #2
 800f55a:	fb93 f3f1 	sdiv	r3, r3, r1
 800f55e:	e005      	b.n	800f56c <HEADER_DrawSkinFlex+0x114>
 800f560:	69e3      	ldr	r3, [r4, #28]
 800f562:	1b9b      	subs	r3, r3, r6
 800f564:	3301      	adds	r3, #1
 800f566:	1a1b      	subs	r3, r3, r0
 800f568:	e000      	b.n	800f56c <HEADER_DrawSkinFlex+0x114>
 800f56a:	2300      	movs	r3, #0
 800f56c:	6927      	ldr	r7, [r4, #16]
 800f56e:	6821      	ldr	r1, [r4, #0]
 800f570:	4628      	mov	r0, r5
 800f572:	443a      	add	r2, r7
 800f574:	4433      	add	r3, r6
 800f576:	f7f6 fe37 	bl	80061e8 <GUI_DRAW__Draw>
 800f57a:	e0b0      	b.n	800f6de <HEADER_DrawSkinFlex+0x286>
 800f57c:	6800      	ldr	r0, [r0, #0]
 800f57e:	f7fe fefb 	bl	800e378 <GUI_ALLOC_LockH>
 800f582:	4603      	mov	r3, r0
 800f584:	a806      	add	r0, sp, #24
 800f586:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800f588:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 800f58c:	f840 3d10 	str.w	r3, [r0, #-16]!
 800f590:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800f592:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800f594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f596:	f8d3 a000 	ldr.w	sl, [r3]
 800f59a:	f7fe fefb 	bl	800e394 <GUI_ALLOC_UnlockH>
 800f59e:	4628      	mov	r0, r5
 800f5a0:	68a1      	ldr	r1, [r4, #8]
 800f5a2:	f7f6 fea1 	bl	80062e8 <GUI_ARRAY_GetpItemLocked>
 800f5a6:	4601      	mov	r1, r0
 800f5a8:	a806      	add	r0, sp, #24
 800f5aa:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 800f5ae:	f840 1d0c 	str.w	r1, [r0, #-12]!
 800f5b2:	f101 090c 	add.w	r9, r1, #12
 800f5b6:	f7fe feed 	bl	800e394 <GUI_ALLOC_UnlockH>
 800f5ba:	6923      	ldr	r3, [r4, #16]
 800f5bc:	f8ad 3010 	strh.w	r3, [sp, #16]
 800f5c0:	6963      	ldr	r3, [r4, #20]
 800f5c2:	f8ad 3012 	strh.w	r3, [sp, #18]
 800f5c6:	a804      	add	r0, sp, #16
 800f5c8:	69a3      	ldr	r3, [r4, #24]
 800f5ca:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f5ce:	4601      	mov	r1, r0
 800f5d0:	69e3      	ldr	r3, [r4, #28]
 800f5d2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f5d6:	4652      	mov	r2, sl
 800f5d8:	f7fc fc9c 	bl	800bf14 <GUI__ReduceRect>
 800f5dc:	68a3      	ldr	r3, [r4, #8]
 800f5de:	4598      	cmp	r8, r3
 800f5e0:	d10e      	bne.n	800f600 <HEADER_DrawSkinFlex+0x1a8>
 800f5e2:	69e1      	ldr	r1, [r4, #28]
 800f5e4:	6963      	ldr	r3, [r4, #20]
 800f5e6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800f5ea:	1acb      	subs	r3, r1, r3
 800f5ec:	3b04      	subs	r3, #4
 800f5ee:	2103      	movs	r1, #3
 800f5f0:	fb93 f3f1 	sdiv	r3, r3, r1
 800f5f4:	3a01      	subs	r2, #1
 800f5f6:	3b01      	subs	r3, #1
 800f5f8:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 800f5fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f600:	4638      	mov	r0, r7
 800f602:	f7fd fad2 	bl	800cbaa <GUI_SetColor>
 800f606:	2002      	movs	r0, #2
 800f608:	f7fd fa78 	bl	800cafc <GUI_SetTextMode>
 800f60c:	4630      	mov	r0, r6
 800f60e:	f7fd fa85 	bl	800cb1c <GUI_SetFont>
 800f612:	4648      	mov	r0, r9
 800f614:	a904      	add	r1, sp, #16
 800f616:	462a      	mov	r2, r5
 800f618:	f7fe f8d1 	bl	800d7be <GUI_DispStringInRect>
 800f61c:	e05f      	b.n	800f6de <HEADER_DrawSkinFlex+0x286>
 800f61e:	6800      	ldr	r0, [r0, #0]
 800f620:	f7fe feaa 	bl	800e378 <GUI_ALLOC_LockH>
 800f624:	ab06      	add	r3, sp, #24
 800f626:	6e47      	ldr	r7, [r0, #100]	; 0x64
 800f628:	f843 0d08 	str.w	r0, [r3, #-8]!
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7fe feb1 	bl	800e394 <GUI_ALLOC_UnlockH>
 800f632:	6963      	ldr	r3, [r4, #20]
 800f634:	69e2      	ldr	r2, [r4, #28]
 800f636:	69a6      	ldr	r6, [r4, #24]
 800f638:	ebc3 0802 	rsb	r8, r3, r2
 800f63c:	4b2a      	ldr	r3, [pc, #168]	; (800f6e8 <HEADER_DrawSkinFlex+0x290>)
 800f63e:	2103      	movs	r1, #3
 800f640:	f1a8 0804 	sub.w	r8, r8, #4
 800f644:	fb98 f8f1 	sdiv	r8, r8, r1
 800f648:	6998      	ldr	r0, [r3, #24]
 800f64a:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 800f64e:	f7fd faac 	bl	800cbaa <GUI_SetColor>
 800f652:	3e04      	subs	r6, #4
 800f654:	69e5      	ldr	r5, [r4, #28]
 800f656:	6963      	ldr	r3, [r4, #20]
 800f658:	007f      	lsls	r7, r7, #1
 800f65a:	ebc9 0606 	rsb	r6, r9, r6
 800f65e:	f1c7 0701 	rsb	r7, r7, #1
 800f662:	ea4f 0969 	mov.w	r9, r9, asr #1
 800f666:	1aed      	subs	r5, r5, r3
 800f668:	fb07 f909 	mul.w	r9, r7, r9
 800f66c:	ebc9 0565 	rsb	r5, r9, r5, asr #1
 800f670:	4644      	mov	r4, r8
 800f672:	3c01      	subs	r4, #1
 800f674:	d433      	bmi.n	800f6de <HEADER_DrawSkinFlex+0x286>
 800f676:	4628      	mov	r0, r5
 800f678:	1b31      	subs	r1, r6, r4
 800f67a:	1932      	adds	r2, r6, r4
 800f67c:	f7fd fe46 	bl	800d30c <GUI_DrawHLine>
 800f680:	443d      	add	r5, r7
 800f682:	e7f6      	b.n	800f672 <HEADER_DrawSkinFlex+0x21a>
 800f684:	4d18      	ldr	r5, [pc, #96]	; (800f6e8 <HEADER_DrawSkinFlex+0x290>)
 800f686:	6943      	ldr	r3, [r0, #20]
 800f688:	69c6      	ldr	r6, [r0, #28]
 800f68a:	6828      	ldr	r0, [r5, #0]
 800f68c:	441e      	add	r6, r3
 800f68e:	f7fd fa8c 	bl	800cbaa <GUI_SetColor>
 800f692:	6921      	ldr	r1, [r4, #16]
 800f694:	69a2      	ldr	r2, [r4, #24]
 800f696:	69e0      	ldr	r0, [r4, #28]
 800f698:	f7fd fe38 	bl	800d30c <GUI_DrawHLine>
 800f69c:	6868      	ldr	r0, [r5, #4]
 800f69e:	f7fd fa84 	bl	800cbaa <GUI_SetColor>
 800f6a2:	69e2      	ldr	r2, [r4, #28]
 800f6a4:	6920      	ldr	r0, [r4, #16]
 800f6a6:	6961      	ldr	r1, [r4, #20]
 800f6a8:	3a01      	subs	r2, #1
 800f6aa:	f7fd fdfb 	bl	800d2a4 <GUI_DrawVLine>
 800f6ae:	68ab      	ldr	r3, [r5, #8]
 800f6b0:	6920      	ldr	r0, [r4, #16]
 800f6b2:	9300      	str	r3, [sp, #0]
 800f6b4:	68eb      	ldr	r3, [r5, #12]
 800f6b6:	9301      	str	r3, [sp, #4]
 800f6b8:	1076      	asrs	r6, r6, #1
 800f6ba:	3001      	adds	r0, #1
 800f6bc:	6961      	ldr	r1, [r4, #20]
 800f6be:	69a2      	ldr	r2, [r4, #24]
 800f6c0:	1e73      	subs	r3, r6, #1
 800f6c2:	f7fd ff3f 	bl	800d544 <GUI_DrawGradientV>
 800f6c6:	692a      	ldr	r2, [r5, #16]
 800f6c8:	6920      	ldr	r0, [r4, #16]
 800f6ca:	69e3      	ldr	r3, [r4, #28]
 800f6cc:	9200      	str	r2, [sp, #0]
 800f6ce:	696a      	ldr	r2, [r5, #20]
 800f6d0:	9201      	str	r2, [sp, #4]
 800f6d2:	69a2      	ldr	r2, [r4, #24]
 800f6d4:	3001      	adds	r0, #1
 800f6d6:	4631      	mov	r1, r6
 800f6d8:	3b01      	subs	r3, #1
 800f6da:	f7fd ff33 	bl	800d544 <GUI_DrawGradientV>
 800f6de:	2000      	movs	r0, #0
 800f6e0:	b006      	add	sp, #24
 800f6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6e6:	bf00      	nop
 800f6e8:	2000035c 	.word	0x2000035c

0800f6ec <_Create>:
 800f6ec:	b530      	push	{r4, r5, lr}
 800f6ee:	b08b      	sub	sp, #44	; 0x2c
 800f6f0:	4605      	mov	r5, r0
 800f6f2:	f7fe fe41 	bl	800e378 <GUI_ALLOC_LockH>
 800f6f6:	ab0a      	add	r3, sp, #40	; 0x28
 800f6f8:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800f6fa:	f843 0d28 	str.w	r0, [r3, #-40]!
 800f6fe:	4668      	mov	r0, sp
 800f700:	6894      	ldr	r4, [r2, #8]
 800f702:	f7fe fe47 	bl	800e394 <GUI_ALLOC_UnlockH>
 800f706:	a80a      	add	r0, sp, #40	; 0x28
 800f708:	2300      	movs	r3, #0
 800f70a:	9302      	str	r3, [sp, #8]
 800f70c:	f840 5d24 	str.w	r5, [r0, #-36]!
 800f710:	6823      	ldr	r3, [r4, #0]
 800f712:	4798      	blx	r3
 800f714:	b00b      	add	sp, #44	; 0x2c
 800f716:	bd30      	pop	{r4, r5, pc}

0800f718 <_Paint>:
 800f718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f71c:	b093      	sub	sp, #76	; 0x4c
 800f71e:	4683      	mov	fp, r0
 800f720:	f7fe fe2a 	bl	800e378 <GUI_ALLOC_LockH>
 800f724:	4604      	mov	r4, r0
 800f726:	a812      	add	r0, sp, #72	; 0x48
 800f728:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800f72a:	f840 4d3c 	str.w	r4, [r0, #-60]!
 800f72e:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800f730:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800f732:	f8d4 9068 	ldr.w	r9, [r4, #104]	; 0x68
 800f736:	f8d4 a060 	ldr.w	sl, [r4, #96]	; 0x60
 800f73a:	f7fe fe2b 	bl	800e394 <GUI_ALLOC_UnlockH>
 800f73e:	4630      	mov	r0, r6
 800f740:	f7f6 fdb0 	bl	80062a4 <GUI_ARRAY_GetNumItems>
 800f744:	a907      	add	r1, sp, #28
 800f746:	4680      	mov	r8, r0
 800f748:	4620      	mov	r0, r4
 800f74a:	f7f6 fb62 	bl	8005e12 <WIDGET__GetClientRect>
 800f74e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f752:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f756:	b21a      	sxth	r2, r3
 800f758:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800f75c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800f760:	920e      	str	r2, [sp, #56]	; 0x38
 800f762:	f1c7 0b00 	rsb	fp, r7, #0
 800f766:	b21a      	sxth	r2, r3
 800f768:	9210      	str	r2, [sp, #64]	; 0x40
 800f76a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f76e:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 800f772:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800f776:	2400      	movs	r4, #0
 800f778:	4544      	cmp	r4, r8
 800f77a:	da3e      	bge.n	800f7fa <_Paint+0xe2>
 800f77c:	4621      	mov	r1, r4
 800f77e:	4630      	mov	r0, r6
 800f780:	f7f6 fdb2 	bl	80062e8 <GUI_ARRAY_GetpItemLocked>
 800f784:	a912      	add	r1, sp, #72	; 0x48
 800f786:	6883      	ldr	r3, [r0, #8]
 800f788:	f841 0d38 	str.w	r0, [r1, #-56]!
 800f78c:	6802      	ldr	r2, [r0, #0]
 800f78e:	9201      	str	r2, [sp, #4]
 800f790:	4608      	mov	r0, r1
 800f792:	9300      	str	r3, [sp, #0]
 800f794:	f7fe fdfe 	bl	800e394 <GUI_ALLOC_UnlockH>
 800f798:	454c      	cmp	r4, r9
 800f79a:	bfb4      	ite	lt
 800f79c:	4639      	movlt	r1, r7
 800f79e:	2100      	movge	r1, #0
 800f7a0:	9a01      	ldr	r2, [sp, #4]
 800f7a2:	448b      	add	fp, r1
 800f7a4:	445a      	add	r2, fp
 800f7a6:	3a01      	subs	r2, #1
 800f7a8:	a805      	add	r0, sp, #20
 800f7aa:	920f      	str	r2, [sp, #60]	; 0x3c
 800f7ac:	f8ad 2018 	strh.w	r2, [sp, #24]
 800f7b0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800f7b4:	f8ad b014 	strh.w	fp, [sp, #20]
 800f7b8:	f7f7 fbea 	bl	8006f90 <WM_SetUserClipRect>
 800f7bc:	2205      	movs	r2, #5
 800f7be:	940b      	str	r4, [sp, #44]	; 0x2c
 800f7c0:	920a      	str	r2, [sp, #40]	; 0x28
 800f7c2:	a809      	add	r0, sp, #36	; 0x24
 800f7c4:	47a8      	blx	r5
 800f7c6:	9b00      	ldr	r3, [sp, #0]
 800f7c8:	b11b      	cbz	r3, 800f7d2 <_Paint+0xba>
 800f7ca:	2306      	movs	r3, #6
 800f7cc:	930a      	str	r3, [sp, #40]	; 0x28
 800f7ce:	a809      	add	r0, sp, #36	; 0x24
 800f7d0:	47a8      	blx	r5
 800f7d2:	2312      	movs	r3, #18
 800f7d4:	930a      	str	r3, [sp, #40]	; 0x28
 800f7d6:	a809      	add	r0, sp, #36	; 0x24
 800f7d8:	47a8      	blx	r5
 800f7da:	45a2      	cmp	sl, r4
 800f7dc:	d103      	bne.n	800f7e6 <_Paint+0xce>
 800f7de:	2302      	movs	r3, #2
 800f7e0:	930a      	str	r3, [sp, #40]	; 0x28
 800f7e2:	a809      	add	r0, sp, #36	; 0x24
 800f7e4:	47a8      	blx	r5
 800f7e6:	2000      	movs	r0, #0
 800f7e8:	f7f7 fbd2 	bl	8006f90 <WM_SetUserClipRect>
 800f7ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f7f0:	1ad3      	subs	r3, r2, r3
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	449b      	add	fp, r3
 800f7f6:	3401      	adds	r4, #1
 800f7f8:	e7be      	b.n	800f778 <_Paint+0x60>
 800f7fa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800f7fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f800:	b21a      	sxth	r2, r3
 800f802:	4291      	cmp	r1, r2
 800f804:	da10      	bge.n	800f828 <_Paint+0x110>
 800f806:	a805      	add	r0, sp, #20
 800f808:	920f      	str	r2, [sp, #60]	; 0x3c
 800f80a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f80e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800f812:	f8ad b014 	strh.w	fp, [sp, #20]
 800f816:	f7f7 fbbb 	bl	8006f90 <WM_SetUserClipRect>
 800f81a:	230c      	movs	r3, #12
 800f81c:	930a      	str	r3, [sp, #40]	; 0x28
 800f81e:	a809      	add	r0, sp, #36	; 0x24
 800f820:	47a8      	blx	r5
 800f822:	2000      	movs	r0, #0
 800f824:	f7f7 fbb4 	bl	8006f90 <WM_SetUserClipRect>
 800f828:	b013      	add	sp, #76	; 0x4c
 800f82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800f830 <FRAMEWIN_DrawSkinFlex>:
 800f830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f834:	4604      	mov	r4, r0
 800f836:	b090      	sub	sp, #64	; 0x40
 800f838:	6800      	ldr	r0, [r0, #0]
 800f83a:	4d9b      	ldr	r5, [pc, #620]	; (800faa8 <FRAMEWIN_DrawSkinFlex+0x278>)
 800f83c:	f000 f9b8 	bl	800fbb0 <FRAMEWIN_GetActive>
 800f840:	4b9a      	ldr	r3, [pc, #616]	; (800faac <FRAMEWIN_DrawSkinFlex+0x27c>)
 800f842:	6866      	ldr	r6, [r4, #4]
 800f844:	2800      	cmp	r0, #0
 800f846:	bf18      	it	ne
 800f848:	461d      	movne	r5, r3
 800f84a:	2e1c      	cmp	r6, #28
 800f84c:	f200 81a6 	bhi.w	800fb9c <FRAMEWIN_DrawSkinFlex+0x36c>
 800f850:	e8df f016 	tbh	[pc, r6, lsl #1]
 800f854:	01a40191 	.word	0x01a40191
 800f858:	01a401a4 	.word	0x01a401a4
 800f85c:	012e01a4 	.word	0x012e01a4
 800f860:	01a401a4 	.word	0x01a401a4
 800f864:	01a401a4 	.word	0x01a401a4
 800f868:	002701a4 	.word	0x002701a4
 800f86c:	01a401a4 	.word	0x01a401a4
 800f870:	01a4017e 	.word	0x01a4017e
 800f874:	01a401a4 	.word	0x01a401a4
 800f878:	01a40145 	.word	0x01a40145
 800f87c:	002301a4 	.word	0x002301a4
 800f880:	001f001d 	.word	0x001f001d
 800f884:	01a40021 	.word	0x01a40021
 800f888:	01a401a4 	.word	0x01a401a4
 800f88c:	0025      	.short	0x0025
 800f88e:	69ee      	ldr	r6, [r5, #28]
 800f890:	e189      	b.n	800fba6 <FRAMEWIN_DrawSkinFlex+0x376>
 800f892:	6a2e      	ldr	r6, [r5, #32]
 800f894:	e187      	b.n	800fba6 <FRAMEWIN_DrawSkinFlex+0x376>
 800f896:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800f898:	e185      	b.n	800fba6 <FRAMEWIN_DrawSkinFlex+0x376>
 800f89a:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800f89c:	e183      	b.n	800fba6 <FRAMEWIN_DrawSkinFlex+0x376>
 800f89e:	696e      	ldr	r6, [r5, #20]
 800f8a0:	e181      	b.n	800fba6 <FRAMEWIN_DrawSkinFlex+0x376>
 800f8a2:	231c      	movs	r3, #28
 800f8a4:	6820      	ldr	r0, [r4, #0]
 800f8a6:	9308      	str	r3, [sp, #32]
 800f8a8:	9007      	str	r0, [sp, #28]
 800f8aa:	f7fe fd65 	bl	800e378 <GUI_ALLOC_LockH>
 800f8ae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f8b0:	9005      	str	r0, [sp, #20]
 800f8b2:	a807      	add	r0, sp, #28
 800f8b4:	4798      	blx	r3
 800f8b6:	4606      	mov	r6, r0
 800f8b8:	a805      	add	r0, sp, #20
 800f8ba:	f7fe fd6b 	bl	800e394 <GUI_ALLOC_UnlockH>
 800f8be:	2e01      	cmp	r6, #1
 800f8c0:	dd11      	ble.n	800f8e6 <FRAMEWIN_DrawSkinFlex+0xb6>
 800f8c2:	682b      	ldr	r3, [r5, #0]
 800f8c4:	9300      	str	r3, [sp, #0]
 800f8c6:	686b      	ldr	r3, [r5, #4]
 800f8c8:	9301      	str	r3, [sp, #4]
 800f8ca:	68ab      	ldr	r3, [r5, #8]
 800f8cc:	9302      	str	r3, [sp, #8]
 800f8ce:	6920      	ldr	r0, [r4, #16]
 800f8d0:	69a1      	ldr	r1, [r4, #24]
 800f8d2:	6962      	ldr	r2, [r4, #20]
 800f8d4:	4633      	mov	r3, r6
 800f8d6:	f7fc fc19 	bl	800c10c <GUI__DrawTwinArc2>
 800f8da:	6923      	ldr	r3, [r4, #16]
 800f8dc:	69a7      	ldr	r7, [r4, #24]
 800f8de:	eb06 0803 	add.w	r8, r6, r3
 800f8e2:	1bbf      	subs	r7, r7, r6
 800f8e4:	e02c      	b.n	800f940 <FRAMEWIN_DrawSkinFlex+0x110>
 800f8e6:	6828      	ldr	r0, [r5, #0]
 800f8e8:	f7fd f95f 	bl	800cbaa <GUI_SetColor>
 800f8ec:	6921      	ldr	r1, [r4, #16]
 800f8ee:	69ea      	ldr	r2, [r5, #28]
 800f8f0:	6960      	ldr	r0, [r4, #20]
 800f8f2:	440a      	add	r2, r1
 800f8f4:	3a01      	subs	r2, #1
 800f8f6:	f7fd fd09 	bl	800d30c <GUI_DrawHLine>
 800f8fa:	69a2      	ldr	r2, [r4, #24]
 800f8fc:	69e9      	ldr	r1, [r5, #28]
 800f8fe:	6960      	ldr	r0, [r4, #20]
 800f900:	1a51      	subs	r1, r2, r1
 800f902:	3101      	adds	r1, #1
 800f904:	f7fd fd02 	bl	800d30c <GUI_DrawHLine>
 800f908:	6967      	ldr	r7, [r4, #20]
 800f90a:	6920      	ldr	r0, [r4, #16]
 800f90c:	3701      	adds	r7, #1
 800f90e:	4639      	mov	r1, r7
 800f910:	f003 f9e4 	bl	8012cdc <GUI_DrawPixel>
 800f914:	4639      	mov	r1, r7
 800f916:	69a0      	ldr	r0, [r4, #24]
 800f918:	f003 f9e0 	bl	8012cdc <GUI_DrawPixel>
 800f91c:	6868      	ldr	r0, [r5, #4]
 800f91e:	f7fd f944 	bl	800cbaa <GUI_SetColor>
 800f922:	6920      	ldr	r0, [r4, #16]
 800f924:	4639      	mov	r1, r7
 800f926:	3001      	adds	r0, #1
 800f928:	f003 f9d8 	bl	8012cdc <GUI_DrawPixel>
 800f92c:	69a0      	ldr	r0, [r4, #24]
 800f92e:	4639      	mov	r1, r7
 800f930:	3801      	subs	r0, #1
 800f932:	f003 f9d3 	bl	8012cdc <GUI_DrawPixel>
 800f936:	6923      	ldr	r3, [r4, #16]
 800f938:	69a7      	ldr	r7, [r4, #24]
 800f93a:	f103 0802 	add.w	r8, r3, #2
 800f93e:	3f02      	subs	r7, #2
 800f940:	6828      	ldr	r0, [r5, #0]
 800f942:	f7fd f932 	bl	800cbaa <GUI_SetColor>
 800f946:	4641      	mov	r1, r8
 800f948:	463a      	mov	r2, r7
 800f94a:	6960      	ldr	r0, [r4, #20]
 800f94c:	f7fd fcde 	bl	800d30c <GUI_DrawHLine>
 800f950:	6868      	ldr	r0, [r5, #4]
 800f952:	f7fd f92a 	bl	800cbaa <GUI_SetColor>
 800f956:	6960      	ldr	r0, [r4, #20]
 800f958:	4641      	mov	r1, r8
 800f95a:	3001      	adds	r0, #1
 800f95c:	463a      	mov	r2, r7
 800f95e:	f7fd fcd5 	bl	800d30c <GUI_DrawHLine>
 800f962:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f964:	2b02      	cmp	r3, #2
 800f966:	dd0a      	ble.n	800f97e <FRAMEWIN_DrawSkinFlex+0x14e>
 800f968:	68a8      	ldr	r0, [r5, #8]
 800f96a:	f7fd f91e 	bl	800cbaa <GUI_SetColor>
 800f96e:	6961      	ldr	r1, [r4, #20]
 800f970:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f972:	440b      	add	r3, r1
 800f974:	4640      	mov	r0, r8
 800f976:	3102      	adds	r1, #2
 800f978:	463a      	mov	r2, r7
 800f97a:	3b01      	subs	r3, #1
 800f97c:	e01d      	b.n	800f9ba <FRAMEWIN_DrawSkinFlex+0x18a>
 800f97e:	6a2a      	ldr	r2, [r5, #32]
 800f980:	42b2      	cmp	r2, r6
 800f982:	dd1c      	ble.n	800f9be <FRAMEWIN_DrawSkinFlex+0x18e>
 800f984:	6967      	ldr	r7, [r4, #20]
 800f986:	6923      	ldr	r3, [r4, #16]
 800f988:	2e01      	cmp	r6, #1
 800f98a:	f107 0802 	add.w	r8, r7, #2
 800f98e:	f340 8107 	ble.w	800fba0 <FRAMEWIN_DrawSkinFlex+0x370>
 800f992:	4437      	add	r7, r6
 800f994:	18f0      	adds	r0, r6, r3
 800f996:	441a      	add	r2, r3
 800f998:	3a01      	subs	r2, #1
 800f99a:	4641      	mov	r1, r8
 800f99c:	463b      	mov	r3, r7
 800f99e:	f7fd fb9b 	bl	800d0d8 <GUI_FillRect>
 800f9a2:	69a3      	ldr	r3, [r4, #24]
 800f9a4:	69e8      	ldr	r0, [r5, #28]
 800f9a6:	2e01      	cmp	r6, #1
 800f9a8:	ebc0 0003 	rsb	r0, r0, r3
 800f9ac:	bfcc      	ite	gt
 800f9ae:	ebc6 0203 	rsbgt	r2, r6, r3
 800f9b2:	1e9a      	suble	r2, r3, #2
 800f9b4:	3001      	adds	r0, #1
 800f9b6:	4641      	mov	r1, r8
 800f9b8:	463b      	mov	r3, r7
 800f9ba:	f7fd fb8d 	bl	800d0d8 <GUI_FillRect>
 800f9be:	6963      	ldr	r3, [r4, #20]
 800f9c0:	69e7      	ldr	r7, [r4, #28]
 800f9c2:	6828      	ldr	r0, [r5, #0]
 800f9c4:	2e01      	cmp	r6, #1
 800f9c6:	bfcc      	ite	gt
 800f9c8:	18f6      	addgt	r6, r6, r3
 800f9ca:	1c9e      	addle	r6, r3, #2
 800f9cc:	3f01      	subs	r7, #1
 800f9ce:	f7fd f8ec 	bl	800cbaa <GUI_SetColor>
 800f9d2:	463a      	mov	r2, r7
 800f9d4:	6920      	ldr	r0, [r4, #16]
 800f9d6:	4631      	mov	r1, r6
 800f9d8:	f7fd fc64 	bl	800d2a4 <GUI_DrawVLine>
 800f9dc:	463a      	mov	r2, r7
 800f9de:	4631      	mov	r1, r6
 800f9e0:	69a0      	ldr	r0, [r4, #24]
 800f9e2:	f7fd fc5f 	bl	800d2a4 <GUI_DrawVLine>
 800f9e6:	69e7      	ldr	r7, [r4, #28]
 800f9e8:	6868      	ldr	r0, [r5, #4]
 800f9ea:	f7fd f8de 	bl	800cbaa <GUI_SetColor>
 800f9ee:	6920      	ldr	r0, [r4, #16]
 800f9f0:	3f02      	subs	r7, #2
 800f9f2:	3001      	adds	r0, #1
 800f9f4:	4631      	mov	r1, r6
 800f9f6:	463a      	mov	r2, r7
 800f9f8:	f7fd fc54 	bl	800d2a4 <GUI_DrawVLine>
 800f9fc:	69a0      	ldr	r0, [r4, #24]
 800f9fe:	4631      	mov	r1, r6
 800fa00:	3801      	subs	r0, #1
 800fa02:	463a      	mov	r2, r7
 800fa04:	f7fd fc4e 	bl	800d2a4 <GUI_DrawVLine>
 800fa08:	69eb      	ldr	r3, [r5, #28]
 800fa0a:	2b02      	cmp	r3, #2
 800fa0c:	dc02      	bgt.n	800fa14 <FRAMEWIN_DrawSkinFlex+0x1e4>
 800fa0e:	6a2b      	ldr	r3, [r5, #32]
 800fa10:	2b02      	cmp	r3, #2
 800fa12:	dd20      	ble.n	800fa56 <FRAMEWIN_DrawSkinFlex+0x226>
 800fa14:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800fa16:	69e7      	ldr	r7, [r4, #28]
 800fa18:	68a8      	ldr	r0, [r5, #8]
 800fa1a:	2b02      	cmp	r3, #2
 800fa1c:	bfcc      	ite	gt
 800fa1e:	ebc3 0707 	rsbgt	r7, r3, r7
 800fa22:	3f02      	suble	r7, #2
 800fa24:	f7fd f8c1 	bl	800cbaa <GUI_SetColor>
 800fa28:	69ea      	ldr	r2, [r5, #28]
 800fa2a:	2a02      	cmp	r2, #2
 800fa2c:	dd07      	ble.n	800fa3e <FRAMEWIN_DrawSkinFlex+0x20e>
 800fa2e:	6920      	ldr	r0, [r4, #16]
 800fa30:	4402      	add	r2, r0
 800fa32:	4631      	mov	r1, r6
 800fa34:	3002      	adds	r0, #2
 800fa36:	3a01      	subs	r2, #1
 800fa38:	463b      	mov	r3, r7
 800fa3a:	f7fd fb4d 	bl	800d0d8 <GUI_FillRect>
 800fa3e:	6a2b      	ldr	r3, [r5, #32]
 800fa40:	2b02      	cmp	r3, #2
 800fa42:	dd08      	ble.n	800fa56 <FRAMEWIN_DrawSkinFlex+0x226>
 800fa44:	69a2      	ldr	r2, [r4, #24]
 800fa46:	69e8      	ldr	r0, [r5, #28]
 800fa48:	1a10      	subs	r0, r2, r0
 800fa4a:	3001      	adds	r0, #1
 800fa4c:	4631      	mov	r1, r6
 800fa4e:	3a02      	subs	r2, #2
 800fa50:	463b      	mov	r3, r7
 800fa52:	f7fd fb41 	bl	800d0d8 <GUI_FillRect>
 800fa56:	6828      	ldr	r0, [r5, #0]
 800fa58:	f7fd f8a7 	bl	800cbaa <GUI_SetColor>
 800fa5c:	6921      	ldr	r1, [r4, #16]
 800fa5e:	69a2      	ldr	r2, [r4, #24]
 800fa60:	69e0      	ldr	r0, [r4, #28]
 800fa62:	f7fd fc53 	bl	800d30c <GUI_DrawHLine>
 800fa66:	6868      	ldr	r0, [r5, #4]
 800fa68:	f7fd f89f 	bl	800cbaa <GUI_SetColor>
 800fa6c:	69e0      	ldr	r0, [r4, #28]
 800fa6e:	6921      	ldr	r1, [r4, #16]
 800fa70:	69a2      	ldr	r2, [r4, #24]
 800fa72:	3801      	subs	r0, #1
 800fa74:	3101      	adds	r1, #1
 800fa76:	3a01      	subs	r2, #1
 800fa78:	f7fd fc48 	bl	800d30c <GUI_DrawHLine>
 800fa7c:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800fa7e:	2e02      	cmp	r6, #2
 800fa80:	f340 808c 	ble.w	800fb9c <FRAMEWIN_DrawSkinFlex+0x36c>
 800fa84:	6920      	ldr	r0, [r4, #16]
 800fa86:	69a2      	ldr	r2, [r4, #24]
 800fa88:	69e4      	ldr	r4, [r4, #28]
 800fa8a:	f100 0802 	add.w	r8, r0, #2
 800fa8e:	68a8      	ldr	r0, [r5, #8]
 800fa90:	1e97      	subs	r7, r2, #2
 800fa92:	f7fd f88a 	bl	800cbaa <GUI_SetColor>
 800fa96:	1ba1      	subs	r1, r4, r6
 800fa98:	4640      	mov	r0, r8
 800fa9a:	3101      	adds	r1, #1
 800fa9c:	463a      	mov	r2, r7
 800fa9e:	1ea3      	subs	r3, r4, #2
 800faa0:	f7fd fb1a 	bl	800d0d8 <GUI_FillRect>
 800faa4:	e07a      	b.n	800fb9c <FRAMEWIN_DrawSkinFlex+0x36c>
 800faa6:	bf00      	nop
 800faa8:	200003b0 	.word	0x200003b0
 800faac:	20000384 	.word	0x20000384
 800fab0:	8a20      	ldrh	r0, [r4, #16]
 800fab2:	8aa1      	ldrh	r1, [r4, #20]
 800fab4:	8b22      	ldrh	r2, [r4, #24]
 800fab6:	8ba3      	ldrh	r3, [r4, #28]
 800fab8:	68ec      	ldr	r4, [r5, #12]
 800faba:	9400      	str	r4, [sp, #0]
 800fabc:	692c      	ldr	r4, [r5, #16]
 800fabe:	f8ad 001c 	strh.w	r0, [sp, #28]
 800fac2:	f8ad 101e 	strh.w	r1, [sp, #30]
 800fac6:	f8ad 2020 	strh.w	r2, [sp, #32]
 800faca:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800face:	9401      	str	r4, [sp, #4]
 800fad0:	b200      	sxth	r0, r0
 800fad2:	b209      	sxth	r1, r1
 800fad4:	b212      	sxth	r2, r2
 800fad6:	b21b      	sxth	r3, r3
 800fad8:	f7fd fd34 	bl	800d544 <GUI_DrawGradientV>
 800fadc:	e05e      	b.n	800fb9c <FRAMEWIN_DrawSkinFlex+0x36c>
 800fade:	8b2b      	ldrh	r3, [r5, #24]
 800fae0:	6922      	ldr	r2, [r4, #16]
 800fae2:	6820      	ldr	r0, [r4, #0]
 800fae4:	441a      	add	r2, r3
 800fae6:	f8ad 201c 	strh.w	r2, [sp, #28]
 800faea:	6962      	ldr	r2, [r4, #20]
 800faec:	f8ad 201e 	strh.w	r2, [sp, #30]
 800faf0:	69a2      	ldr	r2, [r4, #24]
 800faf2:	1ad3      	subs	r3, r2, r3
 800faf4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800faf8:	69e3      	ldr	r3, [r4, #28]
 800fafa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800fafe:	f7fe fc3b 	bl	800e378 <GUI_ALLOC_LockH>
 800fb02:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800fb04:	9005      	str	r0, [sp, #20]
 800fb06:	b1fb      	cbz	r3, 800fb48 <FRAMEWIN_DrawSkinFlex+0x318>
 800fb08:	2002      	movs	r0, #2
 800fb0a:	f7fc fff7 	bl	800cafc <GUI_SetTextMode>
 800fb0e:	9b05      	ldr	r3, [sp, #20]
 800fb10:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 800fb14:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800fb18:	320e      	adds	r2, #14
 800fb1a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800fb1e:	6898      	ldr	r0, [r3, #8]
 800fb20:	f7fd f843 	bl	800cbaa <GUI_SetColor>
 800fb24:	9b05      	ldr	r3, [sp, #20]
 800fb26:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800fb28:	f7fc fff8 	bl	800cb1c <GUI_SetFont>
 800fb2c:	9b05      	ldr	r3, [sp, #20]
 800fb2e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800fb30:	f7fe fc22 	bl	800e378 <GUI_ALLOC_LockH>
 800fb34:	9b05      	ldr	r3, [sp, #20]
 800fb36:	9006      	str	r0, [sp, #24]
 800fb38:	a907      	add	r1, sp, #28
 800fb3a:	f9b3 205a 	ldrsh.w	r2, [r3, #90]	; 0x5a
 800fb3e:	f7fd fe3e 	bl	800d7be <GUI_DispStringInRect>
 800fb42:	a806      	add	r0, sp, #24
 800fb44:	f7fe fc26 	bl	800e394 <GUI_ALLOC_UnlockH>
 800fb48:	a805      	add	r0, sp, #20
 800fb4a:	f7fe fc23 	bl	800e394 <GUI_ALLOC_UnlockH>
 800fb4e:	e025      	b.n	800fb9c <FRAMEWIN_DrawSkinFlex+0x36c>
 800fb50:	6923      	ldr	r3, [r4, #16]
 800fb52:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fb56:	6963      	ldr	r3, [r4, #20]
 800fb58:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fb5c:	69a3      	ldr	r3, [r4, #24]
 800fb5e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800fb62:	68a8      	ldr	r0, [r5, #8]
 800fb64:	69e3      	ldr	r3, [r4, #28]
 800fb66:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800fb6a:	f7fd f81e 	bl	800cbaa <GUI_SetColor>
 800fb6e:	a807      	add	r0, sp, #28
 800fb70:	f7fd faa6 	bl	800d0c0 <GUI_FillRectEx>
 800fb74:	e012      	b.n	800fb9c <FRAMEWIN_DrawSkinFlex+0x36c>
 800fb76:	6820      	ldr	r0, [r4, #0]
 800fb78:	f7fe fbfe 	bl	800e378 <GUI_ALLOC_LockH>
 800fb7c:	ab10      	add	r3, sp, #64	; 0x40
 800fb7e:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 800fb82:	f843 0d2c 	str.w	r0, [r3, #-44]!
 800fb86:	f042 020c 	orr.w	r2, r2, #12
 800fb8a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7fe fc00 	bl	800e394 <GUI_ALLOC_UnlockH>
 800fb94:	6820      	ldr	r0, [r4, #0]
 800fb96:	f7f7 fa0b 	bl	8006fb0 <WM_SetHasTrans>
 800fb9a:	e004      	b.n	800fba6 <FRAMEWIN_DrawSkinFlex+0x376>
 800fb9c:	2600      	movs	r6, #0
 800fb9e:	e002      	b.n	800fba6 <FRAMEWIN_DrawSkinFlex+0x376>
 800fba0:	1c98      	adds	r0, r3, #2
 800fba2:	4647      	mov	r7, r8
 800fba4:	e6f7      	b.n	800f996 <FRAMEWIN_DrawSkinFlex+0x166>
 800fba6:	4630      	mov	r0, r6
 800fba8:	b010      	add	sp, #64	; 0x40
 800fbaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbae:	bf00      	nop

0800fbb0 <FRAMEWIN_GetActive>:
 800fbb0:	b513      	push	{r0, r1, r4, lr}
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	b180      	cbz	r0, 800fbd8 <FRAMEWIN_GetActive+0x28>
 800fbb6:	f7fc fefb 	bl	800c9b0 <GUI_Lock>
 800fbba:	4620      	mov	r0, r4
 800fbbc:	f7fe fbdc 	bl	800e378 <GUI_ALLOC_LockH>
 800fbc0:	ab02      	add	r3, sp, #8
 800fbc2:	f8b0 407c 	ldrh.w	r4, [r0, #124]	; 0x7c
 800fbc6:	f843 0d04 	str.w	r0, [r3, #-4]!
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 800fbd0:	f7fe fbe0 	bl	800e394 <GUI_ALLOC_UnlockH>
 800fbd4:	f7fc fee2 	bl	800c99c <GUI_Unlock>
 800fbd8:	4620      	mov	r0, r4
 800fbda:	b002      	add	sp, #8
 800fbdc:	bd10      	pop	{r4, pc}

0800fbde <WM__SendMessageNoPara>:
 800fbde:	b530      	push	{r4, r5, lr}
 800fbe0:	b085      	sub	sp, #20
 800fbe2:	4604      	mov	r4, r0
 800fbe4:	2210      	movs	r2, #16
 800fbe6:	460d      	mov	r5, r1
 800fbe8:	4668      	mov	r0, sp
 800fbea:	2100      	movs	r1, #0
 800fbec:	f003 fb96 	bl	801331c <memset>
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	f7fe fbb7 	bl	800e364 <GUI_ALLOC_h2p>
 800fbf6:	6903      	ldr	r3, [r0, #16]
 800fbf8:	b11b      	cbz	r3, 800fc02 <WM__SendMessageNoPara+0x24>
 800fbfa:	9401      	str	r4, [sp, #4]
 800fbfc:	9500      	str	r5, [sp, #0]
 800fbfe:	4668      	mov	r0, sp
 800fc00:	4798      	blx	r3
 800fc02:	b005      	add	sp, #20
 800fc04:	bd30      	pop	{r4, r5, pc}

0800fc06 <WM__GetPrevSibling>:
 800fc06:	b538      	push	{r3, r4, r5, lr}
 800fc08:	4605      	mov	r5, r0
 800fc0a:	f000 f82d 	bl	800fc68 <WM__GetFirstSibling>
 800fc0e:	4604      	mov	r4, r0
 800fc10:	b154      	cbz	r4, 800fc28 <WM__GetPrevSibling+0x22>
 800fc12:	42ac      	cmp	r4, r5
 800fc14:	d007      	beq.n	800fc26 <WM__GetPrevSibling+0x20>
 800fc16:	4620      	mov	r0, r4
 800fc18:	f7fe fba4 	bl	800e364 <GUI_ALLOC_h2p>
 800fc1c:	6a03      	ldr	r3, [r0, #32]
 800fc1e:	42ab      	cmp	r3, r5
 800fc20:	d002      	beq.n	800fc28 <WM__GetPrevSibling+0x22>
 800fc22:	461c      	mov	r4, r3
 800fc24:	e7f4      	b.n	800fc10 <WM__GetPrevSibling+0xa>
 800fc26:	2400      	movs	r4, #0
 800fc28:	4620      	mov	r0, r4
 800fc2a:	bd38      	pop	{r3, r4, r5, pc}

0800fc2c <WM__GetLastSibling>:
 800fc2c:	b510      	push	{r4, lr}
 800fc2e:	4604      	mov	r4, r0
 800fc30:	b130      	cbz	r0, 800fc40 <WM__GetLastSibling+0x14>
 800fc32:	4620      	mov	r0, r4
 800fc34:	f7fe fb96 	bl	800e364 <GUI_ALLOC_h2p>
 800fc38:	6a03      	ldr	r3, [r0, #32]
 800fc3a:	b10b      	cbz	r3, 800fc40 <WM__GetLastSibling+0x14>
 800fc3c:	461c      	mov	r4, r3
 800fc3e:	e7f8      	b.n	800fc32 <WM__GetLastSibling+0x6>
 800fc40:	4620      	mov	r0, r4
 800fc42:	bd10      	pop	{r4, pc}

0800fc44 <WM__GetFocussedChild>:
 800fc44:	b538      	push	{r3, r4, r5, lr}
 800fc46:	4d06      	ldr	r5, [pc, #24]	; (800fc60 <WM__GetFocussedChild+0x1c>)
 800fc48:	4c06      	ldr	r4, [pc, #24]	; (800fc64 <WM__GetFocussedChild+0x20>)
 800fc4a:	682b      	ldr	r3, [r5, #0]
 800fc4c:	4601      	mov	r1, r0
 800fc4e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800fc52:	f003 f9ff 	bl	8013054 <WM__IsChild>
 800fc56:	b110      	cbz	r0, 800fc5e <WM__GetFocussedChild+0x1a>
 800fc58:	682b      	ldr	r3, [r5, #0]
 800fc5a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800fc5e:	bd38      	pop	{r3, r4, r5, pc}
 800fc60:	200287e4 	.word	0x200287e4
 800fc64:	20028800 	.word	0x20028800

0800fc68 <WM__GetFirstSibling>:
 800fc68:	b508      	push	{r3, lr}
 800fc6a:	f7f7 fcf0 	bl	800764e <WM_GetParent>
 800fc6e:	b118      	cbz	r0, 800fc78 <WM__GetFirstSibling+0x10>
 800fc70:	f7fe fb78 	bl	800e364 <GUI_ALLOC_h2p>
 800fc74:	69c0      	ldr	r0, [r0, #28]
 800fc76:	bd08      	pop	{r3, pc}
 800fc78:	bd08      	pop	{r3, pc}
	...

0800fc7c <WM_ValidateWindow>:
 800fc7c:	b513      	push	{r0, r1, r4, lr}
 800fc7e:	4604      	mov	r4, r0
 800fc80:	f7fc fe96 	bl	800c9b0 <GUI_Lock>
 800fc84:	b184      	cbz	r4, 800fca8 <WM_ValidateWindow+0x2c>
 800fc86:	4620      	mov	r0, r4
 800fc88:	f7fe fb76 	bl	800e378 <GUI_ALLOC_LockH>
 800fc8c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800fc8e:	9001      	str	r0, [sp, #4]
 800fc90:	069a      	lsls	r2, r3, #26
 800fc92:	d506      	bpl.n	800fca2 <WM_ValidateWindow+0x26>
 800fc94:	f023 0320 	bic.w	r3, r3, #32
 800fc98:	6283      	str	r3, [r0, #40]	; 0x28
 800fc9a:	4b05      	ldr	r3, [pc, #20]	; (800fcb0 <WM_ValidateWindow+0x34>)
 800fc9c:	881a      	ldrh	r2, [r3, #0]
 800fc9e:	3a01      	subs	r2, #1
 800fca0:	801a      	strh	r2, [r3, #0]
 800fca2:	a801      	add	r0, sp, #4
 800fca4:	f7fe fb76 	bl	800e394 <GUI_ALLOC_UnlockH>
 800fca8:	f7fc fe78 	bl	800c99c <GUI_Unlock>
 800fcac:	b002      	add	sp, #8
 800fcae:	bd10      	pop	{r4, pc}
 800fcb0:	20028810 	.word	0x20028810

0800fcb4 <WM__IsInModalArea>:
 800fcb4:	4b12      	ldr	r3, [pc, #72]	; (800fd00 <WM__IsInModalArea+0x4c>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	b570      	push	{r4, r5, r6, lr}
 800fcbc:	4604      	mov	r4, r0
 800fcbe:	da0f      	bge.n	800fce0 <WM__IsInModalArea+0x2c>
 800fcc0:	4e10      	ldr	r6, [pc, #64]	; (800fd04 <WM__IsInModalArea+0x50>)
 800fcc2:	4d11      	ldr	r5, [pc, #68]	; (800fd08 <WM__IsInModalArea+0x54>)
 800fcc4:	6833      	ldr	r3, [r6, #0]
 800fcc6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800fcca:	4620      	mov	r0, r4
 800fccc:	6859      	ldr	r1, [r3, #4]
 800fcce:	f7f7 f8d4 	bl	8006e7a <WM__IsAncestor>
 800fcd2:	6833      	ldr	r3, [r6, #0]
 800fcd4:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800fcd8:	686a      	ldr	r2, [r5, #4]
 800fcda:	686b      	ldr	r3, [r5, #4]
 800fcdc:	b942      	cbnz	r2, 800fcf0 <WM__IsInModalArea+0x3c>
 800fcde:	e00c      	b.n	800fcfa <WM__IsInModalArea+0x46>
 800fce0:	4a0a      	ldr	r2, [pc, #40]	; (800fd0c <WM__IsInModalArea+0x58>)
 800fce2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800fce6:	f7f7 f8c8 	bl	8006e7a <WM__IsAncestor>
 800fcea:	2800      	cmp	r0, #0
 800fcec:	d1e8      	bne.n	800fcc0 <WM__IsInModalArea+0xc>
 800fcee:	bd70      	pop	{r4, r5, r6, pc}
 800fcf0:	b918      	cbnz	r0, 800fcfa <WM__IsInModalArea+0x46>
 800fcf2:	1ae3      	subs	r3, r4, r3
 800fcf4:	4258      	negs	r0, r3
 800fcf6:	4158      	adcs	r0, r3
 800fcf8:	bd70      	pop	{r4, r5, r6, pc}
 800fcfa:	2001      	movs	r0, #1
 800fcfc:	bd70      	pop	{r4, r5, r6, pc}
 800fcfe:	bf00      	nop
 800fd00:	200003dc 	.word	0x200003dc
 800fd04:	200287e4 	.word	0x200287e4
 800fd08:	20028930 	.word	0x20028930
 800fd0c:	20028818 	.word	0x20028818

0800fd10 <WM__SendPIDMessage>:
 800fd10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd12:	4606      	mov	r6, r0
 800fd14:	460c      	mov	r4, r1
 800fd16:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800fd18:	b085      	sub	sp, #20
 800fd1a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fd1e:	230d      	movs	r3, #13
 800fd20:	9602      	str	r6, [sp, #8]
 800fd22:	9300      	str	r3, [sp, #0]
 800fd24:	4637      	mov	r7, r6
 800fd26:	4638      	mov	r0, r7
 800fd28:	f7f7 fbde 	bl	80074e8 <WM_IsWindow>
 800fd2c:	b150      	cbz	r0, 800fd44 <WM__SendPIDMessage+0x34>
 800fd2e:	4638      	mov	r0, r7
 800fd30:	f7f7 fc8d 	bl	800764e <WM_GetParent>
 800fd34:	4607      	mov	r7, r0
 800fd36:	2800      	cmp	r0, #0
 800fd38:	d0f5      	beq.n	800fd26 <WM__SendPIDMessage+0x16>
 800fd3a:	4669      	mov	r1, sp
 800fd3c:	9403      	str	r4, [sp, #12]
 800fd3e:	f003 f97c 	bl	801303a <WM__SendMessageIfEnabled>
 800fd42:	e7f0      	b.n	800fd26 <WM__SendPIDMessage+0x16>
 800fd44:	4630      	mov	r0, r6
 800fd46:	4621      	mov	r1, r4
 800fd48:	f003 f977 	bl	801303a <WM__SendMessageIfEnabled>
 800fd4c:	b005      	add	sp, #20
 800fd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fd50 <WM__SendTouchMessage>:
 800fd50:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fd52:	68cc      	ldr	r4, [r1, #12]
 800fd54:	4606      	mov	r6, r0
 800fd56:	460d      	mov	r5, r1
 800fd58:	b194      	cbz	r4, 800fd80 <WM__SendTouchMessage+0x30>
 800fd5a:	f7fe fb0d 	bl	800e378 <GUI_ALLOC_LockH>
 800fd5e:	ab02      	add	r3, sp, #8
 800fd60:	4602      	mov	r2, r0
 800fd62:	f843 0d04 	str.w	r0, [r3, #-4]!
 800fd66:	6821      	ldr	r1, [r4, #0]
 800fd68:	f9b0 0000 	ldrsh.w	r0, [r0]
 800fd6c:	1a09      	subs	r1, r1, r0
 800fd6e:	6021      	str	r1, [r4, #0]
 800fd70:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800fd74:	6862      	ldr	r2, [r4, #4]
 800fd76:	1a52      	subs	r2, r2, r1
 800fd78:	6062      	str	r2, [r4, #4]
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7fe fb0a 	bl	800e394 <GUI_ALLOC_UnlockH>
 800fd80:	4630      	mov	r0, r6
 800fd82:	4629      	mov	r1, r5
 800fd84:	f7ff ffc4 	bl	800fd10 <WM__SendPIDMessage>
 800fd88:	b002      	add	sp, #8
 800fd8a:	bd70      	pop	{r4, r5, r6, pc}

0800fd8c <WM_HandlePID>:
 800fd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd90:	b097      	sub	sp, #92	; 0x5c
 800fd92:	ae06      	add	r6, sp, #24
 800fd94:	f04f 080c 	mov.w	r8, #12
 800fd98:	2100      	movs	r1, #0
 800fd9a:	4642      	mov	r2, r8
 800fd9c:	4630      	mov	r0, r6
 800fd9e:	f003 fabd 	bl	801331c <memset>
 800fda2:	f7fd f83d 	bl	800ce20 <GUI_PID_IsEmpty>
 800fda6:	b108      	cbz	r0, 800fdac <WM_HandlePID+0x20>
 800fda8:	2000      	movs	r0, #0
 800fdaa:	e1b4      	b.n	8010116 <WM_HandlePID+0x38a>
 800fdac:	ac09      	add	r4, sp, #36	; 0x24
 800fdae:	4620      	mov	r0, r4
 800fdb0:	f7fc ffba 	bl	800cd28 <GUI_PID_GetState>
 800fdb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdb6:	4f9c      	ldr	r7, [pc, #624]	; (8010028 <WM_HandlePID+0x29c>)
 800fdb8:	4d9c      	ldr	r5, [pc, #624]	; (801002c <WM_HandlePID+0x2a0>)
 800fdba:	3301      	adds	r3, #1
 800fdbc:	d10a      	bne.n	800fdd4 <WM_HandlePID+0x48>
 800fdbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdc0:	3301      	adds	r3, #1
 800fdc2:	d107      	bne.n	800fdd4 <WM_HandlePID+0x48>
 800fdc4:	682b      	ldr	r3, [r5, #0]
 800fdc6:	fb08 7303 	mla	r3, r8, r3, r7
 800fdca:	7a1a      	ldrb	r2, [r3, #8]
 800fdcc:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d0e9      	beq.n	800fda8 <WM_HandlePID+0x1c>
 800fdd4:	f7fc fdec 	bl	800c9b0 <GUI_Lock>
 800fdd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	db0d      	blt.n	800fdfa <WM_HandlePID+0x6e>
 800fdde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fde0:	2a00      	cmp	r2, #0
 800fde2:	db17      	blt.n	800fe14 <WM_HandlePID+0x88>
 800fde4:	4992      	ldr	r1, [pc, #584]	; (8010030 <WM_HandlePID+0x2a4>)
 800fde6:	f9b1 1000 	ldrsh.w	r1, [r1]
 800fdea:	440b      	add	r3, r1
 800fdec:	9309      	str	r3, [sp, #36]	; 0x24
 800fdee:	4b91      	ldr	r3, [pc, #580]	; (8010034 <WM_HandlePID+0x2a8>)
 800fdf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fdf4:	441a      	add	r2, r3
 800fdf6:	920a      	str	r2, [sp, #40]	; 0x28
 800fdf8:	e00c      	b.n	800fe14 <WM_HandlePID+0x88>
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	d10a      	bne.n	800fe14 <WM_HandlePID+0x88>
 800fdfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe00:	3301      	adds	r3, #1
 800fe02:	d107      	bne.n	800fe14 <WM_HandlePID+0x88>
 800fe04:	682b      	ldr	r3, [r5, #0]
 800fe06:	220c      	movs	r2, #12
 800fe08:	4353      	muls	r3, r2
 800fe0a:	18fa      	adds	r2, r7, r3
 800fe0c:	58fb      	ldr	r3, [r7, r3]
 800fe0e:	9309      	str	r3, [sp, #36]	; 0x24
 800fe10:	6853      	ldr	r3, [r2, #4]
 800fe12:	930a      	str	r3, [sp, #40]	; 0x28
 800fe14:	a804      	add	r0, sp, #16
 800fe16:	f000 fa2d 	bl	8010274 <WM__AddCriticalHandle>
 800fe1a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800fe1e:	2b01      	cmp	r3, #1
 800fe20:	bf98      	it	ls
 800fe22:	602b      	strls	r3, [r5, #0]
 800fe24:	6828      	ldr	r0, [r5, #0]
 800fe26:	a901      	add	r1, sp, #4
 800fe28:	aa02      	add	r2, sp, #8
 800fe2a:	f7fc fee5 	bl	800cbf8 <GUI_GetLayerPosEx>
 800fe2e:	9b01      	ldr	r3, [sp, #4]
 800fe30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe32:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fe34:	1ac0      	subs	r0, r0, r3
 800fe36:	9b02      	ldr	r3, [sp, #8]
 800fe38:	9009      	str	r0, [sp, #36]	; 0x24
 800fe3a:	1ac9      	subs	r1, r1, r3
 800fe3c:	682b      	ldr	r3, [r5, #0]
 800fe3e:	910a      	str	r1, [sp, #40]	; 0x28
 800fe40:	220c      	movs	r2, #12
 800fe42:	435a      	muls	r2, r3
 800fe44:	18bb      	adds	r3, r7, r2
 800fe46:	58ba      	ldr	r2, [r7, r2]
 800fe48:	4282      	cmp	r2, r0
 800fe4a:	d108      	bne.n	800fe5e <WM_HandlePID+0xd2>
 800fe4c:	685a      	ldr	r2, [r3, #4]
 800fe4e:	428a      	cmp	r2, r1
 800fe50:	d105      	bne.n	800fe5e <WM_HandlePID+0xd2>
 800fe52:	7a1a      	ldrb	r2, [r3, #8]
 800fe54:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	f000 8155 	beq.w	8010108 <WM_HandlePID+0x37c>
 800fe5e:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800fe62:	f7fd fe0f 	bl	800da84 <GUI_CURSOR_SetPositionEx>
 800fe66:	4b74      	ldr	r3, [pc, #464]	; (8010038 <WM_HandlePID+0x2ac>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	b113      	cbz	r3, 800fe72 <WM_HandlePID+0xe6>
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	2100      	movs	r1, #0
 800fe70:	4798      	blx	r3
 800fe72:	682b      	ldr	r3, [r5, #0]
 800fe74:	4a71      	ldr	r2, [pc, #452]	; (801003c <WM_HandlePID+0x2b0>)
 800fe76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fe7a:	b918      	cbnz	r0, 800fe84 <WM_HandlePID+0xf8>
 800fe7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fe80:	f000 f99c 	bl	80101bc <WM_Screen2hWin>
 800fe84:	4b6e      	ldr	r3, [pc, #440]	; (8010040 <WM_HandlePID+0x2b4>)
 800fe86:	9005      	str	r0, [sp, #20]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	b113      	cbz	r3, 800fe92 <WM_HandlePID+0x106>
 800fe8c:	9905      	ldr	r1, [sp, #20]
 800fe8e:	4620      	mov	r0, r4
 800fe90:	4798      	blx	r3
 800fe92:	496c      	ldr	r1, [pc, #432]	; (8010044 <WM_HandlePID+0x2b8>)
 800fe94:	682b      	ldr	r3, [r5, #0]
 800fe96:	f8df 9194 	ldr.w	r9, [pc, #404]	; 801002c <WM_HandlePID+0x2a0>
 800fe9a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800fe9e:	4688      	mov	r8, r1
 800fea0:	685a      	ldr	r2, [r3, #4]
 800fea2:	9805      	ldr	r0, [sp, #20]
 800fea4:	b312      	cbz	r2, 800feec <WM_HandlePID+0x160>
 800fea6:	4282      	cmp	r2, r0
 800fea8:	d020      	beq.n	800feec <WM_HandlePID+0x160>
 800feaa:	6858      	ldr	r0, [r3, #4]
 800feac:	f7ff ff02 	bl	800fcb4 <WM__IsInModalArea>
 800feb0:	b1e0      	cbz	r0, 800feec <WM_HandlePID+0x160>
 800feb2:	f8d9 3000 	ldr.w	r3, [r9]
 800feb6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800feba:	6858      	ldr	r0, [r3, #4]
 800febc:	f7f6 ffd4 	bl	8006e68 <WM__IsEnabled>
 800fec0:	b1a0      	cbz	r0, 800feec <WM_HandlePID+0x160>
 800fec2:	2312      	movs	r3, #18
 800fec4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800fec8:	9312      	str	r3, [sp, #72]	; 0x48
 800feca:	f8d9 3000 	ldr.w	r3, [r9]
 800fece:	9615      	str	r6, [sp, #84]	; 0x54
 800fed0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800fed4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800fed8:	6858      	ldr	r0, [r3, #4]
 800feda:	a912      	add	r1, sp, #72	; 0x48
 800fedc:	f7ff ff38 	bl	800fd50 <WM__SendTouchMessage>
 800fee0:	f8d9 3000 	ldr.w	r3, [r9]
 800fee4:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 800fee8:	2200      	movs	r2, #0
 800feea:	605a      	str	r2, [r3, #4]
 800feec:	9805      	ldr	r0, [sp, #20]
 800feee:	f7ff fee1 	bl	800fcb4 <WM__IsInModalArea>
 800fef2:	b908      	cbnz	r0, 800fef8 <WM_HandlePID+0x16c>
 800fef4:	2600      	movs	r6, #0
 800fef6:	e0fa      	b.n	80100ee <WM_HandlePID+0x362>
 800fef8:	682b      	ldr	r3, [r5, #0]
 800fefa:	9905      	ldr	r1, [sp, #20]
 800fefc:	f8df a12c 	ldr.w	sl, [pc, #300]	; 801002c <WM_HandlePID+0x2a0>
 800ff00:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8010028 <WM_HandlePID+0x29c>
 800ff04:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 800ff08:	f04f 080c 	mov.w	r8, #12
 800ff0c:	fb08 7303 	mla	r3, r8, r3, r7
 800ff10:	6051      	str	r1, [r2, #4]
 800ff12:	7a1a      	ldrb	r2, [r3, #8]
 800ff14:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	d062      	beq.n	800ffe2 <WM_HandlePID+0x256>
 800ff1c:	9b05      	ldr	r3, [sp, #20]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d05f      	beq.n	800ffe2 <WM_HandlePID+0x256>
 800ff22:	9805      	ldr	r0, [sp, #20]
 800ff24:	f7fe fa28 	bl	800e378 <GUI_ALLOC_LockH>
 800ff28:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800ff2c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 800ff30:	f8da 3000 	ldr.w	r3, [sl]
 800ff34:	9003      	str	r0, [sp, #12]
 800ff36:	fb08 9303 	mla	r3, r8, r3, r9
 800ff3a:	7a1b      	ldrb	r3, [r3, #8]
 800ff3c:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 800ff40:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ff44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff46:	1a9b      	subs	r3, r3, r2
 800ff48:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff4a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ff4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff50:	eb0d 0008 	add.w	r0, sp, r8
 800ff54:	1a9b      	subs	r3, r3, r2
 800ff56:	9310      	str	r3, [sp, #64]	; 0x40
 800ff58:	f7fe fa1c 	bl	800e394 <GUI_ALLOC_UnlockH>
 800ff5c:	f8da e000 	ldr.w	lr, [sl]
 800ff60:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010048 <WM_HandlePID+0x2bc>
 800ff64:	ab0f      	add	r3, sp, #60	; 0x3c
 800ff66:	9315      	str	r3, [sp, #84]	; 0x54
 800ff68:	2311      	movs	r3, #17
 800ff6a:	9312      	str	r3, [sp, #72]	; 0x48
 800ff6c:	fb08 930e 	mla	r3, r8, lr, r9
 800ff70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ff74:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800ff78:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800ff7c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800ff80:	721a      	strb	r2, [r3, #8]
 800ff82:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800ff86:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800ff8a:	b133      	cbz	r3, 800ff9a <WM_HandlePID+0x20e>
 800ff8c:	eb0a 030e 	add.w	r3, sl, lr
 800ff90:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800ff94:	9a05      	ldr	r2, [sp, #20]
 800ff96:	605a      	str	r2, [r3, #4]
 800ff98:	e000      	b.n	800ff9c <WM_HandlePID+0x210>
 800ff9a:	4699      	mov	r9, r3
 800ff9c:	eb0a 030e 	add.w	r3, sl, lr
 800ffa0:	a912      	add	r1, sp, #72	; 0x48
 800ffa2:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800ffa6:	9805      	ldr	r0, [sp, #20]
 800ffa8:	f003 f847 	bl	801303a <WM__SendMessageIfEnabled>
 800ffac:	682b      	ldr	r3, [r5, #0]
 800ffae:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
 800ffb2:	6851      	ldr	r1, [r2, #4]
 800ffb4:	458b      	cmp	fp, r1
 800ffb6:	bf1c      	itt	ne
 800ffb8:	6852      	ldrne	r2, [r2, #4]
 800ffba:	9205      	strne	r2, [sp, #20]
 800ffbc:	220c      	movs	r2, #12
 800ffbe:	fb02 7303 	mla	r3, r2, r3, r7
 800ffc2:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800ffc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ffca:	f1b9 0f00 	cmp.w	r9, #0
 800ffce:	d008      	beq.n	800ffe2 <WM_HandlePID+0x256>
 800ffd0:	4648      	mov	r0, r9
 800ffd2:	f7f7 fa89 	bl	80074e8 <WM_IsWindow>
 800ffd6:	b120      	cbz	r0, 800ffe2 <WM_HandlePID+0x256>
 800ffd8:	682b      	ldr	r3, [r5, #0]
 800ffda:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 800ffde:	f8c3 9004 	str.w	r9, [r3, #4]
 800ffe2:	682a      	ldr	r2, [r5, #0]
 800ffe4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800ffe8:	210c      	movs	r1, #12
 800ffea:	4351      	muls	r1, r2
 800ffec:	1878      	adds	r0, r7, r1
 800ffee:	f890 8008 	ldrb.w	r8, [r0, #8]
 800fff2:	ea53 0808 	orrs.w	r8, r3, r8
 800fff6:	d063      	beq.n	80100c0 <WM_HandlePID+0x334>
 800fff8:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8010048 <WM_HandlePID+0x2bc>
 800fffc:	f44f 7e10 	mov.w	lr, #576	; 0x240
 8010000:	00d2      	lsls	r2, r2, #3
 8010002:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 8010006:	eb08 0e02 	add.w	lr, r8, r2
 801000a:	f8de 9004 	ldr.w	r9, [lr, #4]
 801000e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8010012:	45e1      	cmp	r9, ip
 8010014:	d02e      	beq.n	8010074 <WM_HandlePID+0x2e8>
 8010016:	f8de e004 	ldr.w	lr, [lr, #4]
 801001a:	f1be 0f00 	cmp.w	lr, #0
 801001e:	d029      	beq.n	8010074 <WM_HandlePID+0x2e8>
 8010020:	b1a3      	cbz	r3, 801004c <WM_HandlePID+0x2c0>
 8010022:	2300      	movs	r3, #0
 8010024:	9315      	str	r3, [sp, #84]	; 0x54
 8010026:	e01b      	b.n	8010060 <WM_HandlePID+0x2d4>
 8010028:	200086a4 	.word	0x200086a4
 801002c:	200287e4 	.word	0x200287e4
 8010030:	2002882c 	.word	0x2002882c
 8010034:	20028854 	.word	0x20028854
 8010038:	2000869c 	.word	0x2000869c
 801003c:	200287f0 	.word	0x200287f0
 8010040:	200086a0 	.word	0x200086a0
 8010044:	20028920 	.word	0x20028920
 8010048:	20028940 	.word	0x20028940
 801004c:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 8010120 <WM_HandlePID+0x394>
 8010050:	f88d 3020 	strb.w	r3, [sp, #32]
 8010054:	f85e 1001 	ldr.w	r1, [lr, r1]
 8010058:	9106      	str	r1, [sp, #24]
 801005a:	6841      	ldr	r1, [r0, #4]
 801005c:	9107      	str	r1, [sp, #28]
 801005e:	9615      	str	r6, [sp, #84]	; 0x54
 8010060:	4442      	add	r2, r8
 8010062:	a912      	add	r1, sp, #72	; 0x48
 8010064:	6850      	ldr	r0, [r2, #4]
 8010066:	f7ff fe73 	bl	800fd50 <WM__SendTouchMessage>
 801006a:	682b      	ldr	r3, [r5, #0]
 801006c:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8010070:	2200      	movs	r2, #0
 8010072:	605a      	str	r2, [r3, #4]
 8010074:	682b      	ldr	r3, [r5, #0]
 8010076:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
 801007a:	220c      	movs	r2, #12
 801007c:	fb02 7203 	mla	r2, r2, r3, r7
 8010080:	f882 e008 	strb.w	lr, [r2, #8]
 8010084:	9a05      	ldr	r2, [sp, #20]
 8010086:	2a00      	cmp	r2, #0
 8010088:	d030      	beq.n	80100ec <WM_HandlePID+0x360>
 801008a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801008e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8010092:	f1be 0f00 	cmp.w	lr, #0
 8010096:	d003      	beq.n	80100a0 <WM_HandlePID+0x314>
 8010098:	9a05      	ldr	r2, [sp, #20]
 801009a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801009e:	e008      	b.n	80100b2 <WM_HandlePID+0x326>
 80100a0:	4b1e      	ldr	r3, [pc, #120]	; (801011c <WM_HandlePID+0x390>)
 80100a2:	781b      	ldrb	r3, [r3, #0]
 80100a4:	b10b      	cbz	r3, 80100aa <WM_HandlePID+0x31e>
 80100a6:	f7f7 f8bf 	bl	8007228 <WM_ReleaseCapture>
 80100aa:	682b      	ldr	r3, [r5, #0]
 80100ac:	2200      	movs	r2, #0
 80100ae:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80100b2:	605a      	str	r2, [r3, #4]
 80100b4:	9805      	ldr	r0, [sp, #20]
 80100b6:	9615      	str	r6, [sp, #84]	; 0x54
 80100b8:	a912      	add	r1, sp, #72	; 0x48
 80100ba:	f7ff fe49 	bl	800fd50 <WM__SendTouchMessage>
 80100be:	e015      	b.n	80100ec <WM_HandlePID+0x360>
 80100c0:	9b05      	ldr	r3, [sp, #20]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	f43f af16 	beq.w	800fef4 <WM_HandlePID+0x168>
 80100c8:	9805      	ldr	r0, [sp, #20]
 80100ca:	f7f6 fecd 	bl	8006e68 <WM__IsEnabled>
 80100ce:	2800      	cmp	r0, #0
 80100d0:	f43f af10 	beq.w	800fef4 <WM_HandlePID+0x168>
 80100d4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80100d8:	2310      	movs	r3, #16
 80100da:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80100de:	9805      	ldr	r0, [sp, #20]
 80100e0:	9312      	str	r3, [sp, #72]	; 0x48
 80100e2:	a912      	add	r1, sp, #72	; 0x48
 80100e4:	9615      	str	r6, [sp, #84]	; 0x54
 80100e6:	f7ff fe33 	bl	800fd50 <WM__SendTouchMessage>
 80100ea:	e703      	b.n	800fef4 <WM_HandlePID+0x168>
 80100ec:	2601      	movs	r6, #1
 80100ee:	682b      	ldr	r3, [r5, #0]
 80100f0:	220c      	movs	r2, #12
 80100f2:	fb02 7703 	mla	r7, r2, r3, r7
 80100f6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80100fa:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80100fe:	4620      	mov	r0, r4
 8010100:	4619      	mov	r1, r3
 8010102:	f000 f871 	bl	80101e8 <WM_PID__SetPrevState>
 8010106:	e000      	b.n	801010a <WM_HandlePID+0x37e>
 8010108:	2600      	movs	r6, #0
 801010a:	a804      	add	r0, sp, #16
 801010c:	f000 f8ba 	bl	8010284 <WM__RemoveCriticalHandle>
 8010110:	f7fc fc44 	bl	800c99c <GUI_Unlock>
 8010114:	4630      	mov	r0, r6
 8010116:	b017      	add	sp, #92	; 0x5c
 8010118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801011c:	200287e8 	.word	0x200287e8
 8010120:	200086a4 	.word	0x200086a4

08010124 <WM__IsInWindow>:
 8010124:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010126:	f013 0302 	ands.w	r3, r3, #2
 801012a:	d012      	beq.n	8010152 <WM__IsInWindow+0x2e>
 801012c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8010130:	4299      	cmp	r1, r3
 8010132:	db10      	blt.n	8010156 <WM__IsInWindow+0x32>
 8010134:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8010138:	4299      	cmp	r1, r3
 801013a:	dc0c      	bgt.n	8010156 <WM__IsInWindow+0x32>
 801013c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8010140:	429a      	cmp	r2, r3
 8010142:	db08      	blt.n	8010156 <WM__IsInWindow+0x32>
 8010144:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8010148:	4282      	cmp	r2, r0
 801014a:	bfcc      	ite	gt
 801014c:	2000      	movgt	r0, #0
 801014e:	2001      	movle	r0, #1
 8010150:	4770      	bx	lr
 8010152:	4618      	mov	r0, r3
 8010154:	4770      	bx	lr
 8010156:	2000      	movs	r0, #0
 8010158:	4770      	bx	lr

0801015a <_Screen2hWin>:
 801015a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801015e:	460e      	mov	r6, r1
 8010160:	4617      	mov	r7, r2
 8010162:	4698      	mov	r8, r3
 8010164:	4605      	mov	r5, r0
 8010166:	b320      	cbz	r0, 80101b2 <_Screen2hWin+0x58>
 8010168:	f7fe f906 	bl	800e378 <GUI_ALLOC_LockH>
 801016c:	4639      	mov	r1, r7
 801016e:	4642      	mov	r2, r8
 8010170:	4604      	mov	r4, r0
 8010172:	9001      	str	r0, [sp, #4]
 8010174:	f7ff ffd6 	bl	8010124 <WM__IsInWindow>
 8010178:	4681      	mov	r9, r0
 801017a:	b920      	cbnz	r0, 8010186 <_Screen2hWin+0x2c>
 801017c:	a801      	add	r0, sp, #4
 801017e:	f7fe f909 	bl	800e394 <GUI_ALLOC_UnlockH>
 8010182:	4648      	mov	r0, r9
 8010184:	e016      	b.n	80101b4 <_Screen2hWin+0x5a>
 8010186:	69e4      	ldr	r4, [r4, #28]
 8010188:	b91c      	cbnz	r4, 8010192 <_Screen2hWin+0x38>
 801018a:	a801      	add	r0, sp, #4
 801018c:	f7fe f902 	bl	800e394 <GUI_ALLOC_UnlockH>
 8010190:	e00f      	b.n	80101b2 <_Screen2hWin+0x58>
 8010192:	42b4      	cmp	r4, r6
 8010194:	d0f9      	beq.n	801018a <_Screen2hWin+0x30>
 8010196:	4620      	mov	r0, r4
 8010198:	4631      	mov	r1, r6
 801019a:	463a      	mov	r2, r7
 801019c:	4643      	mov	r3, r8
 801019e:	f7ff ffdc 	bl	801015a <_Screen2hWin>
 80101a2:	2800      	cmp	r0, #0
 80101a4:	bf18      	it	ne
 80101a6:	4605      	movne	r5, r0
 80101a8:	4620      	mov	r0, r4
 80101aa:	f7fe f8db 	bl	800e364 <GUI_ALLOC_h2p>
 80101ae:	6a04      	ldr	r4, [r0, #32]
 80101b0:	e7ea      	b.n	8010188 <_Screen2hWin+0x2e>
 80101b2:	4628      	mov	r0, r5
 80101b4:	b003      	add	sp, #12
 80101b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080101bc <WM_Screen2hWin>:
 80101bc:	b538      	push	{r3, r4, r5, lr}
 80101be:	460c      	mov	r4, r1
 80101c0:	4605      	mov	r5, r0
 80101c2:	f7fc fbf5 	bl	800c9b0 <GUI_Lock>
 80101c6:	4b07      	ldr	r3, [pc, #28]	; (80101e4 <WM_Screen2hWin+0x28>)
 80101c8:	6818      	ldr	r0, [r3, #0]
 80101ca:	f000 f839 	bl	8010240 <WM_GetDesktopWindowEx>
 80101ce:	4623      	mov	r3, r4
 80101d0:	2100      	movs	r1, #0
 80101d2:	462a      	mov	r2, r5
 80101d4:	f7ff ffc1 	bl	801015a <_Screen2hWin>
 80101d8:	4604      	mov	r4, r0
 80101da:	f7fc fbdf 	bl	800c99c <GUI_Unlock>
 80101de:	4620      	mov	r0, r4
 80101e0:	bd38      	pop	{r3, r4, r5, pc}
 80101e2:	bf00      	nop
 80101e4:	200287e4 	.word	0x200287e4

080101e8 <WM_PID__SetPrevState>:
 80101e8:	4b03      	ldr	r3, [pc, #12]	; (80101f8 <WM_PID__SetPrevState+0x10>)
 80101ea:	220c      	movs	r2, #12
 80101ec:	fb02 3301 	mla	r3, r2, r1, r3
 80101f0:	c807      	ldmia	r0, {r0, r1, r2}
 80101f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80101f6:	4770      	bx	lr
 80101f8:	200086bc 	.word	0x200086bc

080101fc <WM_OnKey>:
 80101fc:	b530      	push	{r4, r5, lr}
 80101fe:	b087      	sub	sp, #28
 8010200:	4604      	mov	r4, r0
 8010202:	460d      	mov	r5, r1
 8010204:	f7fc fbd4 	bl	800c9b0 <GUI_Lock>
 8010208:	4b0b      	ldr	r3, [pc, #44]	; (8010238 <WM_OnKey+0x3c>)
 801020a:	681a      	ldr	r2, [r3, #0]
 801020c:	4b0b      	ldr	r3, [pc, #44]	; (801023c <WM_OnKey+0x40>)
 801020e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010212:	b150      	cbz	r0, 801022a <WM_OnKey+0x2e>
 8010214:	230e      	movs	r3, #14
 8010216:	9302      	str	r3, [sp, #8]
 8010218:	a902      	add	r1, sp, #8
 801021a:	ab00      	add	r3, sp, #0
 801021c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8010220:	9305      	str	r3, [sp, #20]
 8010222:	2401      	movs	r4, #1
 8010224:	f7f6 fe02 	bl	8006e2c <WM__SendMessage>
 8010228:	e000      	b.n	801022c <WM_OnKey+0x30>
 801022a:	4604      	mov	r4, r0
 801022c:	f7fc fbb6 	bl	800c99c <GUI_Unlock>
 8010230:	4620      	mov	r0, r4
 8010232:	b007      	add	sp, #28
 8010234:	bd30      	pop	{r4, r5, pc}
 8010236:	bf00      	nop
 8010238:	200287e4 	.word	0x200287e4
 801023c:	20028800 	.word	0x20028800

08010240 <WM_GetDesktopWindowEx>:
 8010240:	2801      	cmp	r0, #1
 8010242:	bf9a      	itte	ls
 8010244:	4b02      	ldrls	r3, [pc, #8]	; (8010250 <WM_GetDesktopWindowEx+0x10>)
 8010246:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801024a:	2000      	movhi	r0, #0
 801024c:	4770      	bx	lr
 801024e:	bf00      	nop
 8010250:	20028818 	.word	0x20028818

08010254 <WM_ForEachDesc>:
 8010254:	b570      	push	{r4, r5, r6, lr}
 8010256:	4606      	mov	r6, r0
 8010258:	460d      	mov	r5, r1
 801025a:	4614      	mov	r4, r2
 801025c:	f7fc fba8 	bl	800c9b0 <GUI_Lock>
 8010260:	4630      	mov	r0, r6
 8010262:	4629      	mov	r1, r5
 8010264:	4622      	mov	r2, r4
 8010266:	f002 ff09 	bl	801307c <WM__ForEachDesc>
 801026a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801026e:	f7fc bb95 	b.w	800c99c <GUI_Unlock>
	...

08010274 <WM__AddCriticalHandle>:
 8010274:	4b02      	ldr	r3, [pc, #8]	; (8010280 <WM__AddCriticalHandle+0xc>)
 8010276:	681a      	ldr	r2, [r3, #0]
 8010278:	6002      	str	r2, [r0, #0]
 801027a:	6018      	str	r0, [r3, #0]
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop
 8010280:	200287f8 	.word	0x200287f8

08010284 <WM__RemoveCriticalHandle>:
 8010284:	4a09      	ldr	r2, [pc, #36]	; (80102ac <WM__RemoveCriticalHandle+0x28>)
 8010286:	6813      	ldr	r3, [r2, #0]
 8010288:	b510      	push	{r4, lr}
 801028a:	4614      	mov	r4, r2
 801028c:	b16b      	cbz	r3, 80102aa <WM__RemoveCriticalHandle+0x26>
 801028e:	2200      	movs	r2, #0
 8010290:	4283      	cmp	r3, r0
 8010292:	d105      	bne.n	80102a0 <WM__RemoveCriticalHandle+0x1c>
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	b10a      	cbz	r2, 801029c <WM__RemoveCriticalHandle+0x18>
 8010298:	6013      	str	r3, [r2, #0]
 801029a:	bd10      	pop	{r4, pc}
 801029c:	6023      	str	r3, [r4, #0]
 801029e:	bd10      	pop	{r4, pc}
 80102a0:	6819      	ldr	r1, [r3, #0]
 80102a2:	b111      	cbz	r1, 80102aa <WM__RemoveCriticalHandle+0x26>
 80102a4:	461a      	mov	r2, r3
 80102a6:	460b      	mov	r3, r1
 80102a8:	e7f2      	b.n	8010290 <WM__RemoveCriticalHandle+0xc>
 80102aa:	bd10      	pop	{r4, pc}
 80102ac:	200287f8 	.word	0x200287f8

080102b0 <WM_BringToBottom>:
 80102b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80102b4:	4604      	mov	r4, r0
 80102b6:	b087      	sub	sp, #28
 80102b8:	f7fc fb7a 	bl	800c9b0 <GUI_Lock>
 80102bc:	2c00      	cmp	r4, #0
 80102be:	d03a      	beq.n	8010336 <WM_BringToBottom+0x86>
 80102c0:	4620      	mov	r0, r4
 80102c2:	f7fe f859 	bl	800e378 <GUI_ALLOC_LockH>
 80102c6:	4603      	mov	r3, r0
 80102c8:	9001      	str	r0, [sp, #4]
 80102ca:	c803      	ldmia	r0, {r0, r1}
 80102cc:	ad04      	add	r5, sp, #16
 80102ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80102d2:	a801      	add	r0, sp, #4
 80102d4:	6a1e      	ldr	r6, [r3, #32]
 80102d6:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 80102da:	f7fe f85b 	bl	800e394 <GUI_ALLOC_UnlockH>
 80102de:	4620      	mov	r0, r4
 80102e0:	f7ff fc91 	bl	800fc06 <WM__GetPrevSibling>
 80102e4:	4607      	mov	r7, r0
 80102e6:	b330      	cbz	r0, 8010336 <WM_BringToBottom+0x86>
 80102e8:	4620      	mov	r0, r4
 80102ea:	f7f7 f9b0 	bl	800764e <WM_GetParent>
 80102ee:	f019 0f02 	tst.w	r9, #2
 80102f2:	4680      	mov	r8, r0
 80102f4:	d004      	beq.n	8010300 <WM_BringToBottom+0x50>
 80102f6:	4628      	mov	r0, r5
 80102f8:	4641      	mov	r1, r8
 80102fa:	4632      	mov	r2, r6
 80102fc:	f7f7 feac 	bl	8008058 <WM__InvalidateRectEx>
 8010300:	4620      	mov	r0, r4
 8010302:	f7fe f839 	bl	800e378 <GUI_ALLOC_LockH>
 8010306:	9001      	str	r0, [sp, #4]
 8010308:	4640      	mov	r0, r8
 801030a:	f7fe f835 	bl	800e378 <GUI_ALLOC_LockH>
 801030e:	9003      	str	r0, [sp, #12]
 8010310:	4638      	mov	r0, r7
 8010312:	f7fe f831 	bl	800e378 <GUI_ALLOC_LockH>
 8010316:	9b03      	ldr	r3, [sp, #12]
 8010318:	9a01      	ldr	r2, [sp, #4]
 801031a:	69d9      	ldr	r1, [r3, #28]
 801031c:	6206      	str	r6, [r0, #32]
 801031e:	9002      	str	r0, [sp, #8]
 8010320:	6211      	str	r1, [r2, #32]
 8010322:	a801      	add	r0, sp, #4
 8010324:	61dc      	str	r4, [r3, #28]
 8010326:	f7fe f835 	bl	800e394 <GUI_ALLOC_UnlockH>
 801032a:	a803      	add	r0, sp, #12
 801032c:	f7fe f832 	bl	800e394 <GUI_ALLOC_UnlockH>
 8010330:	a802      	add	r0, sp, #8
 8010332:	f7fe f82f 	bl	800e394 <GUI_ALLOC_UnlockH>
 8010336:	f7fc fb31 	bl	800c99c <GUI_Unlock>
 801033a:	b007      	add	sp, #28
 801033c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010340 <_Convert16>:
 8010340:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010344:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8010348:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801034c:	4605      	mov	r5, r0
 801034e:	460e      	mov	r6, r1
 8010350:	4690      	mov	r8, r2
 8010352:	461f      	mov	r7, r3
 8010354:	4614      	mov	r4, r2
 8010356:	4689      	mov	r9, r1
 8010358:	f835 0b02 	ldrh.w	r0, [r5], #2
 801035c:	47d8      	blx	fp
 801035e:	47d0      	blx	sl
 8010360:	3c01      	subs	r4, #1
 8010362:	f849 0b04 	str.w	r0, [r9], #4
 8010366:	d1f7      	bne.n	8010358 <_Convert16+0x18>
 8010368:	2f1f      	cmp	r7, #31
 801036a:	d806      	bhi.n	801037a <_Convert16+0x3a>
 801036c:	4630      	mov	r0, r6
 801036e:	4641      	mov	r1, r8
 8010370:	463a      	mov	r2, r7
 8010372:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010376:	f001 be69 	b.w	801204c <GUI__CompactPixelIndices>
 801037a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801037e <_Convert8>:
 801037e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010382:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8010386:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801038a:	4605      	mov	r5, r0
 801038c:	460e      	mov	r6, r1
 801038e:	4690      	mov	r8, r2
 8010390:	461f      	mov	r7, r3
 8010392:	4689      	mov	r9, r1
 8010394:	4604      	mov	r4, r0
 8010396:	f814 0b01 	ldrb.w	r0, [r4], #1
 801039a:	47d8      	blx	fp
 801039c:	47d0      	blx	sl
 801039e:	1b2b      	subs	r3, r5, r4
 80103a0:	4443      	add	r3, r8
 80103a2:	f849 0b04 	str.w	r0, [r9], #4
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d1f5      	bne.n	8010396 <_Convert8+0x18>
 80103aa:	2f1f      	cmp	r7, #31
 80103ac:	d806      	bhi.n	80103bc <_Convert8+0x3e>
 80103ae:	4630      	mov	r0, r6
 80103b0:	4641      	mov	r1, r8
 80103b2:	463a      	mov	r2, r7
 80103b4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103b8:	f001 be48 	b.w	801204c <GUI__CompactPixelIndices>
 80103bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080103c0 <GUI_MEMDEV__WriteToActiveOpaque>:
 80103c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103c4:	b09d      	sub	sp, #116	; 0x74
 80103c6:	4606      	mov	r6, r0
 80103c8:	910f      	str	r1, [sp, #60]	; 0x3c
 80103ca:	920d      	str	r2, [sp, #52]	; 0x34
 80103cc:	f7fd ffd4 	bl	800e378 <GUI_ALLOC_LockH>
 80103d0:	ab1c      	add	r3, sp, #112	; 0x70
 80103d2:	6944      	ldr	r4, [r0, #20]
 80103d4:	f843 0d1c 	str.w	r0, [r3, #-28]!
 80103d8:	4618      	mov	r0, r3
 80103da:	f7fd ffdb 	bl	800e394 <GUI_ALLOC_UnlockH>
 80103de:	4630      	mov	r0, r6
 80103e0:	f7f9 fb32 	bl	8009a48 <GUI_MEMDEV_GetBitsPerPixel>
 80103e4:	2808      	cmp	r0, #8
 80103e6:	4601      	mov	r1, r0
 80103e8:	dd02      	ble.n	80103f0 <GUI_MEMDEV__WriteToActiveOpaque+0x30>
 80103ea:	2c00      	cmp	r4, #0
 80103ec:	f000 81c3 	beq.w	8010776 <GUI_MEMDEV__WriteToActiveOpaque+0x3b6>
 80103f0:	2201      	movs	r2, #1
 80103f2:	f04f 0800 	mov.w	r8, #0
 80103f6:	4630      	mov	r0, r6
 80103f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80103fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80103fc:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8010400:	f7fd ffba 	bl	800e378 <GUI_ALLOC_LockH>
 8010404:	6803      	ldr	r3, [r0, #0]
 8010406:	f8df a610 	ldr.w	sl, [pc, #1552]	; 8010a18 <GUI_MEMDEV__WriteToActiveOpaque+0x658>
 801040a:	691b      	ldr	r3, [r3, #16]
 801040c:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 8010410:	685b      	ldr	r3, [r3, #4]
 8010412:	930e      	str	r3, [sp, #56]	; 0x38
 8010414:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8010418:	f8da 3000 	ldr.w	r3, [sl]
 801041c:	f84b 0d14 	str.w	r0, [fp, #-20]!
 8010420:	6904      	ldr	r4, [r0, #16]
 8010422:	6945      	ldr	r5, [r0, #20]
 8010424:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8010428:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 801042c:	7c58      	ldrb	r0, [r3, #17]
 801042e:	9112      	str	r1, [sp, #72]	; 0x48
 8010430:	f7fb f90e 	bl	800b650 <GUI_GetBitsPerPixelEx>
 8010434:	f8da 3000 	ldr.w	r3, [sl]
 8010438:	9010      	str	r0, [sp, #64]	; 0x40
 801043a:	7c58      	ldrb	r0, [r3, #17]
 801043c:	f7fb f926 	bl	800b68c <GUI_GetpfIndex2ColorEx>
 8010440:	4603      	mov	r3, r0
 8010442:	4658      	mov	r0, fp
 8010444:	9309      	str	r3, [sp, #36]	; 0x24
 8010446:	f7fd ffa5 	bl	800e394 <GUI_ALLOC_UnlockH>
 801044a:	2c08      	cmp	r4, #8
 801044c:	4651      	mov	r1, sl
 801044e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010452:	d904      	bls.n	801045e <GUI_MEMDEV__WriteToActiveOpaque+0x9e>
 8010454:	2c10      	cmp	r4, #16
 8010456:	bf8c      	ite	hi
 8010458:	2204      	movhi	r2, #4
 801045a:	2202      	movls	r2, #2
 801045c:	e005      	b.n	801046a <GUI_MEMDEV__WriteToActiveOpaque+0xaa>
 801045e:	2c01      	cmp	r4, #1
 8010460:	d103      	bne.n	801046a <GUI_MEMDEV__WriteToActiveOpaque+0xaa>
 8010462:	9411      	str	r4, [sp, #68]	; 0x44
 8010464:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 8010468:	e000      	b.n	801046c <GUI_MEMDEV__WriteToActiveOpaque+0xac>
 801046a:	9211      	str	r2, [sp, #68]	; 0x44
 801046c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801046e:	4298      	cmp	r0, r3
 8010470:	f000 80e2 	beq.w	8010638 <GUI_MEMDEV__WriteToActiveOpaque+0x278>
 8010474:	680b      	ldr	r3, [r1, #0]
 8010476:	7c58      	ldrb	r0, [r3, #17]
 8010478:	f7fb f910 	bl	800b69c <GUI_GetpfColor2IndexEx>
 801047c:	9013      	str	r0, [sp, #76]	; 0x4c
 801047e:	00b8      	lsls	r0, r7, #2
 8010480:	f7fe f9da 	bl	800e838 <GUI_ALLOC_AllocNoInit>
 8010484:	900c      	str	r0, [sp, #48]	; 0x30
 8010486:	2800      	cmp	r0, #0
 8010488:	f000 8327 	beq.w	8010ada <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 801048c:	4630      	mov	r0, r6
 801048e:	f7f8 fc89 	bl	8008da4 <GUI_MEMDEV_GetDataPtr>
 8010492:	4606      	mov	r6, r0
 8010494:	2d00      	cmp	r5, #0
 8010496:	f000 80be 	beq.w	8010616 <GUI_MEMDEV__WriteToActiveOpaque+0x256>
 801049a:	4628      	mov	r0, r5
 801049c:	f7fd ff6c 	bl	800e378 <GUI_ALLOC_LockH>
 80104a0:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80104a4:	9018      	str	r0, [sp, #96]	; 0x60
 80104a6:	f04f 0a00 	mov.w	sl, #0
 80104aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80104ac:	4592      	cmp	sl, r2
 80104ae:	f280 80ae 	bge.w	801060e <GUI_MEMDEV__WriteToActiveOpaque+0x24e>
 80104b2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80104b4:	2300      	movs	r3, #0
 80104b6:	9319      	str	r3, [sp, #100]	; 0x64
 80104b8:	6883      	ldr	r3, [r0, #8]
 80104ba:	a919      	add	r1, sp, #100	; 0x64
 80104bc:	695b      	ldr	r3, [r3, #20]
 80104be:	4652      	mov	r2, sl
 80104c0:	4798      	blx	r3
 80104c2:	42b8      	cmp	r0, r7
 80104c4:	4605      	mov	r5, r0
 80104c6:	d12f      	bne.n	8010528 <GUI_MEMDEV__WriteToActiveOpaque+0x168>
 80104c8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80104ca:	f7fd ff55 	bl	800e378 <GUI_ALLOC_LockH>
 80104ce:	2c08      	cmp	r4, #8
 80104d0:	4601      	mov	r1, r0
 80104d2:	9016      	str	r0, [sp, #88]	; 0x58
 80104d4:	d909      	bls.n	80104ea <GUI_MEMDEV__WriteToActiveOpaque+0x12a>
 80104d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80104d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80104da:	9200      	str	r2, [sp, #0]
 80104dc:	9301      	str	r3, [sp, #4]
 80104de:	4630      	mov	r0, r6
 80104e0:	463a      	mov	r2, r7
 80104e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104e4:	f7ff ff2c 	bl	8010340 <_Convert16>
 80104e8:	e008      	b.n	80104fc <GUI_MEMDEV__WriteToActiveOpaque+0x13c>
 80104ea:	980e      	ldr	r0, [sp, #56]	; 0x38
 80104ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80104ee:	9000      	str	r0, [sp, #0]
 80104f0:	9201      	str	r2, [sp, #4]
 80104f2:	4630      	mov	r0, r6
 80104f4:	463a      	mov	r2, r7
 80104f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104f8:	f7ff ff41 	bl	801037e <_Convert8>
 80104fc:	2301      	movs	r3, #1
 80104fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010500:	9002      	str	r0, [sp, #8]
 8010502:	ad1c      	add	r5, sp, #112	; 0x70
 8010504:	2200      	movs	r2, #0
 8010506:	9300      	str	r3, [sp, #0]
 8010508:	9301      	str	r3, [sp, #4]
 801050a:	9203      	str	r2, [sp, #12]
 801050c:	f855 2d18 	ldr.w	r2, [r5, #-24]!
 8010510:	9204      	str	r2, [sp, #16]
 8010512:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010514:	f8cd 8014 	str.w	r8, [sp, #20]
 8010518:	4659      	mov	r1, fp
 801051a:	463a      	mov	r2, r7
 801051c:	f7fb fac0 	bl	800baa0 <LCD_DrawBitmap>
 8010520:	4628      	mov	r0, r5
 8010522:	f7fd ff37 	bl	800e394 <GUI_ALLOC_UnlockH>
 8010526:	e060      	b.n	80105ea <GUI_MEMDEV__WriteToActiveOpaque+0x22a>
 8010528:	2c01      	cmp	r4, #1
 801052a:	d15c      	bne.n	80105e6 <GUI_MEMDEV__WriteToActiveOpaque+0x226>
 801052c:	2d00      	cmp	r5, #0
 801052e:	d05c      	beq.n	80105ea <GUI_MEMDEV__WriteToActiveOpaque+0x22a>
 8010530:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010532:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010534:	f8cd 900c 	str.w	r9, [sp, #12]
 8010538:	2208      	movs	r2, #8
 801053a:	fb90 f2f2 	sdiv	r2, r0, r2
 801053e:	4432      	add	r2, r6
 8010540:	2301      	movs	r3, #1
 8010542:	9204      	str	r2, [sp, #16]
 8010544:	f000 0207 	and.w	r2, r0, #7
 8010548:	9300      	str	r3, [sp, #0]
 801054a:	4408      	add	r0, r1
 801054c:	9301      	str	r3, [sp, #4]
 801054e:	9302      	str	r3, [sp, #8]
 8010550:	9206      	str	r2, [sp, #24]
 8010552:	4659      	mov	r1, fp
 8010554:	462a      	mov	r2, r5
 8010556:	f8cd 8014 	str.w	r8, [sp, #20]
 801055a:	f7fb f9c1 	bl	800b8e0 <LCD__DrawBitmap_1bpp>
 801055e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010560:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010562:	441d      	add	r5, r3
 8010564:	6883      	ldr	r3, [r0, #8]
 8010566:	9519      	str	r5, [sp, #100]	; 0x64
 8010568:	695b      	ldr	r3, [r3, #20]
 801056a:	a919      	add	r1, sp, #100	; 0x64
 801056c:	4652      	mov	r2, sl
 801056e:	4798      	blx	r3
 8010570:	4605      	mov	r5, r0
 8010572:	e7db      	b.n	801052c <GUI_MEMDEV__WriteToActiveOpaque+0x16c>
 8010574:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010576:	f7fd feff 	bl	800e378 <GUI_ALLOC_LockH>
 801057a:	2c08      	cmp	r4, #8
 801057c:	4601      	mov	r1, r0
 801057e:	9016      	str	r0, [sp, #88]	; 0x58
 8010580:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010582:	d938      	bls.n	80105f6 <GUI_MEMDEV__WriteToActiveOpaque+0x236>
 8010584:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010586:	9200      	str	r2, [sp, #0]
 8010588:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801058a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801058c:	9301      	str	r3, [sp, #4]
 801058e:	fb00 6002 	mla	r0, r0, r2, r6
 8010592:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010594:	462a      	mov	r2, r5
 8010596:	f7ff fed3 	bl	8010340 <_Convert16>
 801059a:	2301      	movs	r3, #1
 801059c:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 80105a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80105a2:	9300      	str	r3, [sp, #0]
 80105a4:	2200      	movs	r2, #0
 80105a6:	9301      	str	r3, [sp, #4]
 80105a8:	9002      	str	r0, [sp, #8]
 80105aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80105ac:	9203      	str	r2, [sp, #12]
 80105ae:	9819      	ldr	r0, [sp, #100]	; 0x64
 80105b0:	f85c 2d18 	ldr.w	r2, [ip, #-24]!
 80105b4:	9204      	str	r2, [sp, #16]
 80105b6:	4408      	add	r0, r1
 80105b8:	462a      	mov	r2, r5
 80105ba:	4659      	mov	r1, fp
 80105bc:	f8cd 8014 	str.w	r8, [sp, #20]
 80105c0:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80105c4:	f7fb fa6c 	bl	800baa0 <LCD_DrawBitmap>
 80105c8:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80105cc:	4660      	mov	r0, ip
 80105ce:	f7fd fee1 	bl	800e394 <GUI_ALLOC_UnlockH>
 80105d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80105d4:	9818      	ldr	r0, [sp, #96]	; 0x60
 80105d6:	441d      	add	r5, r3
 80105d8:	6883      	ldr	r3, [r0, #8]
 80105da:	9519      	str	r5, [sp, #100]	; 0x64
 80105dc:	695b      	ldr	r3, [r3, #20]
 80105de:	a919      	add	r1, sp, #100	; 0x64
 80105e0:	4652      	mov	r2, sl
 80105e2:	4798      	blx	r3
 80105e4:	4605      	mov	r5, r0
 80105e6:	2d00      	cmp	r5, #0
 80105e8:	d1c4      	bne.n	8010574 <GUI_MEMDEV__WriteToActiveOpaque+0x1b4>
 80105ea:	444e      	add	r6, r9
 80105ec:	f10a 0a01 	add.w	sl, sl, #1
 80105f0:	f10b 0b01 	add.w	fp, fp, #1
 80105f4:	e759      	b.n	80104aa <GUI_MEMDEV__WriteToActiveOpaque+0xea>
 80105f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80105f8:	9300      	str	r3, [sp, #0]
 80105fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80105fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80105fe:	9201      	str	r2, [sp, #4]
 8010600:	fb00 6003 	mla	r0, r0, r3, r6
 8010604:	462a      	mov	r2, r5
 8010606:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010608:	f7ff feb9 	bl	801037e <_Convert8>
 801060c:	e7c5      	b.n	801059a <GUI_MEMDEV__WriteToActiveOpaque+0x1da>
 801060e:	a818      	add	r0, sp, #96	; 0x60
 8010610:	f7fd fec0 	bl	800e394 <GUI_ALLOC_UnlockH>
 8010614:	e00e      	b.n	8010634 <GUI_MEMDEV__WriteToActiveOpaque+0x274>
 8010616:	2301      	movs	r3, #1
 8010618:	9300      	str	r3, [sp, #0]
 801061a:	9301      	str	r3, [sp, #4]
 801061c:	9004      	str	r0, [sp, #16]
 801061e:	9402      	str	r4, [sp, #8]
 8010620:	f8cd 900c 	str.w	r9, [sp, #12]
 8010624:	f8cd 8014 	str.w	r8, [sp, #20]
 8010628:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801062a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801062c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801062e:	463a      	mov	r2, r7
 8010630:	f7fb fa36 	bl	800baa0 <LCD_DrawBitmap>
 8010634:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010636:	e24e      	b.n	8010ad6 <GUI_MEMDEV__WriteToActiveOpaque+0x716>
 8010638:	4630      	mov	r0, r6
 801063a:	f7f8 fbb3 	bl	8008da4 <GUI_MEMDEV_GetDataPtr>
 801063e:	4606      	mov	r6, r0
 8010640:	2d00      	cmp	r5, #0
 8010642:	f000 808a 	beq.w	801075a <GUI_MEMDEV__WriteToActiveOpaque+0x39a>
 8010646:	4628      	mov	r0, r5
 8010648:	f7fd fe96 	bl	800e378 <GUI_ALLOC_LockH>
 801064c:	2500      	movs	r5, #0
 801064e:	9018      	str	r0, [sp, #96]	; 0x60
 8010650:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010652:	429d      	cmp	r5, r3
 8010654:	da7d      	bge.n	8010752 <GUI_MEMDEV__WriteToActiveOpaque+0x392>
 8010656:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010658:	2300      	movs	r3, #0
 801065a:	9319      	str	r3, [sp, #100]	; 0x64
 801065c:	6883      	ldr	r3, [r0, #8]
 801065e:	a919      	add	r1, sp, #100	; 0x64
 8010660:	695b      	ldr	r3, [r3, #20]
 8010662:	462a      	mov	r2, r5
 8010664:	4798      	blx	r3
 8010666:	42b8      	cmp	r0, r7
 8010668:	4682      	mov	sl, r0
 801066a:	d124      	bne.n	80106b6 <GUI_MEMDEV__WriteToActiveOpaque+0x2f6>
 801066c:	46aa      	mov	sl, r5
 801066e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010670:	6883      	ldr	r3, [r0, #8]
 8010672:	f10a 0b01 	add.w	fp, sl, #1
 8010676:	695b      	ldr	r3, [r3, #20]
 8010678:	a919      	add	r1, sp, #100	; 0x64
 801067a:	465a      	mov	r2, fp
 801067c:	4798      	blx	r3
 801067e:	42b8      	cmp	r0, r7
 8010680:	d101      	bne.n	8010686 <GUI_MEMDEV__WriteToActiveOpaque+0x2c6>
 8010682:	46da      	mov	sl, fp
 8010684:	e7f3      	b.n	801066e <GUI_MEMDEV__WriteToActiveOpaque+0x2ae>
 8010686:	ebc5 0b0a 	rsb	fp, r5, sl
 801068a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801068c:	9604      	str	r6, [sp, #16]
 801068e:	2301      	movs	r3, #1
 8010690:	f10b 0b01 	add.w	fp, fp, #1
 8010694:	9300      	str	r3, [sp, #0]
 8010696:	9301      	str	r3, [sp, #4]
 8010698:	4429      	add	r1, r5
 801069a:	9402      	str	r4, [sp, #8]
 801069c:	f8cd 900c 	str.w	r9, [sp, #12]
 80106a0:	f8cd 8014 	str.w	r8, [sp, #20]
 80106a4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80106a6:	463a      	mov	r2, r7
 80106a8:	465b      	mov	r3, fp
 80106aa:	f7fb f9f9 	bl	800baa0 <LCD_DrawBitmap>
 80106ae:	fb09 660b 	mla	r6, r9, fp, r6
 80106b2:	4655      	mov	r5, sl
 80106b4:	e04b      	b.n	801074e <GUI_MEMDEV__WriteToActiveOpaque+0x38e>
 80106b6:	2c01      	cmp	r4, #1
 80106b8:	d127      	bne.n	801070a <GUI_MEMDEV__WriteToActiveOpaque+0x34a>
 80106ba:	f1ba 0f00 	cmp.w	sl, #0
 80106be:	d022      	beq.n	8010706 <GUI_MEMDEV__WriteToActiveOpaque+0x346>
 80106c0:	9819      	ldr	r0, [sp, #100]	; 0x64
 80106c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80106c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80106c8:	2208      	movs	r2, #8
 80106ca:	fb90 f2f2 	sdiv	r2, r0, r2
 80106ce:	4432      	add	r2, r6
 80106d0:	9204      	str	r2, [sp, #16]
 80106d2:	f000 0207 	and.w	r2, r0, #7
 80106d6:	4408      	add	r0, r1
 80106d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80106da:	9206      	str	r2, [sp, #24]
 80106dc:	2301      	movs	r3, #1
 80106de:	4652      	mov	r2, sl
 80106e0:	9300      	str	r3, [sp, #0]
 80106e2:	9301      	str	r3, [sp, #4]
 80106e4:	9302      	str	r3, [sp, #8]
 80106e6:	4429      	add	r1, r5
 80106e8:	f8cd 8014 	str.w	r8, [sp, #20]
 80106ec:	f7fb f8f8 	bl	800b8e0 <LCD__DrawBitmap_1bpp>
 80106f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80106f2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80106f4:	4453      	add	r3, sl
 80106f6:	9319      	str	r3, [sp, #100]	; 0x64
 80106f8:	6883      	ldr	r3, [r0, #8]
 80106fa:	a919      	add	r1, sp, #100	; 0x64
 80106fc:	695b      	ldr	r3, [r3, #20]
 80106fe:	462a      	mov	r2, r5
 8010700:	4798      	blx	r3
 8010702:	4682      	mov	sl, r0
 8010704:	e7d9      	b.n	80106ba <GUI_MEMDEV__WriteToActiveOpaque+0x2fa>
 8010706:	444e      	add	r6, r9
 8010708:	e021      	b.n	801074e <GUI_MEMDEV__WriteToActiveOpaque+0x38e>
 801070a:	f1ba 0f00 	cmp.w	sl, #0
 801070e:	d0fa      	beq.n	8010706 <GUI_MEMDEV__WriteToActiveOpaque+0x346>
 8010710:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010712:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010714:	9402      	str	r4, [sp, #8]
 8010716:	fb00 6201 	mla	r2, r0, r1, r6
 801071a:	9204      	str	r2, [sp, #16]
 801071c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801071e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010720:	f8cd 900c 	str.w	r9, [sp, #12]
 8010724:	2301      	movs	r3, #1
 8010726:	4410      	add	r0, r2
 8010728:	9300      	str	r3, [sp, #0]
 801072a:	4652      	mov	r2, sl
 801072c:	9301      	str	r3, [sp, #4]
 801072e:	4429      	add	r1, r5
 8010730:	f8cd 8014 	str.w	r8, [sp, #20]
 8010734:	f7fb f9b4 	bl	800baa0 <LCD_DrawBitmap>
 8010738:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801073a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801073c:	4453      	add	r3, sl
 801073e:	9319      	str	r3, [sp, #100]	; 0x64
 8010740:	6883      	ldr	r3, [r0, #8]
 8010742:	a919      	add	r1, sp, #100	; 0x64
 8010744:	695b      	ldr	r3, [r3, #20]
 8010746:	462a      	mov	r2, r5
 8010748:	4798      	blx	r3
 801074a:	4682      	mov	sl, r0
 801074c:	e7dd      	b.n	801070a <GUI_MEMDEV__WriteToActiveOpaque+0x34a>
 801074e:	3501      	adds	r5, #1
 8010750:	e77e      	b.n	8010650 <GUI_MEMDEV__WriteToActiveOpaque+0x290>
 8010752:	a818      	add	r0, sp, #96	; 0x60
 8010754:	f7fd fe1e 	bl	800e394 <GUI_ALLOC_UnlockH>
 8010758:	e1bf      	b.n	8010ada <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 801075a:	2301      	movs	r3, #1
 801075c:	9300      	str	r3, [sp, #0]
 801075e:	9301      	str	r3, [sp, #4]
 8010760:	9004      	str	r0, [sp, #16]
 8010762:	9402      	str	r4, [sp, #8]
 8010764:	f8cd 900c 	str.w	r9, [sp, #12]
 8010768:	f8cd 8014 	str.w	r8, [sp, #20]
 801076c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801076e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010770:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010772:	463a      	mov	r2, r7
 8010774:	e041      	b.n	80107fa <GUI_MEMDEV__WriteToActiveOpaque+0x43a>
 8010776:	4630      	mov	r0, r6
 8010778:	910a      	str	r1, [sp, #40]	; 0x28
 801077a:	f7fd fdfd 	bl	800e378 <GUI_ALLOC_LockH>
 801077e:	4682      	mov	sl, r0
 8010780:	a81c      	add	r0, sp, #112	; 0x70
 8010782:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 8010786:	f840 ad10 	str.w	sl, [r0, #-16]!
 801078a:	f8da 4000 	ldr.w	r4, [sl]
 801078e:	9210      	str	r2, [sp, #64]	; 0x40
 8010790:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010794:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 8010798:	4c9e      	ldr	r4, [pc, #632]	; (8010a14 <GUI_MEMDEV__WriteToActiveOpaque+0x654>)
 801079a:	b213      	sxth	r3, r2
 801079c:	f8da 200c 	ldr.w	r2, [sl, #12]
 80107a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80107a2:	9309      	str	r3, [sp, #36]	; 0x24
 80107a4:	f7fd fdf6 	bl	800e394 <GUI_ALLOC_UnlockH>
 80107a8:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80107ac:	900e      	str	r0, [sp, #56]	; 0x38
 80107ae:	489a      	ldr	r0, [pc, #616]	; (8010a18 <GUI_MEMDEV__WriteToActiveOpaque+0x658>)
 80107b0:	6800      	ldr	r0, [r0, #0]
 80107b2:	7c40      	ldrb	r0, [r0, #17]
 80107b4:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 80107b8:	6925      	ldr	r5, [r4, #16]
 80107ba:	f8d5 8000 	ldr.w	r8, [r5]
 80107be:	f7fa ff47 	bl	800b650 <GUI_GetBitsPerPixelEx>
 80107c2:	2808      	cmp	r0, #8
 80107c4:	fa0f fb87 	sxth.w	fp, r7
 80107c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80107ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80107cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107ce:	d904      	bls.n	80107da <GUI_MEMDEV__WriteToActiveOpaque+0x41a>
 80107d0:	2810      	cmp	r0, #16
 80107d2:	bf8c      	ite	hi
 80107d4:	2404      	movhi	r4, #4
 80107d6:	2402      	movls	r4, #2
 80107d8:	e000      	b.n	80107dc <GUI_MEMDEV__WriteToActiveOpaque+0x41c>
 80107da:	2401      	movs	r4, #1
 80107dc:	45a9      	cmp	r9, r5
 80107de:	d10f      	bne.n	8010800 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 80107e0:	2001      	movs	r0, #1
 80107e2:	9203      	str	r2, [sp, #12]
 80107e4:	f10a 0218 	add.w	r2, sl, #24
 80107e8:	9000      	str	r0, [sp, #0]
 80107ea:	9001      	str	r0, [sp, #4]
 80107ec:	9102      	str	r1, [sp, #8]
 80107ee:	9204      	str	r2, [sp, #16]
 80107f0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80107f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80107f4:	2200      	movs	r2, #0
 80107f6:	9205      	str	r2, [sp, #20]
 80107f8:	465a      	mov	r2, fp
 80107fa:	f7fb f951 	bl	800baa0 <LCD_DrawBitmap>
 80107fe:	e16c      	b.n	8010ada <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 8010800:	2920      	cmp	r1, #32
 8010802:	f040 808e 	bne.w	8010922 <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 8010806:	fb0b f004 	mul.w	r0, fp, r4
 801080a:	f7fe f815 	bl	800e838 <GUI_ALLOC_AllocNoInit>
 801080e:	900e      	str	r0, [sp, #56]	; 0x38
 8010810:	2800      	cmp	r0, #0
 8010812:	f000 8162 	beq.w	8010ada <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 8010816:	f7fd fdaf 	bl	800e378 <GUI_ALLOC_LockH>
 801081a:	901a      	str	r0, [sp, #104]	; 0x68
 801081c:	4630      	mov	r0, r6
 801081e:	f7fd fdab 	bl	800e378 <GUI_ALLOC_LockH>
 8010822:	9018      	str	r0, [sp, #96]	; 0x60
 8010824:	692b      	ldr	r3, [r5, #16]
 8010826:	f100 0a18 	add.w	sl, r0, #24
 801082a:	ea4f 068b 	mov.w	r6, fp, lsl #2
 801082e:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8010832:	2b00      	cmp	r3, #0
 8010834:	d02f      	beq.n	8010896 <GUI_MEMDEV__WriteToActiveOpaque+0x4d6>
 8010836:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 801083a:	2c02      	cmp	r4, #2
 801083c:	d003      	beq.n	8010846 <GUI_MEMDEV__WriteToActiveOpaque+0x486>
 801083e:	2c04      	cmp	r4, #4
 8010840:	d001      	beq.n	8010846 <GUI_MEMDEV__WriteToActiveOpaque+0x486>
 8010842:	2c01      	cmp	r4, #1
 8010844:	d106      	bne.n	8010854 <GUI_MEMDEV__WriteToActiveOpaque+0x494>
 8010846:	4650      	mov	r0, sl
 8010848:	692f      	ldr	r7, [r5, #16]
 801084a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801084c:	465a      	mov	r2, fp
 801084e:	4623      	mov	r3, r4
 8010850:	47b8      	blx	r7
 8010852:	44b2      	add	sl, r6
 8010854:	2301      	movs	r3, #1
 8010856:	2200      	movs	r2, #0
 8010858:	991a      	ldr	r1, [sp, #104]	; 0x68
 801085a:	9300      	str	r3, [sp, #0]
 801085c:	9301      	str	r3, [sp, #4]
 801085e:	9203      	str	r2, [sp, #12]
 8010860:	9104      	str	r1, [sp, #16]
 8010862:	9205      	str	r2, [sp, #20]
 8010864:	4641      	mov	r1, r8
 8010866:	465a      	mov	r2, fp
 8010868:	f8cd 9008 	str.w	r9, [sp, #8]
 801086c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801086e:	f7fb f917 	bl	800baa0 <LCD_DrawBitmap>
 8010872:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010874:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010876:	f108 0701 	add.w	r7, r8, #1
 801087a:	fa02 f381 	sxtah	r3, r2, r1
 801087e:	42bb      	cmp	r3, r7
 8010880:	d107      	bne.n	8010892 <GUI_MEMDEV__WriteToActiveOpaque+0x4d2>
 8010882:	a818      	add	r0, sp, #96	; 0x60
 8010884:	f7fd fd86 	bl	800e394 <GUI_ALLOC_UnlockH>
 8010888:	a81a      	add	r0, sp, #104	; 0x68
 801088a:	f7fd fd83 	bl	800e394 <GUI_ALLOC_UnlockH>
 801088e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010890:	e121      	b.n	8010ad6 <GUI_MEMDEV__WriteToActiveOpaque+0x716>
 8010892:	46b8      	mov	r8, r7
 8010894:	e7d1      	b.n	801083a <GUI_MEMDEV__WriteToActiveOpaque+0x47a>
 8010896:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010898:	2c02      	cmp	r4, #2
 801089a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801089c:	d00e      	beq.n	80108bc <GUI_MEMDEV__WriteToActiveOpaque+0x4fc>
 801089e:	2c04      	cmp	r4, #4
 80108a0:	d018      	beq.n	80108d4 <GUI_MEMDEV__WriteToActiveOpaque+0x514>
 80108a2:	2c01      	cmp	r4, #1
 80108a4:	d125      	bne.n	80108f2 <GUI_MEMDEV__WriteToActiveOpaque+0x532>
 80108a6:	2300      	movs	r3, #0
 80108a8:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 80108ac:	9309      	str	r3, [sp, #36]	; 0x24
 80108ae:	47c0      	blx	r8
 80108b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108b2:	54f8      	strb	r0, [r7, r3]
 80108b4:	3301      	adds	r3, #1
 80108b6:	459b      	cmp	fp, r3
 80108b8:	d1f6      	bne.n	80108a8 <GUI_MEMDEV__WriteToActiveOpaque+0x4e8>
 80108ba:	e019      	b.n	80108f0 <GUI_MEMDEV__WriteToActiveOpaque+0x530>
 80108bc:	2300      	movs	r3, #0
 80108be:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 80108c2:	9309      	str	r3, [sp, #36]	; 0x24
 80108c4:	47c0      	blx	r8
 80108c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108c8:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 80108cc:	3301      	adds	r3, #1
 80108ce:	459b      	cmp	fp, r3
 80108d0:	d1f5      	bne.n	80108be <GUI_MEMDEV__WriteToActiveOpaque+0x4fe>
 80108d2:	e00d      	b.n	80108f0 <GUI_MEMDEV__WriteToActiveOpaque+0x530>
 80108d4:	465a      	mov	r2, fp
 80108d6:	2300      	movs	r3, #0
 80108d8:	f85a 0003 	ldr.w	r0, [sl, r3]
 80108dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80108de:	9309      	str	r3, [sp, #36]	; 0x24
 80108e0:	47c0      	blx	r8
 80108e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80108e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108e6:	3a01      	subs	r2, #1
 80108e8:	50f8      	str	r0, [r7, r3]
 80108ea:	f103 0304 	add.w	r3, r3, #4
 80108ee:	d1f3      	bne.n	80108d8 <GUI_MEMDEV__WriteToActiveOpaque+0x518>
 80108f0:	44b2      	add	sl, r6
 80108f2:	2301      	movs	r3, #1
 80108f4:	2200      	movs	r2, #0
 80108f6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80108f8:	9300      	str	r3, [sp, #0]
 80108fa:	9301      	str	r3, [sp, #4]
 80108fc:	9203      	str	r2, [sp, #12]
 80108fe:	9104      	str	r1, [sp, #16]
 8010900:	9205      	str	r2, [sp, #20]
 8010902:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010904:	f8cd 9008 	str.w	r9, [sp, #8]
 8010908:	4629      	mov	r1, r5
 801090a:	465a      	mov	r2, fp
 801090c:	f7fb f8c8 	bl	800baa0 <LCD_DrawBitmap>
 8010910:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010912:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010914:	1c6f      	adds	r7, r5, #1
 8010916:	fa01 f380 	sxtah	r3, r1, r0
 801091a:	42bb      	cmp	r3, r7
 801091c:	d0b1      	beq.n	8010882 <GUI_MEMDEV__WriteToActiveOpaque+0x4c2>
 801091e:	463d      	mov	r5, r7
 8010920:	e7ba      	b.n	8010898 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 8010922:	2910      	cmp	r1, #16
 8010924:	f040 80d9 	bne.w	8010ada <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 8010928:	fa0f fa87 	sxth.w	sl, r7
 801092c:	fb0a f004 	mul.w	r0, sl, r4
 8010930:	f7fd ff82 	bl	800e838 <GUI_ALLOC_AllocNoInit>
 8010934:	9012      	str	r0, [sp, #72]	; 0x48
 8010936:	2800      	cmp	r0, #0
 8010938:	f000 80cf 	beq.w	8010ada <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 801093c:	f7fd fd1c 	bl	800e378 <GUI_ALLOC_LockH>
 8010940:	901a      	str	r0, [sp, #104]	; 0x68
 8010942:	4630      	mov	r0, r6
 8010944:	f7fd fd18 	bl	800e378 <GUI_ALLOC_LockH>
 8010948:	9018      	str	r0, [sp, #96]	; 0x60
 801094a:	692b      	ldr	r3, [r5, #16]
 801094c:	f100 0618 	add.w	r6, r0, #24
 8010950:	b113      	cbz	r3, 8010958 <GUI_MEMDEV__WriteToActiveOpaque+0x598>
 8010952:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010956:	b92b      	cbnz	r3, 8010964 <GUI_MEMDEV__WriteToActiveOpaque+0x5a4>
 8010958:	00e2      	lsls	r2, r4, #3
 801095a:	b23f      	sxth	r7, r7
 801095c:	9211      	str	r2, [sp, #68]	; 0x44
 801095e:	007f      	lsls	r7, r7, #1
 8010960:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010962:	e089      	b.n	8010a78 <GUI_MEMDEV__WriteToActiveOpaque+0x6b8>
 8010964:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8010968:	0080      	lsls	r0, r0, #2
 801096a:	f7fd ff65 	bl	800e838 <GUI_ALLOC_AllocNoInit>
 801096e:	9011      	str	r0, [sp, #68]	; 0x44
 8010970:	b118      	cbz	r0, 801097a <GUI_MEMDEV__WriteToActiveOpaque+0x5ba>
 8010972:	f7fd fd01 	bl	800e378 <GUI_ALLOC_LockH>
 8010976:	9019      	str	r0, [sp, #100]	; 0x64
 8010978:	e001      	b.n	801097e <GUI_MEMDEV__WriteToActiveOpaque+0x5be>
 801097a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801097c:	9319      	str	r3, [sp, #100]	; 0x64
 801097e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010980:	2b00      	cmp	r3, #0
 8010982:	f000 80a1 	beq.w	8010ac8 <GUI_MEMDEV__WriteToActiveOpaque+0x708>
 8010986:	b23f      	sxth	r7, r7
 8010988:	007f      	lsls	r7, r7, #1
 801098a:	970e      	str	r7, [sp, #56]	; 0x38
 801098c:	00e7      	lsls	r7, r4, #3
 801098e:	9713      	str	r7, [sp, #76]	; 0x4c
 8010990:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8010992:	970c      	str	r7, [sp, #48]	; 0x30
 8010994:	2c02      	cmp	r4, #2
 8010996:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801099a:	d004      	beq.n	80109a6 <GUI_MEMDEV__WriteToActiveOpaque+0x5e6>
 801099c:	2c04      	cmp	r4, #4
 801099e:	d007      	beq.n	80109b0 <GUI_MEMDEV__WriteToActiveOpaque+0x5f0>
 80109a0:	2c01      	cmp	r4, #1
 80109a2:	d114      	bne.n	80109ce <GUI_MEMDEV__WriteToActiveOpaque+0x60e>
 80109a4:	e004      	b.n	80109b0 <GUI_MEMDEV__WriteToActiveOpaque+0x5f0>
 80109a6:	4630      	mov	r0, r6
 80109a8:	9919      	ldr	r1, [sp, #100]	; 0x64
 80109aa:	4652      	mov	r2, sl
 80109ac:	4623      	mov	r3, r4
 80109ae:	e003      	b.n	80109b8 <GUI_MEMDEV__WriteToActiveOpaque+0x5f8>
 80109b0:	9919      	ldr	r1, [sp, #100]	; 0x64
 80109b2:	4630      	mov	r0, r6
 80109b4:	4652      	mov	r2, sl
 80109b6:	2302      	movs	r3, #2
 80109b8:	f8d9 7014 	ldr.w	r7, [r9, #20]
 80109bc:	47b8      	blx	r7
 80109be:	692f      	ldr	r7, [r5, #16]
 80109c0:	9819      	ldr	r0, [sp, #100]	; 0x64
 80109c2:	4641      	mov	r1, r8
 80109c4:	4652      	mov	r2, sl
 80109c6:	4623      	mov	r3, r4
 80109c8:	47b8      	blx	r7
 80109ca:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80109cc:	443e      	add	r6, r7
 80109ce:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80109d0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80109d2:	9104      	str	r1, [sp, #16]
 80109d4:	2301      	movs	r3, #1
 80109d6:	2200      	movs	r2, #0
 80109d8:	f107 0801 	add.w	r8, r7, #1
 80109dc:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80109de:	9300      	str	r3, [sp, #0]
 80109e0:	9301      	str	r3, [sp, #4]
 80109e2:	9702      	str	r7, [sp, #8]
 80109e4:	9203      	str	r2, [sp, #12]
 80109e6:	9205      	str	r2, [sp, #20]
 80109e8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80109ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80109ec:	465a      	mov	r2, fp
 80109ee:	f7fb f857 	bl	800baa0 <LCD_DrawBitmap>
 80109f2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80109f4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80109f6:	fa00 f387 	sxtah	r3, r0, r7
 80109fa:	4543      	cmp	r3, r8
 80109fc:	d002      	beq.n	8010a04 <GUI_MEMDEV__WriteToActiveOpaque+0x644>
 80109fe:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8010a02:	e7c7      	b.n	8010994 <GUI_MEMDEV__WriteToActiveOpaque+0x5d4>
 8010a04:	a819      	add	r0, sp, #100	; 0x64
 8010a06:	f7fd fcc5 	bl	800e394 <GUI_ALLOC_UnlockH>
 8010a0a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010a0c:	f7fd fcee 	bl	800e3ec <GUI_ALLOC_Free>
 8010a10:	e05a      	b.n	8010ac8 <GUI_MEMDEV__WriteToActiveOpaque+0x708>
 8010a12:	bf00      	nop
 8010a14:	20028844 	.word	0x20028844
 8010a18:	200002c4 	.word	0x200002c4
 8010a1c:	2c04      	cmp	r4, #4
 8010a1e:	d041      	beq.n	8010aa4 <GUI_MEMDEV__WriteToActiveOpaque+0x6e4>
 8010a20:	2c01      	cmp	r4, #1
 8010a22:	d111      	bne.n	8010a48 <GUI_MEMDEV__WriteToActiveOpaque+0x688>
 8010a24:	464a      	mov	r2, r9
 8010a26:	4631      	mov	r1, r6
 8010a28:	f831 0b02 	ldrh.w	r0, [r1], #2
 8010a2c:	910a      	str	r1, [sp, #40]	; 0x28
 8010a2e:	920b      	str	r2, [sp, #44]	; 0x2c
 8010a30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a32:	4798      	blx	r3
 8010a34:	47c0      	blx	r8
 8010a36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010a38:	f802 0b01 	strb.w	r0, [r2], #1
 8010a3c:	eb09 000a 	add.w	r0, r9, sl
 8010a40:	4282      	cmp	r2, r0
 8010a42:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010a44:	d1f0      	bne.n	8010a28 <GUI_MEMDEV__WriteToActiveOpaque+0x668>
 8010a46:	443e      	add	r6, r7
 8010a48:	2301      	movs	r3, #1
 8010a4a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010a4c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010a4e:	9300      	str	r3, [sp, #0]
 8010a50:	2200      	movs	r2, #0
 8010a52:	9301      	str	r3, [sp, #4]
 8010a54:	9002      	str	r0, [sp, #8]
 8010a56:	9203      	str	r2, [sp, #12]
 8010a58:	9104      	str	r1, [sp, #16]
 8010a5a:	9205      	str	r2, [sp, #20]
 8010a5c:	4629      	mov	r1, r5
 8010a5e:	465a      	mov	r2, fp
 8010a60:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010a62:	f7fb f81d 	bl	800baa0 <LCD_DrawBitmap>
 8010a66:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010a68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a6a:	f105 0901 	add.w	r9, r5, #1
 8010a6e:	fa02 f381 	sxtah	r3, r2, r1
 8010a72:	454b      	cmp	r3, r9
 8010a74:	d028      	beq.n	8010ac8 <GUI_MEMDEV__WriteToActiveOpaque+0x708>
 8010a76:	464d      	mov	r5, r9
 8010a78:	2c02      	cmp	r4, #2
 8010a7a:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8010a7e:	d1cd      	bne.n	8010a1c <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 8010a80:	464b      	mov	r3, r9
 8010a82:	4631      	mov	r1, r6
 8010a84:	46d9      	mov	r9, fp
 8010a86:	f831 0b02 	ldrh.w	r0, [r1], #2
 8010a8a:	910a      	str	r1, [sp, #40]	; 0x28
 8010a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8010a8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a90:	4790      	blx	r2
 8010a92:	47c0      	blx	r8
 8010a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010a98:	f823 0b02 	strh.w	r0, [r3], #2
 8010a9c:	f1b9 0901 	subs.w	r9, r9, #1
 8010aa0:	d1f1      	bne.n	8010a86 <GUI_MEMDEV__WriteToActiveOpaque+0x6c6>
 8010aa2:	e7d0      	b.n	8010a46 <GUI_MEMDEV__WriteToActiveOpaque+0x686>
 8010aa4:	464b      	mov	r3, r9
 8010aa6:	4631      	mov	r1, r6
 8010aa8:	46d9      	mov	r9, fp
 8010aaa:	f831 0b02 	ldrh.w	r0, [r1], #2
 8010aae:	910a      	str	r1, [sp, #40]	; 0x28
 8010ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8010ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010ab4:	4790      	blx	r2
 8010ab6:	47c0      	blx	r8
 8010ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010aba:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010abc:	f843 0b04 	str.w	r0, [r3], #4
 8010ac0:	f1b9 0901 	subs.w	r9, r9, #1
 8010ac4:	d1f1      	bne.n	8010aaa <GUI_MEMDEV__WriteToActiveOpaque+0x6ea>
 8010ac6:	e7be      	b.n	8010a46 <GUI_MEMDEV__WriteToActiveOpaque+0x686>
 8010ac8:	a818      	add	r0, sp, #96	; 0x60
 8010aca:	f7fd fc63 	bl	800e394 <GUI_ALLOC_UnlockH>
 8010ace:	a81a      	add	r0, sp, #104	; 0x68
 8010ad0:	f7fd fc60 	bl	800e394 <GUI_ALLOC_UnlockH>
 8010ad4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010ad6:	f7fd fc89 	bl	800e3ec <GUI_ALLOC_Free>
 8010ada:	b01d      	add	sp, #116	; 0x74
 8010adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010ae0 <GUI_MEMDEV__WriteToActiveAlpha>:
 8010ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ae4:	b091      	sub	sp, #68	; 0x44
 8010ae6:	460e      	mov	r6, r1
 8010ae8:	4614      	mov	r4, r2
 8010aea:	900d      	str	r0, [sp, #52]	; 0x34
 8010aec:	f7fd fc44 	bl	800e378 <GUI_ALLOC_LockH>
 8010af0:	4602      	mov	r2, r0
 8010af2:	a810      	add	r0, sp, #64	; 0x40
 8010af4:	6813      	ldr	r3, [r2, #0]
 8010af6:	4d5b      	ldr	r5, [pc, #364]	; (8010c64 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 8010af8:	691b      	ldr	r3, [r3, #16]
 8010afa:	f840 2d08 	str.w	r2, [r0, #-8]!
 8010afe:	685b      	ldr	r3, [r3, #4]
 8010b00:	f8b2 b008 	ldrh.w	fp, [r2, #8]
 8010b04:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 8010b08:	9309      	str	r3, [sp, #36]	; 0x24
 8010b0a:	f7fd fc43 	bl	800e394 <GUI_ALLOC_UnlockH>
 8010b0e:	682b      	ldr	r3, [r5, #0]
 8010b10:	4f55      	ldr	r7, [pc, #340]	; (8010c68 <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 8010b12:	7c5b      	ldrb	r3, [r3, #17]
 8010b14:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8010b18:	68c3      	ldr	r3, [r0, #12]
 8010b1a:	2108      	movs	r1, #8
 8010b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b1e:	4798      	blx	r3
 8010b20:	682b      	ldr	r3, [r5, #0]
 8010b22:	7c5b      	ldrb	r3, [r3, #17]
 8010b24:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8010b28:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8010b2c:	2817      	cmp	r0, #23
 8010b2e:	bf88      	it	hi
 8010b30:	2020      	movhi	r0, #32
 8010b32:	9008      	str	r0, [sp, #32]
 8010b34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010b38:	f8d8 2000 	ldr.w	r2, [r8]
 8010b3c:	910a      	str	r1, [sp, #40]	; 0x28
 8010b3e:	2000      	movs	r0, #0
 8010b40:	920b      	str	r2, [sp, #44]	; 0x2c
 8010b42:	f7fb fe3d 	bl	800c7c0 <GUI__AllocAlphaBuffer>
 8010b46:	2800      	cmp	r0, #0
 8010b48:	f040 8089 	bne.w	8010c5e <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8010b4c:	682a      	ldr	r2, [r5, #0]
 8010b4e:	fa0f f78b 	sxth.w	r7, fp
 8010b52:	19f5      	adds	r5, r6, r7
 8010b54:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8010b58:	3d01      	subs	r5, #1
 8010b5a:	1aed      	subs	r5, r5, r3
 8010b5c:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8010b60:	2d00      	cmp	r5, #0
 8010b62:	bfcc      	ite	gt
 8010b64:	ebc5 0507 	rsbgt	r5, r5, r7
 8010b68:	463d      	movle	r5, r7
 8010b6a:	42b3      	cmp	r3, r6
 8010b6c:	bfc3      	ittte	gt
 8010b6e:	ebc6 0103 	rsbgt	r1, r6, r3
 8010b72:	ebc1 0505 	rsbgt	r5, r1, r5
 8010b76:	461e      	movgt	r6, r3
 8010b78:	2100      	movle	r1, #0
 8010b7a:	2d00      	cmp	r5, #0
 8010b7c:	dd6f      	ble.n	8010c5e <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8010b7e:	fa0f f389 	sxth.w	r3, r9
 8010b82:	18e0      	adds	r0, r4, r3
 8010b84:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 8010b88:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8010b8c:	3801      	subs	r0, #1
 8010b8e:	ebcc 0000 	rsb	r0, ip, r0
 8010b92:	2800      	cmp	r0, #0
 8010b94:	bfc8      	it	gt
 8010b96:	ebc0 0303 	rsbgt	r3, r0, r3
 8010b9a:	4294      	cmp	r4, r2
 8010b9c:	bfbd      	ittte	lt
 8010b9e:	ebc4 0a02 	rsblt	sl, r4, r2
 8010ba2:	ebca 0303 	rsblt	r3, sl, r3
 8010ba6:	4614      	movlt	r4, r2
 8010ba8:	f04f 0a00 	movge.w	sl, #0
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	dd56      	ble.n	8010c5e <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8010bb0:	fb07 1a0a 	mla	sl, r7, sl, r1
 8010bb4:	18e3      	adds	r3, r4, r3
 8010bb6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8010bba:	930c      	str	r3, [sp, #48]	; 0x30
 8010bbc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010bbe:	f7f8 f8f1 	bl	8008da4 <GUI_MEMDEV_GetDataPtr>
 8010bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bc4:	9300      	str	r3, [sp, #0]
 8010bc6:	ab0f      	add	r3, sp, #60	; 0x3c
 8010bc8:	eb00 020a 	add.w	r2, r0, sl
 8010bcc:	9301      	str	r3, [sp, #4]
 8010bce:	4630      	mov	r0, r6
 8010bd0:	4621      	mov	r1, r4
 8010bd2:	462b      	mov	r3, r5
 8010bd4:	f7fb fd0e 	bl	800c5f4 <GUI__DoAlphaBlending>
 8010bd8:	4681      	mov	r9, r0
 8010bda:	2800      	cmp	r0, #0
 8010bdc:	d03f      	beq.n	8010c5e <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8010bde:	4b23      	ldr	r3, [pc, #140]	; (8010c6c <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 8010be0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010be2:	4299      	cmp	r1, r3
 8010be4:	d01e      	beq.n	8010c24 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8010be6:	4629      	mov	r1, r5
 8010be8:	9a08      	ldr	r2, [sp, #32]
 8010bea:	4643      	mov	r3, r8
 8010bec:	f001 fbb8 	bl	8012360 <GUI__CompactPixelIndicesEx>
 8010bf0:	b9c0      	cbnz	r0, 8010c24 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8010bf2:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8010bf6:	f1bc 0f00 	cmp.w	ip, #0
 8010bfa:	d006      	beq.n	8010c0a <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 8010bfc:	4648      	mov	r0, r9
 8010bfe:	4649      	mov	r1, r9
 8010c00:	fa0f f28b 	sxth.w	r2, fp
 8010c04:	2304      	movs	r3, #4
 8010c06:	47e0      	blx	ip
 8010c08:	e00c      	b.n	8010c24 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8010c0a:	464a      	mov	r2, r9
 8010c0c:	463b      	mov	r3, r7
 8010c0e:	6810      	ldr	r0, [r2, #0]
 8010c10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010c12:	9206      	str	r2, [sp, #24]
 8010c14:	9307      	str	r3, [sp, #28]
 8010c16:	4788      	blx	r1
 8010c18:	9b07      	ldr	r3, [sp, #28]
 8010c1a:	9a06      	ldr	r2, [sp, #24]
 8010c1c:	3b01      	subs	r3, #1
 8010c1e:	f842 0b04 	str.w	r0, [r2], #4
 8010c22:	d1f4      	bne.n	8010c0e <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 8010c24:	9a08      	ldr	r2, [sp, #32]
 8010c26:	9202      	str	r2, [sp, #8]
 8010c28:	2301      	movs	r3, #1
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	f104 0c01 	add.w	ip, r4, #1
 8010c30:	9300      	str	r3, [sp, #0]
 8010c32:	9301      	str	r3, [sp, #4]
 8010c34:	9203      	str	r2, [sp, #12]
 8010c36:	9205      	str	r2, [sp, #20]
 8010c38:	f8cd 9010 	str.w	r9, [sp, #16]
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	4621      	mov	r1, r4
 8010c40:	462a      	mov	r2, r5
 8010c42:	f8cd c01c 	str.w	ip, [sp, #28]
 8010c46:	f7fa ff2b 	bl	800baa0 <LCD_DrawBitmap>
 8010c4a:	2304      	movs	r3, #4
 8010c4c:	fb1b aa03 	smlabb	sl, fp, r3, sl
 8010c50:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8010c54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c56:	459c      	cmp	ip, r3
 8010c58:	d001      	beq.n	8010c5e <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8010c5a:	4664      	mov	r4, ip
 8010c5c:	e7ae      	b.n	8010bbc <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 8010c5e:	b011      	add	sp, #68	; 0x44
 8010c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c64:	200002c4 	.word	0x200002c4
 8010c68:	20028844 	.word	0x20028844
 8010c6c:	0800e94b 	.word	0x0800e94b

08010c70 <GUI_MEMDEV_WriteAt>:
 8010c70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010c72:	460c      	mov	r4, r1
 8010c74:	4615      	mov	r5, r2
 8010c76:	4606      	mov	r6, r0
 8010c78:	b360      	cbz	r0, 8010cd4 <GUI_MEMDEV_WriteAt+0x64>
 8010c7a:	f7fb fe99 	bl	800c9b0 <GUI_Lock>
 8010c7e:	4630      	mov	r0, r6
 8010c80:	f7fd fb7a 	bl	800e378 <GUI_ALLOC_LockH>
 8010c84:	4a14      	ldr	r2, [pc, #80]	; (8010cd8 <GUI_MEMDEV_WriteAt+0x68>)
 8010c86:	8943      	ldrh	r3, [r0, #10]
 8010c88:	9001      	str	r0, [sp, #4]
 8010c8a:	4294      	cmp	r4, r2
 8010c8c:	8902      	ldrh	r2, [r0, #8]
 8010c8e:	bf04      	itt	eq
 8010c90:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 8010c94:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 8010c98:	f8ad 4008 	strh.w	r4, [sp, #8]
 8010c9c:	3a01      	subs	r2, #1
 8010c9e:	3b01      	subs	r3, #1
 8010ca0:	4422      	add	r2, r4
 8010ca2:	442b      	add	r3, r5
 8010ca4:	a801      	add	r0, sp, #4
 8010ca6:	f8ad 200c 	strh.w	r2, [sp, #12]
 8010caa:	f8ad 500a 	strh.w	r5, [sp, #10]
 8010cae:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010cb2:	f7fd fb6f 	bl	800e394 <GUI_ALLOC_UnlockH>
 8010cb6:	a802      	add	r0, sp, #8
 8010cb8:	f7f7 fc94 	bl	80085e4 <WM__InitIVRSearch>
 8010cbc:	b910      	cbnz	r0, 8010cc4 <GUI_MEMDEV_WriteAt+0x54>
 8010cbe:	f7fb fe6d 	bl	800c99c <GUI_Unlock>
 8010cc2:	e007      	b.n	8010cd4 <GUI_MEMDEV_WriteAt+0x64>
 8010cc4:	4630      	mov	r0, r6
 8010cc6:	4621      	mov	r1, r4
 8010cc8:	462a      	mov	r2, r5
 8010cca:	f7f8 fe1f 	bl	800990c <GUI_MEMDEV__WriteToActiveAt>
 8010cce:	f7f7 fbc7 	bl	8008460 <WM__GetNextIVR>
 8010cd2:	e7f3      	b.n	8010cbc <GUI_MEMDEV_WriteAt+0x4c>
 8010cd4:	b004      	add	sp, #16
 8010cd6:	bd70      	pop	{r4, r5, r6, pc}
 8010cd8:	fffff001 	.word	0xfffff001

08010cdc <GUI_MEMDEV_Write>:
 8010cdc:	4901      	ldr	r1, [pc, #4]	; (8010ce4 <GUI_MEMDEV_Write+0x8>)
 8010cde:	460a      	mov	r2, r1
 8010ce0:	f7ff bfc6 	b.w	8010c70 <GUI_MEMDEV_WriteAt>
 8010ce4:	fffff001 	.word	0xfffff001

08010ce8 <GUI_USAGE_BM_AddPixel>:
 8010ce8:	4603      	mov	r3, r0
 8010cea:	b510      	push	{r4, lr}
 8010cec:	f933 4b14 	ldrsh.w	r4, [r3], #20
 8010cf0:	1b09      	subs	r1, r1, r4
 8010cf2:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8010cf6:	6900      	ldr	r0, [r0, #16]
 8010cf8:	1b12      	subs	r2, r2, r4
 8010cfa:	fb00 3302 	mla	r3, r0, r2, r3
 8010cfe:	10c8      	asrs	r0, r1, #3
 8010d00:	2280      	movs	r2, #128	; 0x80
 8010d02:	f001 0107 	and.w	r1, r1, #7
 8010d06:	fa42 f101 	asr.w	r1, r2, r1
 8010d0a:	5c1a      	ldrb	r2, [r3, r0]
 8010d0c:	4311      	orrs	r1, r2
 8010d0e:	5419      	strb	r1, [r3, r0]
 8010d10:	bd10      	pop	{r4, pc}

08010d12 <GUI_USAGE_BM_GetNextDirty>:
 8010d12:	b570      	push	{r4, r5, r6, lr}
 8010d14:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8010d18:	680b      	ldr	r3, [r1, #0]
 8010d1a:	8886      	ldrh	r6, [r0, #4]
 8010d1c:	42a2      	cmp	r2, r4
 8010d1e:	da41      	bge.n	8010da4 <GUI_USAGE_BM_GetNextDirty+0x92>
 8010d20:	b236      	sxth	r6, r6
 8010d22:	42b3      	cmp	r3, r6
 8010d24:	6904      	ldr	r4, [r0, #16]
 8010d26:	da3d      	bge.n	8010da4 <GUI_USAGE_BM_GetNextDirty+0x92>
 8010d28:	3014      	adds	r0, #20
 8010d2a:	fb04 0202 	mla	r2, r4, r2, r0
 8010d2e:	10dd      	asrs	r5, r3, #3
 8010d30:	1e70      	subs	r0, r6, #1
 8010d32:	1954      	adds	r4, r2, r5
 8010d34:	ebc5 00e0 	rsb	r0, r5, r0, asr #3
 8010d38:	5d55      	ldrb	r5, [r2, r5]
 8010d3a:	f003 0207 	and.w	r2, r3, #7
 8010d3e:	fa05 f202 	lsl.w	r2, r5, r2
 8010d42:	3401      	adds	r4, #1
 8010d44:	b2d2      	uxtb	r2, r2
 8010d46:	b93a      	cbnz	r2, 8010d58 <GUI_USAGE_BM_GetNextDirty+0x46>
 8010d48:	b368      	cbz	r0, 8010da6 <GUI_USAGE_BM_GetNextDirty+0x94>
 8010d4a:	3308      	adds	r3, #8
 8010d4c:	f814 2b01 	ldrb.w	r2, [r4], #1
 8010d50:	3801      	subs	r0, #1
 8010d52:	f023 0307 	bic.w	r3, r3, #7
 8010d56:	e7f6      	b.n	8010d46 <GUI_USAGE_BM_GetNextDirty+0x34>
 8010d58:	0615      	lsls	r5, r2, #24
 8010d5a:	d403      	bmi.n	8010d64 <GUI_USAGE_BM_GetNextDirty+0x52>
 8010d5c:	0052      	lsls	r2, r2, #1
 8010d5e:	b2d2      	uxtb	r2, r2
 8010d60:	3301      	adds	r3, #1
 8010d62:	e7f9      	b.n	8010d58 <GUI_USAGE_BM_GetNextDirty+0x46>
 8010d64:	2aff      	cmp	r2, #255	; 0xff
 8010d66:	461d      	mov	r5, r3
 8010d68:	d005      	beq.n	8010d76 <GUI_USAGE_BM_GetNextDirty+0x64>
 8010d6a:	0656      	lsls	r6, r2, #25
 8010d6c:	d504      	bpl.n	8010d78 <GUI_USAGE_BM_GetNextDirty+0x66>
 8010d6e:	0052      	lsls	r2, r2, #1
 8010d70:	b2d2      	uxtb	r2, r2
 8010d72:	3301      	adds	r3, #1
 8010d74:	e7f9      	b.n	8010d6a <GUI_USAGE_BM_GetNextDirty+0x58>
 8010d76:	3307      	adds	r3, #7
 8010d78:	f003 0207 	and.w	r2, r3, #7
 8010d7c:	2a07      	cmp	r2, #7
 8010d7e:	d10d      	bne.n	8010d9c <GUI_USAGE_BM_GetNextDirty+0x8a>
 8010d80:	3801      	subs	r0, #1
 8010d82:	d40b      	bmi.n	8010d9c <GUI_USAGE_BM_GetNextDirty+0x8a>
 8010d84:	f814 2b01 	ldrb.w	r2, [r4], #1
 8010d88:	2aff      	cmp	r2, #255	; 0xff
 8010d8a:	d101      	bne.n	8010d90 <GUI_USAGE_BM_GetNextDirty+0x7e>
 8010d8c:	3308      	adds	r3, #8
 8010d8e:	e7f7      	b.n	8010d80 <GUI_USAGE_BM_GetNextDirty+0x6e>
 8010d90:	0610      	lsls	r0, r2, #24
 8010d92:	d503      	bpl.n	8010d9c <GUI_USAGE_BM_GetNextDirty+0x8a>
 8010d94:	0052      	lsls	r2, r2, #1
 8010d96:	b2d2      	uxtb	r2, r2
 8010d98:	3301      	adds	r3, #1
 8010d9a:	e7f9      	b.n	8010d90 <GUI_USAGE_BM_GetNextDirty+0x7e>
 8010d9c:	1b58      	subs	r0, r3, r5
 8010d9e:	600d      	str	r5, [r1, #0]
 8010da0:	3001      	adds	r0, #1
 8010da2:	bd70      	pop	{r4, r5, r6, pc}
 8010da4:	2000      	movs	r0, #0
 8010da6:	bd70      	pop	{r4, r5, r6, pc}

08010da8 <_GUI_USAGE_BM_Delete>:
 8010da8:	f7fd bb20 	b.w	800e3ec <GUI_ALLOC_Free>

08010dac <GUI_USAGE_BM_Clear>:
 8010dac:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8010db0:	6902      	ldr	r2, [r0, #16]
 8010db2:	2100      	movs	r1, #0
 8010db4:	3014      	adds	r0, #20
 8010db6:	435a      	muls	r2, r3
 8010db8:	f002 bab0 	b.w	801331c <memset>

08010dbc <GUI_USAGE_BM_AddHLine>:
 8010dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dbe:	f9b0 4000 	ldrsh.w	r4, [r0]
 8010dc2:	1b09      	subs	r1, r1, r4
 8010dc4:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8010dc8:	42a1      	cmp	r1, r4
 8010dca:	da2f      	bge.n	8010e2c <GUI_USAGE_BM_AddHLine+0x70>
 8010dcc:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8010dd0:	440b      	add	r3, r1
 8010dd2:	f100 0414 	add.w	r4, r0, #20
 8010dd6:	3b01      	subs	r3, #1
 8010dd8:	6900      	ldr	r0, [r0, #16]
 8010dda:	1b52      	subs	r2, r2, r5
 8010ddc:	43de      	mvns	r6, r3
 8010dde:	fb00 4202 	mla	r2, r0, r2, r4
 8010de2:	f001 0707 	and.w	r7, r1, #7
 8010de6:	10cc      	asrs	r4, r1, #3
 8010de8:	f006 0607 	and.w	r6, r6, #7
 8010dec:	21ff      	movs	r1, #255	; 0xff
 8010dee:	fa41 f707 	asr.w	r7, r1, r7
 8010df2:	fa01 f606 	lsl.w	r6, r1, r6
 8010df6:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 8010dfa:	eb02 0504 	add.w	r5, r2, r4
 8010dfe:	b2ff      	uxtb	r7, r7
 8010e00:	b2f6      	uxtb	r6, r6
 8010e02:	5d10      	ldrb	r0, [r2, r4]
 8010e04:	d103      	bne.n	8010e0e <GUI_USAGE_BM_AddHLine+0x52>
 8010e06:	403e      	ands	r6, r7
 8010e08:	4330      	orrs	r0, r6
 8010e0a:	5510      	strb	r0, [r2, r4]
 8010e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e0e:	4338      	orrs	r0, r7
 8010e10:	5510      	strb	r0, [r2, r4]
 8010e12:	1e5c      	subs	r4, r3, #1
 8010e14:	2c00      	cmp	r4, #0
 8010e16:	f105 0501 	add.w	r5, r5, #1
 8010e1a:	dd04      	ble.n	8010e26 <GUI_USAGE_BM_AddHLine+0x6a>
 8010e1c:	4628      	mov	r0, r5
 8010e1e:	4622      	mov	r2, r4
 8010e20:	f002 fa7c 	bl	801331c <memset>
 8010e24:	4425      	add	r5, r4
 8010e26:	782b      	ldrb	r3, [r5, #0]
 8010e28:	431e      	orrs	r6, r3
 8010e2a:	702e      	strb	r6, [r5, #0]
 8010e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e30 <GUI_USAGE_BM_Create>:
 8010e30:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e34:	f102 060f 	add.w	r6, r2, #15
 8010e38:	1136      	asrs	r6, r6, #4
 8010e3a:	0076      	lsls	r6, r6, #1
 8010e3c:	4682      	mov	sl, r0
 8010e3e:	fb06 f003 	mul.w	r0, r6, r3
 8010e42:	3014      	adds	r0, #20
 8010e44:	4689      	mov	r9, r1
 8010e46:	4690      	mov	r8, r2
 8010e48:	461f      	mov	r7, r3
 8010e4a:	f7fd fd1c 	bl	800e886 <GUI_ALLOC_AllocZero>
 8010e4e:	4605      	mov	r5, r0
 8010e50:	b1c0      	cbz	r0, 8010e84 <GUI_USAGE_BM_Create+0x54>
 8010e52:	f7fb fdad 	bl	800c9b0 <GUI_Lock>
 8010e56:	4628      	mov	r0, r5
 8010e58:	f7fd fa8e 	bl	800e378 <GUI_ALLOC_LockH>
 8010e5c:	4604      	mov	r4, r0
 8010e5e:	4b0b      	ldr	r3, [pc, #44]	; (8010e8c <GUI_USAGE_BM_Create+0x5c>)
 8010e60:	60a3      	str	r3, [r4, #8]
 8010e62:	a802      	add	r0, sp, #8
 8010e64:	2301      	movs	r3, #1
 8010e66:	f840 4d04 	str.w	r4, [r0, #-4]!
 8010e6a:	81a3      	strh	r3, [r4, #12]
 8010e6c:	f8a4 a000 	strh.w	sl, [r4]
 8010e70:	f8a4 9002 	strh.w	r9, [r4, #2]
 8010e74:	f8a4 8004 	strh.w	r8, [r4, #4]
 8010e78:	80e7      	strh	r7, [r4, #6]
 8010e7a:	6126      	str	r6, [r4, #16]
 8010e7c:	f7fd fa8a 	bl	800e394 <GUI_ALLOC_UnlockH>
 8010e80:	f7fb fd8c 	bl	800c99c <GUI_Unlock>
 8010e84:	4628      	mov	r0, r5
 8010e86:	b002      	add	sp, #8
 8010e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e8c:	080670bc 	.word	0x080670bc

08010e90 <GUI_USAGE_DecUseCnt>:
 8010e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e92:	4604      	mov	r4, r0
 8010e94:	f7fb fd8c 	bl	800c9b0 <GUI_Lock>
 8010e98:	4620      	mov	r0, r4
 8010e9a:	f7fd fa6d 	bl	800e378 <GUI_ALLOC_LockH>
 8010e9e:	4602      	mov	r2, r0
 8010ea0:	a802      	add	r0, sp, #8
 8010ea2:	8995      	ldrh	r5, [r2, #12]
 8010ea4:	f840 2d04 	str.w	r2, [r0, #-4]!
 8010ea8:	3d01      	subs	r5, #1
 8010eaa:	b2ad      	uxth	r5, r5
 8010eac:	8195      	strh	r5, [r2, #12]
 8010eae:	f7fd fa71 	bl	800e394 <GUI_ALLOC_UnlockH>
 8010eb2:	b915      	cbnz	r5, 8010eba <GUI_USAGE_DecUseCnt+0x2a>
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	f7fd fa99 	bl	800e3ec <GUI_ALLOC_Free>
 8010eba:	f7fb fd6f 	bl	800c99c <GUI_Unlock>
 8010ebe:	b003      	add	sp, #12
 8010ec0:	bd30      	pop	{r4, r5, pc}

08010ec2 <GUI_USAGE_AddRect>:
 8010ec2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ec6:	4605      	mov	r5, r0
 8010ec8:	4688      	mov	r8, r1
 8010eca:	4617      	mov	r7, r2
 8010ecc:	4699      	mov	r9, r3
 8010ece:	68a8      	ldr	r0, [r5, #8]
 8010ed0:	464b      	mov	r3, r9
 8010ed2:	6846      	ldr	r6, [r0, #4]
 8010ed4:	4641      	mov	r1, r8
 8010ed6:	4628      	mov	r0, r5
 8010ed8:	1c54      	adds	r4, r2, #1
 8010eda:	47b0      	blx	r6
 8010edc:	9b08      	ldr	r3, [sp, #32]
 8010ede:	443b      	add	r3, r7
 8010ee0:	42a3      	cmp	r3, r4
 8010ee2:	d001      	beq.n	8010ee8 <GUI_USAGE_AddRect+0x26>
 8010ee4:	4622      	mov	r2, r4
 8010ee6:	e7f2      	b.n	8010ece <GUI_USAGE_AddRect+0xc>
 8010ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010eec <GUI_MEMDEV_ReduceYSize>:
 8010eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010eee:	460d      	mov	r5, r1
 8010ef0:	4604      	mov	r4, r0
 8010ef2:	b918      	cbnz	r0, 8010efc <GUI_MEMDEV_ReduceYSize+0x10>
 8010ef4:	4b0a      	ldr	r3, [pc, #40]	; (8010f20 <GUI_MEMDEV_ReduceYSize+0x34>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8010efa:	b17c      	cbz	r4, 8010f1c <GUI_MEMDEV_ReduceYSize+0x30>
 8010efc:	f7fb fd58 	bl	800c9b0 <GUI_Lock>
 8010f00:	4620      	mov	r0, r4
 8010f02:	f7fd fa39 	bl	800e378 <GUI_ALLOC_LockH>
 8010f06:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8010f0a:	9001      	str	r0, [sp, #4]
 8010f0c:	429d      	cmp	r5, r3
 8010f0e:	bfb8      	it	lt
 8010f10:	8145      	strhlt	r5, [r0, #10]
 8010f12:	a801      	add	r0, sp, #4
 8010f14:	f7fd fa3e 	bl	800e394 <GUI_ALLOC_UnlockH>
 8010f18:	f7fb fd40 	bl	800c99c <GUI_Unlock>
 8010f1c:	b003      	add	sp, #12
 8010f1e:	bd30      	pop	{r4, r5, pc}
 8010f20:	200002c4 	.word	0x200002c4

08010f24 <GUI_MEMDEV_Clear>:
 8010f24:	b513      	push	{r0, r1, r4, lr}
 8010f26:	4604      	mov	r4, r0
 8010f28:	b918      	cbnz	r0, 8010f32 <GUI_MEMDEV_Clear+0xe>
 8010f2a:	4b10      	ldr	r3, [pc, #64]	; (8010f6c <GUI_MEMDEV_Clear+0x48>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8010f30:	b1d4      	cbz	r4, 8010f68 <GUI_MEMDEV_Clear+0x44>
 8010f32:	f7fb fd3d 	bl	800c9b0 <GUI_Lock>
 8010f36:	4620      	mov	r0, r4
 8010f38:	f7fd fa1e 	bl	800e378 <GUI_ALLOC_LockH>
 8010f3c:	ab02      	add	r3, sp, #8
 8010f3e:	6944      	ldr	r4, [r0, #20]
 8010f40:	f843 0d08 	str.w	r0, [r3, #-8]!
 8010f44:	4668      	mov	r0, sp
 8010f46:	f7fd fa25 	bl	800e394 <GUI_ALLOC_UnlockH>
 8010f4a:	b15c      	cbz	r4, 8010f64 <GUI_MEMDEV_Clear+0x40>
 8010f4c:	4620      	mov	r0, r4
 8010f4e:	f7fd fa13 	bl	800e378 <GUI_ALLOC_LockH>
 8010f52:	ac02      	add	r4, sp, #8
 8010f54:	6883      	ldr	r3, [r0, #8]
 8010f56:	f844 0d04 	str.w	r0, [r4, #-4]!
 8010f5a:	689b      	ldr	r3, [r3, #8]
 8010f5c:	4798      	blx	r3
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f7fd fa18 	bl	800e394 <GUI_ALLOC_UnlockH>
 8010f64:	f7fb fd1a 	bl	800c99c <GUI_Unlock>
 8010f68:	b002      	add	sp, #8
 8010f6a:	bd10      	pop	{r4, pc}
 8010f6c:	200002c4 	.word	0x200002c4

08010f70 <_GetDevData>:
 8010f70:	4802      	ldr	r0, [pc, #8]	; (8010f7c <_GetDevData+0xc>)
 8010f72:	2901      	cmp	r1, #1
 8010f74:	bf18      	it	ne
 8010f76:	2000      	movne	r0, #0
 8010f78:	4770      	bx	lr
 8010f7a:	bf00      	nop
 8010f7c:	08067114 	.word	0x08067114

08010f80 <_GetDevFunc>:
 8010f80:	4802      	ldr	r0, [pc, #8]	; (8010f8c <_GetDevFunc+0xc>)
 8010f82:	2916      	cmp	r1, #22
 8010f84:	bf18      	it	ne
 8010f86:	2000      	movne	r0, #0
 8010f88:	4770      	bx	lr
 8010f8a:	bf00      	nop
 8010f8c:	080103c1 	.word	0x080103c1

08010f90 <_SetOrg>:
 8010f90:	6800      	ldr	r0, [r0, #0]
 8010f92:	b508      	push	{r3, lr}
 8010f94:	b110      	cbz	r0, 8010f9c <_SetOrg+0xc>
 8010f96:	68c3      	ldr	r3, [r0, #12]
 8010f98:	6a1b      	ldr	r3, [r3, #32]
 8010f9a:	4798      	blx	r3
 8010f9c:	bd08      	pop	{r3, pc}

08010f9e <_GetDevProp>:
 8010f9e:	6800      	ldr	r0, [r0, #0]
 8010fa0:	b508      	push	{r3, lr}
 8010fa2:	b118      	cbz	r0, 8010fac <_GetDevProp+0xe>
 8010fa4:	68c3      	ldr	r3, [r0, #12]
 8010fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fa8:	4798      	blx	r3
 8010faa:	bd08      	pop	{r3, pc}
 8010fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010fb0:	bd08      	pop	{r3, pc}

08010fb2 <_GetRect>:
 8010fb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010fb4:	6880      	ldr	r0, [r0, #8]
 8010fb6:	460c      	mov	r4, r1
 8010fb8:	f7fd f9de 	bl	800e378 <GUI_ALLOC_LockH>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	a802      	add	r0, sp, #8
 8010fc0:	8899      	ldrh	r1, [r3, #4]
 8010fc2:	88da      	ldrh	r2, [r3, #6]
 8010fc4:	891d      	ldrh	r5, [r3, #8]
 8010fc6:	f840 3d04 	str.w	r3, [r0, #-4]!
 8010fca:	895b      	ldrh	r3, [r3, #10]
 8010fcc:	8021      	strh	r1, [r4, #0]
 8010fce:	8062      	strh	r2, [r4, #2]
 8010fd0:	4429      	add	r1, r5
 8010fd2:	441a      	add	r2, r3
 8010fd4:	3901      	subs	r1, #1
 8010fd6:	3a01      	subs	r2, #1
 8010fd8:	80a1      	strh	r1, [r4, #4]
 8010fda:	80e2      	strh	r2, [r4, #6]
 8010fdc:	f7fd f9da 	bl	800e394 <GUI_ALLOC_UnlockH>
 8010fe0:	b003      	add	sp, #12
 8010fe2:	bd30      	pop	{r4, r5, pc}

08010fe4 <_XY2PTR>:
 8010fe4:	4b0e      	ldr	r3, [pc, #56]	; (8011020 <_XY2PTR+0x3c>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010fea:	4605      	mov	r5, r0
 8010fec:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8010fee:	460e      	mov	r6, r1
 8010ff0:	f7fd f9c2 	bl	800e378 <GUI_ALLOC_LockH>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	a802      	add	r0, sp, #8
 8010ff8:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8010ffc:	f840 3d04 	str.w	r3, [r0, #-4]!
 8011000:	f103 0118 	add.w	r1, r3, #24
 8011004:	1b36      	subs	r6, r6, r4
 8011006:	68dc      	ldr	r4, [r3, #12]
 8011008:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801100c:	fb04 1406 	mla	r4, r4, r6, r1
 8011010:	1aed      	subs	r5, r5, r3
 8011012:	f7fd f9bf 	bl	800e394 <GUI_ALLOC_UnlockH>
 8011016:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 801101a:	4620      	mov	r0, r4
 801101c:	b002      	add	sp, #8
 801101e:	bd70      	pop	{r4, r5, r6, pc}
 8011020:	200002c4 	.word	0x200002c4

08011024 <_GetPixelIndex>:
 8011024:	b508      	push	{r3, lr}
 8011026:	4608      	mov	r0, r1
 8011028:	4611      	mov	r1, r2
 801102a:	f7ff ffdb 	bl	8010fe4 <_XY2PTR>
 801102e:	8800      	ldrh	r0, [r0, #0]
 8011030:	bd08      	pop	{r3, pc}
	...

08011034 <_XorPixel>:
 8011034:	4b14      	ldr	r3, [pc, #80]	; (8011088 <_XorPixel+0x54>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801103a:	4607      	mov	r7, r0
 801103c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 801103e:	4615      	mov	r5, r2
 8011040:	460e      	mov	r6, r1
 8011042:	f7fd f999 	bl	800e378 <GUI_ALLOC_LockH>
 8011046:	4629      	mov	r1, r5
 8011048:	9000      	str	r0, [sp, #0]
 801104a:	4630      	mov	r0, r6
 801104c:	f7ff ffca 	bl	8010fe4 <_XY2PTR>
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	4604      	mov	r4, r0
 8011054:	689b      	ldr	r3, [r3, #8]
 8011056:	4798      	blx	r3
 8011058:	8823      	ldrh	r3, [r4, #0]
 801105a:	4058      	eors	r0, r3
 801105c:	9b00      	ldr	r3, [sp, #0]
 801105e:	8020      	strh	r0, [r4, #0]
 8011060:	6958      	ldr	r0, [r3, #20]
 8011062:	b160      	cbz	r0, 801107e <_XorPixel+0x4a>
 8011064:	f7fd f988 	bl	800e378 <GUI_ALLOC_LockH>
 8011068:	ac02      	add	r4, sp, #8
 801106a:	6883      	ldr	r3, [r0, #8]
 801106c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	4631      	mov	r1, r6
 8011074:	462a      	mov	r2, r5
 8011076:	4798      	blx	r3
 8011078:	4620      	mov	r0, r4
 801107a:	f7fd f98b 	bl	800e394 <GUI_ALLOC_UnlockH>
 801107e:	4668      	mov	r0, sp
 8011080:	f7fd f988 	bl	800e394 <GUI_ALLOC_UnlockH>
 8011084:	b003      	add	sp, #12
 8011086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011088:	200002c4 	.word	0x200002c4

0801108c <_SetPixelIndex>:
 801108c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801108e:	461c      	mov	r4, r3
 8011090:	4b10      	ldr	r3, [pc, #64]	; (80110d4 <_SetPixelIndex+0x48>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8011096:	460e      	mov	r6, r1
 8011098:	4615      	mov	r5, r2
 801109a:	f7fd f96d 	bl	800e378 <GUI_ALLOC_LockH>
 801109e:	4629      	mov	r1, r5
 80110a0:	9000      	str	r0, [sp, #0]
 80110a2:	4630      	mov	r0, r6
 80110a4:	f7ff ff9e 	bl	8010fe4 <_XY2PTR>
 80110a8:	9b00      	ldr	r3, [sp, #0]
 80110aa:	8004      	strh	r4, [r0, #0]
 80110ac:	6958      	ldr	r0, [r3, #20]
 80110ae:	b160      	cbz	r0, 80110ca <_SetPixelIndex+0x3e>
 80110b0:	f7fd f962 	bl	800e378 <GUI_ALLOC_LockH>
 80110b4:	ac02      	add	r4, sp, #8
 80110b6:	6883      	ldr	r3, [r0, #8]
 80110b8:	f844 0d04 	str.w	r0, [r4, #-4]!
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	4631      	mov	r1, r6
 80110c0:	462a      	mov	r2, r5
 80110c2:	4798      	blx	r3
 80110c4:	4620      	mov	r0, r4
 80110c6:	f7fd f965 	bl	800e394 <GUI_ALLOC_UnlockH>
 80110ca:	4668      	mov	r0, sp
 80110cc:	f7fd f962 	bl	800e394 <GUI_ALLOC_UnlockH>
 80110d0:	b002      	add	sp, #8
 80110d2:	bd70      	pop	{r4, r5, r6, pc}
 80110d4:	200002c4 	.word	0x200002c4

080110d8 <_DrawVLine>:
 80110d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80110dc:	4d2c      	ldr	r5, [pc, #176]	; (8011190 <_DrawVLine+0xb8>)
 80110de:	461e      	mov	r6, r3
 80110e0:	682b      	ldr	r3, [r5, #0]
 80110e2:	4681      	mov	r9, r0
 80110e4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80110e6:	460f      	mov	r7, r1
 80110e8:	4614      	mov	r4, r2
 80110ea:	f7fd f945 	bl	800e378 <GUI_ALLOC_LockH>
 80110ee:	9000      	str	r0, [sp, #0]
 80110f0:	6940      	ldr	r0, [r0, #20]
 80110f2:	46aa      	mov	sl, r5
 80110f4:	b108      	cbz	r0, 80110fa <_DrawVLine+0x22>
 80110f6:	f7fd f93f 	bl	800e378 <GUI_ALLOC_LockH>
 80110fa:	9001      	str	r0, [sp, #4]
 80110fc:	4621      	mov	r1, r4
 80110fe:	4638      	mov	r0, r7
 8011100:	f7ff ff70 	bl	8010fe4 <_XY2PTR>
 8011104:	9b00      	ldr	r3, [sp, #0]
 8011106:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801110a:	f8da 3000 	ldr.w	r3, [sl]
 801110e:	7c1a      	ldrb	r2, [r3, #16]
 8011110:	07d2      	lsls	r2, r2, #31
 8011112:	4605      	mov	r5, r0
 8011114:	d51f      	bpl.n	8011156 <_DrawVLine+0x7e>
 8011116:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801111a:	689b      	ldr	r3, [r3, #8]
 801111c:	4798      	blx	r3
 801111e:	fa1f f880 	uxth.w	r8, r0
 8011122:	9801      	ldr	r0, [sp, #4]
 8011124:	b120      	cbz	r0, 8011130 <_DrawVLine+0x58>
 8011126:	6883      	ldr	r3, [r0, #8]
 8011128:	4639      	mov	r1, r7
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	4622      	mov	r2, r4
 801112e:	4798      	blx	r3
 8011130:	882b      	ldrh	r3, [r5, #0]
 8011132:	ea88 0303 	eor.w	r3, r8, r3
 8011136:	802b      	strh	r3, [r5, #0]
 8011138:	9b00      	ldr	r3, [sp, #0]
 801113a:	3401      	adds	r4, #1
 801113c:	68db      	ldr	r3, [r3, #12]
 801113e:	42b4      	cmp	r4, r6
 8011140:	441d      	add	r5, r3
 8011142:	ddee      	ble.n	8011122 <_DrawVLine+0x4a>
 8011144:	4668      	mov	r0, sp
 8011146:	f7fd f925 	bl	800e394 <GUI_ALLOC_UnlockH>
 801114a:	9b01      	ldr	r3, [sp, #4]
 801114c:	b1eb      	cbz	r3, 801118a <_DrawVLine+0xb2>
 801114e:	a801      	add	r0, sp, #4
 8011150:	f7fd f920 	bl	800e394 <GUI_ALLOC_UnlockH>
 8011154:	e019      	b.n	801118a <_DrawVLine+0xb2>
 8011156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011158:	f8d3 9000 	ldr.w	r9, [r3]
 801115c:	9b01      	ldr	r3, [sp, #4]
 801115e:	b163      	cbz	r3, 801117a <_DrawVLine+0xa2>
 8011160:	9801      	ldr	r0, [sp, #4]
 8011162:	6883      	ldr	r3, [r0, #8]
 8011164:	4622      	mov	r2, r4
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	4639      	mov	r1, r7
 801116a:	3401      	adds	r4, #1
 801116c:	4798      	blx	r3
 801116e:	42b4      	cmp	r4, r6
 8011170:	f8a5 9000 	strh.w	r9, [r5]
 8011174:	4445      	add	r5, r8
 8011176:	ddf3      	ble.n	8011160 <_DrawVLine+0x88>
 8011178:	e7e4      	b.n	8011144 <_DrawVLine+0x6c>
 801117a:	1b34      	subs	r4, r6, r4
 801117c:	3401      	adds	r4, #1
 801117e:	3c01      	subs	r4, #1
 8011180:	f8a5 9000 	strh.w	r9, [r5]
 8011184:	4445      	add	r5, r8
 8011186:	d1fa      	bne.n	801117e <_DrawVLine+0xa6>
 8011188:	e7dc      	b.n	8011144 <_DrawVLine+0x6c>
 801118a:	b002      	add	sp, #8
 801118c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011190:	200002c4 	.word	0x200002c4

08011194 <_FillRect>:
 8011194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011198:	4f2a      	ldr	r7, [pc, #168]	; (8011244 <_FillRect+0xb0>)
 801119a:	4614      	mov	r4, r2
 801119c:	683a      	ldr	r2, [r7, #0]
 801119e:	4698      	mov	r8, r3
 80111a0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80111a2:	b087      	sub	sp, #28
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	9302      	str	r3, [sp, #8]
 80111a8:	4682      	mov	sl, r0
 80111aa:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80111ac:	460e      	mov	r6, r1
 80111ae:	f7fd f8e3 	bl	800e378 <GUI_ALLOC_LockH>
 80111b2:	4621      	mov	r1, r4
 80111b4:	9004      	str	r0, [sp, #16]
 80111b6:	4630      	mov	r0, r6
 80111b8:	f7ff ff14 	bl	8010fe4 <_XY2PTR>
 80111bc:	9a04      	ldr	r2, [sp, #16]
 80111be:	4605      	mov	r5, r0
 80111c0:	6950      	ldr	r0, [r2, #20]
 80111c2:	68d3      	ldr	r3, [r2, #12]
 80111c4:	9303      	str	r3, [sp, #12]
 80111c6:	ebc6 0908 	rsb	r9, r6, r8
 80111ca:	f109 0801 	add.w	r8, r9, #1
 80111ce:	46bb      	mov	fp, r7
 80111d0:	b180      	cbz	r0, 80111f4 <_FillRect+0x60>
 80111d2:	f7fd f8d1 	bl	800e378 <GUI_ALLOC_LockH>
 80111d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80111d8:	af06      	add	r7, sp, #24
 80111da:	1b13      	subs	r3, r2, r4
 80111dc:	f847 0d04 	str.w	r0, [r7, #-4]!
 80111e0:	3301      	adds	r3, #1
 80111e2:	9300      	str	r3, [sp, #0]
 80111e4:	4631      	mov	r1, r6
 80111e6:	4622      	mov	r2, r4
 80111e8:	4643      	mov	r3, r8
 80111ea:	f7ff fe6a 	bl	8010ec2 <GUI_USAGE_AddRect>
 80111ee:	4638      	mov	r0, r7
 80111f0:	f7fd f8d0 	bl	800e394 <GUI_ALLOC_UnlockH>
 80111f4:	ea4f 0649 	mov.w	r6, r9, lsl #1
 80111f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80111fa:	429c      	cmp	r4, r3
 80111fc:	dc1c      	bgt.n	8011238 <_FillRect+0xa4>
 80111fe:	f8db 3000 	ldr.w	r3, [fp]
 8011202:	7c1b      	ldrb	r3, [r3, #16]
 8011204:	07db      	lsls	r3, r3, #31
 8011206:	d50d      	bpl.n	8011224 <_FillRect+0x90>
 8011208:	f8da 3010 	ldr.w	r3, [sl, #16]
 801120c:	689b      	ldr	r3, [r3, #8]
 801120e:	4798      	blx	r3
 8011210:	19aa      	adds	r2, r5, r6
 8011212:	b280      	uxth	r0, r0
 8011214:	1eab      	subs	r3, r5, #2
 8011216:	8859      	ldrh	r1, [r3, #2]
 8011218:	4041      	eors	r1, r0
 801121a:	f823 1f02 	strh.w	r1, [r3, #2]!
 801121e:	4293      	cmp	r3, r2
 8011220:	d1f9      	bne.n	8011216 <_FillRect+0x82>
 8011222:	e005      	b.n	8011230 <_FillRect+0x9c>
 8011224:	9b02      	ldr	r3, [sp, #8]
 8011226:	4628      	mov	r0, r5
 8011228:	b299      	uxth	r1, r3
 801122a:	4642      	mov	r2, r8
 801122c:	f000 fe19 	bl	8011e62 <GUI__memset16>
 8011230:	9a03      	ldr	r2, [sp, #12]
 8011232:	3401      	adds	r4, #1
 8011234:	4415      	add	r5, r2
 8011236:	e7df      	b.n	80111f8 <_FillRect+0x64>
 8011238:	a804      	add	r0, sp, #16
 801123a:	f7fd f8ab 	bl	800e394 <GUI_ALLOC_UnlockH>
 801123e:	b007      	add	sp, #28
 8011240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011244:	200002c4 	.word	0x200002c4

08011248 <_DrawHLine>:
 8011248:	b507      	push	{r0, r1, r2, lr}
 801124a:	9200      	str	r2, [sp, #0]
 801124c:	f7ff ffa2 	bl	8011194 <_FillRect>
 8011250:	b003      	add	sp, #12
 8011252:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011258 <_DrawBitmap>:
 8011258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801125c:	4c81      	ldr	r4, [pc, #516]	; (8011464 <_DrawBitmap+0x20c>)
 801125e:	b093      	sub	sp, #76	; 0x4c
 8011260:	469b      	mov	fp, r3
 8011262:	6823      	ldr	r3, [r4, #0]
 8011264:	900d      	str	r0, [sp, #52]	; 0x34
 8011266:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8011268:	9207      	str	r2, [sp, #28]
 801126a:	460d      	mov	r5, r1
 801126c:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 8011270:	f7fd f882 	bl	800e378 <GUI_ALLOC_LockH>
 8011274:	9010      	str	r0, [sp, #64]	; 0x40
 8011276:	6940      	ldr	r0, [r0, #20]
 8011278:	b108      	cbz	r0, 801127e <_DrawBitmap+0x26>
 801127a:	f7fd f87d 	bl	800e378 <GUI_ALLOC_LockH>
 801127e:	9011      	str	r0, [sp, #68]	; 0x44
 8011280:	a812      	add	r0, sp, #72	; 0x48
 8011282:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8011286:	68db      	ldr	r3, [r3, #12]
 8011288:	9309      	str	r3, [sp, #36]	; 0x24
 801128a:	f7fd f883 	bl	800e394 <GUI_ALLOC_UnlockH>
 801128e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8011290:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011292:	442e      	add	r6, r5
 8011294:	9604      	str	r6, [sp, #16]
 8011296:	b150      	cbz	r0, 80112ae <_DrawBitmap+0x56>
 8011298:	6823      	ldr	r3, [r4, #0]
 801129a:	7c1b      	ldrb	r3, [r3, #16]
 801129c:	0799      	lsls	r1, r3, #30
 801129e:	d106      	bne.n	80112ae <_DrawBitmap+0x56>
 80112a0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80112a2:	9700      	str	r7, [sp, #0]
 80112a4:	4631      	mov	r1, r6
 80112a6:	9a07      	ldr	r2, [sp, #28]
 80112a8:	465b      	mov	r3, fp
 80112aa:	f7ff fe0a 	bl	8010ec2 <GUI_USAGE_AddRect>
 80112ae:	9804      	ldr	r0, [sp, #16]
 80112b0:	9907      	ldr	r1, [sp, #28]
 80112b2:	f7ff fe97 	bl	8010fe4 <_XY2PTR>
 80112b6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80112b8:	2e10      	cmp	r6, #16
 80112ba:	4604      	mov	r4, r0
 80112bc:	d127      	bne.n	801130e <_DrawBitmap+0xb6>
 80112be:	ea4f 064b 	mov.w	r6, fp, lsl #1
 80112c2:	2500      	movs	r5, #0
 80112c4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80112c6:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 80112ca:	42bd      	cmp	r5, r7
 80112cc:	da1a      	bge.n	8011304 <_DrawBitmap+0xac>
 80112ce:	f1ba 0f00 	cmp.w	sl, #0
 80112d2:	d011      	beq.n	80112f8 <_DrawBitmap+0xa0>
 80112d4:	b184      	cbz	r4, 80112f8 <_DrawBitmap+0xa0>
 80112d6:	4620      	mov	r0, r4
 80112d8:	4651      	mov	r1, sl
 80112da:	4632      	mov	r2, r6
 80112dc:	f7ee ffc6 	bl	800026c <memcpy>
 80112e0:	f1b8 0f00 	cmp.w	r8, #0
 80112e4:	d008      	beq.n	80112f8 <_DrawBitmap+0xa0>
 80112e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80112ea:	9a07      	ldr	r2, [sp, #28]
 80112ec:	685f      	ldr	r7, [r3, #4]
 80112ee:	9904      	ldr	r1, [sp, #16]
 80112f0:	4640      	mov	r0, r8
 80112f2:	442a      	add	r2, r5
 80112f4:	465b      	mov	r3, fp
 80112f6:	47b8      	blx	r7
 80112f8:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80112fa:	44ba      	add	sl, r7
 80112fc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80112fe:	3501      	adds	r5, #1
 8011300:	443c      	add	r4, r7
 8011302:	e7df      	b.n	80112c4 <_DrawBitmap+0x6c>
 8011304:	f1b8 0f00 	cmp.w	r8, #0
 8011308:	f040 831b 	bne.w	8011942 <_DrawBitmap+0x6ea>
 801130c:	e31c      	b.n	8011948 <_DrawBitmap+0x6f0>
 801130e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011310:	2e17      	cmp	r6, #23
 8011312:	dd38      	ble.n	8011386 <_DrawBitmap+0x12e>
 8011314:	2600      	movs	r6, #0
 8011316:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8011318:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801131a:	42be      	cmp	r6, r7
 801131c:	f280 809d 	bge.w	801145a <_DrawBitmap+0x202>
 8011320:	9f07      	ldr	r7, [sp, #28]
 8011322:	4437      	add	r7, r6
 8011324:	f1ba 0f00 	cmp.w	sl, #0
 8011328:	d027      	beq.n	801137a <_DrawBitmap+0x122>
 801132a:	b334      	cbz	r4, 801137a <_DrawBitmap+0x122>
 801132c:	b13d      	cbz	r5, 801133e <_DrawBitmap+0xe6>
 801132e:	68ab      	ldr	r3, [r5, #8]
 8011330:	9904      	ldr	r1, [sp, #16]
 8011332:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8011336:	4628      	mov	r0, r5
 8011338:	463a      	mov	r2, r7
 801133a:	465b      	mov	r3, fp
 801133c:	47e0      	blx	ip
 801133e:	1ea3      	subs	r3, r4, #2
 8011340:	f1aa 0904 	sub.w	r9, sl, #4
 8011344:	9303      	str	r3, [sp, #12]
 8011346:	46d8      	mov	r8, fp
 8011348:	9b04      	ldr	r3, [sp, #16]
 801134a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801134c:	445b      	add	r3, fp
 801134e:	ebc8 0103 	rsb	r1, r8, r3
 8011352:	6903      	ldr	r3, [r0, #16]
 8011354:	f859 0f04 	ldr.w	r0, [r9, #4]!
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	9102      	str	r1, [sp, #8]
 801135c:	4798      	blx	r3
 801135e:	9b03      	ldr	r3, [sp, #12]
 8011360:	9902      	ldr	r1, [sp, #8]
 8011362:	f823 0f02 	strh.w	r0, [r3, #2]!
 8011366:	9303      	str	r3, [sp, #12]
 8011368:	b125      	cbz	r5, 8011374 <_DrawBitmap+0x11c>
 801136a:	68ab      	ldr	r3, [r5, #8]
 801136c:	4628      	mov	r0, r5
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	463a      	mov	r2, r7
 8011372:	4798      	blx	r3
 8011374:	f1b8 0801 	subs.w	r8, r8, #1
 8011378:	d1e6      	bne.n	8011348 <_DrawBitmap+0xf0>
 801137a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801137c:	44ba      	add	sl, r7
 801137e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011380:	3601      	adds	r6, #1
 8011382:	443c      	add	r4, r7
 8011384:	e7c7      	b.n	8011316 <_DrawBitmap+0xbe>
 8011386:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011388:	2e08      	cmp	r6, #8
 801138a:	f100 0402 	add.w	r4, r0, #2
 801138e:	d16b      	bne.n	8011468 <_DrawBitmap+0x210>
 8011390:	9e07      	ldr	r6, [sp, #28]
 8011392:	9f07      	ldr	r7, [sp, #28]
 8011394:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8011396:	1bf3      	subs	r3, r6, r7
 8011398:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801139a:	42bb      	cmp	r3, r7
 801139c:	f1a4 0002 	sub.w	r0, r4, #2
 80113a0:	da5b      	bge.n	801145a <_DrawBitmap+0x202>
 80113a2:	4b30      	ldr	r3, [pc, #192]	; (8011464 <_DrawBitmap+0x20c>)
 80113a4:	9f21      	ldr	r7, [sp, #132]	; 0x84
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	7c1b      	ldrb	r3, [r3, #16]
 80113aa:	b367      	cbz	r7, 8011406 <_DrawBitmap+0x1ae>
 80113ac:	f013 0303 	ands.w	r3, r3, #3
 80113b0:	d004      	beq.n	80113bc <_DrawBitmap+0x164>
 80113b2:	2b02      	cmp	r3, #2
 80113b4:	d14b      	bne.n	801144e <_DrawBitmap+0x1f6>
 80113b6:	46a0      	mov	r8, r4
 80113b8:	9f04      	ldr	r7, [sp, #16]
 80113ba:	e01d      	b.n	80113f8 <_DrawBitmap+0x1a0>
 80113bc:	f81a 2003 	ldrb.w	r2, [sl, r3]
 80113c0:	9f21      	ldr	r7, [sp, #132]	; 0x84
 80113c2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80113c6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 80113ca:	3301      	adds	r3, #1
 80113cc:	455b      	cmp	r3, fp
 80113ce:	d1f5      	bne.n	80113bc <_DrawBitmap+0x164>
 80113d0:	e03d      	b.n	801144e <_DrawBitmap+0x1f6>
 80113d2:	9921      	ldr	r1, [sp, #132]	; 0x84
 80113d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80113d8:	f828 3c02 	strh.w	r3, [r8, #-2]
 80113dc:	b12d      	cbz	r5, 80113ea <_DrawBitmap+0x192>
 80113de:	68ab      	ldr	r3, [r5, #8]
 80113e0:	4628      	mov	r0, r5
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	4639      	mov	r1, r7
 80113e6:	4632      	mov	r2, r6
 80113e8:	4798      	blx	r3
 80113ea:	9b04      	ldr	r3, [sp, #16]
 80113ec:	3701      	adds	r7, #1
 80113ee:	445b      	add	r3, fp
 80113f0:	42bb      	cmp	r3, r7
 80113f2:	f108 0802 	add.w	r8, r8, #2
 80113f6:	d02a      	beq.n	801144e <_DrawBitmap+0x1f6>
 80113f8:	9804      	ldr	r0, [sp, #16]
 80113fa:	ebc0 030a 	rsb	r3, r0, sl
 80113fe:	5ddb      	ldrb	r3, [r3, r7]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d0f2      	beq.n	80113ea <_DrawBitmap+0x192>
 8011404:	e7e5      	b.n	80113d2 <_DrawBitmap+0x17a>
 8011406:	f013 0303 	ands.w	r3, r3, #3
 801140a:	d004      	beq.n	8011416 <_DrawBitmap+0x1be>
 801140c:	2b02      	cmp	r3, #2
 801140e:	d11e      	bne.n	801144e <_DrawBitmap+0x1f6>
 8011410:	46a0      	mov	r8, r4
 8011412:	9f04      	ldr	r7, [sp, #16]
 8011414:	e014      	b.n	8011440 <_DrawBitmap+0x1e8>
 8011416:	4651      	mov	r1, sl
 8011418:	465a      	mov	r2, fp
 801141a:	f7ee ff27 	bl	800026c <memcpy>
 801141e:	e016      	b.n	801144e <_DrawBitmap+0x1f6>
 8011420:	f828 3c02 	strh.w	r3, [r8, #-2]
 8011424:	b12d      	cbz	r5, 8011432 <_DrawBitmap+0x1da>
 8011426:	68ab      	ldr	r3, [r5, #8]
 8011428:	4628      	mov	r0, r5
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	4639      	mov	r1, r7
 801142e:	4632      	mov	r2, r6
 8011430:	4798      	blx	r3
 8011432:	9b04      	ldr	r3, [sp, #16]
 8011434:	3701      	adds	r7, #1
 8011436:	445b      	add	r3, fp
 8011438:	42bb      	cmp	r3, r7
 801143a:	f108 0802 	add.w	r8, r8, #2
 801143e:	d006      	beq.n	801144e <_DrawBitmap+0x1f6>
 8011440:	9a04      	ldr	r2, [sp, #16]
 8011442:	ebc2 030a 	rsb	r3, r2, sl
 8011446:	5ddb      	ldrb	r3, [r3, r7]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d0f2      	beq.n	8011432 <_DrawBitmap+0x1da>
 801144c:	e7e8      	b.n	8011420 <_DrawBitmap+0x1c8>
 801144e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8011450:	44ba      	add	sl, r7
 8011452:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011454:	3601      	adds	r6, #1
 8011456:	443c      	add	r4, r7
 8011458:	e79b      	b.n	8011392 <_DrawBitmap+0x13a>
 801145a:	2d00      	cmp	r5, #0
 801145c:	f040 8271 	bne.w	8011942 <_DrawBitmap+0x6ea>
 8011460:	e272      	b.n	8011948 <_DrawBitmap+0x6f0>
 8011462:	bf00      	nop
 8011464:	200002c4 	.word	0x200002c4
 8011468:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801146a:	4bab      	ldr	r3, [pc, #684]	; (8011718 <_DrawBitmap+0x4c0>)
 801146c:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801146e:	9408      	str	r4, [sp, #32]
 8011470:	2e00      	cmp	r6, #0
 8011472:	bf08      	it	eq
 8011474:	461e      	moveq	r6, r3
 8011476:	9621      	str	r6, [sp, #132]	; 0x84
 8011478:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801147a:	0076      	lsls	r6, r6, #1
 801147c:	960e      	str	r6, [sp, #56]	; 0x38
 801147e:	00bf      	lsls	r7, r7, #2
 8011480:	9e07      	ldr	r6, [sp, #28]
 8011482:	970f      	str	r7, [sp, #60]	; 0x3c
 8011484:	9605      	str	r6, [sp, #20]
 8011486:	9b08      	ldr	r3, [sp, #32]
 8011488:	9e05      	ldr	r6, [sp, #20]
 801148a:	9f07      	ldr	r7, [sp, #28]
 801148c:	1e9c      	subs	r4, r3, #2
 801148e:	1bf3      	subs	r3, r6, r7
 8011490:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8011492:	42b3      	cmp	r3, r6
 8011494:	f280 8253 	bge.w	801193e <_DrawBitmap+0x6e6>
 8011498:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 801149a:	2f02      	cmp	r7, #2
 801149c:	f000 80d9 	beq.w	8011652 <_DrawBitmap+0x3fa>
 80114a0:	2f04      	cmp	r7, #4
 80114a2:	f000 8178 	beq.w	8011796 <_DrawBitmap+0x53e>
 80114a6:	2f01      	cmp	r7, #1
 80114a8:	f040 823f 	bne.w	801192a <_DrawBitmap+0x6d2>
 80114ac:	f8df 9270 	ldr.w	r9, [pc, #624]	; 8011720 <_DrawBitmap+0x4c8>
 80114b0:	f8d9 3000 	ldr.w	r3, [r9]
 80114b4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80114b6:	f7fc ff5f 	bl	800e378 <GUI_ALLOC_LockH>
 80114ba:	f89a 3000 	ldrb.w	r3, [sl]
 80114be:	4a97      	ldr	r2, [pc, #604]	; (801171c <_DrawBitmap+0x4c4>)
 80114c0:	9010      	str	r0, [sp, #64]	; 0x40
 80114c2:	5cd5      	ldrb	r5, [r2, r3]
 80114c4:	f8d9 3000 	ldr.w	r3, [r9]
 80114c8:	9820      	ldr	r0, [sp, #128]	; 0x80
 80114ca:	7c1b      	ldrb	r3, [r3, #16]
 80114cc:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80114ce:	f003 0303 	and.w	r3, r3, #3
 80114d2:	2b02      	cmp	r3, #2
 80114d4:	465e      	mov	r6, fp
 80114d6:	f1c0 0808 	rsb	r8, r0, #8
 80114da:	fa45 f500 	asr.w	r5, r5, r0
 80114de:	d022      	beq.n	8011526 <_DrawBitmap+0x2ce>
 80114e0:	2b03      	cmp	r3, #3
 80114e2:	d062      	beq.n	80115aa <_DrawBitmap+0x352>
 80114e4:	2b01      	cmp	r3, #1
 80114e6:	d060      	beq.n	80115aa <_DrawBitmap+0x352>
 80114e8:	4652      	mov	r2, sl
 80114ea:	4546      	cmp	r6, r8
 80114ec:	bf38      	it	cc
 80114ee:	46b0      	movcc	r8, r6
 80114f0:	ebc8 0606 	rsb	r6, r8, r6
 80114f4:	4643      	mov	r3, r8
 80114f6:	4621      	mov	r1, r4
 80114f8:	f005 0001 	and.w	r0, r5, #1
 80114fc:	9f21      	ldr	r7, [sp, #132]	; 0x84
 80114fe:	3b01      	subs	r3, #1
 8011500:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8011504:	f821 0b02 	strh.w	r0, [r1], #2
 8011508:	ea4f 0555 	mov.w	r5, r5, lsr #1
 801150c:	d1f4      	bne.n	80114f8 <_DrawBitmap+0x2a0>
 801150e:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8011512:	2e00      	cmp	r6, #0
 8011514:	f000 8099 	beq.w	801164a <_DrawBitmap+0x3f2>
 8011518:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801151c:	497f      	ldr	r1, [pc, #508]	; (801171c <_DrawBitmap+0x4c4>)
 801151e:	f04f 0808 	mov.w	r8, #8
 8011522:	5ccd      	ldrb	r5, [r1, r3]
 8011524:	e7e1      	b.n	80114ea <_DrawBitmap+0x292>
 8011526:	9821      	ldr	r0, [sp, #132]	; 0x84
 8011528:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801152c:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8011530:	f8cd a018 	str.w	sl, [sp, #24]
 8011534:	4546      	cmp	r6, r8
 8011536:	bf38      	it	cc
 8011538:	46b0      	movcc	r8, r6
 801153a:	ebc8 0606 	rsb	r6, r8, r6
 801153e:	b32f      	cbz	r7, 801158c <_DrawBitmap+0x334>
 8011540:	b91d      	cbnz	r5, 801154a <_DrawBitmap+0x2f2>
 8011542:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8011546:	44c1      	add	r9, r8
 8011548:	e024      	b.n	8011594 <_DrawBitmap+0x33c>
 801154a:	07ea      	lsls	r2, r5, #31
 801154c:	d50b      	bpl.n	8011566 <_DrawBitmap+0x30e>
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	9a05      	ldr	r2, [sp, #20]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	f8cd c008 	str.w	ip, [sp, #8]
 8011558:	4638      	mov	r0, r7
 801155a:	4649      	mov	r1, r9
 801155c:	4798      	blx	r3
 801155e:	f8dd c008 	ldr.w	ip, [sp, #8]
 8011562:	f8a4 c000 	strh.w	ip, [r4]
 8011566:	f1b8 0801 	subs.w	r8, r8, #1
 801156a:	f109 0901 	add.w	r9, r9, #1
 801156e:	f104 0402 	add.w	r4, r4, #2
 8011572:	d00f      	beq.n	8011594 <_DrawBitmap+0x33c>
 8011574:	086d      	lsrs	r5, r5, #1
 8011576:	e7e3      	b.n	8011540 <_DrawBitmap+0x2e8>
 8011578:	07eb      	lsls	r3, r5, #31
 801157a:	bf48      	it	mi
 801157c:	f8a4 c000 	strhmi.w	ip, [r4]
 8011580:	f1b8 0801 	subs.w	r8, r8, #1
 8011584:	f104 0402 	add.w	r4, r4, #2
 8011588:	d004      	beq.n	8011594 <_DrawBitmap+0x33c>
 801158a:	086d      	lsrs	r5, r5, #1
 801158c:	2d00      	cmp	r5, #0
 801158e:	d1f3      	bne.n	8011578 <_DrawBitmap+0x320>
 8011590:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8011594:	2e00      	cmp	r6, #0
 8011596:	d058      	beq.n	801164a <_DrawBitmap+0x3f2>
 8011598:	9906      	ldr	r1, [sp, #24]
 801159a:	4a60      	ldr	r2, [pc, #384]	; (801171c <_DrawBitmap+0x4c4>)
 801159c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80115a0:	9106      	str	r1, [sp, #24]
 80115a2:	5cd5      	ldrb	r5, [r2, r3]
 80115a4:	f04f 0808 	mov.w	r8, #8
 80115a8:	e7c4      	b.n	8011534 <_DrawBitmap+0x2dc>
 80115aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80115ac:	6913      	ldr	r3, [r2, #16]
 80115ae:	689b      	ldr	r3, [r3, #8]
 80115b0:	4798      	blx	r3
 80115b2:	9b04      	ldr	r3, [sp, #16]
 80115b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80115b6:	b280      	uxth	r0, r0
 80115b8:	900a      	str	r0, [sp, #40]	; 0x28
 80115ba:	f10a 0901 	add.w	r9, sl, #1
 80115be:	4546      	cmp	r6, r8
 80115c0:	bf38      	it	cc
 80115c2:	46b0      	movcc	r8, r6
 80115c4:	ebc8 0606 	rsb	r6, r8, r6
 80115c8:	1ca3      	adds	r3, r4, #2
 80115ca:	b31f      	cbz	r7, 8011614 <_DrawBitmap+0x3bc>
 80115cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80115d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80115d2:	9a06      	ldr	r2, [sp, #24]
 80115d4:	4440      	add	r0, r8
 80115d6:	900c      	str	r0, [sp, #48]	; 0x30
 80115d8:	1a81      	subs	r1, r0, r2
 80115da:	07e8      	lsls	r0, r5, #31
 80115dc:	d50d      	bpl.n	80115fa <_DrawBitmap+0x3a2>
 80115de:	68ba      	ldr	r2, [r7, #8]
 80115e0:	4638      	mov	r0, r7
 80115e2:	f8d2 c000 	ldr.w	ip, [r2]
 80115e6:	9a05      	ldr	r2, [sp, #20]
 80115e8:	9302      	str	r3, [sp, #8]
 80115ea:	47e0      	blx	ip
 80115ec:	9b02      	ldr	r3, [sp, #8]
 80115ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80115f0:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 80115f4:	4042      	eors	r2, r0
 80115f6:	f823 2c02 	strh.w	r2, [r3, #-2]
 80115fa:	9906      	ldr	r1, [sp, #24]
 80115fc:	3901      	subs	r1, #1
 80115fe:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8011602:	f103 0302 	add.w	r3, r3, #2
 8011606:	9106      	str	r1, [sp, #24]
 8011608:	d1e2      	bne.n	80115d0 <_DrawBitmap+0x378>
 801160a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801160c:	930b      	str	r3, [sp, #44]	; 0x2c
 801160e:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8011612:	e010      	b.n	8011636 <_DrawBitmap+0x3de>
 8011614:	4642      	mov	r2, r8
 8011616:	07e9      	lsls	r1, r5, #31
 8011618:	d505      	bpl.n	8011626 <_DrawBitmap+0x3ce>
 801161a:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 801161e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011620:	4041      	eors	r1, r0
 8011622:	f823 1c02 	strh.w	r1, [r3, #-2]
 8011626:	3a01      	subs	r2, #1
 8011628:	ea4f 0555 	mov.w	r5, r5, lsr #1
 801162c:	f103 0302 	add.w	r3, r3, #2
 8011630:	d1f1      	bne.n	8011616 <_DrawBitmap+0x3be>
 8011632:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8011636:	b146      	cbz	r6, 801164a <_DrawBitmap+0x3f2>
 8011638:	f899 3000 	ldrb.w	r3, [r9]
 801163c:	4a37      	ldr	r2, [pc, #220]	; (801171c <_DrawBitmap+0x4c4>)
 801163e:	f109 0901 	add.w	r9, r9, #1
 8011642:	5cd5      	ldrb	r5, [r2, r3]
 8011644:	f04f 0808 	mov.w	r8, #8
 8011648:	e7b9      	b.n	80115be <_DrawBitmap+0x366>
 801164a:	a810      	add	r0, sp, #64	; 0x40
 801164c:	f7fc fea2 	bl	800e394 <GUI_ALLOC_UnlockH>
 8011650:	e16b      	b.n	801192a <_DrawBitmap+0x6d2>
 8011652:	4b33      	ldr	r3, [pc, #204]	; (8011720 <_DrawBitmap+0x4c8>)
 8011654:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801165a:	7c1b      	ldrb	r3, [r3, #16]
 801165c:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8011660:	f1c6 0504 	rsb	r5, r6, #4
 8011664:	f89a 6000 	ldrb.w	r6, [sl]
 8011668:	f003 0303 	and.w	r3, r3, #3
 801166c:	40be      	lsls	r6, r7
 801166e:	2b01      	cmp	r3, #1
 8011670:	b2ed      	uxtb	r5, r5
 8011672:	b2f6      	uxtb	r6, r6
 8011674:	d06a      	beq.n	801174c <_DrawBitmap+0x4f4>
 8011676:	d308      	bcc.n	801168a <_DrawBitmap+0x432>
 8011678:	2b02      	cmp	r3, #2
 801167a:	f040 8156 	bne.w	801192a <_DrawBitmap+0x6d2>
 801167e:	f8cd a018 	str.w	sl, [sp, #24]
 8011682:	465f      	mov	r7, fp
 8011684:	f8dd c010 	ldr.w	ip, [sp, #16]
 8011688:	e03e      	b.n	8011708 <_DrawBitmap+0x4b0>
 801168a:	4652      	mov	r2, sl
 801168c:	465b      	mov	r3, fp
 801168e:	429d      	cmp	r5, r3
 8011690:	bfc8      	it	gt
 8011692:	b2dd      	uxtbgt	r5, r3
 8011694:	1b5b      	subs	r3, r3, r5
 8011696:	4629      	mov	r1, r5
 8011698:	4620      	mov	r0, r4
 801169a:	ea4f 1c96 	mov.w	ip, r6, lsr #6
 801169e:	9f21      	ldr	r7, [sp, #132]	; 0x84
 80116a0:	3901      	subs	r1, #1
 80116a2:	f857 c02c 	ldr.w	ip, [r7, ip, lsl #2]
 80116a6:	f820 cb02 	strh.w	ip, [r0], #2
 80116aa:	00b6      	lsls	r6, r6, #2
 80116ac:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80116b0:	b2f6      	uxtb	r6, r6
 80116b2:	d1f2      	bne.n	801169a <_DrawBitmap+0x442>
 80116b4:	3d01      	subs	r5, #1
 80116b6:	b2ed      	uxtb	r5, r5
 80116b8:	3501      	adds	r5, #1
 80116ba:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80116be:	2b00      	cmp	r3, #0
 80116c0:	f000 8133 	beq.w	801192a <_DrawBitmap+0x6d2>
 80116c4:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 80116c8:	2504      	movs	r5, #4
 80116ca:	e7e0      	b.n	801168e <_DrawBitmap+0x436>
 80116cc:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 80116d0:	eb08 010c 	add.w	r1, r8, ip
 80116d4:	d126      	bne.n	8011724 <_DrawBitmap+0x4cc>
 80116d6:	f108 0801 	add.w	r8, r8, #1
 80116da:	fa5f f388 	uxtb.w	r3, r8
 80116de:	00b6      	lsls	r6, r6, #2
 80116e0:	429d      	cmp	r5, r3
 80116e2:	b2f6      	uxtb	r6, r6
 80116e4:	d1f2      	bne.n	80116cc <_DrawBitmap+0x474>
 80116e6:	3d01      	subs	r5, #1
 80116e8:	b2ed      	uxtb	r5, r5
 80116ea:	1c6b      	adds	r3, r5, #1
 80116ec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80116f0:	f10c 0301 	add.w	r3, ip, #1
 80116f4:	eb03 0c05 	add.w	ip, r3, r5
 80116f8:	2f00      	cmp	r7, #0
 80116fa:	f000 8116 	beq.w	801192a <_DrawBitmap+0x6d2>
 80116fe:	9b06      	ldr	r3, [sp, #24]
 8011700:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8011704:	9306      	str	r3, [sp, #24]
 8011706:	2504      	movs	r5, #4
 8011708:	42bd      	cmp	r5, r7
 801170a:	bfc8      	it	gt
 801170c:	b2fd      	uxtbgt	r5, r7
 801170e:	1b7f      	subs	r7, r7, r5
 8011710:	f04f 0800 	mov.w	r8, #0
 8011714:	e7da      	b.n	80116cc <_DrawBitmap+0x474>
 8011716:	bf00      	nop
 8011718:	080670d4 	.word	0x080670d4
 801171c:	08066f28 	.word	0x08066f28
 8011720:	200002c4 	.word	0x200002c4
 8011724:	09b3      	lsrs	r3, r6, #6
 8011726:	9821      	ldr	r0, [sp, #132]	; 0x84
 8011728:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801172c:	f824 3018 	strh.w	r3, [r4, r8, lsl #1]
 8011730:	f1b9 0f00 	cmp.w	r9, #0
 8011734:	d0cf      	beq.n	80116d6 <_DrawBitmap+0x47e>
 8011736:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801173a:	9a05      	ldr	r2, [sp, #20]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	f8cd c008 	str.w	ip, [sp, #8]
 8011742:	4648      	mov	r0, r9
 8011744:	4798      	blx	r3
 8011746:	f8dd c008 	ldr.w	ip, [sp, #8]
 801174a:	e7c4      	b.n	80116d6 <_DrawBitmap+0x47e>
 801174c:	4651      	mov	r1, sl
 801174e:	465b      	mov	r3, fp
 8011750:	429d      	cmp	r5, r3
 8011752:	bfc8      	it	gt
 8011754:	b2dd      	uxtbgt	r5, r3
 8011756:	1b5b      	subs	r3, r3, r5
 8011758:	1ca2      	adds	r2, r4, #2
 801175a:	4628      	mov	r0, r5
 801175c:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8011760:	d005      	beq.n	801176e <_DrawBitmap+0x516>
 8011762:	f832 7c02 	ldrh.w	r7, [r2, #-2]
 8011766:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 801176a:	f822 7c02 	strh.w	r7, [r2, #-2]
 801176e:	3801      	subs	r0, #1
 8011770:	00b6      	lsls	r6, r6, #2
 8011772:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8011776:	b2f6      	uxtb	r6, r6
 8011778:	f102 0202 	add.w	r2, r2, #2
 801177c:	d1ee      	bne.n	801175c <_DrawBitmap+0x504>
 801177e:	3d01      	subs	r5, #1
 8011780:	b2ed      	uxtb	r5, r5
 8011782:	3501      	adds	r5, #1
 8011784:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8011788:	2b00      	cmp	r3, #0
 801178a:	f000 80ce 	beq.w	801192a <_DrawBitmap+0x6d2>
 801178e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8011792:	2504      	movs	r5, #4
 8011794:	e7dc      	b.n	8011750 <_DrawBitmap+0x4f8>
 8011796:	4a6e      	ldr	r2, [pc, #440]	; (8011950 <_DrawBitmap+0x6f8>)
 8011798:	f89a 3000 	ldrb.w	r3, [sl]
 801179c:	6812      	ldr	r2, [r2, #0]
 801179e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80117a0:	7c12      	ldrb	r2, [r2, #16]
 80117a2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80117a4:	f002 0203 	and.w	r2, r2, #3
 80117a8:	40bb      	lsls	r3, r7
 80117aa:	2a01      	cmp	r2, #1
 80117ac:	b2dd      	uxtb	r5, r3
 80117ae:	f000 8095 	beq.w	80118dc <_DrawBitmap+0x684>
 80117b2:	d302      	bcc.n	80117ba <_DrawBitmap+0x562>
 80117b4:	2a02      	cmp	r2, #2
 80117b6:	d036      	beq.n	8011826 <_DrawBitmap+0x5ce>
 80117b8:	e0b7      	b.n	801192a <_DrawBitmap+0x6d2>
 80117ba:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80117bc:	b166      	cbz	r6, 80117d8 <_DrawBitmap+0x580>
 80117be:	092d      	lsrs	r5, r5, #4
 80117c0:	9f21      	ldr	r7, [sp, #132]	; 0x84
 80117c2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 80117c6:	8023      	strh	r3, [r4, #0]
 80117c8:	f10a 0201 	add.w	r2, sl, #1
 80117cc:	9c08      	ldr	r4, [sp, #32]
 80117ce:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80117d2:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80117d6:	e001      	b.n	80117dc <_DrawBitmap+0x584>
 80117d8:	465b      	mov	r3, fp
 80117da:	4652      	mov	r2, sl
 80117dc:	2b01      	cmp	r3, #1
 80117de:	dd19      	ble.n	8011814 <_DrawBitmap+0x5bc>
 80117e0:	1058      	asrs	r0, r3, #1
 80117e2:	1d21      	adds	r1, r4, #4
 80117e4:	f003 0301 	and.w	r3, r3, #1
 80117e8:	eb02 0c00 	add.w	ip, r2, r0
 80117ec:	092f      	lsrs	r7, r5, #4
 80117ee:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80117f0:	f005 050f 	and.w	r5, r5, #15
 80117f4:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80117f8:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 80117fc:	f821 7c04 	strh.w	r7, [r1, #-4]
 8011800:	f821 5c02 	strh.w	r5, [r1, #-2]
 8011804:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8011808:	4562      	cmp	r2, ip
 801180a:	f101 0104 	add.w	r1, r1, #4
 801180e:	d1ed      	bne.n	80117ec <_DrawBitmap+0x594>
 8011810:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8011814:	2b00      	cmp	r3, #0
 8011816:	f000 8088 	beq.w	801192a <_DrawBitmap+0x6d2>
 801181a:	092d      	lsrs	r5, r5, #4
 801181c:	9f21      	ldr	r7, [sp, #132]	; 0x84
 801181e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8011822:	8023      	strh	r3, [r4, #0]
 8011824:	e081      	b.n	801192a <_DrawBitmap+0x6d2>
 8011826:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8011828:	b1c7      	cbz	r7, 801185c <_DrawBitmap+0x604>
 801182a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 801182e:	d00b      	beq.n	8011848 <_DrawBitmap+0x5f0>
 8011830:	092d      	lsrs	r5, r5, #4
 8011832:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8011834:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8011838:	8023      	strh	r3, [r4, #0]
 801183a:	b12e      	cbz	r6, 8011848 <_DrawBitmap+0x5f0>
 801183c:	68b3      	ldr	r3, [r6, #8]
 801183e:	9904      	ldr	r1, [sp, #16]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	9a05      	ldr	r2, [sp, #20]
 8011844:	4630      	mov	r0, r6
 8011846:	4798      	blx	r3
 8011848:	9804      	ldr	r0, [sp, #16]
 801184a:	9c08      	ldr	r4, [sp, #32]
 801184c:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8011850:	1c47      	adds	r7, r0, #1
 8011852:	f10b 39ff 	add.w	r9, fp, #4294967295	; 0xffffffff
 8011856:	f10a 0801 	add.w	r8, sl, #1
 801185a:	e00f      	b.n	801187c <_DrawBitmap+0x624>
 801185c:	46d9      	mov	r9, fp
 801185e:	46d0      	mov	r8, sl
 8011860:	9f04      	ldr	r7, [sp, #16]
 8011862:	e00b      	b.n	801187c <_DrawBitmap+0x624>
 8011864:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 8011868:	d10c      	bne.n	8011884 <_DrawBitmap+0x62c>
 801186a:	f015 050f 	ands.w	r5, r5, #15
 801186e:	d117      	bne.n	80118a0 <_DrawBitmap+0x648>
 8011870:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 8011874:	3404      	adds	r4, #4
 8011876:	3702      	adds	r7, #2
 8011878:	f1a9 0902 	sub.w	r9, r9, #2
 801187c:	f1b9 0f01 	cmp.w	r9, #1
 8011880:	dcf0      	bgt.n	8011864 <_DrawBitmap+0x60c>
 8011882:	e01a      	b.n	80118ba <_DrawBitmap+0x662>
 8011884:	092b      	lsrs	r3, r5, #4
 8011886:	9921      	ldr	r1, [sp, #132]	; 0x84
 8011888:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801188c:	8023      	strh	r3, [r4, #0]
 801188e:	2e00      	cmp	r6, #0
 8011890:	d0eb      	beq.n	801186a <_DrawBitmap+0x612>
 8011892:	68b3      	ldr	r3, [r6, #8]
 8011894:	9a05      	ldr	r2, [sp, #20]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	4630      	mov	r0, r6
 801189a:	4639      	mov	r1, r7
 801189c:	4798      	blx	r3
 801189e:	e7e4      	b.n	801186a <_DrawBitmap+0x612>
 80118a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80118a2:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 80118a6:	8063      	strh	r3, [r4, #2]
 80118a8:	2e00      	cmp	r6, #0
 80118aa:	d0e1      	beq.n	8011870 <_DrawBitmap+0x618>
 80118ac:	68b3      	ldr	r3, [r6, #8]
 80118ae:	9a05      	ldr	r2, [sp, #20]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	4630      	mov	r0, r6
 80118b4:	1c79      	adds	r1, r7, #1
 80118b6:	4798      	blx	r3
 80118b8:	e7da      	b.n	8011870 <_DrawBitmap+0x618>
 80118ba:	f1b9 0f00 	cmp.w	r9, #0
 80118be:	d034      	beq.n	801192a <_DrawBitmap+0x6d2>
 80118c0:	092d      	lsrs	r5, r5, #4
 80118c2:	d032      	beq.n	801192a <_DrawBitmap+0x6d2>
 80118c4:	9821      	ldr	r0, [sp, #132]	; 0x84
 80118c6:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 80118ca:	8023      	strh	r3, [r4, #0]
 80118cc:	b36e      	cbz	r6, 801192a <_DrawBitmap+0x6d2>
 80118ce:	68b3      	ldr	r3, [r6, #8]
 80118d0:	9a05      	ldr	r2, [sp, #20]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	4630      	mov	r0, r6
 80118d6:	4639      	mov	r1, r7
 80118d8:	4798      	blx	r3
 80118da:	e026      	b.n	801192a <_DrawBitmap+0x6d2>
 80118dc:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80118de:	f1c6 0302 	rsb	r3, r6, #2
 80118e2:	b2db      	uxtb	r3, r3
 80118e4:	4650      	mov	r0, sl
 80118e6:	465a      	mov	r2, fp
 80118e8:	4293      	cmp	r3, r2
 80118ea:	bfc8      	it	gt
 80118ec:	b2d3      	uxtbgt	r3, r2
 80118ee:	1ad2      	subs	r2, r2, r3
 80118f0:	1ca1      	adds	r1, r4, #2
 80118f2:	461e      	mov	r6, r3
 80118f4:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 80118f8:	d005      	beq.n	8011906 <_DrawBitmap+0x6ae>
 80118fa:	f831 7c02 	ldrh.w	r7, [r1, #-2]
 80118fe:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 8011902:	f821 7c02 	strh.w	r7, [r1, #-2]
 8011906:	3e01      	subs	r6, #1
 8011908:	012d      	lsls	r5, r5, #4
 801190a:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 801190e:	b2ed      	uxtb	r5, r5
 8011910:	f101 0102 	add.w	r1, r1, #2
 8011914:	d1ee      	bne.n	80118f4 <_DrawBitmap+0x69c>
 8011916:	3b01      	subs	r3, #1
 8011918:	b2db      	uxtb	r3, r3
 801191a:	3301      	adds	r3, #1
 801191c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8011920:	b11a      	cbz	r2, 801192a <_DrawBitmap+0x6d2>
 8011922:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8011926:	2302      	movs	r3, #2
 8011928:	e7de      	b.n	80118e8 <_DrawBitmap+0x690>
 801192a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801192c:	9b05      	ldr	r3, [sp, #20]
 801192e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011930:	44ba      	add	sl, r7
 8011932:	9f08      	ldr	r7, [sp, #32]
 8011934:	3301      	adds	r3, #1
 8011936:	4437      	add	r7, r6
 8011938:	9305      	str	r3, [sp, #20]
 801193a:	9708      	str	r7, [sp, #32]
 801193c:	e5a3      	b.n	8011486 <_DrawBitmap+0x22e>
 801193e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011940:	b113      	cbz	r3, 8011948 <_DrawBitmap+0x6f0>
 8011942:	a811      	add	r0, sp, #68	; 0x44
 8011944:	f7fc fd26 	bl	800e394 <GUI_ALLOC_UnlockH>
 8011948:	b013      	add	sp, #76	; 0x4c
 801194a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801194e:	bf00      	nop
 8011950:	200002c4 	.word	0x200002c4

08011954 <LCD_SelectLCD>:
 8011954:	b510      	push	{r4, lr}
 8011956:	4b0d      	ldr	r3, [pc, #52]	; (801198c <LCD_SelectLCD+0x38>)
 8011958:	681a      	ldr	r2, [r3, #0]
 801195a:	7c51      	ldrb	r1, [r2, #17]
 801195c:	4a0c      	ldr	r2, [pc, #48]	; (8011990 <LCD_SelectLCD+0x3c>)
 801195e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8011962:	461c      	mov	r4, r3
 8011964:	b138      	cbz	r0, 8011976 <LCD_SelectLCD+0x22>
 8011966:	68c2      	ldr	r2, [r0, #12]
 8011968:	6813      	ldr	r3, [r2, #0]
 801196a:	2b04      	cmp	r3, #4
 801196c:	d001      	beq.n	8011972 <LCD_SelectLCD+0x1e>
 801196e:	6800      	ldr	r0, [r0, #0]
 8011970:	e7f8      	b.n	8011964 <LCD_SelectLCD+0x10>
 8011972:	f7fc f813 	bl	800d99c <GUI_DEVICE_Unlink>
 8011976:	6823      	ldr	r3, [r4, #0]
 8011978:	2200      	movs	r2, #0
 801197a:	661a      	str	r2, [r3, #96]	; 0x60
 801197c:	f103 0208 	add.w	r2, r3, #8
 8011980:	615a      	str	r2, [r3, #20]
 8011982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011986:	f7fa b995 	b.w	800bcb4 <LCD_SetClipRectMax>
 801198a:	bf00      	nop
 801198c:	200002c4 	.word	0x200002c4
 8011990:	20028844 	.word	0x20028844

08011994 <LCD_ReadRectEx>:
 8011994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011998:	b087      	sub	sp, #28
 801199a:	4617      	mov	r7, r2
 801199c:	9304      	str	r3, [sp, #16]
 801199e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80119a0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80119a2:	68da      	ldr	r2, [r3, #12]
 80119a4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80119a6:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80119aa:	4606      	mov	r6, r0
 80119ac:	460d      	mov	r5, r1
 80119ae:	b973      	cbnz	r3, 80119ce <LCD_ReadRectEx+0x3a>
 80119b0:	4b71      	ldr	r3, [pc, #452]	; (8011b78 <LCD_ReadRectEx+0x1e4>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	7c58      	ldrb	r0, [r3, #17]
 80119b6:	f7f9 fe4b 	bl	800b650 <GUI_GetBitsPerPixelEx>
 80119ba:	2808      	cmp	r0, #8
 80119bc:	4682      	mov	sl, r0
 80119be:	dd15      	ble.n	80119ec <LCD_ReadRectEx+0x58>
 80119c0:	2810      	cmp	r0, #16
 80119c2:	bfcc      	ite	gt
 80119c4:	f04f 0904 	movgt.w	r9, #4
 80119c8:	f04f 0902 	movle.w	r9, #2
 80119cc:	e010      	b.n	80119f0 <LCD_ReadRectEx+0x5c>
 80119ce:	a811      	add	r0, sp, #68	; 0x44
 80119d0:	2101      	movs	r1, #1
 80119d2:	4798      	blx	r3
 80119d4:	4684      	mov	ip, r0
 80119d6:	2800      	cmp	r0, #0
 80119d8:	d0ea      	beq.n	80119b0 <LCD_ReadRectEx+0x1c>
 80119da:	9b04      	ldr	r3, [sp, #16]
 80119dc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80119de:	e88d 0018 	stmia.w	sp, {r3, r4}
 80119e2:	4631      	mov	r1, r6
 80119e4:	462a      	mov	r2, r5
 80119e6:	463b      	mov	r3, r7
 80119e8:	47e0      	blx	ip
 80119ea:	e0c1      	b.n	8011b70 <LCD_ReadRectEx+0x1dc>
 80119ec:	f04f 0901 	mov.w	r9, #1
 80119f0:	f04f 0b00 	mov.w	fp, #0
 80119f4:	9b04      	ldr	r3, [sp, #16]
 80119f6:	429d      	cmp	r5, r3
 80119f8:	f300 80ba 	bgt.w	8011b70 <LCD_ReadRectEx+0x1dc>
 80119fc:	f1b9 0f02 	cmp.w	r9, #2
 8011a00:	d009      	beq.n	8011a16 <LCD_ReadRectEx+0x82>
 8011a02:	f1b9 0f04 	cmp.w	r9, #4
 8011a06:	d004      	beq.n	8011a12 <LCD_ReadRectEx+0x7e>
 8011a08:	f1b9 0f01 	cmp.w	r9, #1
 8011a0c:	f040 80ae 	bne.w	8011b6c <LCD_ReadRectEx+0x1d8>
 8011a10:	e003      	b.n	8011a1a <LCD_ReadRectEx+0x86>
 8011a12:	46b4      	mov	ip, r6
 8011a14:	e09b      	b.n	8011b4e <LCD_ReadRectEx+0x1ba>
 8011a16:	46b4      	mov	ip, r6
 8011a18:	e08a      	b.n	8011b30 <LCD_ReadRectEx+0x19c>
 8011a1a:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8011a1e:	2a07      	cmp	r2, #7
 8011a20:	f200 80a4 	bhi.w	8011b6c <LCD_ReadRectEx+0x1d8>
 8011a24:	e8df f002 	tbb	[pc, r2]
 8011a28:	0606080a 	.word	0x0606080a
 8011a2c:	04040404 	.word	0x04040404
 8011a30:	46b4      	mov	ip, r6
 8011a32:	e066      	b.n	8011b02 <LCD_ReadRectEx+0x16e>
 8011a34:	46b4      	mov	ip, r6
 8011a36:	e047      	b.n	8011ac8 <LCD_ReadRectEx+0x134>
 8011a38:	46b4      	mov	ip, r6
 8011a3a:	e022      	b.n	8011a82 <LCD_ReadRectEx+0xee>
 8011a3c:	46b4      	mov	ip, r6
 8011a3e:	45bc      	cmp	ip, r7
 8011a40:	f300 8094 	bgt.w	8011b6c <LCD_ReadRectEx+0x1d8>
 8011a44:	4661      	mov	r1, ip
 8011a46:	462a      	mov	r2, r5
 8011a48:	f8cd c00c 	str.w	ip, [sp, #12]
 8011a4c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011a4e:	47c0      	blx	r8
 8011a50:	f1cb 0207 	rsb	r2, fp, #7
 8011a54:	fa00 f202 	lsl.w	r2, r0, r2
 8011a58:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8011a5c:	7820      	ldrb	r0, [r4, #0]
 8011a5e:	fa41 f10b 	asr.w	r1, r1, fp
 8011a62:	4001      	ands	r1, r0
 8011a64:	430a      	orrs	r2, r1
 8011a66:	7022      	strb	r2, [r4, #0]
 8011a68:	f10b 0301 	add.w	r3, fp, #1
 8011a6c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011a70:	f023 0207 	bic.w	r2, r3, #7
 8011a74:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8011a78:	fa43 fb02 	asr.w	fp, r3, r2
 8011a7c:	f10c 0c01 	add.w	ip, ip, #1
 8011a80:	e7dd      	b.n	8011a3e <LCD_ReadRectEx+0xaa>
 8011a82:	45bc      	cmp	ip, r7
 8011a84:	dc72      	bgt.n	8011b6c <LCD_ReadRectEx+0x1d8>
 8011a86:	4661      	mov	r1, ip
 8011a88:	462a      	mov	r2, r5
 8011a8a:	f8cd c00c 	str.w	ip, [sp, #12]
 8011a8e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011a90:	47c0      	blx	r8
 8011a92:	ea4f 024b 	mov.w	r2, fp, lsl #1
 8011a96:	f1c2 0106 	rsb	r1, r2, #6
 8011a9a:	fa00 f101 	lsl.w	r1, r0, r1
 8011a9e:	f64f 703f 	movw	r0, #65343	; 0xff3f
 8011aa2:	fa40 f202 	asr.w	r2, r0, r2
 8011aa6:	7820      	ldrb	r0, [r4, #0]
 8011aa8:	4002      	ands	r2, r0
 8011aaa:	4311      	orrs	r1, r2
 8011aac:	7021      	strb	r1, [r4, #0]
 8011aae:	f10b 0301 	add.w	r3, fp, #1
 8011ab2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011ab6:	f023 0203 	bic.w	r2, r3, #3
 8011aba:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8011abe:	fa43 fb02 	asr.w	fp, r3, r2
 8011ac2:	f10c 0c01 	add.w	ip, ip, #1
 8011ac6:	e7dc      	b.n	8011a82 <LCD_ReadRectEx+0xee>
 8011ac8:	45bc      	cmp	ip, r7
 8011aca:	dc4f      	bgt.n	8011b6c <LCD_ReadRectEx+0x1d8>
 8011acc:	4661      	mov	r1, ip
 8011ace:	462a      	mov	r2, r5
 8011ad0:	f8cd c00c 	str.w	ip, [sp, #12]
 8011ad4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011ad6:	47c0      	blx	r8
 8011ad8:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8011adc:	f1c2 0104 	rsb	r1, r2, #4
 8011ae0:	fa00 f101 	lsl.w	r1, r0, r1
 8011ae4:	200f      	movs	r0, #15
 8011ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8011aea:	7820      	ldrb	r0, [r4, #0]
 8011aec:	4002      	ands	r2, r0
 8011aee:	4311      	orrs	r1, r2
 8011af0:	7021      	strb	r1, [r4, #0]
 8011af2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011af6:	445c      	add	r4, fp
 8011af8:	f10c 0c01 	add.w	ip, ip, #1
 8011afc:	f08b 0b01 	eor.w	fp, fp, #1
 8011b00:	e7e2      	b.n	8011ac8 <LCD_ReadRectEx+0x134>
 8011b02:	4273      	negs	r3, r6
 8011b04:	1ba2      	subs	r2, r4, r6
 8011b06:	45bc      	cmp	ip, r7
 8011b08:	9305      	str	r3, [sp, #20]
 8011b0a:	4462      	add	r2, ip
 8011b0c:	dc0e      	bgt.n	8011b2c <LCD_ReadRectEx+0x198>
 8011b0e:	4661      	mov	r1, ip
 8011b10:	462a      	mov	r2, r5
 8011b12:	f8cd c00c 	str.w	ip, [sp, #12]
 8011b16:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011b18:	47c0      	blx	r8
 8011b1a:	9a05      	ldr	r2, [sp, #20]
 8011b1c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011b20:	4422      	add	r2, r4
 8011b22:	f802 000c 	strb.w	r0, [r2, ip]
 8011b26:	f10c 0c01 	add.w	ip, ip, #1
 8011b2a:	e7ea      	b.n	8011b02 <LCD_ReadRectEx+0x16e>
 8011b2c:	4614      	mov	r4, r2
 8011b2e:	e01d      	b.n	8011b6c <LCD_ReadRectEx+0x1d8>
 8011b30:	45bc      	cmp	ip, r7
 8011b32:	dc1b      	bgt.n	8011b6c <LCD_ReadRectEx+0x1d8>
 8011b34:	4661      	mov	r1, ip
 8011b36:	f8cd c00c 	str.w	ip, [sp, #12]
 8011b3a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011b3c:	462a      	mov	r2, r5
 8011b3e:	47c0      	blx	r8
 8011b40:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011b44:	f824 0b02 	strh.w	r0, [r4], #2
 8011b48:	f10c 0c01 	add.w	ip, ip, #1
 8011b4c:	e7f0      	b.n	8011b30 <LCD_ReadRectEx+0x19c>
 8011b4e:	45bc      	cmp	ip, r7
 8011b50:	dc0c      	bgt.n	8011b6c <LCD_ReadRectEx+0x1d8>
 8011b52:	4661      	mov	r1, ip
 8011b54:	f8cd c00c 	str.w	ip, [sp, #12]
 8011b58:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011b5a:	462a      	mov	r2, r5
 8011b5c:	47c0      	blx	r8
 8011b5e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011b62:	f844 0b04 	str.w	r0, [r4], #4
 8011b66:	f10c 0c01 	add.w	ip, ip, #1
 8011b6a:	e7f0      	b.n	8011b4e <LCD_ReadRectEx+0x1ba>
 8011b6c:	3501      	adds	r5, #1
 8011b6e:	e741      	b.n	80119f4 <LCD_ReadRectEx+0x60>
 8011b70:	b007      	add	sp, #28
 8011b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b76:	bf00      	nop
 8011b78:	200002c4 	.word	0x200002c4

08011b7c <GUI_ReadRectEx>:
 8011b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b7e:	4d16      	ldr	r5, [pc, #88]	; (8011bd8 <GUI_ReadRectEx+0x5c>)
 8011b80:	9e05      	ldr	r6, [sp, #20]
 8011b82:	682d      	ldr	r5, [r5, #0]
 8011b84:	9c06      	ldr	r4, [sp, #24]
 8011b86:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 8011b8a:	42b8      	cmp	r0, r7
 8011b8c:	bfb8      	it	lt
 8011b8e:	4638      	movlt	r0, r7
 8011b90:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 8011b94:	42ba      	cmp	r2, r7
 8011b96:	bfa8      	it	ge
 8011b98:	463a      	movge	r2, r7
 8011b9a:	4282      	cmp	r2, r0
 8011b9c:	db1b      	blt.n	8011bd6 <GUI_ReadRectEx+0x5a>
 8011b9e:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 8011ba2:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 8011ba6:	42b9      	cmp	r1, r7
 8011ba8:	bfb8      	it	lt
 8011baa:	4639      	movlt	r1, r7
 8011bac:	42ab      	cmp	r3, r5
 8011bae:	bfa8      	it	ge
 8011bb0:	462b      	movge	r3, r5
 8011bb2:	428b      	cmp	r3, r1
 8011bb4:	db0f      	blt.n	8011bd6 <GUI_ReadRectEx+0x5a>
 8011bb6:	68e5      	ldr	r5, [r4, #12]
 8011bb8:	682d      	ldr	r5, [r5, #0]
 8011bba:	f035 0704 	bics.w	r7, r5, #4
 8011bbe:	d105      	bne.n	8011bcc <GUI_ReadRectEx+0x50>
 8011bc0:	9605      	str	r6, [sp, #20]
 8011bc2:	9406      	str	r4, [sp, #24]
 8011bc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011bc8:	f7ff bee4 	b.w	8011994 <LCD_ReadRectEx>
 8011bcc:	6825      	ldr	r5, [r4, #0]
 8011bce:	2d00      	cmp	r5, #0
 8011bd0:	d0f6      	beq.n	8011bc0 <GUI_ReadRectEx+0x44>
 8011bd2:	462c      	mov	r4, r5
 8011bd4:	e7ef      	b.n	8011bb6 <GUI_ReadRectEx+0x3a>
 8011bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bd8:	200002c4 	.word	0x200002c4

08011bdc <_OnExit>:
 8011bdc:	b510      	push	{r4, lr}
 8011bde:	4c03      	ldr	r4, [pc, #12]	; (8011bec <_OnExit+0x10>)
 8011be0:	6820      	ldr	r0, [r4, #0]
 8011be2:	f7fc fbb5 	bl	800e350 <GUI_ALLOC_FreeFixedBlock>
 8011be6:	2300      	movs	r3, #0
 8011be8:	6023      	str	r3, [r4, #0]
 8011bea:	bd10      	pop	{r4, pc}
 8011bec:	20028950 	.word	0x20028950

08011bf0 <LCD_InitColors>:
 8011bf0:	b538      	push	{r3, r4, r5, lr}
 8011bf2:	4d09      	ldr	r5, [pc, #36]	; (8011c18 <LCD_InitColors+0x28>)
 8011bf4:	682c      	ldr	r4, [r5, #0]
 8011bf6:	b95c      	cbnz	r4, 8011c10 <LCD_InitColors+0x20>
 8011bf8:	4b08      	ldr	r3, [pc, #32]	; (8011c1c <LCD_InitColors+0x2c>)
 8011bfa:	6818      	ldr	r0, [r3, #0]
 8011bfc:	0080      	lsls	r0, r0, #2
 8011bfe:	f7fc fd17 	bl	800e630 <GUI_ALLOC_GetFixedBlock>
 8011c02:	6028      	str	r0, [r5, #0]
 8011c04:	b130      	cbz	r0, 8011c14 <LCD_InitColors+0x24>
 8011c06:	4806      	ldr	r0, [pc, #24]	; (8011c20 <LCD_InitColors+0x30>)
 8011c08:	4b06      	ldr	r3, [pc, #24]	; (8011c24 <LCD_InitColors+0x34>)
 8011c0a:	6003      	str	r3, [r0, #0]
 8011c0c:	f7fc f814 	bl	800dc38 <GUI__RegisterExit>
 8011c10:	2000      	movs	r0, #0
 8011c12:	bd38      	pop	{r3, r4, r5, pc}
 8011c14:	2001      	movs	r0, #1
 8011c16:	bd38      	pop	{r3, r4, r5, pc}
 8011c18:	20028950 	.word	0x20028950
 8011c1c:	200003e0 	.word	0x200003e0
 8011c20:	200086d4 	.word	0x200086d4
 8011c24:	08011bdd 	.word	0x08011bdd

08011c28 <LCD_GetpPalConvTableUncached>:
 8011c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c2c:	b320      	cbz	r0, 8011c78 <LCD_GetpPalConvTableUncached+0x50>
 8011c2e:	6885      	ldr	r5, [r0, #8]
 8011c30:	b1dd      	cbz	r5, 8011c6a <LCD_GetpPalConvTableUncached+0x42>
 8011c32:	4e12      	ldr	r6, [pc, #72]	; (8011c7c <LCD_GetpPalConvTableUncached+0x54>)
 8011c34:	6833      	ldr	r3, [r6, #0]
 8011c36:	b1db      	cbz	r3, 8011c70 <LCD_GetpPalConvTableUncached+0x48>
 8011c38:	6803      	ldr	r3, [r0, #0]
 8011c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c3e:	dc1a      	bgt.n	8011c76 <LCD_GetpPalConvTableUncached+0x4e>
 8011c40:	4a0f      	ldr	r2, [pc, #60]	; (8011c80 <LCD_GetpPalConvTableUncached+0x58>)
 8011c42:	6812      	ldr	r2, [r2, #0]
 8011c44:	2400      	movs	r4, #0
 8011c46:	429a      	cmp	r2, r3
 8011c48:	bfb4      	ite	lt
 8011c4a:	4690      	movlt	r8, r2
 8011c4c:	4698      	movge	r8, r3
 8011c4e:	4544      	cmp	r4, r8
 8011c50:	da08      	bge.n	8011c64 <LCD_GetpPalConvTableUncached+0x3c>
 8011c52:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8011c56:	6837      	ldr	r7, [r6, #0]
 8011c58:	f7fa f886 	bl	800bd68 <LCD_Color2Index>
 8011c5c:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8011c60:	3401      	adds	r4, #1
 8011c62:	e7f4      	b.n	8011c4e <LCD_GetpPalConvTableUncached+0x26>
 8011c64:	6830      	ldr	r0, [r6, #0]
 8011c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c6a:	4628      	mov	r0, r5
 8011c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c70:	4618      	mov	r0, r3
 8011c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c76:	2000      	movs	r0, #0
 8011c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c7c:	20028950 	.word	0x20028950
 8011c80:	200003e0 	.word	0x200003e0

08011c84 <LCD_GetpPalConvTableBM>:
 8011c84:	f7ff bfd0 	b.w	8011c28 <LCD_GetpPalConvTableUncached>

08011c88 <LCD_InitLUT>:
 8011c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c8c:	f001 fa40 	bl	8013110 <LCD_GetNumLayers>
 8011c90:	2400      	movs	r4, #0
 8011c92:	4680      	mov	r8, r0
 8011c94:	4544      	cmp	r4, r8
 8011c96:	da2c      	bge.n	8011cf2 <LCD_InitLUT+0x6a>
 8011c98:	4620      	mov	r0, r4
 8011c9a:	f7fb fe47 	bl	800d92c <GUI_DEVICE__GetpDriver>
 8011c9e:	b330      	cbz	r0, 8011cee <LCD_InitLUT+0x66>
 8011ca0:	4e15      	ldr	r6, [pc, #84]	; (8011cf8 <LCD_InitLUT+0x70>)
 8011ca2:	6833      	ldr	r3, [r6, #0]
 8011ca4:	4620      	mov	r0, r4
 8011ca6:	f893 9011 	ldrb.w	r9, [r3, #17]
 8011caa:	745c      	strb	r4, [r3, #17]
 8011cac:	f7f9 fca8 	bl	800b600 <LCD_GetBitsPerPixelEx>
 8011cb0:	2808      	cmp	r0, #8
 8011cb2:	dd03      	ble.n	8011cbc <LCD_InitLUT+0x34>
 8011cb4:	6833      	ldr	r3, [r6, #0]
 8011cb6:	f883 9011 	strb.w	r9, [r3, #17]
 8011cba:	e018      	b.n	8011cee <LCD_InitLUT+0x66>
 8011cbc:	4b0f      	ldr	r3, [pc, #60]	; (8011cfc <LCD_InitLUT+0x74>)
 8011cbe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011cc2:	691a      	ldr	r2, [r3, #16]
 8011cc4:	4b0e      	ldr	r3, [pc, #56]	; (8011d00 <LCD_InitLUT+0x78>)
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d0f4      	beq.n	8011cb4 <LCD_InitLUT+0x2c>
 8011cca:	4620      	mov	r0, r4
 8011ccc:	f7f9 fc9b 	bl	800b606 <LCD_GetNumColorsEx>
 8011cd0:	2500      	movs	r5, #0
 8011cd2:	4682      	mov	sl, r0
 8011cd4:	4555      	cmp	r5, sl
 8011cd6:	daed      	bge.n	8011cb4 <LCD_InitLUT+0x2c>
 8011cd8:	b2ef      	uxtb	r7, r5
 8011cda:	4638      	mov	r0, r7
 8011cdc:	f7fa f854 	bl	800bd88 <LCD_Index2Color>
 8011ce0:	4639      	mov	r1, r7
 8011ce2:	4602      	mov	r2, r0
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	f7f9 fc17 	bl	800b518 <LCD_SetLUTEntryEx>
 8011cea:	3501      	adds	r5, #1
 8011cec:	e7f2      	b.n	8011cd4 <LCD_InitLUT+0x4c>
 8011cee:	3401      	adds	r4, #1
 8011cf0:	e7d0      	b.n	8011c94 <LCD_InitLUT+0xc>
 8011cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cf6:	bf00      	nop
 8011cf8:	200002c4 	.word	0x200002c4
 8011cfc:	20028844 	.word	0x20028844
 8011d00:	08068c10 	.word	0x08068c10

08011d04 <LCD_AA_SetAndMask>:
 8011d04:	4b02      	ldr	r3, [pc, #8]	; (8011d10 <LCD_AA_SetAndMask+0xc>)
 8011d06:	681a      	ldr	r2, [r3, #0]
 8011d08:	6018      	str	r0, [r3, #0]
 8011d0a:	4610      	mov	r0, r2
 8011d0c:	4770      	bx	lr
 8011d0e:	bf00      	nop
 8011d10:	200003e4 	.word	0x200003e4

08011d14 <LCD_AA_MixColors16>:
 8011d14:	b510      	push	{r4, lr}
 8011d16:	0e0c      	lsrs	r4, r1, #24
 8011d18:	2cff      	cmp	r4, #255	; 0xff
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	4c09      	ldr	r4, [pc, #36]	; (8011d44 <LCD_AA_MixColors16+0x30>)
 8011d1e:	d108      	bne.n	8011d32 <LCD_AA_MixColors16+0x1e>
 8011d20:	f06f 0010 	mvn.w	r0, #16
 8011d24:	4350      	muls	r0, r2
 8011d26:	6821      	ldr	r1, [r4, #0]
 8011d28:	30ff      	adds	r0, #255	; 0xff
 8011d2a:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8011d2e:	4008      	ands	r0, r1
 8011d30:	bd10      	pop	{r4, pc}
 8011d32:	4b05      	ldr	r3, [pc, #20]	; (8011d48 <LCD_AA_MixColors16+0x34>)
 8011d34:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	b2d2      	uxtb	r2, r2
 8011d3c:	4798      	blx	r3
 8011d3e:	6823      	ldr	r3, [r4, #0]
 8011d40:	4018      	ands	r0, r3
 8011d42:	bd10      	pop	{r4, pc}
 8011d44:	200003e4 	.word	0x200003e4
 8011d48:	200002a4 	.word	0x200002a4

08011d4c <LCD_SetPixelAA4_Trans>:
 8011d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d50:	4605      	mov	r5, r0
 8011d52:	460c      	mov	r4, r1
 8011d54:	4616      	mov	r6, r2
 8011d56:	2a00      	cmp	r2, #0
 8011d58:	d040      	beq.n	8011ddc <LCD_SetPixelAA4_Trans+0x90>
 8011d5a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8011de4 <LCD_SetPixelAA4_Trans+0x98>
 8011d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8011d62:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8011d66:	4291      	cmp	r1, r2
 8011d68:	db38      	blt.n	8011ddc <LCD_SetPixelAA4_Trans+0x90>
 8011d6a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8011d6e:	4291      	cmp	r1, r2
 8011d70:	dc34      	bgt.n	8011ddc <LCD_SetPixelAA4_Trans+0x90>
 8011d72:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8011d76:	4290      	cmp	r0, r2
 8011d78:	db30      	blt.n	8011ddc <LCD_SetPixelAA4_Trans+0x90>
 8011d7a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8011d7e:	4290      	cmp	r0, r2
 8011d80:	dc2c      	bgt.n	8011ddc <LCD_SetPixelAA4_Trans+0x90>
 8011d82:	2e0e      	cmp	r6, #14
 8011d84:	4f16      	ldr	r7, [pc, #88]	; (8011de0 <LCD_SetPixelAA4_Trans+0x94>)
 8011d86:	f8d3 e03c 	ldr.w	lr, [r3, #60]	; 0x3c
 8011d8a:	d90b      	bls.n	8011da4 <LCD_SetPixelAA4_Trans+0x58>
 8011d8c:	7c5b      	ldrb	r3, [r3, #17]
 8011d8e:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8011d92:	68c3      	ldr	r3, [r0, #12]
 8011d94:	4629      	mov	r1, r5
 8011d96:	699e      	ldr	r6, [r3, #24]
 8011d98:	f8de 3000 	ldr.w	r3, [lr]
 8011d9c:	4622      	mov	r2, r4
 8011d9e:	47b0      	blx	r6
 8011da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011da4:	f8de 0000 	ldr.w	r0, [lr]
 8011da8:	f7f9 ffee 	bl	800bd88 <LCD_Index2Color>
 8011dac:	4621      	mov	r1, r4
 8011dae:	4681      	mov	r9, r0
 8011db0:	4628      	mov	r0, r5
 8011db2:	f001 f978 	bl	80130a6 <LCD_GetPixelColor>
 8011db6:	4632      	mov	r2, r6
 8011db8:	4601      	mov	r1, r0
 8011dba:	4648      	mov	r0, r9
 8011dbc:	f7ff ffaa 	bl	8011d14 <LCD_AA_MixColors16>
 8011dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8011dc4:	7c5b      	ldrb	r3, [r3, #17]
 8011dc6:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
 8011dca:	68f3      	ldr	r3, [r6, #12]
 8011dcc:	699f      	ldr	r7, [r3, #24]
 8011dce:	f7f9 ffcb 	bl	800bd68 <LCD_Color2Index>
 8011dd2:	4629      	mov	r1, r5
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	4622      	mov	r2, r4
 8011dd8:	4630      	mov	r0, r6
 8011dda:	47b8      	blx	r7
 8011ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011de0:	20028844 	.word	0x20028844
 8011de4:	200002c4 	.word	0x200002c4

08011de8 <GUI__strcmp>:
 8011de8:	b510      	push	{r4, lr}
 8011dea:	4b09      	ldr	r3, [pc, #36]	; (8011e10 <GUI__strcmp+0x28>)
 8011dec:	2800      	cmp	r0, #0
 8011dee:	bf08      	it	eq
 8011df0:	4618      	moveq	r0, r3
 8011df2:	2900      	cmp	r1, #0
 8011df4:	bf08      	it	eq
 8011df6:	4619      	moveq	r1, r3
 8011df8:	2300      	movs	r3, #0
 8011dfa:	5cc4      	ldrb	r4, [r0, r3]
 8011dfc:	5cca      	ldrb	r2, [r1, r3]
 8011dfe:	42a2      	cmp	r2, r4
 8011e00:	d104      	bne.n	8011e0c <GUI__strcmp+0x24>
 8011e02:	3301      	adds	r3, #1
 8011e04:	2a00      	cmp	r2, #0
 8011e06:	d1f8      	bne.n	8011dfa <GUI__strcmp+0x12>
 8011e08:	4610      	mov	r0, r2
 8011e0a:	bd10      	pop	{r4, pc}
 8011e0c:	2001      	movs	r0, #1
 8011e0e:	bd10      	pop	{r4, pc}
 8011e10:	08064a27 	.word	0x08064a27

08011e14 <GUI__strcmp_hp>:
 8011e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e16:	460d      	mov	r5, r1
 8011e18:	b160      	cbz	r0, 8011e34 <GUI__strcmp_hp+0x20>
 8011e1a:	f7fc faad 	bl	800e378 <GUI_ALLOC_LockH>
 8011e1e:	ac02      	add	r4, sp, #8
 8011e20:	4629      	mov	r1, r5
 8011e22:	f844 0d04 	str.w	r0, [r4, #-4]!
 8011e26:	f7ff ffdf 	bl	8011de8 <GUI__strcmp>
 8011e2a:	4605      	mov	r5, r0
 8011e2c:	4620      	mov	r0, r4
 8011e2e:	f7fc fab1 	bl	800e394 <GUI_ALLOC_UnlockH>
 8011e32:	e000      	b.n	8011e36 <GUI__strcmp_hp+0x22>
 8011e34:	2501      	movs	r5, #1
 8011e36:	4628      	mov	r0, r5
 8011e38:	b003      	add	sp, #12
 8011e3a:	bd30      	pop	{r4, r5, pc}

08011e3c <GUI__sqrt32>:
 8011e3c:	b510      	push	{r4, lr}
 8011e3e:	2110      	movs	r1, #16
 8011e40:	2300      	movs	r3, #0
 8011e42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011e46:	189c      	adds	r4, r3, r2
 8011e48:	4284      	cmp	r4, r0
 8011e4a:	bf9c      	itt	ls
 8011e4c:	18a3      	addls	r3, r4, r2
 8011e4e:	ebc4 0000 	rsbls	r0, r4, r0
 8011e52:	3901      	subs	r1, #1
 8011e54:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8011e58:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8011e5c:	d1f3      	bne.n	8011e46 <GUI__sqrt32+0xa>
 8011e5e:	4618      	mov	r0, r3
 8011e60:	bd10      	pop	{r4, pc}

08011e62 <GUI__memset16>:
 8011e62:	b570      	push	{r4, r5, r6, lr}
 8011e64:	0784      	lsls	r4, r0, #30
 8011e66:	d502      	bpl.n	8011e6e <GUI__memset16+0xc>
 8011e68:	8001      	strh	r1, [r0, #0]
 8011e6a:	3a01      	subs	r2, #1
 8011e6c:	3002      	adds	r0, #2
 8011e6e:	0855      	lsrs	r5, r2, #1
 8011e70:	462b      	mov	r3, r5
 8011e72:	b305      	cbz	r5, 8011eb6 <GUI__memset16+0x54>
 8011e74:	2d03      	cmp	r5, #3
 8011e76:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 8011e7a:	dc02      	bgt.n	8011e82 <GUI__memset16+0x20>
 8011e7c:	4606      	mov	r6, r0
 8011e7e:	461d      	mov	r5, r3
 8011e80:	e012      	b.n	8011ea8 <GUI__memset16+0x46>
 8011e82:	4603      	mov	r3, r0
 8011e84:	462e      	mov	r6, r5
 8011e86:	3e04      	subs	r6, #4
 8011e88:	2e03      	cmp	r6, #3
 8011e8a:	601c      	str	r4, [r3, #0]
 8011e8c:	605c      	str	r4, [r3, #4]
 8011e8e:	609c      	str	r4, [r3, #8]
 8011e90:	60dc      	str	r4, [r3, #12]
 8011e92:	f103 0310 	add.w	r3, r3, #16
 8011e96:	dcf6      	bgt.n	8011e86 <GUI__memset16+0x24>
 8011e98:	3d04      	subs	r5, #4
 8011e9a:	08ab      	lsrs	r3, r5, #2
 8011e9c:	1c5e      	adds	r6, r3, #1
 8011e9e:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8011ea2:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
 8011ea6:	e7e9      	b.n	8011e7c <GUI__memset16+0x1a>
 8011ea8:	b11d      	cbz	r5, 8011eb2 <GUI__memset16+0x50>
 8011eaa:	f846 4b04 	str.w	r4, [r6], #4
 8011eae:	3d01      	subs	r5, #1
 8011eb0:	e7fa      	b.n	8011ea8 <GUI__memset16+0x46>
 8011eb2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8011eb6:	07d3      	lsls	r3, r2, #31
 8011eb8:	bf48      	it	mi
 8011eba:	8001      	strhmi	r1, [r0, #0]
 8011ebc:	bd70      	pop	{r4, r5, r6, pc}

08011ebe <GUI__HandleEOLine>:
 8011ebe:	6803      	ldr	r3, [r0, #0]
 8011ec0:	781a      	ldrb	r2, [r3, #0]
 8011ec2:	b122      	cbz	r2, 8011ece <GUI__HandleEOLine+0x10>
 8011ec4:	2a0a      	cmp	r2, #10
 8011ec6:	d104      	bne.n	8011ed2 <GUI__HandleEOLine+0x14>
 8011ec8:	3301      	adds	r3, #1
 8011eca:	6003      	str	r3, [r0, #0]
 8011ecc:	e001      	b.n	8011ed2 <GUI__HandleEOLine+0x14>
 8011ece:	2001      	movs	r0, #1
 8011ed0:	4770      	bx	lr
 8011ed2:	2000      	movs	r0, #0
 8011ed4:	4770      	bx	lr

08011ed6 <GUI__ExpandPixelIndicesEx>:
 8011ed6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011eda:	1e0c      	subs	r4, r1, #0
 8011edc:	4605      	mov	r5, r0
 8011ede:	f340 80b3 	ble.w	8012048 <GUI__ExpandPixelIndicesEx+0x172>
 8011ee2:	2a08      	cmp	r2, #8
 8011ee4:	685f      	ldr	r7, [r3, #4]
 8011ee6:	dd04      	ble.n	8011ef2 <GUI__ExpandPixelIndicesEx+0x1c>
 8011ee8:	2a10      	cmp	r2, #16
 8011eea:	f340 8098 	ble.w	801201e <GUI__ExpandPixelIndicesEx+0x148>
 8011eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ef2:	3a01      	subs	r2, #1
 8011ef4:	2a07      	cmp	r2, #7
 8011ef6:	f200 80a7 	bhi.w	8012048 <GUI__ExpandPixelIndicesEx+0x172>
 8011efa:	e8df f002 	tbb	[pc, r2]
 8011efe:	2d04      	.short	0x2d04
 8011f00:	a5a558a5 	.word	0xa5a558a5
 8011f04:	83a5      	.short	0x83a5
 8011f06:	1e66      	subs	r6, r4, #1
 8011f08:	10f2      	asrs	r2, r6, #3
 8011f0a:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8011f0e:	3b01      	subs	r3, #1
 8011f10:	eb05 0802 	add.w	r8, r5, r2
 8011f14:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8011f18:	f006 0607 	and.w	r6, r6, #7
 8011f1c:	f815 a002 	ldrb.w	sl, [r5, r2]
 8011f20:	2580      	movs	r5, #128	; 0x80
 8011f22:	4135      	asrs	r5, r6
 8011f24:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011f28:	b2ed      	uxtb	r5, r5
 8011f2a:	f1c6 0307 	rsb	r3, r6, #7
 8011f2e:	ea0a 0005 	and.w	r0, sl, r5
 8011f32:	4118      	asrs	r0, r3
 8011f34:	47b8      	blx	r7
 8011f36:	f849 0904 	str.w	r0, [r9], #-4
 8011f3a:	b936      	cbnz	r6, 8011f4a <GUI__ExpandPixelIndicesEx+0x74>
 8011f3c:	f898 a000 	ldrb.w	sl, [r8]
 8011f40:	2501      	movs	r5, #1
 8011f42:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011f46:	2607      	movs	r6, #7
 8011f48:	e002      	b.n	8011f50 <GUI__ExpandPixelIndicesEx+0x7a>
 8011f4a:	006d      	lsls	r5, r5, #1
 8011f4c:	3e01      	subs	r6, #1
 8011f4e:	b2ed      	uxtb	r5, r5
 8011f50:	3c01      	subs	r4, #1
 8011f52:	d1ea      	bne.n	8011f2a <GUI__ExpandPixelIndicesEx+0x54>
 8011f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f58:	1e66      	subs	r6, r4, #1
 8011f5a:	10b2      	asrs	r2, r6, #2
 8011f5c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8011f60:	3b01      	subs	r3, #1
 8011f62:	f006 0603 	and.w	r6, r6, #3
 8011f66:	eb05 0802 	add.w	r8, r5, r2
 8011f6a:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8011f6e:	f815 a002 	ldrb.w	sl, [r5, r2]
 8011f72:	0073      	lsls	r3, r6, #1
 8011f74:	25c0      	movs	r5, #192	; 0xc0
 8011f76:	411d      	asrs	r5, r3
 8011f78:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011f7c:	b2ed      	uxtb	r5, r5
 8011f7e:	0073      	lsls	r3, r6, #1
 8011f80:	f1c3 0306 	rsb	r3, r3, #6
 8011f84:	ea0a 0005 	and.w	r0, sl, r5
 8011f88:	4118      	asrs	r0, r3
 8011f8a:	47b8      	blx	r7
 8011f8c:	f849 0904 	str.w	r0, [r9], #-4
 8011f90:	b936      	cbnz	r6, 8011fa0 <GUI__ExpandPixelIndicesEx+0xca>
 8011f92:	2503      	movs	r5, #3
 8011f94:	f898 a000 	ldrb.w	sl, [r8]
 8011f98:	462e      	mov	r6, r5
 8011f9a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011f9e:	e002      	b.n	8011fa6 <GUI__ExpandPixelIndicesEx+0xd0>
 8011fa0:	00ad      	lsls	r5, r5, #2
 8011fa2:	3e01      	subs	r6, #1
 8011fa4:	b2ed      	uxtb	r5, r5
 8011fa6:	3c01      	subs	r4, #1
 8011fa8:	d1e9      	bne.n	8011f7e <GUI__ExpandPixelIndicesEx+0xa8>
 8011faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fae:	1e66      	subs	r6, r4, #1
 8011fb0:	1072      	asrs	r2, r6, #1
 8011fb2:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8011fb6:	3b01      	subs	r3, #1
 8011fb8:	f006 0601 	and.w	r6, r6, #1
 8011fbc:	eb05 0802 	add.w	r8, r5, r2
 8011fc0:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8011fc4:	f815 a002 	ldrb.w	sl, [r5, r2]
 8011fc8:	00b3      	lsls	r3, r6, #2
 8011fca:	25f0      	movs	r5, #240	; 0xf0
 8011fcc:	411d      	asrs	r5, r3
 8011fce:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011fd2:	b2ed      	uxtb	r5, r5
 8011fd4:	00b3      	lsls	r3, r6, #2
 8011fd6:	f1c3 0304 	rsb	r3, r3, #4
 8011fda:	ea0a 0005 	and.w	r0, sl, r5
 8011fde:	4118      	asrs	r0, r3
 8011fe0:	47b8      	blx	r7
 8011fe2:	f849 0904 	str.w	r0, [r9], #-4
 8011fe6:	b936      	cbnz	r6, 8011ff6 <GUI__ExpandPixelIndicesEx+0x120>
 8011fe8:	f898 a000 	ldrb.w	sl, [r8]
 8011fec:	250f      	movs	r5, #15
 8011fee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011ff2:	2601      	movs	r6, #1
 8011ff4:	e002      	b.n	8011ffc <GUI__ExpandPixelIndicesEx+0x126>
 8011ff6:	012d      	lsls	r5, r5, #4
 8011ff8:	b2ed      	uxtb	r5, r5
 8011ffa:	2600      	movs	r6, #0
 8011ffc:	3c01      	subs	r4, #1
 8011ffe:	d1e9      	bne.n	8011fd4 <GUI__ExpandPixelIndicesEx+0xfe>
 8012000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012004:	192e      	adds	r6, r5, r4
 8012006:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801200a:	1b34      	subs	r4, r6, r4
 801200c:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 8012010:	47b8      	blx	r7
 8012012:	42a6      	cmp	r6, r4
 8012014:	f845 0d04 	str.w	r0, [r5, #-4]!
 8012018:	d1f8      	bne.n	801200c <GUI__ExpandPixelIndicesEx+0x136>
 801201a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801201e:	695e      	ldr	r6, [r3, #20]
 8012020:	b12e      	cbz	r6, 801202e <GUI__ExpandPixelIndicesEx+0x158>
 8012022:	4629      	mov	r1, r5
 8012024:	4622      	mov	r2, r4
 8012026:	2302      	movs	r3, #2
 8012028:	47b0      	blx	r6
 801202a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801202e:	0064      	lsls	r4, r4, #1
 8012030:	4425      	add	r5, r4
 8012032:	192e      	adds	r6, r5, r4
 8012034:	1b2c      	subs	r4, r5, r4
 8012036:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 801203a:	47b8      	blx	r7
 801203c:	42a5      	cmp	r5, r4
 801203e:	f846 0d04 	str.w	r0, [r6, #-4]!
 8012042:	d1f8      	bne.n	8012036 <GUI__ExpandPixelIndicesEx+0x160>
 8012044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801204c <GUI__CompactPixelIndices>:
 801204c:	2a08      	cmp	r2, #8
 801204e:	b510      	push	{r4, lr}
 8012050:	dd0e      	ble.n	8012070 <GUI__CompactPixelIndices+0x24>
 8012052:	2a10      	cmp	r2, #16
 8012054:	dc0a      	bgt.n	801206c <GUI__CompactPixelIndices+0x20>
 8012056:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801205a:	4603      	mov	r3, r0
 801205c:	f850 2b04 	ldr.w	r2, [r0], #4
 8012060:	f823 2b02 	strh.w	r2, [r3], #2
 8012064:	428b      	cmp	r3, r1
 8012066:	d1f9      	bne.n	801205c <GUI__CompactPixelIndices+0x10>
 8012068:	2001      	movs	r0, #1
 801206a:	bd10      	pop	{r4, pc}
 801206c:	2000      	movs	r0, #0
 801206e:	bd10      	pop	{r4, pc}
 8012070:	2a02      	cmp	r2, #2
 8012072:	d06d      	beq.n	8012150 <GUI__CompactPixelIndices+0x104>
 8012074:	2a04      	cmp	r2, #4
 8012076:	d054      	beq.n	8012122 <GUI__CompactPixelIndices+0xd6>
 8012078:	2a01      	cmp	r2, #1
 801207a:	f040 8095 	bne.w	80121a8 <GUI__CompactPixelIndices+0x15c>
 801207e:	4604      	mov	r4, r0
 8012080:	6803      	ldr	r3, [r0, #0]
 8012082:	2901      	cmp	r1, #1
 8012084:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8012088:	b2db      	uxtb	r3, r3
 801208a:	d047      	beq.n	801211c <GUI__CompactPixelIndices+0xd0>
 801208c:	6842      	ldr	r2, [r0, #4]
 801208e:	2902      	cmp	r1, #2
 8012090:	f002 0201 	and.w	r2, r2, #1
 8012094:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8012098:	d102      	bne.n	80120a0 <GUI__CompactPixelIndices+0x54>
 801209a:	f100 0208 	add.w	r2, r0, #8
 801209e:	e03e      	b.n	801211e <GUI__CompactPixelIndices+0xd2>
 80120a0:	6882      	ldr	r2, [r0, #8]
 80120a2:	2903      	cmp	r1, #3
 80120a4:	f002 0201 	and.w	r2, r2, #1
 80120a8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80120ac:	d102      	bne.n	80120b4 <GUI__CompactPixelIndices+0x68>
 80120ae:	f100 020c 	add.w	r2, r0, #12
 80120b2:	e034      	b.n	801211e <GUI__CompactPixelIndices+0xd2>
 80120b4:	68c2      	ldr	r2, [r0, #12]
 80120b6:	2904      	cmp	r1, #4
 80120b8:	f002 0201 	and.w	r2, r2, #1
 80120bc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80120c0:	d102      	bne.n	80120c8 <GUI__CompactPixelIndices+0x7c>
 80120c2:	f100 0210 	add.w	r2, r0, #16
 80120c6:	e02a      	b.n	801211e <GUI__CompactPixelIndices+0xd2>
 80120c8:	6902      	ldr	r2, [r0, #16]
 80120ca:	2905      	cmp	r1, #5
 80120cc:	f002 0201 	and.w	r2, r2, #1
 80120d0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80120d4:	d102      	bne.n	80120dc <GUI__CompactPixelIndices+0x90>
 80120d6:	f100 0214 	add.w	r2, r0, #20
 80120da:	e020      	b.n	801211e <GUI__CompactPixelIndices+0xd2>
 80120dc:	6942      	ldr	r2, [r0, #20]
 80120de:	2906      	cmp	r1, #6
 80120e0:	f002 0201 	and.w	r2, r2, #1
 80120e4:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80120e8:	d102      	bne.n	80120f0 <GUI__CompactPixelIndices+0xa4>
 80120ea:	f100 0218 	add.w	r2, r0, #24
 80120ee:	e016      	b.n	801211e <GUI__CompactPixelIndices+0xd2>
 80120f0:	6982      	ldr	r2, [r0, #24]
 80120f2:	3907      	subs	r1, #7
 80120f4:	f002 0201 	and.w	r2, r2, #1
 80120f8:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80120fc:	d102      	bne.n	8012104 <GUI__CompactPixelIndices+0xb8>
 80120fe:	f100 021c 	add.w	r2, r0, #28
 8012102:	e005      	b.n	8012110 <GUI__CompactPixelIndices+0xc4>
 8012104:	f100 0220 	add.w	r2, r0, #32
 8012108:	69c0      	ldr	r0, [r0, #28]
 801210a:	f000 0001 	and.w	r0, r0, #1
 801210e:	4303      	orrs	r3, r0
 8012110:	f804 3b01 	strb.w	r3, [r4], #1
 8012114:	2900      	cmp	r1, #0
 8012116:	d0a7      	beq.n	8012068 <GUI__CompactPixelIndices+0x1c>
 8012118:	4610      	mov	r0, r2
 801211a:	e7b1      	b.n	8012080 <GUI__CompactPixelIndices+0x34>
 801211c:	1d02      	adds	r2, r0, #4
 801211e:	2100      	movs	r1, #0
 8012120:	e7f6      	b.n	8012110 <GUI__CompactPixelIndices+0xc4>
 8012122:	4602      	mov	r2, r0
 8012124:	6803      	ldr	r3, [r0, #0]
 8012126:	2901      	cmp	r1, #1
 8012128:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801212c:	b2db      	uxtb	r3, r3
 801212e:	d102      	bne.n	8012136 <GUI__CompactPixelIndices+0xea>
 8012130:	1d04      	adds	r4, r0, #4
 8012132:	2100      	movs	r1, #0
 8012134:	e006      	b.n	8012144 <GUI__CompactPixelIndices+0xf8>
 8012136:	f100 0408 	add.w	r4, r0, #8
 801213a:	6840      	ldr	r0, [r0, #4]
 801213c:	f000 000f 	and.w	r0, r0, #15
 8012140:	4303      	orrs	r3, r0
 8012142:	3902      	subs	r1, #2
 8012144:	f802 3b01 	strb.w	r3, [r2], #1
 8012148:	2900      	cmp	r1, #0
 801214a:	d08d      	beq.n	8012068 <GUI__CompactPixelIndices+0x1c>
 801214c:	4620      	mov	r0, r4
 801214e:	e7e9      	b.n	8012124 <GUI__CompactPixelIndices+0xd8>
 8012150:	4604      	mov	r4, r0
 8012152:	6803      	ldr	r3, [r0, #0]
 8012154:	2901      	cmp	r1, #1
 8012156:	ea4f 1383 	mov.w	r3, r3, lsl #6
 801215a:	b2db      	uxtb	r3, r3
 801215c:	d021      	beq.n	80121a2 <GUI__CompactPixelIndices+0x156>
 801215e:	6842      	ldr	r2, [r0, #4]
 8012160:	2902      	cmp	r1, #2
 8012162:	f002 0203 	and.w	r2, r2, #3
 8012166:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 801216a:	d102      	bne.n	8012172 <GUI__CompactPixelIndices+0x126>
 801216c:	f100 0208 	add.w	r2, r0, #8
 8012170:	e018      	b.n	80121a4 <GUI__CompactPixelIndices+0x158>
 8012172:	6882      	ldr	r2, [r0, #8]
 8012174:	2903      	cmp	r1, #3
 8012176:	f002 0203 	and.w	r2, r2, #3
 801217a:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 801217e:	d102      	bne.n	8012186 <GUI__CompactPixelIndices+0x13a>
 8012180:	f100 020c 	add.w	r2, r0, #12
 8012184:	e00e      	b.n	80121a4 <GUI__CompactPixelIndices+0x158>
 8012186:	f100 0210 	add.w	r2, r0, #16
 801218a:	68c0      	ldr	r0, [r0, #12]
 801218c:	f000 0003 	and.w	r0, r0, #3
 8012190:	4303      	orrs	r3, r0
 8012192:	3904      	subs	r1, #4
 8012194:	f804 3b01 	strb.w	r3, [r4], #1
 8012198:	2900      	cmp	r1, #0
 801219a:	f43f af65 	beq.w	8012068 <GUI__CompactPixelIndices+0x1c>
 801219e:	4610      	mov	r0, r2
 80121a0:	e7d7      	b.n	8012152 <GUI__CompactPixelIndices+0x106>
 80121a2:	1d02      	adds	r2, r0, #4
 80121a4:	2100      	movs	r1, #0
 80121a6:	e7f5      	b.n	8012194 <GUI__CompactPixelIndices+0x148>
 80121a8:	2300      	movs	r3, #0
 80121aa:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80121ae:	54c2      	strb	r2, [r0, r3]
 80121b0:	3301      	adds	r3, #1
 80121b2:	428b      	cmp	r3, r1
 80121b4:	d1f9      	bne.n	80121aa <GUI__CompactPixelIndices+0x15e>
 80121b6:	e757      	b.n	8012068 <GUI__CompactPixelIndices+0x1c>

080121b8 <GUI__ConvertColor2Index>:
 80121b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80121c0:	681e      	ldr	r6, [r3, #0]
 80121c2:	f1b8 0f00 	cmp.w	r8, #0
 80121c6:	bf08      	it	eq
 80121c8:	4680      	moveq	r8, r0
 80121ca:	2a08      	cmp	r2, #8
 80121cc:	4604      	mov	r4, r0
 80121ce:	460d      	mov	r5, r1
 80121d0:	dd05      	ble.n	80121de <GUI__ConvertColor2Index+0x26>
 80121d2:	2a10      	cmp	r2, #16
 80121d4:	f340 80b6 	ble.w	8012344 <GUI__ConvertColor2Index+0x18c>
 80121d8:	2000      	movs	r0, #0
 80121da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121de:	3a01      	subs	r2, #1
 80121e0:	2a07      	cmp	r2, #7
 80121e2:	f200 80a4 	bhi.w	801232e <GUI__ConvertColor2Index+0x176>
 80121e6:	e8df f002 	tbb	[pc, r2]
 80121ea:	6111      	.short	0x6111
 80121ec:	a2a287a2 	.word	0xa2a287a2
 80121f0:	92a2      	.short	0x92a2
 80121f2:	69e0      	ldr	r0, [r4, #28]
 80121f4:	47b0      	blx	r6
 80121f6:	4338      	orrs	r0, r7
 80121f8:	f104 0920 	add.w	r9, r4, #32
 80121fc:	b2c7      	uxtb	r7, r0
 80121fe:	3d08      	subs	r5, #8
 8012200:	f808 7b01 	strb.w	r7, [r8], #1
 8012204:	2d00      	cmp	r5, #0
 8012206:	f000 8092 	beq.w	801232e <GUI__ConvertColor2Index+0x176>
 801220a:	464c      	mov	r4, r9
 801220c:	6820      	ldr	r0, [r4, #0]
 801220e:	47b0      	blx	r6
 8012210:	2d01      	cmp	r5, #1
 8012212:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 8012216:	b2c7      	uxtb	r7, r0
 8012218:	f000 808c 	beq.w	8012334 <GUI__ConvertColor2Index+0x17c>
 801221c:	6860      	ldr	r0, [r4, #4]
 801221e:	47b0      	blx	r6
 8012220:	2d02      	cmp	r5, #2
 8012222:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 8012226:	b2c7      	uxtb	r7, r0
 8012228:	d102      	bne.n	8012230 <GUI__ConvertColor2Index+0x78>
 801222a:	f104 0908 	add.w	r9, r4, #8
 801222e:	e083      	b.n	8012338 <GUI__ConvertColor2Index+0x180>
 8012230:	68a0      	ldr	r0, [r4, #8]
 8012232:	47b0      	blx	r6
 8012234:	2d03      	cmp	r5, #3
 8012236:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 801223a:	b2c7      	uxtb	r7, r0
 801223c:	d102      	bne.n	8012244 <GUI__ConvertColor2Index+0x8c>
 801223e:	f104 090c 	add.w	r9, r4, #12
 8012242:	e079      	b.n	8012338 <GUI__ConvertColor2Index+0x180>
 8012244:	68e0      	ldr	r0, [r4, #12]
 8012246:	47b0      	blx	r6
 8012248:	2d04      	cmp	r5, #4
 801224a:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 801224e:	b2c7      	uxtb	r7, r0
 8012250:	d102      	bne.n	8012258 <GUI__ConvertColor2Index+0xa0>
 8012252:	f104 0910 	add.w	r9, r4, #16
 8012256:	e06f      	b.n	8012338 <GUI__ConvertColor2Index+0x180>
 8012258:	6920      	ldr	r0, [r4, #16]
 801225a:	47b0      	blx	r6
 801225c:	2d05      	cmp	r5, #5
 801225e:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 8012262:	b2c7      	uxtb	r7, r0
 8012264:	d102      	bne.n	801226c <GUI__ConvertColor2Index+0xb4>
 8012266:	f104 0914 	add.w	r9, r4, #20
 801226a:	e065      	b.n	8012338 <GUI__ConvertColor2Index+0x180>
 801226c:	6960      	ldr	r0, [r4, #20]
 801226e:	47b0      	blx	r6
 8012270:	2d06      	cmp	r5, #6
 8012272:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8012276:	b2c7      	uxtb	r7, r0
 8012278:	d102      	bne.n	8012280 <GUI__ConvertColor2Index+0xc8>
 801227a:	f104 0918 	add.w	r9, r4, #24
 801227e:	e05b      	b.n	8012338 <GUI__ConvertColor2Index+0x180>
 8012280:	69a0      	ldr	r0, [r4, #24]
 8012282:	47b0      	blx	r6
 8012284:	2d07      	cmp	r5, #7
 8012286:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 801228a:	b2c7      	uxtb	r7, r0
 801228c:	d1b1      	bne.n	80121f2 <GUI__ConvertColor2Index+0x3a>
 801228e:	f104 091c 	add.w	r9, r4, #28
 8012292:	e051      	b.n	8012338 <GUI__ConvertColor2Index+0x180>
 8012294:	68e0      	ldr	r0, [r4, #12]
 8012296:	47b0      	blx	r6
 8012298:	4338      	orrs	r0, r7
 801229a:	f104 0910 	add.w	r9, r4, #16
 801229e:	b2c7      	uxtb	r7, r0
 80122a0:	3d04      	subs	r5, #4
 80122a2:	f808 7b01 	strb.w	r7, [r8], #1
 80122a6:	2d00      	cmp	r5, #0
 80122a8:	d041      	beq.n	801232e <GUI__ConvertColor2Index+0x176>
 80122aa:	464c      	mov	r4, r9
 80122ac:	6820      	ldr	r0, [r4, #0]
 80122ae:	47b0      	blx	r6
 80122b0:	2d01      	cmp	r5, #1
 80122b2:	ea4f 1080 	mov.w	r0, r0, lsl #6
 80122b6:	b2c7      	uxtb	r7, r0
 80122b8:	d040      	beq.n	801233c <GUI__ConvertColor2Index+0x184>
 80122ba:	6860      	ldr	r0, [r4, #4]
 80122bc:	47b0      	blx	r6
 80122be:	2d02      	cmp	r5, #2
 80122c0:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 80122c4:	b2c7      	uxtb	r7, r0
 80122c6:	d102      	bne.n	80122ce <GUI__ConvertColor2Index+0x116>
 80122c8:	f104 0908 	add.w	r9, r4, #8
 80122cc:	e038      	b.n	8012340 <GUI__ConvertColor2Index+0x188>
 80122ce:	68a0      	ldr	r0, [r4, #8]
 80122d0:	47b0      	blx	r6
 80122d2:	2d03      	cmp	r5, #3
 80122d4:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 80122d8:	b2c7      	uxtb	r7, r0
 80122da:	d1db      	bne.n	8012294 <GUI__ConvertColor2Index+0xdc>
 80122dc:	f104 090c 	add.w	r9, r4, #12
 80122e0:	e02e      	b.n	8012340 <GUI__ConvertColor2Index+0x188>
 80122e2:	6860      	ldr	r0, [r4, #4]
 80122e4:	47b0      	blx	r6
 80122e6:	4338      	orrs	r0, r7
 80122e8:	f104 0908 	add.w	r9, r4, #8
 80122ec:	b2c7      	uxtb	r7, r0
 80122ee:	3d02      	subs	r5, #2
 80122f0:	f808 7b01 	strb.w	r7, [r8], #1
 80122f4:	b1dd      	cbz	r5, 801232e <GUI__ConvertColor2Index+0x176>
 80122f6:	464c      	mov	r4, r9
 80122f8:	6820      	ldr	r0, [r4, #0]
 80122fa:	47b0      	blx	r6
 80122fc:	2d01      	cmp	r5, #1
 80122fe:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8012302:	b2c7      	uxtb	r7, r0
 8012304:	d1ed      	bne.n	80122e2 <GUI__ConvertColor2Index+0x12a>
 8012306:	f104 0904 	add.w	r9, r4, #4
 801230a:	2500      	movs	r5, #0
 801230c:	e7f0      	b.n	80122f0 <GUI__ConvertColor2Index+0x138>
 801230e:	691f      	ldr	r7, [r3, #16]
 8012310:	b12f      	cbz	r7, 801231e <GUI__ConvertColor2Index+0x166>
 8012312:	4620      	mov	r0, r4
 8012314:	4641      	mov	r1, r8
 8012316:	462a      	mov	r2, r5
 8012318:	2301      	movs	r3, #1
 801231a:	47b8      	blx	r7
 801231c:	e007      	b.n	801232e <GUI__ConvertColor2Index+0x176>
 801231e:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 8012322:	47b0      	blx	r6
 8012324:	f808 0007 	strb.w	r0, [r8, r7]
 8012328:	3701      	adds	r7, #1
 801232a:	42bd      	cmp	r5, r7
 801232c:	d1f7      	bne.n	801231e <GUI__ConvertColor2Index+0x166>
 801232e:	2001      	movs	r0, #1
 8012330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012334:	f104 0904 	add.w	r9, r4, #4
 8012338:	2500      	movs	r5, #0
 801233a:	e761      	b.n	8012200 <GUI__ConvertColor2Index+0x48>
 801233c:	f104 0904 	add.w	r9, r4, #4
 8012340:	2500      	movs	r5, #0
 8012342:	e7ae      	b.n	80122a2 <GUI__ConvertColor2Index+0xea>
 8012344:	691f      	ldr	r7, [r3, #16]
 8012346:	b11f      	cbz	r7, 8012350 <GUI__ConvertColor2Index+0x198>
 8012348:	4641      	mov	r1, r8
 801234a:	462a      	mov	r2, r5
 801234c:	2302      	movs	r3, #2
 801234e:	e7e4      	b.n	801231a <GUI__ConvertColor2Index+0x162>
 8012350:	f854 0b04 	ldr.w	r0, [r4], #4
 8012354:	47b0      	blx	r6
 8012356:	3d01      	subs	r5, #1
 8012358:	f828 0b02 	strh.w	r0, [r8], #2
 801235c:	d1f8      	bne.n	8012350 <GUI__ConvertColor2Index+0x198>
 801235e:	e7e6      	b.n	801232e <GUI__ConvertColor2Index+0x176>

08012360 <GUI__CompactPixelIndicesEx>:
 8012360:	b513      	push	{r0, r1, r4, lr}
 8012362:	2400      	movs	r4, #0
 8012364:	9400      	str	r4, [sp, #0]
 8012366:	f7ff ff27 	bl	80121b8 <GUI__ConvertColor2Index>
 801236a:	b002      	add	sp, #8
 801236c:	bd10      	pop	{r4, pc}

0801236e <_GetCharCode>:
 801236e:	7800      	ldrb	r0, [r0, #0]
 8012370:	4770      	bx	lr

08012372 <_GetCharSize>:
 8012372:	2001      	movs	r0, #1
 8012374:	4770      	bx	lr

08012376 <_CalcSizeOfChar>:
 8012376:	2001      	movs	r0, #1
 8012378:	4770      	bx	lr

0801237a <_Encode>:
 801237a:	7001      	strb	r1, [r0, #0]
 801237c:	2001      	movs	r0, #1
 801237e:	4770      	bx	lr

08012380 <GUI_UC__GetCharCodeInc>:
 8012380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012382:	4e08      	ldr	r6, [pc, #32]	; (80123a4 <GUI_UC__GetCharCodeInc+0x24>)
 8012384:	6804      	ldr	r4, [r0, #0]
 8012386:	6833      	ldr	r3, [r6, #0]
 8012388:	4605      	mov	r5, r0
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	4620      	mov	r0, r4
 801238e:	4798      	blx	r3
 8012390:	6833      	ldr	r3, [r6, #0]
 8012392:	4607      	mov	r7, r0
 8012394:	685b      	ldr	r3, [r3, #4]
 8012396:	4620      	mov	r0, r4
 8012398:	4798      	blx	r3
 801239a:	4420      	add	r0, r4
 801239c:	6028      	str	r0, [r5, #0]
 801239e:	4638      	mov	r0, r7
 80123a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123a2:	bf00      	nop
 80123a4:	20028858 	.word	0x20028858

080123a8 <GUI_UC__NumChars2NumBytes>:
 80123a8:	b570      	push	{r4, r5, r6, lr}
 80123aa:	4604      	mov	r4, r0
 80123ac:	460e      	mov	r6, r1
 80123ae:	2500      	movs	r5, #0
 80123b0:	b146      	cbz	r6, 80123c4 <GUI_UC__NumChars2NumBytes+0x1c>
 80123b2:	4b05      	ldr	r3, [pc, #20]	; (80123c8 <GUI_UC__NumChars2NumBytes+0x20>)
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	4620      	mov	r0, r4
 80123b8:	685b      	ldr	r3, [r3, #4]
 80123ba:	4798      	blx	r3
 80123bc:	3e01      	subs	r6, #1
 80123be:	4404      	add	r4, r0
 80123c0:	4405      	add	r5, r0
 80123c2:	e7f5      	b.n	80123b0 <GUI_UC__NumChars2NumBytes+0x8>
 80123c4:	4628      	mov	r0, r5
 80123c6:	bd70      	pop	{r4, r5, r6, pc}
 80123c8:	20028858 	.word	0x20028858

080123cc <GUI_SetTextAlign>:
 80123cc:	b538      	push	{r3, r4, r5, lr}
 80123ce:	4605      	mov	r5, r0
 80123d0:	f7fa faee 	bl	800c9b0 <GUI_Lock>
 80123d4:	4b04      	ldr	r3, [pc, #16]	; (80123e8 <GUI_SetTextAlign+0x1c>)
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 80123dc:	859d      	strh	r5, [r3, #44]	; 0x2c
 80123de:	f7fa fadd 	bl	800c99c <GUI_Unlock>
 80123e2:	4620      	mov	r0, r4
 80123e4:	bd38      	pop	{r3, r4, r5, pc}
 80123e6:	bf00      	nop
 80123e8:	200002c4 	.word	0x200002c4

080123ec <GUI_SetOrg>:
 80123ec:	b538      	push	{r3, r4, r5, lr}
 80123ee:	4605      	mov	r5, r0
 80123f0:	460c      	mov	r4, r1
 80123f2:	f7fa fadd 	bl	800c9b0 <GUI_Lock>
 80123f6:	4b09      	ldr	r3, [pc, #36]	; (801241c <GUI_SetOrg+0x30>)
 80123f8:	801d      	strh	r5, [r3, #0]
 80123fa:	4b09      	ldr	r3, [pc, #36]	; (8012420 <GUI_SetOrg+0x34>)
 80123fc:	801c      	strh	r4, [r3, #0]
 80123fe:	4b09      	ldr	r3, [pc, #36]	; (8012424 <GUI_SetOrg+0x38>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	7c5a      	ldrb	r2, [r3, #17]
 8012404:	4b08      	ldr	r3, [pc, #32]	; (8012428 <GUI_SetOrg+0x3c>)
 8012406:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801240a:	68c3      	ldr	r3, [r0, #12]
 801240c:	4629      	mov	r1, r5
 801240e:	6a1b      	ldr	r3, [r3, #32]
 8012410:	4622      	mov	r2, r4
 8012412:	4798      	blx	r3
 8012414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012418:	f7fa bac0 	b.w	800c99c <GUI_Unlock>
 801241c:	2002882c 	.word	0x2002882c
 8012420:	20028854 	.word	0x20028854
 8012424:	200002c4 	.word	0x200002c4
 8012428:	20028844 	.word	0x20028844

0801242c <GUI_SetLineStyle>:
 801242c:	b538      	push	{r3, r4, r5, lr}
 801242e:	4605      	mov	r5, r0
 8012430:	f7fa fabe 	bl	800c9b0 <GUI_Lock>
 8012434:	4b03      	ldr	r3, [pc, #12]	; (8012444 <GUI_SetLineStyle+0x18>)
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	7e9c      	ldrb	r4, [r3, #26]
 801243a:	769d      	strb	r5, [r3, #26]
 801243c:	f7fa faae 	bl	800c99c <GUI_Unlock>
 8012440:	4620      	mov	r0, r4
 8012442:	bd38      	pop	{r3, r4, r5, pc}
 8012444:	200002c4 	.word	0x200002c4

08012448 <_CreateBuffer>:
 8012448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801244a:	6943      	ldr	r3, [r0, #20]
 801244c:	4605      	mov	r5, r0
 801244e:	8818      	ldrh	r0, [r3, #0]
 8012450:	300d      	adds	r0, #13
 8012452:	0080      	lsls	r0, r0, #2
 8012454:	460e      	mov	r6, r1
 8012456:	f7fc f9ef 	bl	800e838 <GUI_ALLOC_AllocNoInit>
 801245a:	4607      	mov	r7, r0
 801245c:	b908      	cbnz	r0, 8012462 <_CreateBuffer+0x1a>
 801245e:	2000      	movs	r0, #0
 8012460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012462:	f7fb ff89 	bl	800e378 <GUI_ALLOC_LockH>
 8012466:	682b      	ldr	r3, [r5, #0]
 8012468:	4604      	mov	r4, r0
 801246a:	6998      	ldr	r0, [r3, #24]
 801246c:	f7fb fa5e 	bl	800d92c <GUI_DEVICE__GetpDriver>
 8012470:	2800      	cmp	r0, #0
 8012472:	d0f4      	beq.n	801245e <_CreateBuffer+0x16>
 8012474:	68c3      	ldr	r3, [r0, #12]
 8012476:	2108      	movs	r1, #8
 8012478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801247a:	4798      	blx	r3
 801247c:	2802      	cmp	r0, #2
 801247e:	dd0b      	ble.n	8012498 <_CreateBuffer+0x50>
 8012480:	2804      	cmp	r0, #4
 8012482:	dd06      	ble.n	8012492 <_CreateBuffer+0x4a>
 8012484:	2808      	cmp	r0, #8
 8012486:	dd06      	ble.n	8012496 <_CreateBuffer+0x4e>
 8012488:	2811      	cmp	r0, #17
 801248a:	bfb4      	ite	lt
 801248c:	2010      	movlt	r0, #16
 801248e:	2020      	movge	r0, #32
 8012490:	e002      	b.n	8012498 <_CreateBuffer+0x50>
 8012492:	2004      	movs	r0, #4
 8012494:	e000      	b.n	8012498 <_CreateBuffer+0x50>
 8012496:	2008      	movs	r0, #8
 8012498:	2808      	cmp	r0, #8
 801249a:	61a0      	str	r0, [r4, #24]
 801249c:	dd04      	ble.n	80124a8 <_CreateBuffer+0x60>
 801249e:	2810      	cmp	r0, #16
 80124a0:	bfcc      	ite	gt
 80124a2:	2304      	movgt	r3, #4
 80124a4:	2302      	movle	r3, #2
 80124a6:	e000      	b.n	80124aa <_CreateBuffer+0x62>
 80124a8:	2301      	movs	r3, #1
 80124aa:	696a      	ldr	r2, [r5, #20]
 80124ac:	6123      	str	r3, [r4, #16]
 80124ae:	8812      	ldrh	r2, [r2, #0]
 80124b0:	61e2      	str	r2, [r4, #28]
 80124b2:	4353      	muls	r3, r2
 80124b4:	6163      	str	r3, [r4, #20]
 80124b6:	f7fc f90d 	bl	800e6d4 <GUI_ALLOC_GetMaxSize>
 80124ba:	6963      	ldr	r3, [r4, #20]
 80124bc:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 80124c0:	4283      	cmp	r3, r0
 80124c2:	f04f 0200 	mov.w	r2, #0
 80124c6:	bfc8      	it	gt
 80124c8:	6160      	strgt	r0, [r4, #20]
 80124ca:	2e01      	cmp	r6, #1
 80124cc:	60e2      	str	r2, [r4, #12]
 80124ce:	bf18      	it	ne
 80124d0:	69e2      	ldrne	r2, [r4, #28]
 80124d2:	60a7      	str	r7, [r4, #8]
 80124d4:	bf18      	it	ne
 80124d6:	f102 4280 	addne.w	r2, r2, #1073741824	; 0x40000000
 80124da:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80124de:	bf18      	it	ne
 80124e0:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
 80124e4:	6023      	str	r3, [r4, #0]
 80124e6:	bf18      	it	ne
 80124e8:	eb03 0382 	addne.w	r3, r3, r2, lsl #2
 80124ec:	6063      	str	r3, [r4, #4]
 80124ee:	4620      	mov	r0, r4
 80124f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080124f2 <_GetBkIndex.isra.0>:
 80124f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124f6:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 80124fa:	4540      	cmp	r0, r8
 80124fc:	4606      	mov	r6, r0
 80124fe:	460d      	mov	r5, r1
 8012500:	4691      	mov	r9, r2
 8012502:	461c      	mov	r4, r3
 8012504:	da04      	bge.n	8012510 <_GetBkIndex.isra.0+0x1e>
 8012506:	f8d9 0000 	ldr.w	r0, [r9]
 801250a:	bb28      	cbnz	r0, 8012558 <_GetBkIndex.isra.0+0x66>
 801250c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012510:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012514:	4298      	cmp	r0, r3
 8012516:	dcf6      	bgt.n	8012506 <_GetBkIndex.isra.0+0x14>
 8012518:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
 801251c:	42b9      	cmp	r1, r7
 801251e:	dbf2      	blt.n	8012506 <_GetBkIndex.isra.0+0x14>
 8012520:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012524:	4299      	cmp	r1, r3
 8012526:	dcee      	bgt.n	8012506 <_GetBkIndex.isra.0+0x14>
 8012528:	ebc8 0800 	rsb	r8, r8, r0
 801252c:	1bcf      	subs	r7, r1, r7
 801252e:	6960      	ldr	r0, [r4, #20]
 8012530:	4641      	mov	r1, r8
 8012532:	463a      	mov	r2, r7
 8012534:	f000 fbc4 	bl	8012cc0 <GUI_GetBitmapPixelIndex>
 8012538:	2800      	cmp	r0, #0
 801253a:	d0e4      	beq.n	8012506 <_GetBkIndex.isra.0+0x14>
 801253c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8012540:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8012544:	1a8a      	subs	r2, r1, r2
 8012546:	fb02 7707 	mla	r7, r2, r7, r7
 801254a:	f104 0320 	add.w	r3, r4, #32
 801254e:	44b8      	add	r8, r7
 8012550:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012558:	68c3      	ldr	r3, [r0, #12]
 801255a:	4631      	mov	r1, r6
 801255c:	695b      	ldr	r3, [r3, #20]
 801255e:	462a      	mov	r2, r5
 8012560:	4798      	blx	r3
 8012562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012566 <_GetBkIndexAlpha.isra.2>:
 8012566:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801256a:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 801256e:	42b0      	cmp	r0, r6
 8012570:	4680      	mov	r8, r0
 8012572:	460f      	mov	r7, r1
 8012574:	4691      	mov	r9, r2
 8012576:	461d      	mov	r5, r3
 8012578:	db14      	blt.n	80125a4 <_GetBkIndexAlpha.isra.2+0x3e>
 801257a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801257e:	4298      	cmp	r0, r3
 8012580:	dc10      	bgt.n	80125a4 <_GetBkIndexAlpha.isra.2+0x3e>
 8012582:	f9b5 4006 	ldrsh.w	r4, [r5, #6]
 8012586:	42a1      	cmp	r1, r4
 8012588:	db0c      	blt.n	80125a4 <_GetBkIndexAlpha.isra.2+0x3e>
 801258a:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 801258e:	4299      	cmp	r1, r3
 8012590:	dc08      	bgt.n	80125a4 <_GetBkIndexAlpha.isra.2+0x3e>
 8012592:	1b86      	subs	r6, r0, r6
 8012594:	6968      	ldr	r0, [r5, #20]
 8012596:	1b0c      	subs	r4, r1, r4
 8012598:	b130      	cbz	r0, 80125a8 <_GetBkIndexAlpha.isra.2+0x42>
 801259a:	4631      	mov	r1, r6
 801259c:	4622      	mov	r2, r4
 801259e:	f000 fb8f 	bl	8012cc0 <GUI_GetBitmapPixelIndex>
 80125a2:	e003      	b.n	80125ac <_GetBkIndexAlpha.isra.2+0x46>
 80125a4:	2400      	movs	r4, #0
 80125a6:	4626      	mov	r6, r4
 80125a8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80125ac:	0e00      	lsrs	r0, r0, #24
 80125ae:	28ff      	cmp	r0, #255	; 0xff
 80125b0:	d109      	bne.n	80125c6 <_GetBkIndexAlpha.isra.2+0x60>
 80125b2:	f8d9 0000 	ldr.w	r0, [r9]
 80125b6:	b190      	cbz	r0, 80125de <_GetBkIndexAlpha.isra.2+0x78>
 80125b8:	68c3      	ldr	r3, [r0, #12]
 80125ba:	4641      	mov	r1, r8
 80125bc:	695b      	ldr	r3, [r3, #20]
 80125be:	463a      	mov	r2, r7
 80125c0:	4798      	blx	r3
 80125c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125c6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80125ca:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80125ce:	1a8a      	subs	r2, r1, r2
 80125d0:	fb02 4404 	mla	r4, r2, r4, r4
 80125d4:	f105 0320 	add.w	r3, r5, #32
 80125d8:	4426      	add	r6, r4
 80125da:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80125de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080125e4 <_GetDeviceRect>:
 80125e4:	b538      	push	{r3, r4, r5, lr}
 80125e6:	4a0c      	ldr	r2, [pc, #48]	; (8012618 <_GetDeviceRect+0x34>)
 80125e8:	6983      	ldr	r3, [r0, #24]
 80125ea:	56d2      	ldrsb	r2, [r2, r3]
 80125ec:	2a01      	cmp	r2, #1
 80125ee:	4605      	mov	r5, r0
 80125f0:	460c      	mov	r4, r1
 80125f2:	dd0d      	ble.n	8012610 <_GetDeviceRect+0x2c>
 80125f4:	2200      	movs	r2, #0
 80125f6:	804a      	strh	r2, [r1, #2]
 80125f8:	800a      	strh	r2, [r1, #0]
 80125fa:	4618      	mov	r0, r3
 80125fc:	f7f8 fff4 	bl	800b5e8 <LCD_GetXSizeEx>
 8012600:	3801      	subs	r0, #1
 8012602:	80a0      	strh	r0, [r4, #4]
 8012604:	69a8      	ldr	r0, [r5, #24]
 8012606:	f7f8 fff2 	bl	800b5ee <LCD_GetYSizeEx>
 801260a:	3801      	subs	r0, #1
 801260c:	80e0      	strh	r0, [r4, #6]
 801260e:	bd38      	pop	{r3, r4, r5, pc}
 8012610:	68c3      	ldr	r3, [r0, #12]
 8012612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012614:	4798      	blx	r3
 8012616:	bd38      	pop	{r3, r4, r5, pc}
 8012618:	20028856 	.word	0x20028856

0801261c <_FlushBuffer.isra.5>:
 801261c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012620:	460c      	mov	r4, r1
 8012622:	68c9      	ldr	r1, [r1, #12]
 8012624:	b086      	sub	sp, #24
 8012626:	2900      	cmp	r1, #0
 8012628:	d02f      	beq.n	801268a <_FlushBuffer.isra.5+0x6e>
 801262a:	6807      	ldr	r7, [r0, #0]
 801262c:	2f00      	cmp	r7, #0
 801262e:	d02e      	beq.n	801268e <_FlushBuffer.isra.5+0x72>
 8012630:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 8012634:	6822      	ldr	r2, [r4, #0]
 8012636:	2b01      	cmp	r3, #1
 8012638:	d104      	bne.n	8012644 <_FlushBuffer.isra.5+0x28>
 801263a:	4616      	mov	r6, r2
 801263c:	6062      	str	r2, [r4, #4]
 801263e:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8012642:	e00a      	b.n	801265a <_FlushBuffer.isra.5+0x3e>
 8012644:	69e3      	ldr	r3, [r4, #28]
 8012646:	6866      	ldr	r6, [r4, #4]
 8012648:	f8d4 8020 	ldr.w	r8, [r4, #32]
 801264c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012650:	3b01      	subs	r3, #1
 8012652:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012656:	3604      	adds	r6, #4
 8012658:	6063      	str	r3, [r4, #4]
 801265a:	4630      	mov	r0, r6
 801265c:	69a2      	ldr	r2, [r4, #24]
 801265e:	f7ff fcf5 	bl	801204c <GUI__CompactPixelIndices>
 8012662:	2301      	movs	r3, #1
 8012664:	68fa      	ldr	r2, [r7, #12]
 8012666:	9300      	str	r3, [sp, #0]
 8012668:	69a3      	ldr	r3, [r4, #24]
 801266a:	9301      	str	r3, [sp, #4]
 801266c:	2500      	movs	r5, #0
 801266e:	6963      	ldr	r3, [r4, #20]
 8012670:	9302      	str	r3, [sp, #8]
 8012672:	9603      	str	r6, [sp, #12]
 8012674:	9504      	str	r5, [sp, #16]
 8012676:	9505      	str	r5, [sp, #20]
 8012678:	6856      	ldr	r6, [r2, #4]
 801267a:	68e3      	ldr	r3, [r4, #12]
 801267c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801267e:	4638      	mov	r0, r7
 8012680:	4641      	mov	r1, r8
 8012682:	47b0      	blx	r6
 8012684:	60e5      	str	r5, [r4, #12]
 8012686:	4628      	mov	r0, r5
 8012688:	e002      	b.n	8012690 <_FlushBuffer.isra.5+0x74>
 801268a:	4608      	mov	r0, r1
 801268c:	e000      	b.n	8012690 <_FlushBuffer.isra.5+0x74>
 801268e:	2001      	movs	r0, #1
 8012690:	b006      	add	sp, #24
 8012692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012696 <_SetBkIndexBuffered>:
 8012696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012698:	9c06      	ldr	r4, [sp, #24]
 801269a:	460d      	mov	r5, r1
 801269c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801269e:	428d      	cmp	r5, r1
 80126a0:	4606      	mov	r6, r0
 80126a2:	4617      	mov	r7, r2
 80126a4:	d105      	bne.n	80126b2 <_SetBkIndexBuffered+0x1c>
 80126a6:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 80126aa:	6a21      	ldr	r1, [r4, #32]
 80126ac:	4411      	add	r1, r2
 80126ae:	4288      	cmp	r0, r1
 80126b0:	d003      	beq.n	80126ba <_SetBkIndexBuffered+0x24>
 80126b2:	4618      	mov	r0, r3
 80126b4:	4621      	mov	r1, r4
 80126b6:	f7ff ffb1 	bl	801261c <_FlushBuffer.isra.5>
 80126ba:	6863      	ldr	r3, [r4, #4]
 80126bc:	601f      	str	r7, [r3, #0]
 80126be:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 80126c2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80126c6:	6063      	str	r3, [r4, #4]
 80126c8:	68e3      	ldr	r3, [r4, #12]
 80126ca:	b90b      	cbnz	r3, 80126d0 <_SetBkIndexBuffered+0x3a>
 80126cc:	62a6      	str	r6, [r4, #40]	; 0x28
 80126ce:	62e5      	str	r5, [r4, #44]	; 0x2c
 80126d0:	3301      	adds	r3, #1
 80126d2:	60e3      	str	r3, [r4, #12]
 80126d4:	6226      	str	r6, [r4, #32]
 80126d6:	6265      	str	r5, [r4, #36]	; 0x24
 80126d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080126da <_ReleaseBuffer.isra.6>:
 80126da:	b513      	push	{r0, r1, r4, lr}
 80126dc:	9101      	str	r1, [sp, #4]
 80126de:	f7ff ff9d 	bl	801261c <_FlushBuffer.isra.5>
 80126e2:	a802      	add	r0, sp, #8
 80126e4:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 80126e8:	6894      	ldr	r4, [r2, #8]
 80126ea:	f7fb fe53 	bl	800e394 <GUI_ALLOC_UnlockH>
 80126ee:	4620      	mov	r0, r4
 80126f0:	f7fb fe7c 	bl	800e3ec <GUI_ALLOC_Free>
 80126f4:	b002      	add	sp, #8
 80126f6:	bd10      	pop	{r4, pc}

080126f8 <GUI_SPRITE_SetPosition>:
 80126f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126fc:	b0a7      	sub	sp, #156	; 0x9c
 80126fe:	4604      	mov	r4, r0
 8012700:	9116      	str	r1, [sp, #88]	; 0x58
 8012702:	9217      	str	r2, [sp, #92]	; 0x5c
 8012704:	2800      	cmp	r0, #0
 8012706:	f000 827a 	beq.w	8012bfe <GUI_SPRITE_SetPosition+0x506>
 801270a:	f7fa f951 	bl	800c9b0 <GUI_Lock>
 801270e:	4620      	mov	r0, r4
 8012710:	f7fb fe32 	bl	800e378 <GUI_ALLOC_LockH>
 8012714:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012716:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801271a:	6801      	ldr	r1, [r0, #0]
 801271c:	9023      	str	r0, [sp, #140]	; 0x8c
 801271e:	429a      	cmp	r2, r3
 8012720:	9106      	str	r1, [sp, #24]
 8012722:	d106      	bne.n	8012732 <GUI_SPRITE_SetPosition+0x3a>
 8012724:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012728:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 801272c:	459e      	cmp	lr, r3
 801272e:	f000 8239 	beq.w	8012ba4 <GUI_SPRITE_SetPosition+0x4ac>
 8012732:	2000      	movs	r0, #0
 8012734:	f7f7 fa08 	bl	8009b48 <GUI_MEMDEV_Select>
 8012738:	4ba0      	ldr	r3, [pc, #640]	; (80129bc <GUI_SPRITE_SetPosition+0x2c4>)
 801273a:	9906      	ldr	r1, [sp, #24]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	6989      	ldr	r1, [r1, #24]
 8012740:	7c5a      	ldrb	r2, [r3, #17]
 8012742:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8012744:	9108      	str	r1, [sp, #32]
 8012746:	4291      	cmp	r1, r2
 8012748:	bf18      	it	ne
 801274a:	7459      	strbne	r1, [r3, #17]
 801274c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8012750:	9310      	str	r3, [sp, #64]	; 0x40
 8012752:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8012756:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 801275a:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 801275e:	921a      	str	r2, [sp, #104]	; 0x68
 8012760:	ebce 0303 	rsb	r3, lr, r3
 8012764:	1c59      	adds	r1, r3, #1
 8012766:	9307      	str	r3, [sp, #28]
 8012768:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 801276c:	901f      	str	r0, [sp, #124]	; 0x7c
 801276e:	1b9b      	subs	r3, r3, r6
 8012770:	1c5a      	adds	r2, r3, #1
 8012772:	930e      	str	r3, [sp, #56]	; 0x38
 8012774:	8a2b      	ldrh	r3, [r5, #16]
 8012776:	910d      	str	r1, [sp, #52]	; 0x34
 8012778:	079b      	lsls	r3, r3, #30
 801277a:	921e      	str	r2, [sp, #120]	; 0x78
 801277c:	f140 81f7 	bpl.w	8012b6e <GUI_SPRITE_SetPosition+0x476>
 8012780:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012782:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012784:	696b      	ldr	r3, [r5, #20]
 8012786:	9311      	str	r3, [sp, #68]	; 0x44
 8012788:	ebce 0a01 	rsb	sl, lr, r1
 801278c:	f1ba 0f00 	cmp.w	sl, #0
 8012790:	ebc6 0902 	rsb	r9, r6, r2
 8012794:	dc0c      	bgt.n	80127b0 <GUI_SPRITE_SetPosition+0xb8>
 8012796:	9b07      	ldr	r3, [sp, #28]
 8012798:	930a      	str	r3, [sp, #40]	; 0x28
 801279a:	469e      	mov	lr, r3
 801279c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80127a0:	44d6      	add	lr, sl
 80127a2:	2100      	movs	r1, #0
 80127a4:	f8cd e01c 	str.w	lr, [sp, #28]
 80127a8:	911c      	str	r1, [sp, #112]	; 0x70
 80127aa:	9214      	str	r2, [sp, #80]	; 0x50
 80127ac:	9204      	str	r2, [sp, #16]
 80127ae:	e009      	b.n	80127c4 <GUI_SPRITE_SetPosition+0xcc>
 80127b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80127b2:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
 80127b6:	f04f 0e01 	mov.w	lr, #1
 80127ba:	2100      	movs	r1, #0
 80127bc:	9314      	str	r3, [sp, #80]	; 0x50
 80127be:	f8cd e010 	str.w	lr, [sp, #16]
 80127c2:	910a      	str	r1, [sp, #40]	; 0x28
 80127c4:	f1b9 0f00 	cmp.w	r9, #0
 80127c8:	dc0c      	bgt.n	80127e4 <GUI_SPRITE_SetPosition+0xec>
 80127ca:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80127cc:	4622      	mov	r2, r4
 80127ce:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80127d2:	444a      	add	r2, r9
 80127d4:	2300      	movs	r3, #0
 80127d6:	920e      	str	r2, [sp, #56]	; 0x38
 80127d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80127da:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 80127de:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 80127e2:	e006      	b.n	80127f2 <GUI_SPRITE_SetPosition+0xfa>
 80127e4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80127e6:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 80127ea:	2301      	movs	r3, #1
 80127ec:	9215      	str	r2, [sp, #84]	; 0x54
 80127ee:	9309      	str	r3, [sp, #36]	; 0x24
 80127f0:	2400      	movs	r4, #0
 80127f2:	9806      	ldr	r0, [sp, #24]
 80127f4:	a924      	add	r1, sp, #144	; 0x90
 80127f6:	f7ff fef5 	bl	80125e4 <_GetDeviceRect>
 80127fa:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80127fc:	9904      	ldr	r1, [sp, #16]
 80127fe:	f7ff fe23 	bl	8012448 <_CreateBuffer>
 8012802:	9012      	str	r0, [sp, #72]	; 0x48
 8012804:	2800      	cmp	r0, #0
 8012806:	f000 81b2 	beq.w	8012b6e <GUI_SPRITE_SetPosition+0x476>
 801280a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801280c:	9904      	ldr	r1, [sp, #16]
 801280e:	f7ff fe1b 	bl	8012448 <_CreateBuffer>
 8012812:	9013      	str	r0, [sp, #76]	; 0x4c
 8012814:	2800      	cmp	r0, #0
 8012816:	f000 81a5 	beq.w	8012b64 <GUI_SPRITE_SetPosition+0x46c>
 801281a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801281c:	68d8      	ldr	r0, [r3, #12]
 801281e:	4426      	add	r6, r4
 8012820:	b990      	cbnz	r0, 8012848 <GUI_SPRITE_SetPosition+0x150>
 8012822:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8012826:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012828:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801282a:	9019      	str	r0, [sp, #100]	; 0x64
 801282c:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8012830:	434b      	muls	r3, r1
 8012832:	9321      	str	r3, [sp, #132]	; 0x84
 8012834:	fb0e 2304 	mla	r3, lr, r4, r2
 8012838:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801283c:	930c      	str	r3, [sp, #48]	; 0x30
 801283e:	9b04      	ldr	r3, [sp, #16]
 8012840:	009b      	lsls	r3, r3, #2
 8012842:	444e      	add	r6, r9
 8012844:	9320      	str	r3, [sp, #128]	; 0x80
 8012846:	e0db      	b.n	8012a00 <GUI_SPRITE_SetPosition+0x308>
 8012848:	f7fb fd96 	bl	800e378 <GUI_ALLOC_LockH>
 801284c:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8012850:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012854:	9022      	str	r0, [sp, #136]	; 0x88
 8012856:	ea4f 038e 	mov.w	r3, lr, lsl #2
 801285a:	434b      	muls	r3, r1
 801285c:	9319      	str	r3, [sp, #100]	; 0x64
 801285e:	fb0e 2304 	mla	r3, lr, r4, r2
 8012862:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012866:	930b      	str	r3, [sp, #44]	; 0x2c
 8012868:	9b04      	ldr	r3, [sp, #16]
 801286a:	009b      	lsls	r3, r3, #2
 801286c:	444e      	add	r6, r9
 801286e:	931d      	str	r3, [sp, #116]	; 0x74
 8012870:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012872:	428c      	cmp	r4, r1
 8012874:	f000 809e 	beq.w	80129b4 <GUI_SPRITE_SetPosition+0x2bc>
 8012878:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 801287c:	4574      	cmp	r4, lr
 801287e:	db05      	blt.n	801288c <GUI_SPRITE_SetPosition+0x194>
 8012880:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012882:	428c      	cmp	r4, r1
 8012884:	bfcc      	ite	gt
 8012886:	2300      	movgt	r3, #0
 8012888:	2301      	movle	r3, #1
 801288a:	e000      	b.n	801288e <GUI_SPRITE_SetPosition+0x196>
 801288c:	2300      	movs	r3, #0
 801288e:	b2db      	uxtb	r3, r3
 8012890:	9318      	str	r3, [sp, #96]	; 0x60
 8012892:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8012894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012896:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012898:	9105      	str	r1, [sp, #20]
 801289a:	ebc9 0206 	rsb	r2, r9, r6
 801289e:	441f      	add	r7, r3
 80128a0:	920c      	str	r2, [sp, #48]	; 0x30
 80128a2:	4457      	add	r7, sl
 80128a4:	461d      	mov	r5, r3
 80128a6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80128a8:	428d      	cmp	r5, r1
 80128aa:	d07a      	beq.n	80129a2 <GUI_SPRITE_SetPosition+0x2aa>
 80128ac:	9811      	ldr	r0, [sp, #68]	; 0x44
 80128ae:	4629      	mov	r1, r5
 80128b0:	4622      	mov	r2, r4
 80128b2:	f000 fa05 	bl	8012cc0 <GUI_GetBitmapPixelIndex>
 80128b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80128b8:	2800      	cmp	r0, #0
 80128ba:	d069      	beq.n	8012990 <GUI_SPRITE_SetPosition+0x298>
 80128bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80128be:	4295      	cmp	r5, r2
 80128c0:	ebca 0c07 	rsb	ip, sl, r7
 80128c4:	db07      	blt.n	80128d6 <GUI_SPRITE_SetPosition+0x1de>
 80128c6:	9b07      	ldr	r3, [sp, #28]
 80128c8:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80128cc:	429d      	cmp	r5, r3
 80128ce:	bfc8      	it	gt
 80128d0:	f04f 0b00 	movgt.w	fp, #0
 80128d4:	e001      	b.n	80128da <GUI_SPRITE_SetPosition+0x1e2>
 80128d6:	f04f 0b00 	mov.w	fp, #0
 80128da:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 80128de:	429f      	cmp	r7, r3
 80128e0:	fa5f fb8b 	uxtb.w	fp, fp
 80128e4:	db17      	blt.n	8012916 <GUI_SPRITE_SetPosition+0x21e>
 80128e6:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80128ea:	429e      	cmp	r6, r3
 80128ec:	db13      	blt.n	8012916 <GUI_SPRITE_SetPosition+0x21e>
 80128ee:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80128f2:	429f      	cmp	r7, r3
 80128f4:	dc0f      	bgt.n	8012916 <GUI_SPRITE_SetPosition+0x21e>
 80128f6:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 80128fa:	429e      	cmp	r6, r3
 80128fc:	dc0b      	bgt.n	8012916 <GUI_SPRITE_SetPosition+0x21e>
 80128fe:	4638      	mov	r0, r7
 8012900:	4631      	mov	r1, r6
 8012902:	9a06      	ldr	r2, [sp, #24]
 8012904:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012906:	f8cd c00c 	str.w	ip, [sp, #12]
 801290a:	f7ff fdf2 	bl	80124f2 <_GetBkIndex.isra.0>
 801290e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8012912:	4680      	mov	r8, r0
 8012914:	e001      	b.n	801291a <GUI_SPRITE_SetPosition+0x222>
 8012916:	f04f 0800 	mov.w	r8, #0
 801291a:	f1bb 0f00 	cmp.w	fp, #0
 801291e:	d00d      	beq.n	801293c <GUI_SPRITE_SetPosition+0x244>
 8012920:	ebb5 010a 	subs.w	r1, r5, sl
 8012924:	d415      	bmi.n	8012952 <GUI_SPRITE_SetPosition+0x25a>
 8012926:	ebb4 0209 	subs.w	r2, r4, r9
 801292a:	d412      	bmi.n	8012952 <GUI_SPRITE_SetPosition+0x25a>
 801292c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801292e:	f8cd c00c 	str.w	ip, [sp, #12]
 8012932:	f000 f9c5 	bl	8012cc0 <GUI_GetBitmapPixelIndex>
 8012936:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801293a:	b950      	cbnz	r0, 8012952 <GUI_SPRITE_SetPosition+0x25a>
 801293c:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012940:	459c      	cmp	ip, r3
 8012942:	db06      	blt.n	8012952 <GUI_SPRITE_SetPosition+0x25a>
 8012944:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8012948:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 801294c:	459e      	cmp	lr, r3
 801294e:	f280 812f 	bge.w	8012bb0 <GUI_SPRITE_SetPosition+0x4b8>
 8012952:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012956:	429f      	cmp	r7, r3
 8012958:	db17      	blt.n	801298a <GUI_SPRITE_SetPosition+0x292>
 801295a:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 801295e:	429e      	cmp	r6, r3
 8012960:	db13      	blt.n	801298a <GUI_SPRITE_SetPosition+0x292>
 8012962:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8012966:	429f      	cmp	r7, r3
 8012968:	dc0f      	bgt.n	801298a <GUI_SPRITE_SetPosition+0x292>
 801296a:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 801296e:	429e      	cmp	r6, r3
 8012970:	dc0b      	bgt.n	801298a <GUI_SPRITE_SetPosition+0x292>
 8012972:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012974:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012976:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 801297a:	9100      	str	r1, [sp, #0]
 801297c:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 8012980:	9b06      	ldr	r3, [sp, #24]
 8012982:	4638      	mov	r0, r7
 8012984:	4631      	mov	r1, r6
 8012986:	f7ff fe86 	bl	8012696 <_SetBkIndexBuffered>
 801298a:	9905      	ldr	r1, [sp, #20]
 801298c:	f8c1 8020 	str.w	r8, [r1, #32]
 8012990:	9b05      	ldr	r3, [sp, #20]
 8012992:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 8012996:	9a04      	ldr	r2, [sp, #16]
 8012998:	4473      	add	r3, lr
 801299a:	4415      	add	r5, r2
 801299c:	9305      	str	r3, [sp, #20]
 801299e:	4417      	add	r7, r2
 80129a0:	e781      	b.n	80128a6 <GUI_SPRITE_SetPosition+0x1ae>
 80129a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129a4:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 80129a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129aa:	4473      	add	r3, lr
 80129ac:	4414      	add	r4, r2
 80129ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80129b0:	4416      	add	r6, r2
 80129b2:	e75d      	b.n	8012870 <GUI_SPRITE_SetPosition+0x178>
 80129b4:	a822      	add	r0, sp, #136	; 0x88
 80129b6:	f7fb fced 	bl	800e394 <GUI_ALLOC_UnlockH>
 80129ba:	e0ce      	b.n	8012b5a <GUI_SPRITE_SetPosition+0x462>
 80129bc:	200002c4 	.word	0x200002c4
 80129c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80129c2:	4294      	cmp	r4, r2
 80129c4:	db20      	blt.n	8012a08 <GUI_SPRITE_SetPosition+0x310>
 80129c6:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 80129ca:	4574      	cmp	r4, lr
 80129cc:	bfcc      	ite	gt
 80129ce:	2300      	movgt	r3, #0
 80129d0:	2301      	movle	r3, #1
 80129d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129d4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80129d6:	b2db      	uxtb	r3, r3
 80129d8:	931d      	str	r3, [sp, #116]	; 0x74
 80129da:	ebc9 0106 	rsb	r1, r9, r6
 80129de:	4417      	add	r7, r2
 80129e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129e2:	910f      	str	r1, [sp, #60]	; 0x3c
 80129e4:	4457      	add	r7, sl
 80129e6:	9305      	str	r3, [sp, #20]
 80129e8:	4615      	mov	r5, r2
 80129ea:	9914      	ldr	r1, [sp, #80]	; 0x50
 80129ec:	428d      	cmp	r5, r1
 80129ee:	d10d      	bne.n	8012a0c <GUI_SPRITE_SetPosition+0x314>
 80129f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129f2:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 80129f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129f8:	4473      	add	r3, lr
 80129fa:	4414      	add	r4, r2
 80129fc:	930c      	str	r3, [sp, #48]	; 0x30
 80129fe:	4416      	add	r6, r2
 8012a00:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012a02:	428c      	cmp	r4, r1
 8012a04:	d1dc      	bne.n	80129c0 <GUI_SPRITE_SetPosition+0x2c8>
 8012a06:	e0a8      	b.n	8012b5a <GUI_SPRITE_SetPosition+0x462>
 8012a08:	2300      	movs	r3, #0
 8012a0a:	e7e2      	b.n	80129d2 <GUI_SPRITE_SetPosition+0x2da>
 8012a0c:	4629      	mov	r1, r5
 8012a0e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012a10:	4622      	mov	r2, r4
 8012a12:	f000 f955 	bl	8012cc0 <GUI_GetBitmapPixelIndex>
 8012a16:	0e01      	lsrs	r1, r0, #24
 8012a18:	29ff      	cmp	r1, #255	; 0xff
 8012a1a:	9018      	str	r0, [sp, #96]	; 0x60
 8012a1c:	910b      	str	r1, [sp, #44]	; 0x2c
 8012a1e:	f000 8093 	beq.w	8012b48 <GUI_SPRITE_SetPosition+0x450>
 8012a22:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012a24:	4295      	cmp	r5, r2
 8012a26:	ebca 0c07 	rsb	ip, sl, r7
 8012a2a:	db07      	blt.n	8012a3c <GUI_SPRITE_SetPosition+0x344>
 8012a2c:	9b07      	ldr	r3, [sp, #28]
 8012a2e:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8012a32:	429d      	cmp	r5, r3
 8012a34:	bfc8      	it	gt
 8012a36:	f04f 0b00 	movgt.w	fp, #0
 8012a3a:	e001      	b.n	8012a40 <GUI_SPRITE_SetPosition+0x348>
 8012a3c:	f04f 0b00 	mov.w	fp, #0
 8012a40:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012a44:	429f      	cmp	r7, r3
 8012a46:	fa5f fb8b 	uxtb.w	fp, fp
 8012a4a:	db22      	blt.n	8012a92 <GUI_SPRITE_SetPosition+0x39a>
 8012a4c:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8012a50:	429e      	cmp	r6, r3
 8012a52:	db1e      	blt.n	8012a92 <GUI_SPRITE_SetPosition+0x39a>
 8012a54:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8012a58:	429f      	cmp	r7, r3
 8012a5a:	dc1a      	bgt.n	8012a92 <GUI_SPRITE_SetPosition+0x39a>
 8012a5c:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8012a60:	429e      	cmp	r6, r3
 8012a62:	dc16      	bgt.n	8012a92 <GUI_SPRITE_SetPosition+0x39a>
 8012a64:	4631      	mov	r1, r6
 8012a66:	9a06      	ldr	r2, [sp, #24]
 8012a68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012a6a:	f8cd c00c 	str.w	ip, [sp, #12]
 8012a6e:	4638      	mov	r0, r7
 8012a70:	f7ff fd79 	bl	8012566 <_GetBkIndexAlpha.isra.2>
 8012a74:	f8dd e020 	ldr.w	lr, [sp, #32]
 8012a78:	4b62      	ldr	r3, [pc, #392]	; (8012c04 <GUI_SPRITE_SetPosition+0x50c>)
 8012a7a:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 8012a7e:	691b      	ldr	r3, [r3, #16]
 8012a80:	4680      	mov	r8, r0
 8012a82:	685b      	ldr	r3, [r3, #4]
 8012a84:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8012a88:	4798      	blx	r3
 8012a8a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8012a8e:	9019      	str	r0, [sp, #100]	; 0x64
 8012a90:	e001      	b.n	8012a96 <GUI_SPRITE_SetPosition+0x39e>
 8012a92:	f04f 0800 	mov.w	r8, #0
 8012a96:	f1bb 0f00 	cmp.w	fp, #0
 8012a9a:	d00f      	beq.n	8012abc <GUI_SPRITE_SetPosition+0x3c4>
 8012a9c:	ebb5 010a 	subs.w	r1, r5, sl
 8012aa0:	d416      	bmi.n	8012ad0 <GUI_SPRITE_SetPosition+0x3d8>
 8012aa2:	ebb4 0209 	subs.w	r2, r4, r9
 8012aa6:	d413      	bmi.n	8012ad0 <GUI_SPRITE_SetPosition+0x3d8>
 8012aa8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012aaa:	f8cd c00c 	str.w	ip, [sp, #12]
 8012aae:	f000 f907 	bl	8012cc0 <GUI_GetBitmapPixelIndex>
 8012ab2:	0e00      	lsrs	r0, r0, #24
 8012ab4:	28ff      	cmp	r0, #255	; 0xff
 8012ab6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8012aba:	d109      	bne.n	8012ad0 <GUI_SPRITE_SetPosition+0x3d8>
 8012abc:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012ac0:	459c      	cmp	ip, r3
 8012ac2:	db05      	blt.n	8012ad0 <GUI_SPRITE_SetPosition+0x3d8>
 8012ac4:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8012ac8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012aca:	4299      	cmp	r1, r3
 8012acc:	f280 8084 	bge.w	8012bd8 <GUI_SPRITE_SetPosition+0x4e0>
 8012ad0:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012ad4:	429f      	cmp	r7, r3
 8012ad6:	db34      	blt.n	8012b42 <GUI_SPRITE_SetPosition+0x44a>
 8012ad8:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8012adc:	429e      	cmp	r6, r3
 8012ade:	db30      	blt.n	8012b42 <GUI_SPRITE_SetPosition+0x44a>
 8012ae0:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8012ae4:	429f      	cmp	r7, r3
 8012ae6:	dc2c      	bgt.n	8012b42 <GUI_SPRITE_SetPosition+0x44a>
 8012ae8:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8012aec:	429e      	cmp	r6, r3
 8012aee:	dc28      	bgt.n	8012b42 <GUI_SPRITE_SetPosition+0x44a>
 8012af0:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8012af4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012af6:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8012c04 <GUI_SPRITE_SetPosition+0x50c>
 8012afa:	f02e 407f 	bic.w	r0, lr, #4278190080	; 0xff000000
 8012afe:	b191      	cbz	r1, 8012b26 <GUI_SPRITE_SetPosition+0x42e>
 8012b00:	9a08      	ldr	r2, [sp, #32]
 8012b02:	f85b 3022 	ldr.w	r3, [fp, r2, lsl #2]
 8012b06:	691b      	ldr	r3, [r3, #16]
 8012b08:	685b      	ldr	r3, [r3, #4]
 8012b0a:	4798      	blx	r3
 8012b0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b0e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8012b10:	43da      	mvns	r2, r3
 8012b12:	b2d2      	uxtb	r2, r2
 8012b14:	f7f9 fcbb 	bl	800c48e <GUI__MixColors>
 8012b18:	f8dd e020 	ldr.w	lr, [sp, #32]
 8012b1c:	f85b 302e 	ldr.w	r3, [fp, lr, lsl #2]
 8012b20:	691b      	ldr	r3, [r3, #16]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	e004      	b.n	8012b30 <GUI_SPRITE_SetPosition+0x438>
 8012b26:	9908      	ldr	r1, [sp, #32]
 8012b28:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 8012b2c:	691b      	ldr	r3, [r3, #16]
 8012b2e:	685b      	ldr	r3, [r3, #4]
 8012b30:	4798      	blx	r3
 8012b32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012b34:	9300      	str	r3, [sp, #0]
 8012b36:	4602      	mov	r2, r0
 8012b38:	4631      	mov	r1, r6
 8012b3a:	4638      	mov	r0, r7
 8012b3c:	9b06      	ldr	r3, [sp, #24]
 8012b3e:	f7ff fdaa 	bl	8012696 <_SetBkIndexBuffered>
 8012b42:	9905      	ldr	r1, [sp, #20]
 8012b44:	f8c1 8020 	str.w	r8, [r1, #32]
 8012b48:	9b05      	ldr	r3, [sp, #20]
 8012b4a:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 8012b4e:	9a04      	ldr	r2, [sp, #16]
 8012b50:	4473      	add	r3, lr
 8012b52:	4415      	add	r5, r2
 8012b54:	9305      	str	r3, [sp, #20]
 8012b56:	4417      	add	r7, r2
 8012b58:	e747      	b.n	80129ea <GUI_SPRITE_SetPosition+0x2f2>
 8012b5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012b5c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012b5e:	6818      	ldr	r0, [r3, #0]
 8012b60:	f7ff fdbb 	bl	80126da <_ReleaseBuffer.isra.6>
 8012b64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012b66:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012b68:	6818      	ldr	r0, [r3, #0]
 8012b6a:	f7ff fdb6 	bl	80126da <_ReleaseBuffer.isra.6>
 8012b6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012b70:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012b72:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012b74:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8012b78:	809a      	strh	r2, [r3, #4]
 8012b7a:	440a      	add	r2, r1
 8012b7c:	3a01      	subs	r2, #1
 8012b7e:	f8a3 e006 	strh.w	lr, [r3, #6]
 8012b82:	811a      	strh	r2, [r3, #8]
 8012b84:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
 8012b88:	f8dd e078 	ldr.w	lr, [sp, #120]	; 0x78
 8012b8c:	9908      	ldr	r1, [sp, #32]
 8012b8e:	4472      	add	r2, lr
 8012b90:	815a      	strh	r2, [r3, #10]
 8012b92:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012b94:	4291      	cmp	r1, r2
 8012b96:	d002      	beq.n	8012b9e <GUI_SPRITE_SetPosition+0x4a6>
 8012b98:	4b1b      	ldr	r3, [pc, #108]	; (8012c08 <GUI_SPRITE_SetPosition+0x510>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	745a      	strb	r2, [r3, #17]
 8012b9e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8012ba0:	f7f6 ffd2 	bl	8009b48 <GUI_MEMDEV_Select>
 8012ba4:	a823      	add	r0, sp, #140	; 0x8c
 8012ba6:	f7fb fbf5 	bl	800e394 <GUI_ALLOC_UnlockH>
 8012baa:	f7f9 fef7 	bl	800c99c <GUI_Unlock>
 8012bae:	e026      	b.n	8012bfe <GUI_SPRITE_SetPosition+0x506>
 8012bb0:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8012bb4:	459c      	cmp	ip, r3
 8012bb6:	f73f aecc 	bgt.w	8012952 <GUI_SPRITE_SetPosition+0x25a>
 8012bba:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8012bbe:	459e      	cmp	lr, r3
 8012bc0:	f73f aec7 	bgt.w	8012952 <GUI_SPRITE_SetPosition+0x25a>
 8012bc4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012bc6:	9b05      	ldr	r3, [sp, #20]
 8012bc8:	9100      	str	r1, [sp, #0]
 8012bca:	6a1a      	ldr	r2, [r3, #32]
 8012bcc:	9b06      	ldr	r3, [sp, #24]
 8012bce:	4660      	mov	r0, ip
 8012bd0:	4671      	mov	r1, lr
 8012bd2:	f7ff fd60 	bl	8012696 <_SetBkIndexBuffered>
 8012bd6:	e6bc      	b.n	8012952 <GUI_SPRITE_SetPosition+0x25a>
 8012bd8:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8012bdc:	459c      	cmp	ip, r3
 8012bde:	f73f af77 	bgt.w	8012ad0 <GUI_SPRITE_SetPosition+0x3d8>
 8012be2:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8012be6:	4299      	cmp	r1, r3
 8012be8:	f73f af72 	bgt.w	8012ad0 <GUI_SPRITE_SetPosition+0x3d8>
 8012bec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012bee:	9b05      	ldr	r3, [sp, #20]
 8012bf0:	9200      	str	r2, [sp, #0]
 8012bf2:	6a1a      	ldr	r2, [r3, #32]
 8012bf4:	9b06      	ldr	r3, [sp, #24]
 8012bf6:	4660      	mov	r0, ip
 8012bf8:	f7ff fd4d 	bl	8012696 <_SetBkIndexBuffered>
 8012bfc:	e768      	b.n	8012ad0 <GUI_SPRITE_SetPosition+0x3d8>
 8012bfe:	b027      	add	sp, #156	; 0x9c
 8012c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c04:	20028844 	.word	0x20028844
 8012c08:	200002c4 	.word	0x200002c4

08012c0c <GUI_GetBkColor>:
 8012c0c:	b510      	push	{r4, lr}
 8012c0e:	f7f9 fecf 	bl	800c9b0 <GUI_Lock>
 8012c12:	f000 fa8d 	bl	8013130 <LCD_GetBkColorIndex>
 8012c16:	f7f9 f8b7 	bl	800bd88 <LCD_Index2Color>
 8012c1a:	4604      	mov	r4, r0
 8012c1c:	f7f9 febe 	bl	800c99c <GUI_Unlock>
 8012c20:	4620      	mov	r0, r4
 8012c22:	bd10      	pop	{r4, pc}

08012c24 <GUI_GetColor>:
 8012c24:	b510      	push	{r4, lr}
 8012c26:	f7f9 fec3 	bl	800c9b0 <GUI_Lock>
 8012c2a:	f000 fa89 	bl	8013140 <LCD_GetColorIndex>
 8012c2e:	f7f9 f8ab 	bl	800bd88 <LCD_Index2Color>
 8012c32:	4604      	mov	r4, r0
 8012c34:	f7f9 feb2 	bl	800c99c <GUI_Unlock>
 8012c38:	4620      	mov	r0, r4
 8012c3a:	bd10      	pop	{r4, pc}

08012c3c <GUI_GetBitmapPixelIndexEx>:
 8012c3c:	b510      	push	{r4, lr}
 8012c3e:	2804      	cmp	r0, #4
 8012c40:	9c02      	ldr	r4, [sp, #8]
 8012c42:	d025      	beq.n	8012c90 <GUI_GetBitmapPixelIndexEx+0x54>
 8012c44:	dc0f      	bgt.n	8012c66 <GUI_GetBitmapPixelIndexEx+0x2a>
 8012c46:	2801      	cmp	r0, #1
 8012c48:	d017      	beq.n	8012c7a <GUI_GetBitmapPixelIndexEx+0x3e>
 8012c4a:	2802      	cmp	r0, #2
 8012c4c:	d136      	bne.n	8012cbc <GUI_GetBitmapPixelIndexEx+0x80>
 8012c4e:	0898      	lsrs	r0, r3, #2
 8012c50:	fb04 2101 	mla	r1, r4, r1, r2
 8012c54:	ea6f 0343 	mvn.w	r3, r3, lsl #1
 8012c58:	5c08      	ldrb	r0, [r1, r0]
 8012c5a:	f003 0306 	and.w	r3, r3, #6
 8012c5e:	40d8      	lsrs	r0, r3
 8012c60:	f000 0003 	and.w	r0, r0, #3
 8012c64:	bd10      	pop	{r4, pc}
 8012c66:	2810      	cmp	r0, #16
 8012c68:	d01c      	beq.n	8012ca4 <GUI_GetBitmapPixelIndexEx+0x68>
 8012c6a:	2820      	cmp	r0, #32
 8012c6c:	d020      	beq.n	8012cb0 <GUI_GetBitmapPixelIndexEx+0x74>
 8012c6e:	2808      	cmp	r0, #8
 8012c70:	d124      	bne.n	8012cbc <GUI_GetBitmapPixelIndexEx+0x80>
 8012c72:	fb04 2101 	mla	r1, r4, r1, r2
 8012c76:	5cc8      	ldrb	r0, [r1, r3]
 8012c78:	bd10      	pop	{r4, pc}
 8012c7a:	08d8      	lsrs	r0, r3, #3
 8012c7c:	fb04 2101 	mla	r1, r4, r1, r2
 8012c80:	43db      	mvns	r3, r3
 8012c82:	5c08      	ldrb	r0, [r1, r0]
 8012c84:	f003 0307 	and.w	r3, r3, #7
 8012c88:	40d8      	lsrs	r0, r3
 8012c8a:	f000 0001 	and.w	r0, r0, #1
 8012c8e:	bd10      	pop	{r4, pc}
 8012c90:	0858      	lsrs	r0, r3, #1
 8012c92:	fb04 2101 	mla	r1, r4, r1, r2
 8012c96:	07db      	lsls	r3, r3, #31
 8012c98:	5c08      	ldrb	r0, [r1, r0]
 8012c9a:	bf4c      	ite	mi
 8012c9c:	f000 000f 	andmi.w	r0, r0, #15
 8012ca0:	0900      	lsrpl	r0, r0, #4
 8012ca2:	bd10      	pop	{r4, pc}
 8012ca4:	1049      	asrs	r1, r1, #1
 8012ca6:	fb04 3301 	mla	r3, r4, r1, r3
 8012caa:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8012cae:	bd10      	pop	{r4, pc}
 8012cb0:	1089      	asrs	r1, r1, #2
 8012cb2:	fb04 3301 	mla	r3, r4, r1, r3
 8012cb6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012cba:	bd10      	pop	{r4, pc}
 8012cbc:	2000      	movs	r0, #0
 8012cbe:	bd10      	pop	{r4, pc}

08012cc0 <GUI_GetBitmapPixelIndex>:
 8012cc0:	b513      	push	{r0, r1, r4, lr}
 8012cc2:	460b      	mov	r3, r1
 8012cc4:	4604      	mov	r4, r0
 8012cc6:	b130      	cbz	r0, 8012cd6 <GUI_GetBitmapPixelIndex+0x16>
 8012cc8:	88c0      	ldrh	r0, [r0, #6]
 8012cca:	88a1      	ldrh	r1, [r4, #4]
 8012ccc:	9200      	str	r2, [sp, #0]
 8012cce:	68a2      	ldr	r2, [r4, #8]
 8012cd0:	f7ff ffb4 	bl	8012c3c <GUI_GetBitmapPixelIndexEx>
 8012cd4:	e7ff      	b.n	8012cd6 <GUI_GetBitmapPixelIndex+0x16>
 8012cd6:	b002      	add	sp, #8
 8012cd8:	bd10      	pop	{r4, pc}
	...

08012cdc <GUI_DrawPixel>:
 8012cdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012cde:	4e12      	ldr	r6, [pc, #72]	; (8012d28 <GUI_DrawPixel+0x4c>)
 8012ce0:	4605      	mov	r5, r0
 8012ce2:	460c      	mov	r4, r1
 8012ce4:	f7f9 fe64 	bl	800c9b0 <GUI_Lock>
 8012ce8:	6833      	ldr	r3, [r6, #0]
 8012cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012cee:	4415      	add	r5, r2
 8012cf0:	441c      	add	r4, r3
 8012cf2:	b2ab      	uxth	r3, r5
 8012cf4:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012cf8:	f8ad 3000 	strh.w	r3, [sp]
 8012cfc:	4668      	mov	r0, sp
 8012cfe:	b2a3      	uxth	r3, r4
 8012d00:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012d04:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012d08:	f7f5 fc6c 	bl	80085e4 <WM__InitIVRSearch>
 8012d0c:	b918      	cbnz	r0, 8012d16 <GUI_DrawPixel+0x3a>
 8012d0e:	f7f9 fe45 	bl	800c99c <GUI_Unlock>
 8012d12:	b002      	add	sp, #8
 8012d14:	bd70      	pop	{r4, r5, r6, pc}
 8012d16:	6833      	ldr	r3, [r6, #0]
 8012d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012d1a:	4628      	mov	r0, r5
 8012d1c:	685b      	ldr	r3, [r3, #4]
 8012d1e:	4621      	mov	r1, r4
 8012d20:	4798      	blx	r3
 8012d22:	f7f5 fb9d 	bl	8008460 <WM__GetNextIVR>
 8012d26:	e7f1      	b.n	8012d0c <GUI_DrawPixel+0x30>
 8012d28:	200002c4 	.word	0x200002c4

08012d2c <GL_DrawBitmap>:
 8012d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d30:	68c6      	ldr	r6, [r0, #12]
 8012d32:	b087      	sub	sp, #28
 8012d34:	4604      	mov	r4, r0
 8012d36:	2000      	movs	r0, #0
 8012d38:	4688      	mov	r8, r1
 8012d3a:	4617      	mov	r7, r2
 8012d3c:	f7f9 fefe 	bl	800cb3c <GUI_SetDrawMode>
 8012d40:	4605      	mov	r5, r0
 8012d42:	b126      	cbz	r6, 8012d4e <GL_DrawBitmap+0x22>
 8012d44:	7933      	ldrb	r3, [r6, #4]
 8012d46:	b113      	cbz	r3, 8012d4e <GL_DrawBitmap+0x22>
 8012d48:	f040 0002 	orr.w	r0, r0, #2
 8012d4c:	e001      	b.n	8012d52 <GL_DrawBitmap+0x26>
 8012d4e:	f025 0002 	bic.w	r0, r5, #2
 8012d52:	f7f9 fef3 	bl	800cb3c <GUI_SetDrawMode>
 8012d56:	6921      	ldr	r1, [r4, #16]
 8012d58:	b169      	cbz	r1, 8012d76 <GL_DrawBitmap+0x4a>
 8012d5a:	68a0      	ldr	r0, [r4, #8]
 8012d5c:	8822      	ldrh	r2, [r4, #0]
 8012d5e:	8863      	ldrh	r3, [r4, #2]
 8012d60:	9000      	str	r0, [sp, #0]
 8012d62:	68e0      	ldr	r0, [r4, #12]
 8012d64:	9001      	str	r0, [sp, #4]
 8012d66:	2001      	movs	r0, #1
 8012d68:	9002      	str	r0, [sp, #8]
 8012d6a:	9003      	str	r0, [sp, #12]
 8012d6c:	680c      	ldr	r4, [r1, #0]
 8012d6e:	4640      	mov	r0, r8
 8012d70:	4639      	mov	r1, r7
 8012d72:	47a0      	blx	r4
 8012d74:	e020      	b.n	8012db8 <GL_DrawBitmap+0x8c>
 8012d76:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8012dc8 <GL_DrawBitmap+0x9c>
 8012d7a:	4a12      	ldr	r2, [pc, #72]	; (8012dc4 <GL_DrawBitmap+0x98>)
 8012d7c:	f8d9 3000 	ldr.w	r3, [r9]
 8012d80:	6816      	ldr	r6, [r2, #0]
 8012d82:	68e0      	ldr	r0, [r4, #12]
 8012d84:	7c5a      	ldrb	r2, [r3, #17]
 8012d86:	4621      	mov	r1, r4
 8012d88:	47b0      	blx	r6
 8012d8a:	88e1      	ldrh	r1, [r4, #6]
 8012d8c:	4606      	mov	r6, r0
 8012d8e:	b920      	cbnz	r0, 8012d9a <GL_DrawBitmap+0x6e>
 8012d90:	2901      	cmp	r1, #1
 8012d92:	bf04      	itt	eq
 8012d94:	f8d9 3000 	ldreq.w	r3, [r9]
 8012d98:	6b9e      	ldreq	r6, [r3, #56]	; 0x38
 8012d9a:	2001      	movs	r0, #1
 8012d9c:	8822      	ldrh	r2, [r4, #0]
 8012d9e:	8863      	ldrh	r3, [r4, #2]
 8012da0:	9000      	str	r0, [sp, #0]
 8012da2:	9001      	str	r0, [sp, #4]
 8012da4:	9102      	str	r1, [sp, #8]
 8012da6:	88a1      	ldrh	r1, [r4, #4]
 8012da8:	9103      	str	r1, [sp, #12]
 8012daa:	68a1      	ldr	r1, [r4, #8]
 8012dac:	9104      	str	r1, [sp, #16]
 8012dae:	9605      	str	r6, [sp, #20]
 8012db0:	4640      	mov	r0, r8
 8012db2:	4639      	mov	r1, r7
 8012db4:	f7f8 fe74 	bl	800baa0 <LCD_DrawBitmap>
 8012db8:	4628      	mov	r0, r5
 8012dba:	b007      	add	sp, #28
 8012dbc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012dc0:	f7f9 bebc 	b.w	800cb3c <GUI_SetDrawMode>
 8012dc4:	200002cc 	.word	0x200002cc
 8012dc8:	200002c4 	.word	0x200002c4

08012dcc <GUIMONO_DispChar>:
 8012dcc:	4b52      	ldr	r3, [pc, #328]	; (8012f18 <GUIMONO_DispChar+0x14c>)
 8012dce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	69d9      	ldr	r1, [r3, #28]
 8012dd6:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 8012dd8:	69cc      	ldr	r4, [r1, #28]
 8012dda:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 8012ddc:	89a2      	ldrh	r2, [r4, #12]
 8012dde:	4290      	cmp	r0, r2
 8012de0:	b08b      	sub	sp, #44	; 0x2c
 8012de2:	d308      	bcc.n	8012df6 <GUIMONO_DispChar+0x2a>
 8012de4:	89e6      	ldrh	r6, [r4, #14]
 8012de6:	4286      	cmp	r6, r0
 8012de8:	d305      	bcc.n	8012df6 <GUIMONO_DispChar+0x2a>
 8012dea:	f8d4 9000 	ldr.w	r9, [r4]
 8012dee:	1a82      	subs	r2, r0, r2
 8012df0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8012df4:	e015      	b.n	8012e22 <GUIMONO_DispChar+0x56>
 8012df6:	68a2      	ldr	r2, [r4, #8]
 8012df8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012dfc:	2a00      	cmp	r2, #0
 8012dfe:	f000 8081 	beq.w	8012f04 <GUIMONO_DispChar+0x138>
 8012e02:	8816      	ldrh	r6, [r2, #0]
 8012e04:	42b0      	cmp	r0, r6
 8012e06:	d37d      	bcc.n	8012f04 <GUIMONO_DispChar+0x138>
 8012e08:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8012e0c:	4584      	cmp	ip, r0
 8012e0e:	d379      	bcc.n	8012f04 <GUIMONO_DispChar+0x138>
 8012e10:	6852      	ldr	r2, [r2, #4]
 8012e12:	1b80      	subs	r0, r0, r6
 8012e14:	b280      	uxth	r0, r0
 8012e16:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8012e1a:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 8012e1e:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 8012e22:	1c50      	adds	r0, r2, #1
 8012e24:	d06e      	beq.n	8012f04 <GUIMONO_DispChar+0x138>
 8012e26:	f891 8018 	ldrb.w	r8, [r1, #24]
 8012e2a:	7ca1      	ldrb	r1, [r4, #18]
 8012e2c:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 8012e30:	7c26      	ldrb	r6, [r4, #16]
 8012e32:	9206      	str	r2, [sp, #24]
 8012e34:	fb18 f101 	smulbb	r1, r8, r1
 8012e38:	9107      	str	r1, [sp, #28]
 8012e3a:	fa0f f18a 	sxth.w	r1, sl
 8012e3e:	4608      	mov	r0, r1
 8012e40:	9108      	str	r1, [sp, #32]
 8012e42:	f7f8 fc9f 	bl	800b784 <LCD_SetDrawMode>
 8012e46:	4934      	ldr	r1, [pc, #208]	; (8012f18 <GUIMONO_DispChar+0x14c>)
 8012e48:	9009      	str	r0, [sp, #36]	; 0x24
 8012e4a:	680b      	ldr	r3, [r1, #0]
 8012e4c:	9a06      	ldr	r2, [sp, #24]
 8012e4e:	69d9      	ldr	r1, [r3, #28]
 8012e50:	7e88      	ldrb	r0, [r1, #26]
 8012e52:	9000      	str	r0, [sp, #0]
 8012e54:	7ec9      	ldrb	r1, [r1, #27]
 8012e56:	9101      	str	r1, [sp, #4]
 8012e58:	2101      	movs	r1, #1
 8012e5a:	9102      	str	r1, [sp, #8]
 8012e5c:	7ca1      	ldrb	r1, [r4, #18]
 8012e5e:	9103      	str	r1, [sp, #12]
 8012e60:	9907      	ldr	r1, [sp, #28]
 8012e62:	fb01 9202 	mla	r2, r1, r2, r9
 8012e66:	9204      	str	r2, [sp, #16]
 8012e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e6a:	9305      	str	r3, [sp, #20]
 8012e6c:	b23f      	sxth	r7, r7
 8012e6e:	b22d      	sxth	r5, r5
 8012e70:	4638      	mov	r0, r7
 8012e72:	4629      	mov	r1, r5
 8012e74:	4632      	mov	r2, r6
 8012e76:	4643      	mov	r3, r8
 8012e78:	f7f8 fe12 	bl	800baa0 <LCD_DrawBitmap>
 8012e7c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8012e80:	d01b      	beq.n	8012eba <GUIMONO_DispChar+0xee>
 8012e82:	f04a 0002 	orr.w	r0, sl, #2
 8012e86:	b200      	sxth	r0, r0
 8012e88:	f7f8 fc7c 	bl	800b784 <LCD_SetDrawMode>
 8012e8c:	4a22      	ldr	r2, [pc, #136]	; (8012f18 <GUIMONO_DispChar+0x14c>)
 8012e8e:	6813      	ldr	r3, [r2, #0]
 8012e90:	69da      	ldr	r2, [r3, #28]
 8012e92:	7e91      	ldrb	r1, [r2, #26]
 8012e94:	9100      	str	r1, [sp, #0]
 8012e96:	7ed2      	ldrb	r2, [r2, #27]
 8012e98:	9201      	str	r2, [sp, #4]
 8012e9a:	2101      	movs	r1, #1
 8012e9c:	9102      	str	r1, [sp, #8]
 8012e9e:	9907      	ldr	r1, [sp, #28]
 8012ea0:	7ca2      	ldrb	r2, [r4, #18]
 8012ea2:	9203      	str	r2, [sp, #12]
 8012ea4:	fb01 920b 	mla	r2, r1, fp, r9
 8012ea8:	9204      	str	r2, [sp, #16]
 8012eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012eac:	9305      	str	r3, [sp, #20]
 8012eae:	4638      	mov	r0, r7
 8012eb0:	4629      	mov	r1, r5
 8012eb2:	4632      	mov	r2, r6
 8012eb4:	4643      	mov	r3, r8
 8012eb6:	f7f8 fdf3 	bl	800baa0 <LCD_DrawBitmap>
 8012eba:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8012f18 <GUIMONO_DispChar+0x14c>
 8012ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8012ec2:	69db      	ldr	r3, [r3, #28]
 8012ec4:	7e5a      	ldrb	r2, [r3, #25]
 8012ec6:	7e1b      	ldrb	r3, [r3, #24]
 8012ec8:	429a      	cmp	r2, r3
 8012eca:	d917      	bls.n	8012efc <GUIMONO_DispChar+0x130>
 8012ecc:	9a08      	ldr	r2, [sp, #32]
 8012ece:	2a02      	cmp	r2, #2
 8012ed0:	d014      	beq.n	8012efc <GUIMONO_DispChar+0x130>
 8012ed2:	f08a 0004 	eor.w	r0, sl, #4
 8012ed6:	b200      	sxth	r0, r0
 8012ed8:	f7f8 fc54 	bl	800b784 <LCD_SetDrawMode>
 8012edc:	f8d8 3000 	ldr.w	r3, [r8]
 8012ee0:	69db      	ldr	r3, [r3, #28]
 8012ee2:	f893 e018 	ldrb.w	lr, [r3, #24]
 8012ee6:	7ed9      	ldrb	r1, [r3, #27]
 8012ee8:	7e9a      	ldrb	r2, [r3, #26]
 8012eea:	7e5b      	ldrb	r3, [r3, #25]
 8012eec:	4638      	mov	r0, r7
 8012eee:	fb0e 5101 	mla	r1, lr, r1, r5
 8012ef2:	fb06 7202 	mla	r2, r6, r2, r7
 8012ef6:	442b      	add	r3, r5
 8012ef8:	f7f8 fcc6 	bl	800b888 <LCD_FillRect>
 8012efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012efe:	b2d8      	uxtb	r0, r3
 8012f00:	f7f8 fc40 	bl	800b784 <LCD_SetDrawMode>
 8012f04:	4b04      	ldr	r3, [pc, #16]	; (8012f18 <GUIMONO_DispChar+0x14c>)
 8012f06:	7c61      	ldrb	r1, [r4, #17]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8012f0c:	440a      	add	r2, r1
 8012f0e:	845a      	strh	r2, [r3, #34]	; 0x22
 8012f10:	b00b      	add	sp, #44	; 0x2c
 8012f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f16:	bf00      	nop
 8012f18:	200002c4 	.word	0x200002c4

08012f1c <GUIMONO_GetCharDistX>:
 8012f1c:	4b04      	ldr	r3, [pc, #16]	; (8012f30 <GUIMONO_GetCharDistX+0x14>)
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	69db      	ldr	r3, [r3, #28]
 8012f22:	69db      	ldr	r3, [r3, #28]
 8012f24:	b109      	cbz	r1, 8012f2a <GUIMONO_GetCharDistX+0xe>
 8012f26:	7c1a      	ldrb	r2, [r3, #16]
 8012f28:	600a      	str	r2, [r1, #0]
 8012f2a:	7c58      	ldrb	r0, [r3, #17]
 8012f2c:	4770      	bx	lr
 8012f2e:	bf00      	nop
 8012f30:	200002c4 	.word	0x200002c4

08012f34 <GUIMONO_GetFontInfo>:
 8012f34:	2302      	movs	r3, #2
 8012f36:	800b      	strh	r3, [r1, #0]
 8012f38:	4770      	bx	lr

08012f3a <GUIMONO_IsInFont>:
 8012f3a:	69c3      	ldr	r3, [r0, #28]
 8012f3c:	899a      	ldrh	r2, [r3, #12]
 8012f3e:	428a      	cmp	r2, r1
 8012f40:	d802      	bhi.n	8012f48 <GUIMONO_IsInFont+0xe>
 8012f42:	89da      	ldrh	r2, [r3, #14]
 8012f44:	428a      	cmp	r2, r1
 8012f46:	d20f      	bcs.n	8012f68 <GUIMONO_IsInFont+0x2e>
 8012f48:	6898      	ldr	r0, [r3, #8]
 8012f4a:	b180      	cbz	r0, 8012f6e <GUIMONO_IsInFont+0x34>
 8012f4c:	8803      	ldrh	r3, [r0, #0]
 8012f4e:	4299      	cmp	r1, r3
 8012f50:	d30c      	bcc.n	8012f6c <GUIMONO_IsInFont+0x32>
 8012f52:	8842      	ldrh	r2, [r0, #2]
 8012f54:	428a      	cmp	r2, r1
 8012f56:	d309      	bcc.n	8012f6c <GUIMONO_IsInFont+0x32>
 8012f58:	1ac9      	subs	r1, r1, r3
 8012f5a:	6842      	ldr	r2, [r0, #4]
 8012f5c:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 8012f60:	43c0      	mvns	r0, r0
 8012f62:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8012f66:	4770      	bx	lr
 8012f68:	2001      	movs	r0, #1
 8012f6a:	4770      	bx	lr
 8012f6c:	2000      	movs	r0, #0
 8012f6e:	4770      	bx	lr

08012f70 <_GetIndexMask_0>:
 8012f70:	b508      	push	{r3, lr}
 8012f72:	f7f8 fb65 	bl	800b640 <LCD_GetNumColors>
 8012f76:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8012f7a:	d010      	beq.n	8012f9e <_GetIndexMask_0+0x2e>
 8012f7c:	287f      	cmp	r0, #127	; 0x7f
 8012f7e:	d810      	bhi.n	8012fa2 <_GetIndexMask_0+0x32>
 8012f80:	283f      	cmp	r0, #63	; 0x3f
 8012f82:	d810      	bhi.n	8012fa6 <_GetIndexMask_0+0x36>
 8012f84:	281f      	cmp	r0, #31
 8012f86:	d810      	bhi.n	8012faa <_GetIndexMask_0+0x3a>
 8012f88:	280f      	cmp	r0, #15
 8012f8a:	d810      	bhi.n	8012fae <_GetIndexMask_0+0x3e>
 8012f8c:	2807      	cmp	r0, #7
 8012f8e:	d810      	bhi.n	8012fb2 <_GetIndexMask_0+0x42>
 8012f90:	2803      	cmp	r0, #3
 8012f92:	d810      	bhi.n	8012fb6 <_GetIndexMask_0+0x46>
 8012f94:	2801      	cmp	r0, #1
 8012f96:	bf94      	ite	ls
 8012f98:	2000      	movls	r0, #0
 8012f9a:	2001      	movhi	r0, #1
 8012f9c:	e00c      	b.n	8012fb8 <_GetIndexMask_0+0x48>
 8012f9e:	2008      	movs	r0, #8
 8012fa0:	e00a      	b.n	8012fb8 <_GetIndexMask_0+0x48>
 8012fa2:	2007      	movs	r0, #7
 8012fa4:	e008      	b.n	8012fb8 <_GetIndexMask_0+0x48>
 8012fa6:	2006      	movs	r0, #6
 8012fa8:	e006      	b.n	8012fb8 <_GetIndexMask_0+0x48>
 8012faa:	2005      	movs	r0, #5
 8012fac:	e004      	b.n	8012fb8 <_GetIndexMask_0+0x48>
 8012fae:	2004      	movs	r0, #4
 8012fb0:	e002      	b.n	8012fb8 <_GetIndexMask_0+0x48>
 8012fb2:	2003      	movs	r0, #3
 8012fb4:	e000      	b.n	8012fb8 <_GetIndexMask_0+0x48>
 8012fb6:	2002      	movs	r0, #2
 8012fb8:	2301      	movs	r3, #1
 8012fba:	fa03 f000 	lsl.w	r0, r3, r0
 8012fbe:	3801      	subs	r0, #1
 8012fc0:	bd08      	pop	{r3, pc}

08012fc2 <_Index2Color_0>:
 8012fc2:	b538      	push	{r3, r4, r5, lr}
 8012fc4:	4604      	mov	r4, r0
 8012fc6:	f7f8 fb3b 	bl	800b640 <LCD_GetNumColors>
 8012fca:	4605      	mov	r5, r0
 8012fcc:	f7f8 fb56 	bl	800b67c <LCD_GetPalette>
 8012fd0:	42ac      	cmp	r4, r5
 8012fd2:	d203      	bcs.n	8012fdc <_Index2Color_0+0x1a>
 8012fd4:	b118      	cbz	r0, 8012fde <_Index2Color_0+0x1c>
 8012fd6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8012fda:	bd38      	pop	{r3, r4, r5, pc}
 8012fdc:	2000      	movs	r0, #0
 8012fde:	bd38      	pop	{r3, r4, r5, pc}

08012fe0 <_Color2Index_0>:
 8012fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fe4:	4681      	mov	r9, r0
 8012fe6:	f7f8 fb2b 	bl	800b640 <LCD_GetNumColors>
 8012fea:	4680      	mov	r8, r0
 8012fec:	f7f8 fb46 	bl	800b67c <LCD_GetPalette>
 8012ff0:	4606      	mov	r6, r0
 8012ff2:	b1d8      	cbz	r0, 801302c <_Color2Index_0+0x4c>
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8012ffa:	4591      	cmp	r9, r2
 8012ffc:	d01a      	beq.n	8013034 <_Color2Index_0+0x54>
 8012ffe:	3301      	adds	r3, #1
 8013000:	4543      	cmp	r3, r8
 8013002:	dbf8      	blt.n	8012ff6 <_Color2Index_0+0x16>
 8013004:	2500      	movs	r5, #0
 8013006:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 801300a:	462c      	mov	r4, r5
 801300c:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8013010:	4648      	mov	r0, r9
 8013012:	f000 f89d 	bl	8013150 <GUI_CalcColorDist>
 8013016:	42b8      	cmp	r0, r7
 8013018:	bf38      	it	cc
 801301a:	4625      	movcc	r5, r4
 801301c:	f104 0401 	add.w	r4, r4, #1
 8013020:	bf28      	it	cs
 8013022:	4638      	movcs	r0, r7
 8013024:	4544      	cmp	r4, r8
 8013026:	da02      	bge.n	801302e <_Color2Index_0+0x4e>
 8013028:	4607      	mov	r7, r0
 801302a:	e7ef      	b.n	801300c <_Color2Index_0+0x2c>
 801302c:	4605      	mov	r5, r0
 801302e:	4628      	mov	r0, r5
 8013030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013034:	4618      	mov	r0, r3
 8013036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801303a <WM__SendMessageIfEnabled>:
 801303a:	b538      	push	{r3, r4, r5, lr}
 801303c:	4604      	mov	r4, r0
 801303e:	460d      	mov	r5, r1
 8013040:	f7f3 ff12 	bl	8006e68 <WM__IsEnabled>
 8013044:	b128      	cbz	r0, 8013052 <WM__SendMessageIfEnabled+0x18>
 8013046:	4620      	mov	r0, r4
 8013048:	4629      	mov	r1, r5
 801304a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801304e:	f7f3 beed 	b.w	8006e2c <WM__SendMessage>
 8013052:	bd38      	pop	{r3, r4, r5, pc}

08013054 <WM__IsChild>:
 8013054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013056:	460d      	mov	r5, r1
 8013058:	4604      	mov	r4, r0
 801305a:	b160      	cbz	r0, 8013076 <WM__IsChild+0x22>
 801305c:	f7fb f98c 	bl	800e378 <GUI_ALLOC_LockH>
 8013060:	9001      	str	r0, [sp, #4]
 8013062:	b120      	cbz	r0, 801306e <WM__IsChild+0x1a>
 8013064:	6984      	ldr	r4, [r0, #24]
 8013066:	1b63      	subs	r3, r4, r5
 8013068:	425c      	negs	r4, r3
 801306a:	415c      	adcs	r4, r3
 801306c:	e000      	b.n	8013070 <WM__IsChild+0x1c>
 801306e:	4604      	mov	r4, r0
 8013070:	a801      	add	r0, sp, #4
 8013072:	f7fb f98f 	bl	800e394 <GUI_ALLOC_UnlockH>
 8013076:	4620      	mov	r0, r4
 8013078:	b003      	add	sp, #12
 801307a:	bd30      	pop	{r4, r5, pc}

0801307c <WM__ForEachDesc>:
 801307c:	b570      	push	{r4, r5, r6, lr}
 801307e:	460d      	mov	r5, r1
 8013080:	4616      	mov	r6, r2
 8013082:	f7fb f96f 	bl	800e364 <GUI_ALLOC_h2p>
 8013086:	69c4      	ldr	r4, [r0, #28]
 8013088:	b164      	cbz	r4, 80130a4 <WM__ForEachDesc+0x28>
 801308a:	4620      	mov	r0, r4
 801308c:	4631      	mov	r1, r6
 801308e:	47a8      	blx	r5
 8013090:	4620      	mov	r0, r4
 8013092:	4629      	mov	r1, r5
 8013094:	4632      	mov	r2, r6
 8013096:	f7ff fff1 	bl	801307c <WM__ForEachDesc>
 801309a:	4620      	mov	r0, r4
 801309c:	f7fb f962 	bl	800e364 <GUI_ALLOC_h2p>
 80130a0:	6a04      	ldr	r4, [r0, #32]
 80130a2:	e7f1      	b.n	8013088 <WM__ForEachDesc+0xc>
 80130a4:	bd70      	pop	{r4, r5, r6, pc}

080130a6 <LCD_GetPixelColor>:
 80130a6:	b508      	push	{r3, lr}
 80130a8:	f000 f804 	bl	80130b4 <LCD_GetPixelIndex>
 80130ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80130b0:	f7f8 be6a 	b.w	800bd88 <LCD_Index2Color>

080130b4 <LCD_GetPixelIndex>:
 80130b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130b6:	4f14      	ldr	r7, [pc, #80]	; (8013108 <LCD_GetPixelIndex+0x54>)
 80130b8:	4e14      	ldr	r6, [pc, #80]	; (801310c <LCD_GetPixelIndex+0x58>)
 80130ba:	683b      	ldr	r3, [r7, #0]
 80130bc:	7c5b      	ldrb	r3, [r3, #17]
 80130be:	4605      	mov	r5, r0
 80130c0:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80130c4:	68c3      	ldr	r3, [r0, #12]
 80130c6:	460c      	mov	r4, r1
 80130c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130ca:	4669      	mov	r1, sp
 80130cc:	4798      	blx	r3
 80130ce:	f9bd 3000 	ldrsh.w	r3, [sp]
 80130d2:	429d      	cmp	r5, r3
 80130d4:	db15      	blt.n	8013102 <LCD_GetPixelIndex+0x4e>
 80130d6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80130da:	429d      	cmp	r5, r3
 80130dc:	dc11      	bgt.n	8013102 <LCD_GetPixelIndex+0x4e>
 80130de:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80130e2:	429c      	cmp	r4, r3
 80130e4:	db0d      	blt.n	8013102 <LCD_GetPixelIndex+0x4e>
 80130e6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80130ea:	429c      	cmp	r4, r3
 80130ec:	dc09      	bgt.n	8013102 <LCD_GetPixelIndex+0x4e>
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	7c5b      	ldrb	r3, [r3, #17]
 80130f2:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80130f6:	68c3      	ldr	r3, [r0, #12]
 80130f8:	4629      	mov	r1, r5
 80130fa:	695b      	ldr	r3, [r3, #20]
 80130fc:	4622      	mov	r2, r4
 80130fe:	4798      	blx	r3
 8013100:	e000      	b.n	8013104 <LCD_GetPixelIndex+0x50>
 8013102:	2000      	movs	r0, #0
 8013104:	b003      	add	sp, #12
 8013106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013108:	200002c4 	.word	0x200002c4
 801310c:	20028844 	.word	0x20028844

08013110 <LCD_GetNumLayers>:
 8013110:	b510      	push	{r4, lr}
 8013112:	2000      	movs	r0, #0
 8013114:	f7fa fc0a 	bl	800d92c <GUI_DEVICE__GetpDriver>
 8013118:	1c04      	adds	r4, r0, #0
 801311a:	f04f 0001 	mov.w	r0, #1
 801311e:	bf18      	it	ne
 8013120:	2401      	movne	r4, #1
 8013122:	f7fa fc03 	bl	800d92c <GUI_DEVICE__GetpDriver>
 8013126:	b100      	cbz	r0, 801312a <LCD_GetNumLayers+0x1a>
 8013128:	3401      	adds	r4, #1
 801312a:	4620      	mov	r0, r4
 801312c:	bd10      	pop	{r4, pc}
	...

08013130 <LCD_GetBkColorIndex>:
 8013130:	4b02      	ldr	r3, [pc, #8]	; (801313c <LCD_GetBkColorIndex+0xc>)
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013136:	6818      	ldr	r0, [r3, #0]
 8013138:	4770      	bx	lr
 801313a:	bf00      	nop
 801313c:	200002c4 	.word	0x200002c4

08013140 <LCD_GetColorIndex>:
 8013140:	4b02      	ldr	r3, [pc, #8]	; (801314c <LCD_GetColorIndex+0xc>)
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013146:	6818      	ldr	r0, [r3, #0]
 8013148:	4770      	bx	lr
 801314a:	bf00      	nop
 801314c:	200002c4 	.word	0x200002c4

08013150 <GUI_CalcColorDist>:
 8013150:	b2cb      	uxtb	r3, r1
 8013152:	b2c2      	uxtb	r2, r0
 8013154:	1ad2      	subs	r2, r2, r3
 8013156:	b292      	uxth	r2, r2
 8013158:	b293      	uxth	r3, r2
 801315a:	b530      	push	{r4, r5, lr}
 801315c:	041c      	lsls	r4, r3, #16
 801315e:	bf48      	it	mi
 8013160:	4253      	negmi	r3, r2
 8013162:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8013166:	f3c0 2207 	ubfx	r2, r0, #8, #8
 801316a:	ebc5 0202 	rsb	r2, r5, r2
 801316e:	bf48      	it	mi
 8013170:	b29b      	uxthmi	r3, r3
 8013172:	b292      	uxth	r2, r2
 8013174:	0c09      	lsrs	r1, r1, #16
 8013176:	fb13 f403 	smulbb	r4, r3, r3
 801317a:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 801317e:	b293      	uxth	r3, r2
 8013180:	041d      	lsls	r5, r3, #16
 8013182:	b289      	uxth	r1, r1
 8013184:	b288      	uxth	r0, r1
 8013186:	bf44      	itt	mi
 8013188:	4253      	negmi	r3, r2
 801318a:	b29b      	uxthmi	r3, r3
 801318c:	0402      	lsls	r2, r0, #16
 801318e:	bf48      	it	mi
 8013190:	4248      	negmi	r0, r1
 8013192:	fb13 4303 	smlabb	r3, r3, r3, r4
 8013196:	bf48      	it	mi
 8013198:	b280      	uxthmi	r0, r0
 801319a:	fb00 3000 	mla	r0, r0, r0, r3
 801319e:	bd30      	pop	{r4, r5, pc}

080131a0 <__libc_init_array>:
 80131a0:	b570      	push	{r4, r5, r6, lr}
 80131a2:	4e0f      	ldr	r6, [pc, #60]	; (80131e0 <__libc_init_array+0x40>)
 80131a4:	4d0f      	ldr	r5, [pc, #60]	; (80131e4 <__libc_init_array+0x44>)
 80131a6:	1b76      	subs	r6, r6, r5
 80131a8:	10b6      	asrs	r6, r6, #2
 80131aa:	bf18      	it	ne
 80131ac:	2400      	movne	r4, #0
 80131ae:	d005      	beq.n	80131bc <__libc_init_array+0x1c>
 80131b0:	3401      	adds	r4, #1
 80131b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80131b6:	4798      	blx	r3
 80131b8:	42a6      	cmp	r6, r4
 80131ba:	d1f9      	bne.n	80131b0 <__libc_init_array+0x10>
 80131bc:	4e0a      	ldr	r6, [pc, #40]	; (80131e8 <__libc_init_array+0x48>)
 80131be:	4d0b      	ldr	r5, [pc, #44]	; (80131ec <__libc_init_array+0x4c>)
 80131c0:	1b76      	subs	r6, r6, r5
 80131c2:	f000 f9cd 	bl	8013560 <_init>
 80131c6:	10b6      	asrs	r6, r6, #2
 80131c8:	bf18      	it	ne
 80131ca:	2400      	movne	r4, #0
 80131cc:	d006      	beq.n	80131dc <__libc_init_array+0x3c>
 80131ce:	3401      	adds	r4, #1
 80131d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80131d4:	4798      	blx	r3
 80131d6:	42a6      	cmp	r6, r4
 80131d8:	d1f9      	bne.n	80131ce <__libc_init_array+0x2e>
 80131da:	bd70      	pop	{r4, r5, r6, pc}
 80131dc:	bd70      	pop	{r4, r5, r6, pc}
 80131de:	bf00      	nop
 80131e0:	08068c30 	.word	0x08068c30
 80131e4:	08068c30 	.word	0x08068c30
 80131e8:	08068c38 	.word	0x08068c38
 80131ec:	08068c30 	.word	0x08068c30

080131f0 <memcmp>:
 80131f0:	2a03      	cmp	r2, #3
 80131f2:	b470      	push	{r4, r5, r6}
 80131f4:	d926      	bls.n	8013244 <memcmp+0x54>
 80131f6:	ea40 0301 	orr.w	r3, r0, r1
 80131fa:	079b      	lsls	r3, r3, #30
 80131fc:	d011      	beq.n	8013222 <memcmp+0x32>
 80131fe:	7804      	ldrb	r4, [r0, #0]
 8013200:	780d      	ldrb	r5, [r1, #0]
 8013202:	42ac      	cmp	r4, r5
 8013204:	d122      	bne.n	801324c <memcmp+0x5c>
 8013206:	4402      	add	r2, r0
 8013208:	1c43      	adds	r3, r0, #1
 801320a:	e005      	b.n	8013218 <memcmp+0x28>
 801320c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8013210:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8013214:	42ac      	cmp	r4, r5
 8013216:	d119      	bne.n	801324c <memcmp+0x5c>
 8013218:	4293      	cmp	r3, r2
 801321a:	d1f7      	bne.n	801320c <memcmp+0x1c>
 801321c:	2000      	movs	r0, #0
 801321e:	bc70      	pop	{r4, r5, r6}
 8013220:	4770      	bx	lr
 8013222:	460c      	mov	r4, r1
 8013224:	4603      	mov	r3, r0
 8013226:	681e      	ldr	r6, [r3, #0]
 8013228:	6825      	ldr	r5, [r4, #0]
 801322a:	42ae      	cmp	r6, r5
 801322c:	4618      	mov	r0, r3
 801322e:	4621      	mov	r1, r4
 8013230:	f103 0304 	add.w	r3, r3, #4
 8013234:	f104 0404 	add.w	r4, r4, #4
 8013238:	d1e1      	bne.n	80131fe <memcmp+0xe>
 801323a:	3a04      	subs	r2, #4
 801323c:	2a03      	cmp	r2, #3
 801323e:	4618      	mov	r0, r3
 8013240:	4621      	mov	r1, r4
 8013242:	d8f0      	bhi.n	8013226 <memcmp+0x36>
 8013244:	2a00      	cmp	r2, #0
 8013246:	d1da      	bne.n	80131fe <memcmp+0xe>
 8013248:	4610      	mov	r0, r2
 801324a:	e7e8      	b.n	801321e <memcmp+0x2e>
 801324c:	1b60      	subs	r0, r4, r5
 801324e:	bc70      	pop	{r4, r5, r6}
 8013250:	4770      	bx	lr
 8013252:	bf00      	nop

08013254 <memmove>:
 8013254:	4288      	cmp	r0, r1
 8013256:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013258:	d90d      	bls.n	8013276 <memmove+0x22>
 801325a:	188b      	adds	r3, r1, r2
 801325c:	4298      	cmp	r0, r3
 801325e:	d20a      	bcs.n	8013276 <memmove+0x22>
 8013260:	1881      	adds	r1, r0, r2
 8013262:	2a00      	cmp	r2, #0
 8013264:	d051      	beq.n	801330a <memmove+0xb6>
 8013266:	1a9a      	subs	r2, r3, r2
 8013268:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801326c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013270:	4293      	cmp	r3, r2
 8013272:	d1f9      	bne.n	8013268 <memmove+0x14>
 8013274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013276:	2a0f      	cmp	r2, #15
 8013278:	d948      	bls.n	801330c <memmove+0xb8>
 801327a:	ea41 0300 	orr.w	r3, r1, r0
 801327e:	079b      	lsls	r3, r3, #30
 8013280:	d146      	bne.n	8013310 <memmove+0xbc>
 8013282:	f100 0410 	add.w	r4, r0, #16
 8013286:	f101 0310 	add.w	r3, r1, #16
 801328a:	4615      	mov	r5, r2
 801328c:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8013290:	f844 6c10 	str.w	r6, [r4, #-16]
 8013294:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8013298:	f844 6c0c 	str.w	r6, [r4, #-12]
 801329c:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80132a0:	f844 6c08 	str.w	r6, [r4, #-8]
 80132a4:	3d10      	subs	r5, #16
 80132a6:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80132aa:	f844 6c04 	str.w	r6, [r4, #-4]
 80132ae:	2d0f      	cmp	r5, #15
 80132b0:	f103 0310 	add.w	r3, r3, #16
 80132b4:	f104 0410 	add.w	r4, r4, #16
 80132b8:	d8e8      	bhi.n	801328c <memmove+0x38>
 80132ba:	f1a2 0310 	sub.w	r3, r2, #16
 80132be:	f023 030f 	bic.w	r3, r3, #15
 80132c2:	f002 0e0f 	and.w	lr, r2, #15
 80132c6:	3310      	adds	r3, #16
 80132c8:	f1be 0f03 	cmp.w	lr, #3
 80132cc:	4419      	add	r1, r3
 80132ce:	4403      	add	r3, r0
 80132d0:	d921      	bls.n	8013316 <memmove+0xc2>
 80132d2:	1f1e      	subs	r6, r3, #4
 80132d4:	460d      	mov	r5, r1
 80132d6:	4674      	mov	r4, lr
 80132d8:	3c04      	subs	r4, #4
 80132da:	f855 7b04 	ldr.w	r7, [r5], #4
 80132de:	f846 7f04 	str.w	r7, [r6, #4]!
 80132e2:	2c03      	cmp	r4, #3
 80132e4:	d8f8      	bhi.n	80132d8 <memmove+0x84>
 80132e6:	f1ae 0404 	sub.w	r4, lr, #4
 80132ea:	f024 0403 	bic.w	r4, r4, #3
 80132ee:	3404      	adds	r4, #4
 80132f0:	4423      	add	r3, r4
 80132f2:	4421      	add	r1, r4
 80132f4:	f002 0203 	and.w	r2, r2, #3
 80132f8:	b162      	cbz	r2, 8013314 <memmove+0xc0>
 80132fa:	3b01      	subs	r3, #1
 80132fc:	440a      	add	r2, r1
 80132fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013302:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013306:	428a      	cmp	r2, r1
 8013308:	d1f9      	bne.n	80132fe <memmove+0xaa>
 801330a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801330c:	4603      	mov	r3, r0
 801330e:	e7f3      	b.n	80132f8 <memmove+0xa4>
 8013310:	4603      	mov	r3, r0
 8013312:	e7f2      	b.n	80132fa <memmove+0xa6>
 8013314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013316:	4672      	mov	r2, lr
 8013318:	e7ee      	b.n	80132f8 <memmove+0xa4>
 801331a:	bf00      	nop

0801331c <memset>:
 801331c:	b470      	push	{r4, r5, r6}
 801331e:	0784      	lsls	r4, r0, #30
 8013320:	d046      	beq.n	80133b0 <memset+0x94>
 8013322:	1e54      	subs	r4, r2, #1
 8013324:	2a00      	cmp	r2, #0
 8013326:	d041      	beq.n	80133ac <memset+0x90>
 8013328:	b2cd      	uxtb	r5, r1
 801332a:	4603      	mov	r3, r0
 801332c:	e002      	b.n	8013334 <memset+0x18>
 801332e:	1e62      	subs	r2, r4, #1
 8013330:	b3e4      	cbz	r4, 80133ac <memset+0x90>
 8013332:	4614      	mov	r4, r2
 8013334:	f803 5b01 	strb.w	r5, [r3], #1
 8013338:	079a      	lsls	r2, r3, #30
 801333a:	d1f8      	bne.n	801332e <memset+0x12>
 801333c:	2c03      	cmp	r4, #3
 801333e:	d92e      	bls.n	801339e <memset+0x82>
 8013340:	b2cd      	uxtb	r5, r1
 8013342:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8013346:	2c0f      	cmp	r4, #15
 8013348:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 801334c:	d919      	bls.n	8013382 <memset+0x66>
 801334e:	f103 0210 	add.w	r2, r3, #16
 8013352:	4626      	mov	r6, r4
 8013354:	3e10      	subs	r6, #16
 8013356:	2e0f      	cmp	r6, #15
 8013358:	f842 5c10 	str.w	r5, [r2, #-16]
 801335c:	f842 5c0c 	str.w	r5, [r2, #-12]
 8013360:	f842 5c08 	str.w	r5, [r2, #-8]
 8013364:	f842 5c04 	str.w	r5, [r2, #-4]
 8013368:	f102 0210 	add.w	r2, r2, #16
 801336c:	d8f2      	bhi.n	8013354 <memset+0x38>
 801336e:	f1a4 0210 	sub.w	r2, r4, #16
 8013372:	f022 020f 	bic.w	r2, r2, #15
 8013376:	f004 040f 	and.w	r4, r4, #15
 801337a:	3210      	adds	r2, #16
 801337c:	2c03      	cmp	r4, #3
 801337e:	4413      	add	r3, r2
 8013380:	d90d      	bls.n	801339e <memset+0x82>
 8013382:	461e      	mov	r6, r3
 8013384:	4622      	mov	r2, r4
 8013386:	3a04      	subs	r2, #4
 8013388:	2a03      	cmp	r2, #3
 801338a:	f846 5b04 	str.w	r5, [r6], #4
 801338e:	d8fa      	bhi.n	8013386 <memset+0x6a>
 8013390:	1f22      	subs	r2, r4, #4
 8013392:	f022 0203 	bic.w	r2, r2, #3
 8013396:	3204      	adds	r2, #4
 8013398:	4413      	add	r3, r2
 801339a:	f004 0403 	and.w	r4, r4, #3
 801339e:	b12c      	cbz	r4, 80133ac <memset+0x90>
 80133a0:	b2c9      	uxtb	r1, r1
 80133a2:	441c      	add	r4, r3
 80133a4:	f803 1b01 	strb.w	r1, [r3], #1
 80133a8:	42a3      	cmp	r3, r4
 80133aa:	d1fb      	bne.n	80133a4 <memset+0x88>
 80133ac:	bc70      	pop	{r4, r5, r6}
 80133ae:	4770      	bx	lr
 80133b0:	4614      	mov	r4, r2
 80133b2:	4603      	mov	r3, r0
 80133b4:	e7c2      	b.n	801333c <memset+0x20>
 80133b6:	bf00      	nop

080133b8 <strcpy>:
 80133b8:	ea80 0201 	eor.w	r2, r0, r1
 80133bc:	4684      	mov	ip, r0
 80133be:	f012 0f03 	tst.w	r2, #3
 80133c2:	d14f      	bne.n	8013464 <strcpy+0xac>
 80133c4:	f011 0f03 	tst.w	r1, #3
 80133c8:	d132      	bne.n	8013430 <strcpy+0x78>
 80133ca:	f84d 4d04 	str.w	r4, [sp, #-4]!
 80133ce:	f011 0f04 	tst.w	r1, #4
 80133d2:	f851 3b04 	ldr.w	r3, [r1], #4
 80133d6:	d00b      	beq.n	80133f0 <strcpy+0x38>
 80133d8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80133dc:	439a      	bics	r2, r3
 80133de:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80133e2:	bf04      	itt	eq
 80133e4:	f84c 3b04 	streq.w	r3, [ip], #4
 80133e8:	f851 3b04 	ldreq.w	r3, [r1], #4
 80133ec:	d116      	bne.n	801341c <strcpy+0x64>
 80133ee:	bf00      	nop
 80133f0:	f851 4b04 	ldr.w	r4, [r1], #4
 80133f4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80133f8:	439a      	bics	r2, r3
 80133fa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80133fe:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8013402:	d10b      	bne.n	801341c <strcpy+0x64>
 8013404:	f84c 3b04 	str.w	r3, [ip], #4
 8013408:	43a2      	bics	r2, r4
 801340a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 801340e:	bf04      	itt	eq
 8013410:	f851 3b04 	ldreq.w	r3, [r1], #4
 8013414:	f84c 4b04 	streq.w	r4, [ip], #4
 8013418:	d0ea      	beq.n	80133f0 <strcpy+0x38>
 801341a:	4623      	mov	r3, r4
 801341c:	f80c 3b01 	strb.w	r3, [ip], #1
 8013420:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013424:	ea4f 2333 	mov.w	r3, r3, ror #8
 8013428:	d1f8      	bne.n	801341c <strcpy+0x64>
 801342a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801342e:	4770      	bx	lr
 8013430:	f011 0f01 	tst.w	r1, #1
 8013434:	d006      	beq.n	8013444 <strcpy+0x8c>
 8013436:	f811 2b01 	ldrb.w	r2, [r1], #1
 801343a:	f80c 2b01 	strb.w	r2, [ip], #1
 801343e:	2a00      	cmp	r2, #0
 8013440:	bf08      	it	eq
 8013442:	4770      	bxeq	lr
 8013444:	f011 0f02 	tst.w	r1, #2
 8013448:	d0bf      	beq.n	80133ca <strcpy+0x12>
 801344a:	f831 2b02 	ldrh.w	r2, [r1], #2
 801344e:	f012 0fff 	tst.w	r2, #255	; 0xff
 8013452:	bf16      	itet	ne
 8013454:	f82c 2b02 	strhne.w	r2, [ip], #2
 8013458:	f88c 2000 	strbeq.w	r2, [ip]
 801345c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8013460:	d1b3      	bne.n	80133ca <strcpy+0x12>
 8013462:	4770      	bx	lr
 8013464:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013468:	f80c 2b01 	strb.w	r2, [ip], #1
 801346c:	2a00      	cmp	r2, #0
 801346e:	d1f9      	bne.n	8013464 <strcpy+0xac>
 8013470:	4770      	bx	lr
 8013472:	bf00      	nop

08013474 <register_fini>:
 8013474:	4b02      	ldr	r3, [pc, #8]	; (8013480 <register_fini+0xc>)
 8013476:	b113      	cbz	r3, 801347e <register_fini+0xa>
 8013478:	4802      	ldr	r0, [pc, #8]	; (8013484 <register_fini+0x10>)
 801347a:	f000 b805 	b.w	8013488 <atexit>
 801347e:	4770      	bx	lr
 8013480:	00000000 	.word	0x00000000
 8013484:	08013495 	.word	0x08013495

08013488 <atexit>:
 8013488:	2300      	movs	r3, #0
 801348a:	4601      	mov	r1, r0
 801348c:	461a      	mov	r2, r3
 801348e:	4618      	mov	r0, r3
 8013490:	f000 b814 	b.w	80134bc <__register_exitproc>

08013494 <__libc_fini_array>:
 8013494:	b538      	push	{r3, r4, r5, lr}
 8013496:	4d07      	ldr	r5, [pc, #28]	; (80134b4 <__libc_fini_array+0x20>)
 8013498:	4c07      	ldr	r4, [pc, #28]	; (80134b8 <__libc_fini_array+0x24>)
 801349a:	1b2c      	subs	r4, r5, r4
 801349c:	10a4      	asrs	r4, r4, #2
 801349e:	d005      	beq.n	80134ac <__libc_fini_array+0x18>
 80134a0:	3c01      	subs	r4, #1
 80134a2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80134a6:	4798      	blx	r3
 80134a8:	2c00      	cmp	r4, #0
 80134aa:	d1f9      	bne.n	80134a0 <__libc_fini_array+0xc>
 80134ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134b0:	f000 b85c 	b.w	801356c <_fini>
 80134b4:	08068c3c 	.word	0x08068c3c
 80134b8:	08068c38 	.word	0x08068c38

080134bc <__register_exitproc>:
 80134bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134c0:	4c25      	ldr	r4, [pc, #148]	; (8013558 <__register_exitproc+0x9c>)
 80134c2:	6825      	ldr	r5, [r4, #0]
 80134c4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80134c8:	4606      	mov	r6, r0
 80134ca:	4688      	mov	r8, r1
 80134cc:	4692      	mov	sl, r2
 80134ce:	4699      	mov	r9, r3
 80134d0:	b3c4      	cbz	r4, 8013544 <__register_exitproc+0x88>
 80134d2:	6860      	ldr	r0, [r4, #4]
 80134d4:	281f      	cmp	r0, #31
 80134d6:	dc17      	bgt.n	8013508 <__register_exitproc+0x4c>
 80134d8:	1c43      	adds	r3, r0, #1
 80134da:	b176      	cbz	r6, 80134fa <__register_exitproc+0x3e>
 80134dc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80134e0:	2201      	movs	r2, #1
 80134e2:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 80134e6:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 80134ea:	4082      	lsls	r2, r0
 80134ec:	4311      	orrs	r1, r2
 80134ee:	2e02      	cmp	r6, #2
 80134f0:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 80134f4:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 80134f8:	d01e      	beq.n	8013538 <__register_exitproc+0x7c>
 80134fa:	3002      	adds	r0, #2
 80134fc:	6063      	str	r3, [r4, #4]
 80134fe:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8013502:	2000      	movs	r0, #0
 8013504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013508:	4b14      	ldr	r3, [pc, #80]	; (801355c <__register_exitproc+0xa0>)
 801350a:	b303      	cbz	r3, 801354e <__register_exitproc+0x92>
 801350c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8013510:	f3af 8000 	nop.w
 8013514:	4604      	mov	r4, r0
 8013516:	b1d0      	cbz	r0, 801354e <__register_exitproc+0x92>
 8013518:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 801351c:	2700      	movs	r7, #0
 801351e:	e880 0088 	stmia.w	r0, {r3, r7}
 8013522:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8013526:	4638      	mov	r0, r7
 8013528:	2301      	movs	r3, #1
 801352a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 801352e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8013532:	2e00      	cmp	r6, #0
 8013534:	d0e1      	beq.n	80134fa <__register_exitproc+0x3e>
 8013536:	e7d1      	b.n	80134dc <__register_exitproc+0x20>
 8013538:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 801353c:	430a      	orrs	r2, r1
 801353e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8013542:	e7da      	b.n	80134fa <__register_exitproc+0x3e>
 8013544:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8013548:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 801354c:	e7c1      	b.n	80134d2 <__register_exitproc+0x16>
 801354e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013556:	bf00      	nop
 8013558:	08068c2c 	.word	0x08068c2c
 801355c:	00000000 	.word	0x00000000

08013560 <_init>:
 8013560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013562:	bf00      	nop
 8013564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013566:	bc08      	pop	{r3}
 8013568:	469e      	mov	lr, r3
 801356a:	4770      	bx	lr

0801356c <_fini>:
 801356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801356e:	bf00      	nop
 8013570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013572:	bc08      	pop	{r3}
 8013574:	469e      	mov	lr, r3
 8013576:	4770      	bx	lr
